// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/aws/aws-sdk-go/service/ecs

package ecs

import "time"

_#opCreateCapacityProvider: "CreateCapacityProvider"

_#opCreateCluster: "CreateCluster"

_#opCreateService: "CreateService"

_#opCreateTaskSet: "CreateTaskSet"

_#opDeleteAccountSetting: "DeleteAccountSetting"

_#opDeleteAttributes: "DeleteAttributes"

_#opDeleteCapacityProvider: "DeleteCapacityProvider"

_#opDeleteCluster: "DeleteCluster"

_#opDeleteService: "DeleteService"

_#opDeleteTaskSet: "DeleteTaskSet"

_#opDeregisterContainerInstance: "DeregisterContainerInstance"

_#opDeregisterTaskDefinition: "DeregisterTaskDefinition"

_#opDescribeCapacityProviders: "DescribeCapacityProviders"

_#opDescribeClusters: "DescribeClusters"

_#opDescribeContainerInstances: "DescribeContainerInstances"

_#opDescribeServices: "DescribeServices"

_#opDescribeTaskDefinition: "DescribeTaskDefinition"

_#opDescribeTaskSets: "DescribeTaskSets"

_#opDescribeTasks: "DescribeTasks"

_#opDiscoverPollEndpoint: "DiscoverPollEndpoint"

_#opExecuteCommand: "ExecuteCommand"

_#opListAccountSettings: "ListAccountSettings"

_#opListAttributes: "ListAttributes"

_#opListClusters: "ListClusters"

_#opListContainerInstances: "ListContainerInstances"

_#opListServices: "ListServices"

_#opListTagsForResource: "ListTagsForResource"

_#opListTaskDefinitionFamilies: "ListTaskDefinitionFamilies"

_#opListTaskDefinitions: "ListTaskDefinitions"

_#opListTasks: "ListTasks"

_#opPutAccountSetting: "PutAccountSetting"

_#opPutAccountSettingDefault: "PutAccountSettingDefault"

_#opPutAttributes: "PutAttributes"

_#opPutClusterCapacityProviders: "PutClusterCapacityProviders"

_#opRegisterContainerInstance: "RegisterContainerInstance"

_#opRegisterTaskDefinition: "RegisterTaskDefinition"

_#opRunTask: "RunTask"

_#opStartTask: "StartTask"

_#opStopTask: "StopTask"

_#opSubmitAttachmentStateChanges: "SubmitAttachmentStateChanges"

_#opSubmitContainerStateChange: "SubmitContainerStateChange"

_#opSubmitTaskStateChange: "SubmitTaskStateChange"

_#opTagResource: "TagResource"

_#opUntagResource: "UntagResource"

_#opUpdateCapacityProvider: "UpdateCapacityProvider"

_#opUpdateCluster: "UpdateCluster"

_#opUpdateClusterSettings: "UpdateClusterSettings"

_#opUpdateContainerAgent: "UpdateContainerAgent"

_#opUpdateContainerInstancesState: "UpdateContainerInstancesState"

_#opUpdateService: "UpdateService"

_#opUpdateServicePrimaryTaskSet: "UpdateServicePrimaryTaskSet"

_#opUpdateTaskSet: "UpdateTaskSet"

// You do not have authorization to perform the requested action.
#AccessDeniedException: {
	Message_?: null | string @go(,*string)
}

// An object representing a container instance or task attachment.
#Attachment: {
	// Details of the attachment. For elastic network interfaces, this includes
	// the network interface ID, the MAC address, the subnet ID, and the private
	// IPv4 address.
	Details: [...null | #KeyValuePair] @go(,[]*KeyValuePair)

	// The unique identifier for the attachment.
	Id?: null | string @go(,*string)

	// The status of the attachment. Valid values are PRECREATED, CREATED, ATTACHING,
	// ATTACHED, DETACHING, DETACHED, and DELETED.
	Status?: null | string @go(,*string)

	// The type of the attachment, such as ElasticNetworkInterface.
	Type?: null | string @go(,*string)
}

// An object representing a change in state for a task attachment.
#AttachmentStateChange: {
	// The Amazon Resource Name (ARN) of the attachment.
	//
	// AttachmentArn is a required field
	AttachmentArn?: null | string @go(,*string)

	// The status of the attachment.
	//
	// Status is a required field
	Status?: null | string @go(,*string)
}

// An attribute is a name-value pair associated with an Amazon ECS object. Attributes
// enable you to extend the Amazon ECS data model by adding custom metadata
// to your resources. For more information, see Attributes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes)
// in the Amazon Elastic Container Service Developer Guide.
#Attribute: {
	// The name of the attribute. The name must contain between 1 and 128 characters
	// and name may contain letters (uppercase and lowercase), numbers, hyphens,
	// underscores, forward slashes, back slashes, or periods.
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// The ID of the target. You can specify the short form ID for a resource or
	// the full Amazon Resource Name (ARN).
	TargetId?: null | string @go(,*string)

	// The type of the target with which to attach the attribute. This parameter
	// is required if you use the short form ID for a resource instead of the full
	// ARN.
	TargetType?: null | string @go(,*string)

	// The value of the attribute. The value must contain between 1 and 128 characters
	// and may contain letters (uppercase and lowercase), numbers, hyphens, underscores,
	// periods, at signs (@), forward slashes, back slashes, colons, or spaces.
	// The value cannot contain any leading or trailing whitespace.
	Value?: null | string @go(,*string)
}

// You can apply up to 10 custom attributes per resource. You can view the attributes
// of a resource with ListAttributes. You can remove existing attributes on
// a resource with DeleteAttributes.
#AttributeLimitExceededException: {
	Message_?: null | string @go(,*string)
}

// The details of the Auto Scaling group for the capacity provider.
#AutoScalingGroupProvider: {
	// The Amazon Resource Name (ARN) that identifies the Auto Scaling group.
	//
	// AutoScalingGroupArn is a required field
	AutoScalingGroupArn?: null | string @go(,*string)

	// The managed scaling settings for the Auto Scaling group capacity provider.
	ManagedScaling?: null | #ManagedScaling @go(,*ManagedScaling)

	// The managed termination protection setting to use for the Auto Scaling group
	// capacity provider. This determines whether the Auto Scaling group has managed
	// termination protection.
	//
	// When using managed termination protection, managed scaling must also be used
	// otherwise managed termination protection will not work.
	//
	// When managed termination protection is enabled, Amazon ECS prevents the Amazon
	// EC2 instances in an Auto Scaling group that contain tasks from being terminated
	// during a scale-in action. The Auto Scaling group and each instance in the
	// Auto Scaling group must have instance protection from scale-in actions enabled
	// as well. For more information, see Instance Protection (https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection)
	// in the Auto Scaling User Guide.
	//
	// When managed termination protection is disabled, your Amazon EC2 instances
	// are not protected from termination when the Auto Scaling group scales in.
	ManagedTerminationProtection?: null | string @go(,*string)
}

// The details of the Auto Scaling group capacity provider to update.
#AutoScalingGroupProviderUpdate: {
	// The managed scaling settings for the Auto Scaling group capacity provider.
	ManagedScaling?: null | #ManagedScaling @go(,*ManagedScaling)

	// The managed termination protection setting to use for the Auto Scaling group
	// capacity provider. This determines whether the Auto Scaling group has managed
	// termination protection.
	//
	// When using managed termination protection, managed scaling must also be used
	// otherwise managed termination protection will not work.
	//
	// When managed termination protection is enabled, Amazon ECS prevents the Amazon
	// EC2 instances in an Auto Scaling group that contain tasks from being terminated
	// during a scale-in action. The Auto Scaling group and each instance in the
	// Auto Scaling group must have instance protection from scale-in actions enabled
	// as well. For more information, see Instance Protection (https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection)
	// in the Auto Scaling User Guide.
	//
	// When managed termination protection is disabled, your Amazon EC2 instances
	// are not protected from termination when the Auto Scaling group scales in.
	ManagedTerminationProtection?: null | string @go(,*string)
}

// An object representing the networking details for a task or service.
#AwsVpcConfiguration: {
	// Whether the task's elastic network interface receives a public IP address.
	// The default value is DISABLED.
	AssignPublicIp?: null | string @go(,*string)

	// The IDs of the security groups associated with the task or service. If you
	// do not specify a security group, the default security group for the VPC is
	// used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
	//
	// All specified security groups must be from the same VPC.
	SecurityGroups: [...null | string] @go(,[]*string)

	// The IDs of the subnets associated with the task or service. There is a limit
	// of 16 subnets that can be specified per AwsVpcConfiguration.
	//
	// All specified subnets must be from the same VPC.
	//
	// Subnets is a required field
	Subnets: [...null | string] @go(,[]*string)
}

// Your Amazon Web Services account has been blocked. For more information,
// contact Amazon Web Services Support (http://aws.amazon.com/contact-us/).
#BlockedException: {
	Message_?: null | string @go(,*string)
}

// The details of a capacity provider.
#CapacityProvider: {
	// The Auto Scaling group settings for the capacity provider.
	AutoScalingGroupProvider?: null | #AutoScalingGroupProvider @go(,*AutoScalingGroupProvider)

	// The Amazon Resource Name (ARN) that identifies the capacity provider.
	CapacityProviderArn?: null | string @go(,*string)

	// The name of the capacity provider.
	Name?: null | string @go(,*string)

	// The current status of the capacity provider. Only capacity providers in an
	// ACTIVE state can be used in a cluster. When a capacity provider is successfully
	// deleted, it will have an INACTIVE status.
	Status?: null | string @go(,*string)

	// The metadata that you apply to the capacity provider to help you categorize
	// and organize it. Each tag consists of a key and an optional value, both of
	// which you define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The update status of the capacity provider. The following are the possible
	// states that will be returned.
	//
	// DELETE_IN_PROGRESS
	//
	// The capacity provider is in the process of being deleted.
	//
	// DELETE_COMPLETE
	//
	// The capacity provider has been successfully deleted and will have an INACTIVE
	// status.
	//
	// DELETE_FAILED
	//
	// The capacity provider was unable to be deleted. The update status reason
	// will provide further details about why the delete failed.
	UpdateStatus?: null | string @go(,*string)

	// The update status reason. This provides further details about the update
	// status for the capacity provider.
	UpdateStatusReason?: null | string @go(,*string)
}

// The details of a capacity provider strategy. A capacity provider strategy
// can be set when using the RunTask or CreateCluster APIs or as the default
// capacity provider strategy for a cluster with the CreateCluster API.
//
// Only capacity providers that are already associated with a cluster and have
// an ACTIVE or UPDATING status can be used in a capacity provider strategy.
// The PutClusterCapacityProviders API is used to associate a capacity provider
// with a cluster.
//
// If specifying a capacity provider that uses an Auto Scaling group, the capacity
// provider must already be created. New Auto Scaling group capacity providers
// can be created with the CreateCapacityProvider API operation.
//
// To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
// capacity providers. The Fargate capacity providers are available to all accounts
// and only need to be associated with a cluster to be used in a capacity provider
// strategy.
//
// A capacity provider strategy may contain a maximum of 6 capacity providers.
#CapacityProviderStrategyItem: {
	// The base value designates how many tasks, at a minimum, to run on the specified
	// capacity provider. Only one capacity provider in a capacity provider strategy
	// can have a base defined. If no value is specified, the default value of 0
	// is used.
	Base?: null | int64 @go(,*int64)

	// The short name of the capacity provider.
	//
	// CapacityProvider is a required field
	CapacityProvider?: null | string @go(,*string)

	// The weight value designates the relative percentage of the total number of
	// tasks launched that should use the specified capacity provider. The weight
	// value is taken into consideration after the base value, if defined, is satisfied.
	//
	// If no weight value is specified, the default value of 0 is used. When multiple
	// capacity providers are specified within a capacity provider strategy, at
	// least one of the capacity providers must have a weight value greater than
	// zero and any capacity providers with a weight of 0 will not be used to place
	// tasks. If you specify multiple capacity providers in a strategy that all
	// have a weight of 0, any RunTask or CreateService actions using the capacity
	// provider strategy will fail.
	//
	// An example scenario for using weights is defining a strategy that contains
	// two capacity providers and both have a weight of 1, then when the base is
	// satisfied, the tasks will be split evenly across the two capacity providers.
	// Using that same logic, if you specify a weight of 1 for capacityProviderA
	// and a weight of 4 for capacityProviderB, then for every one task that is
	// run using capacityProviderA, four tasks would use capacityProviderB.
	Weight?: null | int64 @go(,*int64)
}

// These errors are usually caused by a client action, such as using an action
// or resource on behalf of a user that doesn't have permissions to use the
// action or resource, or specifying an identifier that is not valid.
#ClientException: {
	Message_?: null | string @go(,*string)
}

// A regional grouping of one or more container instances on which you can run
// task requests. Each account receives a default cluster the first time you
// use the Amazon ECS service, but you may also create other clusters. Clusters
// may contain more than one instance type simultaneously.
#Cluster: {
	// The number of services that are running on the cluster in an ACTIVE state.
	// You can view these services with ListServices.
	ActiveServicesCount?: null | int64 @go(,*int64)

	// The resources attached to a cluster. When using a capacity provider with
	// a cluster, the Auto Scaling plan that is created will be returned as a cluster
	// attachment.
	Attachments: [...null | #Attachment] @go(,[]*Attachment)

	// The status of the capacity providers associated with the cluster. The following
	// are the states that will be returned:
	//
	// UPDATE_IN_PROGRESS
	//
	// The available capacity providers for the cluster are updating. This occurs
	// when the Auto Scaling plan is provisioning or deprovisioning.
	//
	// UPDATE_COMPLETE
	//
	// The capacity providers have successfully updated.
	//
	// UPDATE_FAILED
	//
	// The capacity provider updates failed.
	AttachmentsStatus?: null | string @go(,*string)

	// The capacity providers associated with the cluster.
	CapacityProviders: [...null | string] @go(,[]*string)

	// The Amazon Resource Name (ARN) that identifies the cluster. The ARN contains
	// the arn:aws:ecs namespace, followed by the Region of the cluster, the Amazon
	// Web Services account ID of the cluster owner, the cluster namespace, and
	// then the cluster name. For example, arn:aws:ecs:region:012345678910:cluster/test.
	ClusterArn?: null | string @go(,*string)

	// A user-generated string that you use to identify your cluster.
	ClusterName?: null | string @go(,*string)

	// The execute command configuration for the cluster.
	Configuration?: null | #ClusterConfiguration @go(,*ClusterConfiguration)

	// The default capacity provider strategy for the cluster. When services or
	// tasks are run in the cluster with no launch type or capacity provider strategy
	// specified, the default capacity provider strategy is used.
	DefaultCapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)

	// The number of tasks in the cluster that are in the PENDING state.
	PendingTasksCount?: null | int64 @go(,*int64)

	// The number of container instances registered into the cluster. This includes
	// container instances in both ACTIVE and DRAINING status.
	RegisteredContainerInstancesCount?: null | int64 @go(,*int64)

	// The number of tasks in the cluster that are in the RUNNING state.
	RunningTasksCount?: null | int64 @go(,*int64)

	// The settings for the cluster. This parameter indicates whether CloudWatch
	// Container Insights is enabled or disabled for a cluster.
	Settings: [...null | #ClusterSetting] @go(,[]*ClusterSetting)

	// Additional information about your clusters that are separated by launch type,
	// including:
	//
	//    * runningEC2TasksCount
	//
	//    * RunningFargateTasksCount
	//
	//    * pendingEC2TasksCount
	//
	//    * pendingFargateTasksCount
	//
	//    * activeEC2ServiceCount
	//
	//    * activeFargateServiceCount
	//
	//    * drainingEC2ServiceCount
	//
	//    * drainingFargateServiceCount
	Statistics: [...null | #KeyValuePair] @go(,[]*KeyValuePair)

	// The status of the cluster. The following are the possible states that will
	// be returned.
	//
	// ACTIVE
	//
	// The cluster is ready to accept tasks and if applicable you can register container
	// instances with the cluster.
	//
	// PROVISIONING
	//
	// The cluster has capacity providers associated with it and the resources needed
	// for the capacity provider are being created.
	//
	// DEPROVISIONING
	//
	// The cluster has capacity providers associated with it and the resources needed
	// for the capacity provider are being deleted.
	//
	// FAILED
	//
	// The cluster has capacity providers associated with it and the resources needed
	// for the capacity provider have failed to create.
	//
	// INACTIVE
	//
	// The cluster has been deleted. Clusters with an INACTIVE status may remain
	// discoverable in your account for a period of time. However, this behavior
	// is subject to change in the future, so you should not rely on INACTIVE clusters
	// persisting.
	Status?: null | string @go(,*string)

	// The metadata that you apply to the cluster to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// The execute command configuration for the cluster.
#ClusterConfiguration: {
	// The details of the execute command configuration.
	ExecuteCommandConfiguration?: null | #ExecuteCommandConfiguration @go(,*ExecuteCommandConfiguration)
}

// You cannot delete a cluster that has registered container instances. First,
// deregister the container instances before you can delete the cluster. For
// more information, see DeregisterContainerInstance.
#ClusterContainsContainerInstancesException: {
	Message_?: null | string @go(,*string)
}

// You cannot delete a cluster that contains services. First, update the service
// to reduce its desired task count to 0 and then delete the service. For more
// information, see UpdateService and DeleteService.
#ClusterContainsServicesException: {
	Message_?: null | string @go(,*string)
}

// You cannot delete a cluster that has active tasks.
#ClusterContainsTasksException: {
	Message_?: null | string @go(,*string)
}

// The specified cluster could not be found. You can view your available clusters
// with ListClusters. Amazon ECS clusters are Region-specific.
#ClusterNotFoundException: {
	Message_?: null | string @go(,*string)
}

// The settings to use when creating a cluster. This parameter is used to enable
// CloudWatch Container Insights for a cluster.
#ClusterSetting: {
	// The name of the cluster setting. The only supported value is containerInsights.
	Name?: null | string @go(,*string)

	// The value to set for the cluster setting. The supported values are enabled
	// and disabled. If enabled is specified, CloudWatch Container Insights will
	// be enabled for the cluster, otherwise it will be disabled unless the containerInsights
	// account setting is enabled. If a cluster value is specified, it will override
	// the containerInsights value set with PutAccountSetting or PutAccountSettingDefault.
	Value?: null | string @go(,*string)
}

// A Docker container that is part of a task.
#Container: {
	// The Amazon Resource Name (ARN) of the container.
	ContainerArn?: null | string @go(,*string)

	// The number of CPU units set for the container. The value will be 0 if no
	// value was specified in the container definition when the task definition
	// was registered.
	Cpu?: null | string @go(,*string)

	// The exit code returned from the container.
	ExitCode?: null | int64 @go(,*int64)

	// The IDs of each GPU assigned to the container.
	GpuIds: [...null | string] @go(,[]*string)

	// The health status of the container. If health checks are not configured for
	// this container in its task definition, then it reports the health status
	// as UNKNOWN.
	HealthStatus?: null | string @go(,*string)

	// The image used for the container.
	Image?: null | string @go(,*string)

	// The container image manifest digest.
	//
	// The imageDigest is only returned if the container is using an image hosted
	// in Amazon ECR, otherwise it is omitted.
	ImageDigest?: null | string @go(,*string)

	// The last known status of the container.
	LastStatus?: null | string @go(,*string)

	// The details of any Amazon ECS managed agents associated with the container.
	ManagedAgents: [...null | #ManagedAgent] @go(,[]*ManagedAgent)

	// The hard limit (in MiB) of memory set for the container.
	Memory?: null | string @go(,*string)

	// The soft limit (in MiB) of memory set for the container.
	MemoryReservation?: null | string @go(,*string)

	// The name of the container.
	Name?: null | string @go(,*string)

	// The network bindings associated with the container.
	NetworkBindings: [...null | #NetworkBinding] @go(,[]*NetworkBinding)

	// The network interfaces associated with the container.
	NetworkInterfaces: [...null | #NetworkInterface] @go(,[]*NetworkInterface)

	// A short (255 max characters) human-readable string to provide additional
	// details about a running or stopped container.
	Reason?: null | string @go(,*string)

	// The ID of the Docker container.
	RuntimeId?: null | string @go(,*string)

	// The ARN of the task.
	TaskArn?: null | string @go(,*string)
}

// Container definitions are used in task definitions to describe the different
// containers that are launched as part of a task.
#ContainerDefinition: {
	// The command that is passed to the container. This parameter maps to Cmd in
	// the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the COMMAND parameter to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	// For more information, see https://docs.docker.com/engine/reference/builder/#cmd
	// (https://docs.docker.com/engine/reference/builder/#cmd). If there are multiple
	// arguments, each argument should be a separated string in the array.
	Command: [...null | string] @go(,[]*string)

	// The number of cpu units reserved for the container. This parameter maps to
	// CpuShares in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --cpu-shares option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// This field is optional for tasks using the Fargate launch type, and the only
	// requirement is that the total amount of CPU reserved for all containers within
	// a task be lower than the task-level cpu value.
	//
	// You can determine the number of CPU units that are available per EC2 instance
	// type by multiplying the vCPUs listed for that instance type on the Amazon
	// EC2 Instances (http://aws.amazon.com/ec2/instance-types/) detail page by
	// 1,024.
	//
	// Linux containers share unallocated CPU units with other containers on the
	// container instance with the same ratio as their allocated amount. For example,
	// if you run a single-container task on a single-core instance type with 512
	// CPU units specified for that container, and that is the only task running
	// on the container instance, that container could use the full 1,024 CPU unit
	// share at any given time. However, if you launched another copy of the same
	// task on that container instance, each task would be guaranteed a minimum
	// of 512 CPU units when needed, and each container could float to higher CPU
	// usage if the other container was not using it, but if both tasks were 100%
	// active all of the time, they would be limited to 512 CPU units.
	//
	// On Linux container instances, the Docker daemon on the container instance
	// uses the CPU value to calculate the relative CPU share ratios for running
	// containers. For more information, see CPU share constraint (https://docs.docker.com/engine/reference/run/#cpu-share-constraint)
	// in the Docker documentation. The minimum valid CPU share value that the Linux
	// kernel allows is 2. However, the CPU parameter is not required, and you can
	// use CPU values below 2 in your container definitions. For CPU values below
	// 2 (including null), the behavior varies based on your Amazon ECS container
	// agent version:
	//
	//    * Agent versions less than or equal to 1.1.0: Null and zero CPU values
	//    are passed to Docker as 0, which Docker then converts to 1,024 CPU shares.
	//    CPU values of 1 are passed to Docker as 1, which the Linux kernel converts
	//    to two CPU shares.
	//
	//    * Agent versions greater than or equal to 1.2.0: Null, zero, and CPU values
	//    of 1 are passed to Docker as 2.
	//
	// On Windows container instances, the CPU limit is enforced as an absolute
	// limit, or a quota. Windows containers only have access to the specified amount
	// of CPU that is described in the task definition. A null or zero CPU value
	// is passed to Docker as 0, which Windows interprets as 1% of one CPU.
	Cpu?: null | int64 @go(,*int64)

	// The dependencies defined for container startup and shutdown. A container
	// can contain multiple dependencies. When a dependency is defined for container
	// startup, for container shutdown it is reversed.
	//
	// For tasks using the EC2 launch type, the container instances require at least
	// version 1.26.0 of the container agent to enable container dependencies. However,
	// we recommend using the latest container agent version. For information about
	// checking your agent version and updating to the latest version, see Updating
	// the Amazon ECS Container Agent (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html)
	// in the Amazon Elastic Container Service Developer Guide. If you are using
	// an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1
	// of the ecs-init package. If your container instances are launched from version
	// 20190301 or later, then they contain the required versions of the container
	// agent and ecs-init. For more information, see Amazon ECS-optimized Linux
	// AMI (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// For tasks using the Fargate launch type, the task or service requires platform
	// version 1.3.0 or later.
	DependsOn: [...null | #ContainerDependency] @go(,[]*ContainerDependency)

	// When this parameter is true, networking is disabled within the container.
	// This parameter maps to NetworkDisabled in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/).
	//
	// This parameter is not supported for Windows containers.
	DisableNetworking?: null | bool @go(,*bool)

	// A list of DNS search domains that are presented to the container. This parameter
	// maps to DnsSearch in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --dns-search option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// This parameter is not supported for Windows containers.
	DnsSearchDomains: [...null | string] @go(,[]*string)

	// A list of DNS servers that are presented to the container. This parameter
	// maps to Dns in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --dns option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// This parameter is not supported for Windows containers.
	DnsServers: [...null | string] @go(,[]*string)

	// A key/value map of labels to add to the container. This parameter maps to
	// Labels in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --label option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	// This parameter requires version 1.18 of the Docker Remote API or greater
	// on your container instance. To check the Docker Remote API version on your
	// container instance, log in to your container instance and run the following
	// command: sudo docker version --format '{{.Server.APIVersion}}'
	DockerLabels: {[string]: null | string} @go(,map[string]*string)

	// A list of strings to provide custom labels for SELinux and AppArmor multi-level
	// security systems. This field is not valid for containers in tasks using the
	// Fargate launch type.
	//
	// With Windows containers, this parameter can be used to reference a credential
	// spec file when configuring a container for Active Directory authentication.
	// For more information, see Using gMSAs for Windows Containers (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// This parameter maps to SecurityOpt in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --security-opt option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// The Amazon ECS container agent running on a container instance must register
	// with the ECS_SELINUX_CAPABLE=true or ECS_APPARMOR_CAPABLE=true environment
	// variables before containers placed on that instance can use these security
	// options. For more information, see Amazon ECS Container Agent Configuration
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// For more information about valid values, see Docker Run Security Configuration
	// (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value" |
	// "credentialspec:CredentialSpecFilePath"
	DockerSecurityOptions: [...null | string] @go(,[]*string)

	//
	// Early versions of the Amazon ECS container agent do not properly handle entryPoint
	// parameters. If you have problems using entryPoint, update your container
	// agent or enter your commands and arguments as command array items instead.
	//
	// The entry point that is passed to the container. This parameter maps to Entrypoint
	// in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --entrypoint option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	// For more information, see https://docs.docker.com/engine/reference/builder/#entrypoint
	// (https://docs.docker.com/engine/reference/builder/#entrypoint).
	EntryPoint: [...null | string] @go(,[]*string)

	// The environment variables to pass to a container. This parameter maps to
	// Env in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --env option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// We do not recommend using plaintext environment variables for sensitive information,
	// such as credential data.
	Environment: [...null | #KeyValuePair] @go(,[]*KeyValuePair)

	// A list of files containing the environment variables to pass to a container.
	// This parameter maps to the --env-file option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// You can specify up to ten environment files. The file must have a .env file
	// extension. Each line in an environment file should contain an environment
	// variable in VARIABLE=VALUE format. Lines beginning with # are treated as
	// comments and are ignored. For more information on the environment variable
	// file syntax, see Declare default environment variables in file (https://docs.docker.com/compose/env-file/).
	//
	// If there are environment variables specified using the environment parameter
	// in a container definition, they take precedence over the variables contained
	// within an environment file. If multiple environment files are specified that
	// contain the same variable, they are processed from the top down. It is recommended
	// to use unique variable names. For more information, see Specifying Environment
	// Variables (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html)
	// in the Amazon Elastic Container Service Developer Guide.
	EnvironmentFiles: [...null | #EnvironmentFile] @go(,[]*EnvironmentFile)

	// If the essential parameter of a container is marked as true, and that container
	// fails or stops for any reason, all other containers that are part of the
	// task are stopped. If the essential parameter of a container is marked as
	// false, then its failure does not affect the rest of the containers in a task.
	// If this parameter is omitted, a container is assumed to be essential.
	//
	// All tasks must have at least one essential container. If you have an application
	// that is composed of multiple containers, you should group containers that
	// are used for a common purpose into components, and separate the different
	// components into multiple task definitions. For more information, see Application
	// Architecture (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html)
	// in the Amazon Elastic Container Service Developer Guide.
	Essential?: null | bool @go(,*bool)

	// A list of hostnames and IP address mappings to append to the /etc/hosts file
	// on the container. This parameter maps to ExtraHosts in the Create a container
	// (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section
	// of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/) and
	// the --add-host option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// This parameter is not supported for Windows containers or tasks that use
	// the awsvpc network mode.
	ExtraHosts: [...null | #HostEntry] @go(,[]*HostEntry)

	// The FireLens configuration for the container. This is used to specify and
	// configure a log router for container logs. For more information, see Custom
	// Log Routing (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
	// in the Amazon Elastic Container Service Developer Guide.
	FirelensConfiguration?: null | #FirelensConfiguration @go(,*FirelensConfiguration)

	// The container health check command and associated configuration parameters
	// for the container. This parameter maps to HealthCheck in the Create a container
	// (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section
	// of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/) and
	// the HEALTHCHECK parameter of docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	HealthCheck?: null | #HealthCheck @go(,*HealthCheck)

	// The hostname to use for your container. This parameter maps to Hostname in
	// the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --hostname option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// The hostname parameter is not supported if you are using the awsvpc network
	// mode.
	Hostname?: null | string @go(,*string)

	// The image used to start a container. This string is passed directly to the
	// Docker daemon. Images in the Docker Hub registry are available by default.
	// Other repositories are specified with either repository-url/image:tag or
	// repository-url/image@digest . Up to 255 letters (uppercase and lowercase),
	// numbers, hyphens, underscores, colons, periods, forward slashes, and number
	// signs are allowed. This parameter maps to Image in the Create a container
	// (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section
	// of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/) and
	// the IMAGE parameter of docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	//    * When a new task starts, the Amazon ECS container agent pulls the latest
	//    version of the specified image and tag for the container to use. However,
	//    subsequent updates to a repository image are not propagated to already
	//    running tasks.
	//
	//    * Images in Amazon ECR repositories can be specified by either using the
	//    full registry/repository:tag or registry/repository@digest. For example,
	//    012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest
	//    or 012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE.
	//
	//    * Images in official repositories on Docker Hub use a single name (for
	//    example, ubuntu or mongo).
	//
	//    * Images in other repositories on Docker Hub are qualified with an organization
	//    name (for example, amazon/amazon-ecs-agent).
	//
	//    * Images in other online repositories are qualified further by a domain
	//    name (for example, quay.io/assemblyline/ubuntu).
	Image?: null | string @go(,*string)

	// When this parameter is true, this allows you to deploy containerized applications
	// that require stdin or a tty to be allocated. This parameter maps to OpenStdin
	// in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --interactive option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	Interactive?: null | bool @go(,*bool)

	// The links parameter allows containers to communicate with each other without
	// the need for port mappings. This parameter is only supported if the network
	// mode of a task definition is bridge. The name:internalName construct is analogous
	// to name:alias in Docker links. Up to 255 letters (uppercase and lowercase),
	// numbers, underscores, and hyphens are allowed. For more information about
	// linking Docker containers, go to Legacy container links (https://docs.docker.com/network/links/)
	// in the Docker documentation. This parameter maps to Links in the Create a
	// container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --link option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// This parameter is not supported for Windows containers.
	//
	// Containers that are collocated on a single container instance may be able
	// to communicate with each other without requiring links or host port mappings.
	// Network isolation is achieved on the container instance using security groups
	// and VPC settings.
	Links: [...null | string] @go(,[]*string)

	// Linux-specific modifications that are applied to the container, such as Linux
	// kernel capabilities. For more information see KernelCapabilities.
	//
	// This parameter is not supported for Windows containers.
	LinuxParameters?: null | #LinuxParameters @go(,*LinuxParameters)

	// The log configuration specification for the container.
	//
	// This parameter maps to LogConfig in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --log-driver option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	// By default, containers use the same logging driver that the Docker daemon
	// uses. However the container may use a different logging driver than the Docker
	// daemon by specifying a log driver with this parameter in the container definition.
	// To use a different logging driver for a container, the log system must be
	// configured properly on the container instance (or on a different log server
	// for remote logging options). For more information on the options for different
	// supported log drivers, see Configure logging drivers (https://docs.docker.com/engine/admin/logging/overview/)
	// in the Docker documentation.
	//
	// Amazon ECS currently supports a subset of the logging drivers available to
	// the Docker daemon (shown in the LogConfiguration data type). Additional log
	// drivers may be available in future releases of the Amazon ECS container agent.
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater
	// on your container instance. To check the Docker Remote API version on your
	// container instance, log in to your container instance and run the following
	// command: sudo docker version --format '{{.Server.APIVersion}}'
	//
	// The Amazon ECS container agent running on a container instance must register
	// the logging drivers available on that instance with the ECS_AVAILABLE_LOGGING_DRIVERS
	// environment variable before containers placed on that instance can use these
	// log configuration options. For more information, see Amazon ECS Container
	// Agent Configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
	// in the Amazon Elastic Container Service Developer Guide.
	LogConfiguration?: null | #LogConfiguration @go(,*LogConfiguration)

	// The amount (in MiB) of memory to present to the container. If your container
	// attempts to exceed the memory specified here, the container is killed. The
	// total amount of memory reserved for all containers within a task must be
	// lower than the task memory value, if one is specified. This parameter maps
	// to Memory in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --memory option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// If using the Fargate launch type, this parameter is optional.
	//
	// If using the EC2 launch type, you must specify either a task-level memory
	// value or a container-level memory value. If you specify both a container-level
	// memory and memoryReservation value, memory must be greater than memoryReservation.
	// If you specify memoryReservation, then that value is subtracted from the
	// available memory resources for the container instance on which the container
	// is placed. Otherwise, the value of memory is used.
	//
	// The Docker daemon reserves a minimum of 4 MiB of memory for a container,
	// so you should not specify fewer than 4 MiB of memory for your containers.
	Memory?: null | int64 @go(,*int64)

	// The soft limit (in MiB) of memory to reserve for the container. When system
	// memory is under heavy contention, Docker attempts to keep the container memory
	// to this soft limit. However, your container can consume more memory when
	// it needs to, up to either the hard limit specified with the memory parameter
	// (if applicable), or all of the available memory on the container instance,
	// whichever comes first. This parameter maps to MemoryReservation in the Create
	// a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --memory-reservation option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// If a task-level memory value is not specified, you must specify a non-zero
	// integer for one or both of memory or memoryReservation in a container definition.
	// If you specify both, memory must be greater than memoryReservation. If you
	// specify memoryReservation, then that value is subtracted from the available
	// memory resources for the container instance on which the container is placed.
	// Otherwise, the value of memory is used.
	//
	// For example, if your container normally uses 128 MiB of memory, but occasionally
	// bursts to 256 MiB of memory for short periods of time, you can set a memoryReservation
	// of 128 MiB, and a memory hard limit of 300 MiB. This configuration would
	// allow the container to only reserve 128 MiB of memory from the remaining
	// resources on the container instance, but also allow the container to consume
	// more memory resources when needed.
	//
	// The Docker daemon reserves a minimum of 4 MiB of memory for a container,
	// so you should not specify fewer than 4 MiB of memory for your containers.
	MemoryReservation?: null | int64 @go(,*int64)

	// The mount points for data volumes in your container.
	//
	// This parameter maps to Volumes in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --volume option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// Windows containers can mount whole directories on the same drive as $env:ProgramData.
	// Windows containers cannot mount directories on a different drive, and mount
	// point cannot be across drives.
	MountPoints: [...null | #MountPoint] @go(,[]*MountPoint)

	// The name of a container. If you are linking multiple containers together
	// in a task definition, the name of one container can be entered in the links
	// of another container to connect the containers. Up to 255 letters (uppercase
	// and lowercase), numbers, underscores, and hyphens are allowed. This parameter
	// maps to name in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --name option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	Name?: null | string @go(,*string)

	// The list of port mappings for the container. Port mappings allow containers
	// to access ports on the host container instance to send or receive traffic.
	//
	// For task definitions that use the awsvpc network mode, you should only specify
	// the containerPort. The hostPort can be left blank or it must be the same
	// value as the containerPort.
	//
	// Port mappings on Windows use the NetNAT gateway address rather than localhost.
	// There is no loopback for port mappings on Windows, so you cannot access a
	// container's mapped port from the host itself.
	//
	// This parameter maps to PortBindings in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --publish option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	// If the network mode of a task definition is set to none, then you can't specify
	// port mappings. If the network mode of a task definition is set to host, then
	// host ports must either be undefined or they must match the container port
	// in the port mapping.
	//
	// After a task reaches the RUNNING status, manual and automatic host and container
	// port assignments are visible in the Network Bindings section of a container
	// description for a selected task in the Amazon ECS console. The assignments
	// are also visible in the networkBindings section DescribeTasks responses.
	PortMappings: [...null | #PortMapping] @go(,[]*PortMapping)

	// When this parameter is true, the container is given elevated privileges on
	// the host container instance (similar to the root user). This parameter maps
	// to Privileged in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --privileged option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// This parameter is not supported for Windows containers or tasks run on Fargate.
	Privileged?: null | bool @go(,*bool)

	// When this parameter is true, a TTY is allocated. This parameter maps to Tty
	// in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --tty option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	PseudoTerminal?: null | bool @go(,*bool)

	// When this parameter is true, the container is given read-only access to its
	// root file system. This parameter maps to ReadonlyRootfs in the Create a container
	// (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section
	// of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/) and
	// the --read-only option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// This parameter is not supported for Windows containers.
	ReadonlyRootFilesystem?: null | bool @go(,*bool)

	// The private repository authentication credentials to use.
	RepositoryCredentials?: null | #RepositoryCredentials @go(,*RepositoryCredentials)

	// The type and amount of a resource to assign to a container. The only supported
	// resource is a GPU.
	ResourceRequirements: [...null | #ResourceRequirement] @go(,[]*ResourceRequirement)

	// The secrets to pass to the container. For more information, see Specifying
	// Sensitive Data (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
	// in the Amazon Elastic Container Service Developer Guide.
	Secrets: [...null | #Secret] @go(,[]*Secret)

	// Time duration (in seconds) to wait before giving up on resolving dependencies
	// for a container. For example, you specify two containers in a task definition
	// with containerA having a dependency on containerB reaching a COMPLETE, SUCCESS,
	// or HEALTHY status. If a startTimeout value is specified for containerB and
	// it does not reach the desired status within that time then containerA will
	// give up and not start. This results in the task transitioning to a STOPPED
	// state.
	//
	// When the ECS_CONTAINER_START_TIMEOUT container agent configuration variable
	// is used, it is enforced indendently from this start timeout value.
	//
	// For tasks using the Fargate launch type, this parameter requires that the
	// task or service uses platform version 1.3.0 or later.
	//
	// For tasks using the EC2 launch type, your container instances require at
	// least version 1.26.0 of the container agent to enable a container start timeout
	// value. However, we recommend using the latest container agent version. For
	// information about checking your agent version and updating to the latest
	// version, see Updating the Amazon ECS Container Agent (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html)
	// in the Amazon Elastic Container Service Developer Guide. If you are using
	// an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1
	// of the ecs-init package. If your container instances are launched from version
	// 20190301 or later, then they contain the required versions of the container
	// agent and ecs-init. For more information, see Amazon ECS-optimized Linux
	// AMI (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
	// in the Amazon Elastic Container Service Developer Guide.
	StartTimeout?: null | int64 @go(,*int64)

	// Time duration (in seconds) to wait before the container is forcefully killed
	// if it doesn't exit normally on its own.
	//
	// For tasks using the Fargate launch type, the task or service requires platform
	// version 1.3.0 or later. The max stop timeout value is 120 seconds and if
	// the parameter is not specified, the default value of 30 seconds is used.
	//
	// For tasks using the EC2 launch type, if the stopTimeout parameter is not
	// specified, the value set for the Amazon ECS container agent configuration
	// variable ECS_CONTAINER_STOP_TIMEOUT is used by default. If neither the stopTimeout
	// parameter or the ECS_CONTAINER_STOP_TIMEOUT agent configuration variable
	// are set, then the default values of 30 seconds for Linux containers and 30
	// seconds on Windows containers are used. Your container instances require
	// at least version 1.26.0 of the container agent to enable a container stop
	// timeout value. However, we recommend using the latest container agent version.
	// For information about checking your agent version and updating to the latest
	// version, see Updating the Amazon ECS Container Agent (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html)
	// in the Amazon Elastic Container Service Developer Guide. If you are using
	// an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1
	// of the ecs-init package. If your container instances are launched from version
	// 20190301 or later, then they contain the required versions of the container
	// agent and ecs-init. For more information, see Amazon ECS-optimized Linux
	// AMI (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
	// in the Amazon Elastic Container Service Developer Guide.
	StopTimeout?: null | int64 @go(,*int64)

	// A list of namespaced kernel parameters to set in the container. This parameter
	// maps to Sysctls in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --sysctl option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// It is not recommended that you specify network-related systemControls parameters
	// for multiple containers in a single task that also uses either the awsvpc
	// or host network modes. For tasks that use the awsvpc network mode, the container
	// that is started last determines which systemControls parameters take effect.
	// For tasks that use the host network mode, it changes the container instance's
	// namespaced kernel parameters as well as the containers.
	SystemControls: [...null | #SystemControl] @go(,[]*SystemControl)

	// A list of ulimits to set in the container. If a ulimit value is specified
	// in a task definition, it will override the default values set by Docker.
	// This parameter maps to Ulimits in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --ulimit option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	// Valid naming values are displayed in the Ulimit data type.
	//
	// Amazon ECS tasks hosted on Fargate use the default resource limit values
	// set by the operating system with the exception of the nofile resource limit
	// parameter which Fargate overrides. The nofile resource limit sets a restriction
	// on the number of open files that a container can use. The default nofile
	// soft limit is 1024 and hard limit is 4096.
	//
	// This parameter requires version 1.18 of the Docker Remote API or greater
	// on your container instance. To check the Docker Remote API version on your
	// container instance, log in to your container instance and run the following
	// command: sudo docker version --format '{{.Server.APIVersion}}'
	//
	// This parameter is not supported for Windows containers.
	Ulimits: [...null | #Ulimit] @go(,[]*Ulimit)

	// The user to use inside the container. This parameter maps to User in the
	// Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --user option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// When running tasks using the host network mode, you should not run containers
	// using the root user (UID 0). It is considered best practice to use a non-root
	// user.
	//
	// You can specify the user using the following formats. If specifying a UID
	// or GID, you must specify it as a positive integer.
	//
	//    * user
	//
	//    * user:group
	//
	//    * uid
	//
	//    * uid:gid
	//
	//    * user:gid
	//
	//    * uid:group
	//
	// This parameter is not supported for Windows containers.
	User?: null | string @go(,*string)

	// Data volumes to mount from another container. This parameter maps to VolumesFrom
	// in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --volumes-from option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	VolumesFrom: [...null | #VolumeFrom] @go(,[]*VolumeFrom)

	// The working directory in which to run commands inside the container. This
	// parameter maps to WorkingDir in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --workdir option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	WorkingDirectory?: null | string @go(,*string)
}

// The dependencies defined for container startup and shutdown. A container
// can contain multiple dependencies. When a dependency is defined for container
// startup, for container shutdown it is reversed.
//
// Your Amazon ECS container instances require at least version 1.26.0 of the
// container agent to enable container dependencies. However, we recommend using
// the latest container agent version. For information about checking your agent
// version and updating to the latest version, see Updating the Amazon ECS Container
// Agent (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html)
// in the Amazon Elastic Container Service Developer Guide. If you are using
// an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1
// of the ecs-init package. If your container instances are launched from version
// 20190301 or later, then they contain the required versions of the container
// agent and ecs-init. For more information, see Amazon ECS-optimized Linux
// AMI (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
// in the Amazon Elastic Container Service Developer Guide.
//
// For tasks using the Fargate launch type, this parameter requires that the
// task or service uses platform version 1.3.0 or later.
#ContainerDependency: {
	// The dependency condition of the container. The following are the available
	// conditions and their behavior:
	//
	//    * START - This condition emulates the behavior of links and volumes today.
	//    It validates that a dependent container is started before permitting other
	//    containers to start.
	//
	//    * COMPLETE - This condition validates that a dependent container runs
	//    to completion (exits) before permitting other containers to start. This
	//    can be useful for nonessential containers that run a script and then exit.
	//    This condition cannot be set on an essential container.
	//
	//    * SUCCESS - This condition is the same as COMPLETE, but it also requires
	//    that the container exits with a zero status. This condition cannot be
	//    set on an essential container.
	//
	//    * HEALTHY - This condition validates that the dependent container passes
	//    its Docker health check before permitting other containers to start. This
	//    requires that the dependent container has health checks configured. This
	//    condition is confirmed only at task startup.
	//
	// Condition is a required field
	Condition?: null | string @go(,*string)

	// The name of a container.
	//
	// ContainerName is a required field
	ContainerName?: null | string @go(,*string)
}

// An EC2 instance that is running the Amazon ECS agent and has been registered
// with a cluster.
#ContainerInstance: {
	// This parameter returns true if the agent is connected to Amazon ECS. Registered
	// instances with an agent that may be unhealthy or stopped return false. Only
	// instances connected to an agent can accept placement requests.
	AgentConnected?: null | bool @go(,*bool)

	// The status of the most recent agent update. If an update has never been requested,
	// this value is NULL.
	AgentUpdateStatus?: null | string @go(,*string)

	// The resources attached to a container instance, such as elastic network interfaces.
	Attachments: [...null | #Attachment] @go(,[]*Attachment)

	// The attributes set for the container instance, either by the Amazon ECS container
	// agent at instance registration or manually with the PutAttributes operation.
	Attributes: [...null | #Attribute] @go(,[]*Attribute)

	// The capacity provider associated with the container instance.
	CapacityProviderName?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the container instance. The ARN contains
	// the arn:aws:ecs namespace, followed by the Region of the container instance,
	// the Amazon Web Services account ID of the container instance owner, the container-instance
	// namespace, and then the container instance ID. For example, arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID.
	ContainerInstanceArn?: null | string @go(,*string)

	// The ID of the container instance. For Amazon EC2 instances, this value is
	// the Amazon EC2 instance ID. For external instances, this value is the Amazon
	// Web Services Systems Manager managed instance ID.
	Ec2InstanceId?: null | string @go(,*string)

	// The number of tasks on the container instance that are in the PENDING status.
	PendingTasksCount?: null | int64 @go(,*int64)

	// The Unix timestamp for when the container instance was registered.
	RegisteredAt?: null | time.Time @go(,*time.Time)

	// For CPU and memory resource types, this parameter describes the amount of
	// each resource that was available on the container instance when the container
	// agent registered it with Amazon ECS. This value represents the total amount
	// of CPU and memory that can be allocated on this container instance to tasks.
	// For port resource types, this parameter describes the ports that were reserved
	// by the Amazon ECS container agent when it registered the container instance
	// with Amazon ECS.
	RegisteredResources: [...null | #Resource] @go(,[]*Resource)

	// For CPU and memory resource types, this parameter describes the remaining
	// CPU and memory that has not already been allocated to tasks and is therefore
	// available for new tasks. For port resource types, this parameter describes
	// the ports that were reserved by the Amazon ECS container agent (at instance
	// registration time) and any task containers that have reserved port mappings
	// on the host (with the host or bridge network mode). Any port that is not
	// specified here is available for new tasks.
	RemainingResources: [...null | #Resource] @go(,[]*Resource)

	// The number of tasks on the container instance that are in the RUNNING status.
	RunningTasksCount?: null | int64 @go(,*int64)

	// The status of the container instance. The valid values are REGISTERING, REGISTRATION_FAILED,
	// ACTIVE, INACTIVE, DEREGISTERING, or DRAINING.
	//
	// If your account has opted in to the awsvpcTrunking account setting, then
	// any newly registered container instance will transition to a REGISTERING
	// status while the trunk elastic network interface is provisioned for the instance.
	// If the registration fails, the instance will transition to a REGISTRATION_FAILED
	// status. You can describe the container instance and see the reason for failure
	// in the statusReason parameter. Once the container instance is terminated,
	// the instance transitions to a DEREGISTERING status while the trunk elastic
	// network interface is deprovisioned. The instance then transitions to an INACTIVE
	// status.
	//
	// The ACTIVE status indicates that the container instance can accept tasks.
	// The DRAINING indicates that new tasks are not placed on the container instance
	// and any service tasks running on the container instance are removed if possible.
	// For more information, see Container Instance Draining (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html)
	// in the Amazon Elastic Container Service Developer Guide.
	Status?: null | string @go(,*string)

	// The reason that the container instance reached its current status.
	StatusReason?: null | string @go(,*string)

	// The metadata that you apply to the container instance to help you categorize
	// and organize them. Each tag consists of a key and an optional value, both
	// of which you define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The version counter for the container instance. Every time a container instance
	// experiences a change that triggers a CloudWatch event, the version counter
	// is incremented. If you are replicating your Amazon ECS container instance
	// state with CloudWatch Events, you can compare the version of a container
	// instance reported by the Amazon ECS APIs with the version reported in CloudWatch
	// Events for the container instance (inside the detail object) to verify that
	// the version in your event stream is current.
	Version?: null | int64 @go(,*int64)

	// The version information for the Amazon ECS container agent and Docker daemon
	// running on the container instance.
	VersionInfo?: null | #VersionInfo @go(,*VersionInfo)
}

// The overrides that should be sent to a container. An empty container override
// can be passed in. An example of an empty container override would be {"containerOverrides":
// [ ] }. If a non-empty container override is specified, the name parameter
// must be included.
#ContainerOverride: {
	// The command to send to the container that overrides the default command from
	// the Docker image or the task definition. You must also specify a container
	// name.
	Command: [...null | string] @go(,[]*string)

	// The number of cpu units reserved for the container, instead of the default
	// value from the task definition. You must also specify a container name.
	Cpu?: null | int64 @go(,*int64)

	// The environment variables to send to the container. You can add new environment
	// variables, which are added to the container at launch, or you can override
	// the existing environment variables from the Docker image or the task definition.
	// You must also specify a container name.
	Environment: [...null | #KeyValuePair] @go(,[]*KeyValuePair)

	// A list of files containing the environment variables to pass to a container,
	// instead of the value from the container definition.
	EnvironmentFiles: [...null | #EnvironmentFile] @go(,[]*EnvironmentFile)

	// The hard limit (in MiB) of memory to present to the container, instead of
	// the default value from the task definition. If your container attempts to
	// exceed the memory specified here, the container is killed. You must also
	// specify a container name.
	Memory?: null | int64 @go(,*int64)

	// The soft limit (in MiB) of memory to reserve for the container, instead of
	// the default value from the task definition. You must also specify a container
	// name.
	MemoryReservation?: null | int64 @go(,*int64)

	// The name of the container that receives the override. This parameter is required
	// if any override is specified.
	Name?: null | string @go(,*string)

	// The type and amount of a resource to assign to a container, instead of the
	// default value from the task definition. The only supported resource is a
	// GPU.
	ResourceRequirements: [...null | #ResourceRequirement] @go(,[]*ResourceRequirement)
}

// An object representing a change in state for a container.
#ContainerStateChange: {
	// The name of the container.
	ContainerName?: null | string @go(,*string)

	// The exit code for the container, if the state change is a result of the container
	// exiting.
	ExitCode?: null | int64 @go(,*int64)

	// The container image SHA 256 digest.
	ImageDigest?: null | string @go(,*string)

	// Any network bindings associated with the container.
	NetworkBindings: [...null | #NetworkBinding] @go(,[]*NetworkBinding)

	// The reason for the state change.
	Reason?: null | string @go(,*string)

	// The ID of the Docker container.
	RuntimeId?: null | string @go(,*string)

	// The status of the container.
	Status?: null | string @go(,*string)
}

#CreateCapacityProviderInput: {
	// The details of the Auto Scaling group for the capacity provider.
	//
	// AutoScalingGroupProvider is a required field
	AutoScalingGroupProvider?: null | #AutoScalingGroupProvider @go(,*AutoScalingGroupProvider)

	// The name of the capacity provider. Up to 255 characters are allowed, including
	// letters (upper and lowercase), numbers, underscores, and hyphens. The name
	// cannot be prefixed with "aws", "ecs", or "fargate".
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// The metadata that you apply to the capacity provider to help you categorize
	// and organize them. Each tag consists of a key and an optional value, both
	// of which you define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#CreateCapacityProviderOutput: {
	// The full description of the new capacity provider.
	CapacityProvider?: null | #CapacityProvider @go(,*CapacityProvider)
}

#CreateClusterInput: {
	// The short name of one or more capacity providers to associate with the cluster.
	// A capacity provider must be associated with a cluster before it can be included
	// as part of the default capacity provider strategy of the cluster or used
	// in a capacity provider strategy when calling the CreateService or RunTask
	// actions.
	//
	// If specifying a capacity provider that uses an Auto Scaling group, the capacity
	// provider must already be created and not already associated with another
	// cluster. New Auto Scaling group capacity providers can be created with the
	// CreateCapacityProvider API operation.
	//
	// To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
	// capacity providers. The Fargate capacity providers are available to all accounts
	// and only need to be associated with a cluster to be used.
	//
	// The PutClusterCapacityProviders API operation is used to update the list
	// of available capacity providers for a cluster after the cluster is created.
	CapacityProviders: [...null | string] @go(,[]*string)

	// The name of your cluster. If you do not specify a name for your cluster,
	// you create a cluster named default. Up to 255 letters (uppercase and lowercase),
	// numbers, underscores, and hyphens are allowed.
	ClusterName?: null | string @go(,*string)

	// The execute command configuration for the cluster.
	Configuration?: null | #ClusterConfiguration @go(,*ClusterConfiguration)

	// The capacity provider strategy to set as the default for the cluster. When
	// a default capacity provider strategy is set for a cluster, when calling the
	// RunTask or CreateService APIs with no capacity provider strategy or launch
	// type specified, the default capacity provider strategy for the cluster is
	// used.
	//
	// If a default capacity provider strategy is not defined for a cluster during
	// creation, it can be defined later with the PutClusterCapacityProviders API
	// operation.
	DefaultCapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)

	// The setting to use when creating a cluster. This parameter is used to enable
	// CloudWatch Container Insights for a cluster. If this value is specified,
	// it will override the containerInsights value set with PutAccountSetting or
	// PutAccountSettingDefault.
	Settings: [...null | #ClusterSetting] @go(,[]*ClusterSetting)

	// The metadata that you apply to the cluster to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#CreateClusterOutput: {
	// The full description of your new cluster.
	Cluster?: null | #Cluster @go(,*Cluster)
}

#CreateServiceInput: {
	// The capacity provider strategy to use for the service.
	//
	// If a capacityProviderStrategy is specified, the launchType parameter must
	// be omitted. If no capacityProviderStrategy or launchType is specified, the
	// defaultCapacityProviderStrategy for the cluster is used.
	//
	// A capacity provider strategy may contain a maximum of 6 capacity providers.
	CapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. Up to 32 ASCII characters are allowed.
	ClientToken?: null | string @go(,*string)

	// The short name or full Amazon Resource Name (ARN) of the cluster on which
	// to run your service. If you do not specify a cluster, the default cluster
	// is assumed.
	Cluster?: null | string @go(,*string)

	// Optional deployment parameters that control how many tasks run during the
	// deployment and the ordering of stopping and starting tasks.
	DeploymentConfiguration?: null | #DeploymentConfiguration @go(,*DeploymentConfiguration)

	// The deployment controller to use for the service. If no deployment controller
	// is specified, the default value of ECS is used.
	DeploymentController?: null | #DeploymentController @go(,*DeploymentController)

	// The number of instantiations of the specified task definition to place and
	// keep running on your cluster.
	//
	// This is required if schedulingStrategy is REPLICA or is not specified. If
	// schedulingStrategy is DAEMON then this is not required.
	DesiredCount?: null | int64 @go(,*int64)

	// Specifies whether to enable Amazon ECS managed tags for the tasks within
	// the service. For more information, see Tagging Your Amazon ECS Resources
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)
	// in the Amazon Elastic Container Service Developer Guide.
	EnableECSManagedTags?: null | bool @go(,*bool)

	// Whether or not the execute command functionality is enabled for the service.
	// If true, this enables execute command functionality on all containers in
	// the service tasks.
	EnableExecuteCommand?: null | bool @go(,*bool)

	// The period of time, in seconds, that the Amazon ECS service scheduler should
	// ignore unhealthy Elastic Load Balancing target health checks after a task
	// has first started. This is only used when your service is configured to use
	// a load balancer. If your service has a load balancer defined and you don't
	// specify a health check grace period value, the default value of 0 is used.
	//
	// If your service's tasks take a while to start and respond to Elastic Load
	// Balancing health checks, you can specify a health check grace period of up
	// to 2,147,483,647 seconds. During that time, the Amazon ECS service scheduler
	// ignores health check status. This grace period can prevent the service scheduler
	// from marking tasks as unhealthy and stopping them before they have time to
	// come up.
	HealthCheckGracePeriodSeconds?: null | int64 @go(,*int64)

	// The infrastructure on which to run your service. For more information, see
	// Amazon ECS launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// The FARGATE launch type runs your tasks on Fargate On-Demand infrastructure.
	//
	// Fargate Spot infrastructure is available for use but a capacity provider
	// strategy must be used. For more information, see Fargate capacity providers
	// (https://docs.aws.amazon.com/AmazonECS/latest/userguide/fargate-capacity-providers.html)
	// in the Amazon ECS User Guide for Fargate.
	//
	// The EC2 launch type runs your tasks on Amazon EC2 instances registered to
	// your cluster.
	//
	// The EXTERNAL launch type runs your tasks on your on-premise server or virtual
	// machine (VM) capacity registered to your cluster.
	//
	// A service can use either a launch type or a capacity provider strategy. If
	// a launchType is specified, the capacityProviderStrategy parameter must be
	// omitted.
	LaunchType?: null | string @go(,*string)

	// A load balancer object representing the load balancers to use with your service.
	// For more information, see Service Load Balancing (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If the service is using the rolling update (ECS) deployment controller and
	// using either an Application Load Balancer or Network Load Balancer, you must
	// specify one or more target group ARNs to attach to the service. The service-linked
	// role is required for services that make use of multiple target groups. For
	// more information, see Using service-linked roles for Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If the service is using the CODE_DEPLOY deployment controller, the service
	// is required to use either an Application Load Balancer or Network Load Balancer.
	// When creating an CodeDeploy deployment group, you specify two target groups
	// (referred to as a targetGroupPair). During a deployment, CodeDeploy determines
	// which task set in your service has the status PRIMARY and associates one
	// target group with it, and then associates the other target group with the
	// replacement task set. The load balancer can also have up to two listeners:
	// a required listener for production traffic and an optional listener that
	// allows you perform validation tests with Lambda functions before routing
	// production traffic to it.
	//
	// After you create a service using the ECS deployment controller, the load
	// balancer name or target group ARN, container name, and container port specified
	// in the service definition are immutable. If you are using the CODE_DEPLOY
	// deployment controller, these values can be changed when updating the service.
	//
	// For Application Load Balancers and Network Load Balancers, this object must
	// contain the load balancer target group ARN, the container name (as it appears
	// in a container definition), and the container port to access from the load
	// balancer. The load balancer name parameter must be omitted. When a task from
	// this service is placed on a container instance, the container instance and
	// port combination is registered as a target in the target group specified
	// here.
	//
	// For Classic Load Balancers, this object must contain the load balancer name,
	// the container name (as it appears in a container definition), and the container
	// port to access from the load balancer. The target group ARN parameter must
	// be omitted. When a task from this service is placed on a container instance,
	// the container instance is registered with the load balancer specified here.
	//
	// Services with tasks that use the awsvpc network mode (for example, those
	// with the Fargate launch type) only support Application Load Balancers and
	// Network Load Balancers. Classic Load Balancers are not supported. Also, when
	// you create any target groups for these services, you must choose ip as the
	// target type, not instance, because tasks that use the awsvpc network mode
	// are associated with an elastic network interface, not an Amazon EC2 instance.
	LoadBalancers: [...null | #LoadBalancer] @go(,[]*LoadBalancer)

	// The network configuration for the service. This parameter is required for
	// task definitions that use the awsvpc network mode to receive their own elastic
	// network interface, and it is not supported for other network modes. For more
	// information, see Task networking (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
	// in the Amazon Elastic Container Service Developer Guide.
	NetworkConfiguration?: null | #NetworkConfiguration @go(,*NetworkConfiguration)

	// An array of placement constraint objects to use for tasks in your service.
	// You can specify a maximum of 10 constraints per task (this limit includes
	// constraints in the task definition and those specified at runtime).
	PlacementConstraints: [...null | #PlacementConstraint] @go(,[]*PlacementConstraint)

	// The placement strategy objects to use for tasks in your service. You can
	// specify a maximum of 5 strategy rules per service.
	PlacementStrategy: [...null | #PlacementStrategy] @go(,[]*PlacementStrategy)

	// The platform version that your tasks in the service are running on. A platform
	// version is specified only for tasks using the Fargate launch type. If one
	// isn't specified, the LATEST platform version is used by default. For more
	// information, see Fargate platform versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	PlatformVersion?: null | string @go(,*string)

	// Specifies whether to propagate the tags from the task definition or the service
	// to the tasks in the service. If no value is specified, the tags are not propagated.
	// Tags can only be propagated to the tasks within the service during service
	// creation. To add tags to a task after service creation, use the TagResource
	// API action.
	PropagateTags?: null | string @go(,*string)

	// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon
	// ECS to make calls to your load balancer on your behalf. This parameter is
	// only permitted if you are using a load balancer with your service and your
	// task definition does not use the awsvpc network mode. If you specify the
	// role parameter, you must also specify a load balancer object with the loadBalancers
	// parameter.
	//
	// If your account has already created the Amazon ECS service-linked role, that
	// role is used by default for your service unless you specify a role here.
	// The service-linked role is required if your task definition uses the awsvpc
	// network mode or if the service is configured to use service discovery, an
	// external deployment controller, multiple target groups, or Elastic Inference
	// accelerators in which case you should not specify a role here. For more information,
	// see Using service-linked roles for Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If your specified role has a path other than /, then you must either specify
	// the full role ARN (this is recommended) or prefix the role name with the
	// path. For example, if a role with the name bar has a path of /foo/ then you
	// would specify /foo/bar as the role name. For more information, see Friendly
	// names and paths (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names)
	// in the IAM User Guide.
	Role?: null | string @go(,*string)

	// The scheduling strategy to use for the service. For more information, see
	// Services (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
	//
	// There are two service scheduler strategies available:
	//
	//    * REPLICA-The replica scheduling strategy places and maintains the desired
	//    number of tasks across your cluster. By default, the service scheduler
	//    spreads tasks across Availability Zones. You can use task placement strategies
	//    and constraints to customize task placement decisions. This scheduler
	//    strategy is required if the service is using the CODE_DEPLOY or EXTERNAL
	//    deployment controller types.
	//
	//    * DAEMON-The daemon scheduling strategy deploys exactly one task on each
	//    active container instance that meets all of the task placement constraints
	//    that you specify in your cluster. The service scheduler also evaluates
	//    the task placement constraints for running tasks and will stop tasks that
	//    do not meet the placement constraints. When you're using this strategy,
	//    you don't need to specify a desired number of tasks, a task placement
	//    strategy, or use Service Auto Scaling policies. Tasks using the Fargate
	//    launch type or the CODE_DEPLOY or EXTERNAL deployment controller types
	//    don't support the DAEMON scheduling strategy.
	SchedulingStrategy?: null | string @go(,*string)

	// The name of your service. Up to 255 letters (uppercase and lowercase), numbers,
	// underscores, and hyphens are allowed. Service names must be unique within
	// a cluster, but you can have similarly named services in multiple clusters
	// within a Region or across multiple Regions.
	//
	// ServiceName is a required field
	ServiceName?: null | string @go(,*string)

	// The details of the service discovery registry to associate with this service.
	// For more information, see Service discovery (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
	//
	// Each service may be associated with one service registry. Multiple service
	// registries per service isn't supported.
	ServiceRegistries: [...null | #ServiceRegistry] @go(,[]*ServiceRegistry)

	// The metadata that you apply to the service to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define. When a service is deleted, the tags are deleted as well.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The family and revision (family:revision) or full ARN of the task definition
	// to run in your service. If a revision is not specified, the latest ACTIVE
	// revision is used.
	//
	// A task definition must be specified if the service is using either the ECS
	// or CODE_DEPLOY deployment controllers.
	TaskDefinition?: null | string @go(,*string)
}

#CreateServiceOutput: {
	// The full description of your service following the create call.
	//
	// A service will return either a capacityProviderStrategy or launchType parameter,
	// but not both, depending on which one was specified during creation.
	//
	// If a service is using the ECS deployment controller, the deploymentController
	// and taskSets parameters will not be returned.
	//
	// If the service is using the CODE_DEPLOY deployment controller, the deploymentController,
	// taskSets and deployments parameters will be returned, however the deployments
	// parameter will be an empty list.
	Service?: null | #Service @go(,*Service)
}

#CreateTaskSetInput: {
	// The capacity provider strategy to use for the task set.
	//
	// A capacity provider strategy consists of one or more capacity providers along
	// with the base and weight to assign to them. A capacity provider must be associated
	// with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders
	// API is used to associate a capacity provider with a cluster. Only capacity
	// providers with an ACTIVE or UPDATING status can be used.
	//
	// If a capacityProviderStrategy is specified, the launchType parameter must
	// be omitted. If no capacityProviderStrategy or launchType is specified, the
	// defaultCapacityProviderStrategy for the cluster is used.
	//
	// If specifying a capacity provider that uses an Auto Scaling group, the capacity
	// provider must already be created. New capacity providers can be created with
	// the CreateCapacityProvider API operation.
	//
	// To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
	// capacity providers. The Fargate capacity providers are available to all accounts
	// and only need to be associated with a cluster to be used.
	//
	// The PutClusterCapacityProviders API operation is used to update the list
	// of available capacity providers for a cluster after the cluster is created.
	CapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. Up to 32 ASCII characters are allowed.
	ClientToken?: null | string @go(,*string)

	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the service to create the task set in.
	//
	// Cluster is a required field
	Cluster?: null | string @go(,*string)

	// An optional non-unique tag that identifies this task set in external systems.
	// If the task set is associated with a service discovery registry, the tasks
	// in this task set will have the ECS_TASK_SET_EXTERNAL_ID Cloud Map attribute
	// set to the provided value.
	ExternalId?: null | string @go(,*string)

	// The launch type that new tasks in the task set will use. For more information,
	// see Amazon ECS Launch Types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If a launchType is specified, the capacityProviderStrategy parameter must
	// be omitted.
	LaunchType?: null | string @go(,*string)

	// A load balancer object representing the load balancer to use with the task
	// set. The supported load balancer types are either an Application Load Balancer
	// or a Network Load Balancer.
	LoadBalancers: [...null | #LoadBalancer] @go(,[]*LoadBalancer)

	// An object representing the network configuration for a task set.
	NetworkConfiguration?: null | #NetworkConfiguration @go(,*NetworkConfiguration)

	// The platform version that the tasks in the task set should use. A platform
	// version is specified only for tasks using the Fargate launch type. If one
	// isn't specified, the LATEST platform version is used by default.
	PlatformVersion?: null | string @go(,*string)

	// A floating-point percentage of the desired number of tasks to place and keep
	// running in the task set.
	Scale?: null | #Scale @go(,*Scale)

	// The short name or full Amazon Resource Name (ARN) of the service to create
	// the task set in.
	//
	// Service is a required field
	Service?: null | string @go(,*string)

	// The details of the service discovery registries to assign to this task set.
	// For more information, see Service Discovery (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
	ServiceRegistries: [...null | #ServiceRegistry] @go(,[]*ServiceRegistry)

	// The metadata that you apply to the task set to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define. When a service is deleted, the tags are deleted as well.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The task definition for the tasks in the task set to use.
	//
	// TaskDefinition is a required field
	TaskDefinition?: null | string @go(,*string)
}

#CreateTaskSetOutput: {
	// Information about a set of Amazon ECS tasks in either an CodeDeploy or an
	// EXTERNAL deployment. A task set includes details such as the desired number
	// of tasks, how many tasks are running, and whether the task set serves production
	// traffic.
	TaskSet?: null | #TaskSet @go(,*TaskSet)
}

#DeleteAccountSettingInput: {
	// The resource name for which to disable the account setting. If serviceLongArnFormat
	// is specified, the ARN for your Amazon ECS services is affected. If taskLongArnFormat
	// is specified, the ARN and resource ID for your Amazon ECS tasks is affected.
	// If containerInstanceLongArnFormat is specified, the ARN and resource ID for
	// your Amazon ECS container instances is affected. If awsvpcTrunking is specified,
	// the ENI limit for your Amazon ECS container instances is affected.
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// The ARN of the principal, which can be an IAM user, IAM role, or the root
	// user. If you specify the root user, it disables the account setting for all
	// IAM users, IAM roles, and the root user of the account unless an IAM user
	// or role explicitly overrides these settings. If this field is omitted, the
	// setting is changed only for the authenticated user.
	PrincipalArn?: null | string @go(,*string)
}

#DeleteAccountSettingOutput: {
	// The account setting for the specified principal ARN.
	Setting?: null | #Setting @go(,*Setting)
}

#DeleteAttributesInput: {
	// The attributes to delete from your resource. You can specify up to 10 attributes
	// per request. For custom attributes, specify the attribute name and target
	// ID, but do not specify the value. If you specify the target ID using the
	// short form, you must also specify the target type.
	//
	// Attributes is a required field
	Attributes: [...null | #Attribute] @go(,[]*Attribute)

	// The short name or full Amazon Resource Name (ARN) of the cluster that contains
	// the resource to delete attributes. If you do not specify a cluster, the default
	// cluster is assumed.
	Cluster?: null | string @go(,*string)
}

#DeleteAttributesOutput: {
	// A list of attribute objects that were successfully deleted from your resource.
	Attributes: [...null | #Attribute] @go(,[]*Attribute)
}

#DeleteCapacityProviderInput: {
	// The short name or full Amazon Resource Name (ARN) of the capacity provider
	// to delete.
	//
	// CapacityProvider is a required field
	CapacityProvider?: null | string @go(,*string)
}

#DeleteCapacityProviderOutput: {
	// The details of the capacity provider.
	CapacityProvider?: null | #CapacityProvider @go(,*CapacityProvider)
}

#DeleteClusterInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster to delete.
	//
	// Cluster is a required field
	Cluster?: null | string @go(,*string)
}

#DeleteClusterOutput: {
	// The full description of the deleted cluster.
	Cluster?: null | #Cluster @go(,*Cluster)
}

#DeleteServiceInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the service to delete. If you do not specify a cluster, the default cluster
	// is assumed.
	Cluster?: null | string @go(,*string)

	// If true, allows you to delete a service even if it has not been scaled down
	// to zero tasks. It is only necessary to use this if the service is using the
	// REPLICA scheduling strategy.
	Force?: null | bool @go(,*bool)

	// The name of the service to delete.
	//
	// Service is a required field
	Service?: null | string @go(,*string)
}

#DeleteServiceOutput: {
	// The full description of the deleted service.
	Service?: null | #Service @go(,*Service)
}

#DeleteTaskSetInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the service that the task set exists in to delete.
	//
	// Cluster is a required field
	Cluster?: null | string @go(,*string)

	// If true, this allows you to delete a task set even if it hasn't been scaled
	// down to zero.
	Force?: null | bool @go(,*bool)

	// The short name or full Amazon Resource Name (ARN) of the service that hosts
	// the task set to delete.
	//
	// Service is a required field
	Service?: null | string @go(,*string)

	// The task set ID or full Amazon Resource Name (ARN) of the task set to delete.
	//
	// TaskSet is a required field
	TaskSet?: null | string @go(,*string)
}

#DeleteTaskSetOutput: {
	// Details about the task set.
	TaskSet?: null | #TaskSet @go(,*TaskSet)
}

// The details of an Amazon ECS service deployment. This is used only when a
// service uses the ECS deployment controller type.
#Deployment: {
	// The capacity provider strategy that the deployment is using.
	CapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)

	// The Unix timestamp for when the service deployment was created.
	CreatedAt?: null | time.Time @go(,*time.Time)

	// The most recent desired count of tasks that was specified for the service
	// to deploy or maintain.
	DesiredCount?: null | int64 @go(,*int64)

	// The number of consecutively failed tasks in the deployment. A task is considered
	// a failure if the service scheduler can't launch the task, the task doesn't
	// transition to a RUNNING state, or if it fails any of its defined health checks
	// and is stopped.
	//
	// Once a service deployment has one or more successfully running tasks, the
	// failed task count resets to zero and stops being evaluated.
	FailedTasks?: null | int64 @go(,*int64)

	// The ID of the deployment.
	Id?: null | string @go(,*string)

	// The launch type the tasks in the service are using. For more information,
	// see Amazon ECS Launch Types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	LaunchType?: null | string @go(,*string)

	// The VPC subnet and security group configuration for tasks that receive their
	// own elastic network interface by using the awsvpc networking mode.
	NetworkConfiguration?: null | #NetworkConfiguration @go(,*NetworkConfiguration)

	// The number of tasks in the deployment that are in the PENDING status.
	PendingCount?: null | int64 @go(,*int64)

	// The platform version on which your tasks in the service are running. A platform
	// version is only specified for tasks using the Fargate launch type. If one
	// is not specified, the LATEST platform version is used by default. For more
	// information, see Fargate Platform Versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	PlatformVersion?: null | string @go(,*string)

	//
	// The rolloutState of a service is only returned for services that use the
	// rolling update (ECS) deployment type that are not behind a Classic Load Balancer.
	//
	// The rollout state of the deployment. When a service deployment is started,
	// it begins in an IN_PROGRESS state. When the service reaches a steady state,
	// the deployment will transition to a COMPLETED state. If the service fails
	// to reach a steady state and circuit breaker is enabled, the deployment will
	// transition to a FAILED state. A deployment in FAILED state will launch no
	// new tasks. For more information, see DeploymentCircuitBreaker.
	RolloutState?: null | string @go(,*string)

	// A description of the rollout state of a deployment.
	RolloutStateReason?: null | string @go(,*string)

	// The number of tasks in the deployment that are in the RUNNING status.
	RunningCount?: null | int64 @go(,*int64)

	// The status of the deployment. The following describes each state:
	//
	// PRIMARY
	//
	// The most recent deployment of a service.
	//
	// ACTIVE
	//
	// A service deployment that still has running tasks, but are in the process
	// of being replaced with a new PRIMARY deployment.
	//
	// INACTIVE
	//
	// A deployment that has been completely replaced.
	Status?: null | string @go(,*string)

	// The most recent task definition that was specified for the tasks in the service
	// to use.
	TaskDefinition?: null | string @go(,*string)

	// The Unix timestamp for when the service deployment was last updated.
	UpdatedAt?: null | time.Time @go(,*time.Time)
}

//
// The deployment circuit breaker can only be used for services using the rolling
// update (ECS) deployment type that are not behind a Classic Load Balancer.
//
// The deployment circuit breaker determines whether a service deployment will
// fail if the service can't reach a steady state. If enabled, a service deployment
// will transition to a failed state and stop launching new tasks. You can also
// enable Amazon ECS to roll back your service to the last completed deployment
// after a failure. For more information, see Rolling update (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html)
// in the Amazon Elastic Container Service Developer Guide.
#DeploymentCircuitBreaker: {
	// Whether to enable the deployment circuit breaker logic for the service.
	//
	// Enable is a required field
	Enable?: null | bool @go(,*bool)

	// Whether to enable Amazon ECS to roll back the service if a service deployment
	// fails. If rollback is enabled, when a service deployment fails, the service
	// is rolled back to the last deployment that completed successfully.
	//
	// Rollback is a required field
	Rollback?: null | bool @go(,*bool)
}

// Optional deployment parameters that control how many tasks run during a deployment
// and the ordering of stopping and starting tasks.
#DeploymentConfiguration: {
	//
	// The deployment circuit breaker can only be used for services using the rolling
	// update (ECS) deployment type.
	//
	// The deployment circuit breaker determines whether a service deployment will
	// fail if the service can't reach a steady state. If deployment circuit breaker
	// is enabled, a service deployment will transition to a failed state and stop
	// launching new tasks. If rollback is enabled, when a service deployment fails,
	// the service is rolled back to the last deployment that completed successfully.
	DeploymentCircuitBreaker?: null | #DeploymentCircuitBreaker @go(,*DeploymentCircuitBreaker)

	// If a service is using the rolling update (ECS) deployment type, the maximum
	// percent parameter represents an upper limit on the number of tasks in a service
	// that are allowed in the RUNNING or PENDING state during a deployment, as
	// a percentage of the desired number of tasks (rounded down to the nearest
	// integer), and while any container instances are in the DRAINING state if
	// the service contains tasks using the EC2 launch type. This parameter enables
	// you to define the deployment batch size. For example, if your service has
	// a desired number of four tasks and a maximum percent value of 200%, the scheduler
	// may start four new tasks before stopping the four older tasks (provided that
	// the cluster resources required to do this are available). The default value
	// for maximum percent is 200%.
	//
	// If a service is using the blue/green (CODE_DEPLOY) or EXTERNAL deployment
	// types and tasks that use the EC2 launch type, the maximum percent value is
	// set to the default value and is used to define the upper limit on the number
	// of the tasks in the service that remain in the RUNNING state while the container
	// instances are in the DRAINING state. If the tasks in the service use the
	// Fargate launch type, the maximum percent value is not used, although it is
	// returned when describing your service.
	MaximumPercent?: null | int64 @go(,*int64)

	// If a service is using the rolling update (ECS) deployment type, the minimum
	// healthy percent represents a lower limit on the number of tasks in a service
	// that must remain in the RUNNING state during a deployment, as a percentage
	// of the desired number of tasks (rounded up to the nearest integer), and while
	// any container instances are in the DRAINING state if the service contains
	// tasks using the EC2 launch type. This parameter enables you to deploy without
	// using additional cluster capacity. For example, if your service has a desired
	// number of four tasks and a minimum healthy percent of 50%, the scheduler
	// may stop two existing tasks to free up cluster capacity before starting two
	// new tasks. Tasks for services that do not use a load balancer are considered
	// healthy if they are in the RUNNING state; tasks for services that do use
	// a load balancer are considered healthy if they are in the RUNNING state and
	// they are reported as healthy by the load balancer. The default value for
	// minimum healthy percent is 100%.
	//
	// If a service is using the blue/green (CODE_DEPLOY) or EXTERNAL deployment
	// types and tasks that use the EC2 launch type, the minimum healthy percent
	// value is set to the default value and is used to define the lower limit on
	// the number of the tasks in the service that remain in the RUNNING state while
	// the container instances are in the DRAINING state. If the tasks in the service
	// use the Fargate launch type, the minimum healthy percent value is not used,
	// although it is returned when describing your service.
	MinimumHealthyPercent?: null | int64 @go(,*int64)
}

// The deployment controller to use for the service. For more information, see
// Amazon ECS Deployment Types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html)
// in the Amazon Elastic Container Service Developer Guide.
#DeploymentController: {
	// The deployment controller type to use.
	//
	// There are three deployment controller types available:
	//
	// ECS
	//
	// The rolling update (ECS) deployment type involves replacing the current running
	// version of the container with the latest version. The number of containers
	// Amazon ECS adds or removes from the service during a rolling update is controlled
	// by adjusting the minimum and maximum number of healthy tasks allowed during
	// a service deployment, as specified in the DeploymentConfiguration.
	//
	// CODE_DEPLOY
	//
	// The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment
	// model powered by CodeDeploy, which allows you to verify a new deployment
	// of a service before sending production traffic to it.
	//
	// EXTERNAL
	//
	// The external (EXTERNAL) deployment type enables you to use any third-party
	// deployment controller for full control over the deployment process for an
	// Amazon ECS service.
	//
	// Type is a required field
	Type?: null | string @go(,*string)
}

#DeregisterContainerInstanceInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the container instance to deregister. If you do not specify a cluster, the
	// default cluster is assumed.
	Cluster?: null | string @go(,*string)

	// The container instance ID or full ARN of the container instance to deregister.
	// The ARN contains the arn:aws:ecs namespace, followed by the Region of the
	// container instance, the Amazon Web Services account ID of the container instance
	// owner, the container-instance namespace, and then the container instance
	// ID. For example, arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID.
	//
	// ContainerInstance is a required field
	ContainerInstance?: null | string @go(,*string)

	// Forces the deregistration of the container instance. If you have tasks running
	// on the container instance when you deregister it with the force option, these
	// tasks remain running until you terminate the instance or the tasks stop through
	// some other means, but they are orphaned (no longer monitored or accounted
	// for by Amazon ECS). If an orphaned task on your container instance is part
	// of an Amazon ECS service, then the service scheduler starts another copy
	// of that task, on a different container instance if possible.
	//
	// Any containers in orphaned service tasks that are registered with a Classic
	// Load Balancer or an Application Load Balancer target group are deregistered.
	// They begin connection draining according to the settings on the load balancer
	// or target group.
	Force?: null | bool @go(,*bool)
}

#DeregisterContainerInstanceOutput: {
	// The container instance that was deregistered.
	ContainerInstance?: null | #ContainerInstance @go(,*ContainerInstance)
}

#DeregisterTaskDefinitionInput: {
	// The family and revision (family:revision) or full Amazon Resource Name (ARN)
	// of the task definition to deregister. You must specify a revision.
	//
	// TaskDefinition is a required field
	TaskDefinition?: null | string @go(,*string)
}

#DeregisterTaskDefinitionOutput: {
	// The full description of the deregistered task.
	TaskDefinition?: null | #TaskDefinition @go(,*TaskDefinition)
}

#DescribeCapacityProvidersInput: {
	// The short name or full Amazon Resource Name (ARN) of one or more capacity
	// providers. Up to 100 capacity providers can be described in an action.
	CapacityProviders: [...null | string] @go(,[]*string)

	// Specifies whether or not you want to see the resource tags for the capacity
	// provider. If TAGS is specified, the tags are included in the response. If
	// this field is omitted, tags are not included in the response.
	Include: [...null | string] @go(,[]*string)

	// The maximum number of account setting results returned by DescribeCapacityProviders
	// in paginated output. When this parameter is used, DescribeCapacityProviders
	// only returns maxResults results in a single page along with a nextToken response
	// element. The remaining results of the initial request can be seen by sending
	// another DescribeCapacityProviders request with the returned nextToken value.
	// This value can be between 1 and 10. If this parameter is not used, then DescribeCapacityProviders
	// returns up to 10 results and a nextToken value if applicable.
	MaxResults?: null | int64 @go(,*int64)

	// The nextToken value returned from a previous paginated DescribeCapacityProviders
	// request where maxResults was used and the results exceeded the value of that
	// parameter. Pagination continues from the end of the previous results that
	// returned the nextToken value.
	//
	// This token should be treated as an opaque identifier that is only used to
	// retrieve the next items in a list and not for other programmatic purposes.
	NextToken?: null | string @go(,*string)
}

#DescribeCapacityProvidersOutput: {
	// The list of capacity providers.
	CapacityProviders: [...null | #CapacityProvider] @go(,[]*CapacityProvider)

	// Any failures associated with the call.
	Failures: [...null | #Failure] @go(,[]*Failure)

	// The nextToken value to include in a future DescribeCapacityProviders request.
	// When the results of a DescribeCapacityProviders request exceed maxResults,
	// this value can be used to retrieve the next page of results. This value is
	// null when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeClustersInput: {
	// A list of up to 100 cluster names or full cluster Amazon Resource Name (ARN)
	// entries. If you do not specify a cluster, the default cluster is assumed.
	Clusters: [...null | string] @go(,[]*string)

	// Whether to include additional information about the clusters in the response.
	// If this field is omitted, this information isn't included.
	//
	// If ATTACHMENTS is specified, the attachments for the container instances
	// or tasks within the cluster are included.
	//
	// If SETTINGS is specified, the settings for the cluster are included.
	//
	// If CONFIGURATIONS is specified, the configuration for the cluster is included.
	//
	// If STATISTICS is specified, the task and service count is included, separated
	// by launch type.
	//
	// If TAGS is specified, the metadata tags associated with the cluster are included.
	Include: [...null | string] @go(,[]*string)
}

#DescribeClustersOutput: {
	// The list of clusters.
	Clusters: [...null | #Cluster] @go(,[]*Cluster)

	// Any failures associated with the call.
	Failures: [...null | #Failure] @go(,[]*Failure)
}

#DescribeContainerInstancesInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the container instances to describe. If you do not specify a cluster, the
	// default cluster is assumed. This parameter is required if the container instance
	// or container instances you are describing were launched in any cluster other
	// than the default cluster.
	Cluster?: null | string @go(,*string)

	// A list of up to 100 container instance IDs or full Amazon Resource Name (ARN)
	// entries.
	//
	// ContainerInstances is a required field
	ContainerInstances: [...null | string] @go(,[]*string)

	// Specifies whether you want to see the resource tags for the container instance.
	// If TAGS is specified, the tags are included in the response. If this field
	// is omitted, tags are not included in the response.
	Include: [...null | string] @go(,[]*string)
}

#DescribeContainerInstancesOutput: {
	// The list of container instances.
	ContainerInstances: [...null | #ContainerInstance] @go(,[]*ContainerInstance)

	// Any failures associated with the call.
	Failures: [...null | #Failure] @go(,[]*Failure)
}

#DescribeServicesInput: {
	// The short name or full Amazon Resource Name (ARN)the cluster that hosts the
	// service to describe. If you do not specify a cluster, the default cluster
	// is assumed. This parameter is required if the service or services you are
	// describing were launched in any cluster other than the default cluster.
	Cluster?: null | string @go(,*string)

	// Specifies whether you want to see the resource tags for the service. If TAGS
	// is specified, the tags are included in the response. If this field is omitted,
	// tags are not included in the response.
	Include: [...null | string] @go(,[]*string)

	// A list of services to describe. You may specify up to 10 services to describe
	// in a single operation.
	//
	// Services is a required field
	Services: [...null | string] @go(,[]*string)
}

#DescribeServicesOutput: {
	// Any failures associated with the call.
	Failures: [...null | #Failure] @go(,[]*Failure)

	// The list of services described.
	Services: [...null | #Service] @go(,[]*Service)
}

#DescribeTaskDefinitionInput: {
	// Specifies whether to see the resource tags for the task definition. If TAGS
	// is specified, the tags are included in the response. If this field is omitted,
	// tags are not included in the response.
	Include: [...null | string] @go(,[]*string)

	// The family for the latest ACTIVE revision, family and revision (family:revision)
	// for a specific revision in the family, or full Amazon Resource Name (ARN)
	// of the task definition to describe.
	//
	// TaskDefinition is a required field
	TaskDefinition?: null | string @go(,*string)
}

#DescribeTaskDefinitionOutput: {
	// The metadata that is applied to the task definition to help you categorize
	// and organize them. Each tag consists of a key and an optional value, both
	// of which you define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The full task definition description.
	TaskDefinition?: null | #TaskDefinition @go(,*TaskDefinition)
}

#DescribeTaskSetsInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the service that the task sets exist in.
	//
	// Cluster is a required field
	Cluster?: null | string @go(,*string)

	// Specifies whether to see the resource tags for the task set. If TAGS is specified,
	// the tags are included in the response. If this field is omitted, tags are
	// not included in the response.
	Include: [...null | string] @go(,[]*string)

	// The short name or full Amazon Resource Name (ARN) of the service that the
	// task sets exist in.
	//
	// Service is a required field
	Service?: null | string @go(,*string)

	// The ID or full Amazon Resource Name (ARN) of task sets to describe.
	TaskSets: [...null | string] @go(,[]*string)
}

#DescribeTaskSetsOutput: {
	// Any failures associated with the call.
	Failures: [...null | #Failure] @go(,[]*Failure)

	// The list of task sets described.
	TaskSets: [...null | #TaskSet] @go(,[]*TaskSet)
}

#DescribeTasksInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the task or tasks to describe. If you do not specify a cluster, the default
	// cluster is assumed. This parameter is required if the task or tasks you are
	// describing were launched in any cluster other than the default cluster.
	Cluster?: null | string @go(,*string)

	// Specifies whether you want to see the resource tags for the task. If TAGS
	// is specified, the tags are included in the response. If this field is omitted,
	// tags are not included in the response.
	Include: [...null | string] @go(,[]*string)

	// A list of up to 100 task IDs or full ARN entries.
	//
	// Tasks is a required field
	Tasks: [...null | string] @go(,[]*string)
}

#DescribeTasksOutput: {
	// Any failures associated with the call.
	Failures: [...null | #Failure] @go(,[]*Failure)

	// The list of tasks.
	Tasks: [...null | #Task] @go(,[]*Task)
}

// An object representing a container instance host device.
#Device: {
	// The path inside the container at which to expose the host device.
	ContainerPath?: null | string @go(,*string)

	// The path for the device on the host container instance.
	//
	// HostPath is a required field
	HostPath?: null | string @go(,*string)

	// The explicit permissions to provide to the container for the device. By default,
	// the container has permissions for read, write, and mknod for the device.
	Permissions: [...null | string] @go(,[]*string)
}

#DiscoverPollEndpointInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster to which
	// the container instance belongs.
	Cluster?: null | string @go(,*string)

	// The container instance ID or full ARN of the container instance. The ARN
	// contains the arn:aws:ecs namespace, followed by the Region of the container
	// instance, the Amazon Web Services account ID of the container instance owner,
	// the container-instance namespace, and then the container instance ID. For
	// example, arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID.
	ContainerInstance?: null | string @go(,*string)
}

#DiscoverPollEndpointOutput: {
	// The endpoint for the Amazon ECS agent to poll.
	Endpoint?: null | string @go(,*string)

	// The telemetry endpoint for the Amazon ECS agent.
	TelemetryEndpoint?: null | string @go(,*string)
}

// This parameter is specified when you are using Docker volumes. Docker volumes
// are only supported when you are using the EC2 launch type. Windows containers
// only support the use of the local driver. To use bind mounts, specify a host
// instead.
#DockerVolumeConfiguration: {
	// If this value is true, the Docker volume is created if it does not already
	// exist.
	//
	// This field is only used if the scope is shared.
	Autoprovision?: null | bool @go(,*bool)

	// The Docker volume driver to use. The driver value must match the driver name
	// provided by Docker because it is used for task placement. If the driver was
	// installed using the Docker plugin CLI, use docker plugin ls to retrieve the
	// driver name from your container instance. If the driver was installed using
	// another method, use Docker plugin discovery to retrieve the driver name.
	// For more information, see Docker plugin discovery (https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery).
	// This parameter maps to Driver in the Create a volume (https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the xxdriver option to docker volume create (https://docs.docker.com/engine/reference/commandline/volume_create/).
	Driver?: null | string @go(,*string)

	// A map of Docker driver-specific options passed through. This parameter maps
	// to DriverOpts in the Create a volume (https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the xxopt option to docker volume create (https://docs.docker.com/engine/reference/commandline/volume_create/).
	DriverOpts: {[string]: null | string} @go(,map[string]*string)

	// Custom metadata to add to your Docker volume. This parameter maps to Labels
	// in the Create a volume (https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the xxlabel option to docker volume create (https://docs.docker.com/engine/reference/commandline/volume_create/).
	Labels: {[string]: null | string} @go(,map[string]*string)

	// The scope for the Docker volume that determines its lifecycle. Docker volumes
	// that are scoped to a task are automatically provisioned when the task starts
	// and destroyed when the task stops. Docker volumes that are scoped as shared
	// persist after the task stops.
	Scope?: null | string @go(,*string)
}

// The authorization configuration details for the Amazon EFS file system.
#EFSAuthorizationConfig: {
	// The Amazon EFS access point ID to use. If an access point is specified, the
	// root directory value specified in the EFSVolumeConfiguration must either
	// be omitted or set to / which will enforce the path set on the EFS access
	// point. If an access point is used, transit encryption must be enabled in
	// the EFSVolumeConfiguration. For more information, see Working with Amazon
	// EFS Access Points (https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html)
	// in the Amazon Elastic File System User Guide.
	AccessPointId?: null | string @go(,*string)

	// Whether or not to use the Amazon ECS task IAM role defined in a task definition
	// when mounting the Amazon EFS file system. If enabled, transit encryption
	// must be enabled in the EFSVolumeConfiguration. If this parameter is omitted,
	// the default value of DISABLED is used. For more information, see Using Amazon
	// EFS Access Points (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints)
	// in the Amazon Elastic Container Service Developer Guide.
	Iam?: null | string @go(,*string)
}

// This parameter is specified when you are using an Amazon Elastic File System
// file system for task storage. For more information, see Amazon EFS Volumes
// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html)
// in the Amazon Elastic Container Service Developer Guide.
#EFSVolumeConfiguration: {
	// The authorization configuration details for the Amazon EFS file system.
	AuthorizationConfig?: null | #EFSAuthorizationConfig @go(,*EFSAuthorizationConfig)

	// The Amazon EFS file system ID to use.
	//
	// FileSystemId is a required field
	FileSystemId?: null | string @go(,*string)

	// The directory within the Amazon EFS file system to mount as the root directory
	// inside the host. If this parameter is omitted, the root of the Amazon EFS
	// volume will be used. Specifying / will have the same effect as omitting this
	// parameter.
	//
	// If an EFS access point is specified in the authorizationConfig, the root
	// directory parameter must either be omitted or set to / which will enforce
	// the path set on the EFS access point.
	RootDirectory?: null | string @go(,*string)

	// Whether or not to enable encryption for Amazon EFS data in transit between
	// the Amazon ECS host and the Amazon EFS server. Transit encryption must be
	// enabled if Amazon EFS IAM authorization is used. If this parameter is omitted,
	// the default value of DISABLED is used. For more information, see Encrypting
	// Data in Transit (https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html)
	// in the Amazon Elastic File System User Guide.
	TransitEncryption?: null | string @go(,*string)

	// The port to use when sending encrypted data between the Amazon ECS host and
	// the Amazon EFS server. If you do not specify a transit encryption port, it
	// will use the port selection strategy that the Amazon EFS mount helper uses.
	// For more information, see EFS Mount Helper (https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html)
	// in the Amazon Elastic File System User Guide.
	TransitEncryptionPort?: null | int64 @go(,*int64)
}

// A list of files containing the environment variables to pass to a container.
// You can specify up to ten environment files. The file must have a .env file
// extension. Each line in an environment file should contain an environment
// variable in VARIABLE=VALUE format. Lines beginning with # are treated as
// comments and are ignored. For more information on the environment variable
// file syntax, see Declare default environment variables in file (https://docs.docker.com/compose/env-file/).
//
// If there are environment variables specified using the environment parameter
// in a container definition, they take precedence over the variables contained
// within an environment file. If multiple environment files are specified that
// contain the same variable, they are processed from the top down. It is recommended
// to use unique variable names. For more information, see Specifying environment
// variables (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html)
// in the Amazon Elastic Container Service Developer Guide.
//
// This field is only valid for containers in Fargate tasks that use platform
// version 1.4.0 or later.
#EnvironmentFile: {
	// The file type to use. The only supported value is s3.
	//
	// Type is a required field
	Type?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment
	// variable file.
	//
	// Value is a required field
	Value?: null | string @go(,*string)
}

// The amount of ephemeral storage to allocate for the task. This parameter
// is used to expand the total amount of ephemeral storage available, beyond
// the default amount, for tasks hosted on Fargate. For more information, see
// Fargate task storage (https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html)
// in the Amazon ECS User Guide for Fargate.
//
// This parameter is only supported for tasks hosted on Fargate using platform
// version 1.4.0 or later.
#EphemeralStorage: {
	// The total amount, in GiB, of ephemeral storage to set for the task. The minimum
	// supported value is 21 GiB and the maximum supported value is 200 GiB.
	//
	// SizeInGiB is a required field
	SizeInGiB?: null | int64 @go(,*int64)
}

// The details of the execute command configuration.
#ExecuteCommandConfiguration: {
	// Specify an Key Management Service key ID to encrypt the data between the
	// local client and the container.
	KmsKeyId?: null | string @go(,*string)

	// The log configuration for the results of the execute command actions. The
	// logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When logging=OVERRIDE
	// is specified, a logConfiguration must be provided.
	LogConfiguration?: null | #ExecuteCommandLogConfiguration @go(,*ExecuteCommandLogConfiguration)

	// The log setting to use for redirecting logs for your execute command results.
	// The following log settings are available.
	//
	//    * NONE: The execute command session is not logged.
	//
	//    * DEFAULT: The awslogs configuration in the task definition is used. If
	//    no logging parameter is specified, it defaults to this value. If no awslogs
	//    log driver is configured in the task definition, the output won't be logged.
	//
	//    * OVERRIDE: Specify the logging details as a part of logConfiguration.
	//    If the OVERRIDE logging option is specified, the logConfiguration is required.
	Logging?: null | string @go(,*string)
}

#ExecuteCommandInput: {
	// The Amazon Resource Name (ARN) or short name of the cluster the task is running
	// in. If you do not specify a cluster, the default cluster is assumed.
	Cluster?: null | string @go(,*string)

	// The command to run on the container.
	//
	// Command is a required field
	Command?: null | string @go(,*string)

	// The name of the container to execute the command on. A container name only
	// needs to be specified for tasks containing multiple containers.
	Container?: null | string @go(,*string)

	// Use this flag to run your command in interactive mode.
	//
	// Interactive is a required field
	Interactive?: null | bool @go(,*bool)

	// The Amazon Resource Name (ARN) or ID of the task the container is part of.
	//
	// Task is a required field
	Task?: null | string @go(,*string)
}

// The log configuration for the results of the execute command actions. The
// logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
#ExecuteCommandLogConfiguration: {
	// Whether or not to enable encryption on the CloudWatch logs. If not specified,
	// encryption will be disabled.
	CloudWatchEncryptionEnabled?: null | bool @go(,*bool)

	// The name of the CloudWatch log group to send logs to.
	//
	// The CloudWatch log group must already be created.
	CloudWatchLogGroupName?: null | string @go(,*string)

	// The name of the S3 bucket to send logs to.
	//
	// The S3 bucket must already be created.
	S3BucketName?: null | string @go(,*string)

	// Whether or not to enable encryption on the CloudWatch logs. If not specified,
	// encryption will be disabled.
	S3EncryptionEnabled?: null | bool @go(,*bool)

	// An optional folder in the S3 bucket to place logs in.
	S3KeyPrefix?: null | string @go(,*string)
}

#ExecuteCommandOutput: {
	// The Amazon Resource Name (ARN) of the cluster.
	ClusterArn?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the container.
	ContainerArn?: null | string @go(,*string)

	// The name of the container.
	ContainerName?: null | string @go(,*string)

	// Whether or not the execute command session is running in interactive mode.
	// Amazon ECS only supports initiating interactive sessions, so you must specify
	// true for this value.
	Interactive?: null | bool @go(,*bool)

	// The details of the SSM session that was created for this instance of execute-command.
	Session?: null | #Session @go(,*Session)

	// The Amazon Resource Name (ARN) of the task.
	TaskArn?: null | string @go(,*string)
}

// The authorization configuration details for Amazon FSx for Windows File Server
// file system. See FSxWindowsFileServerVolumeConfiguration (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_FSxWindowsFileServerVolumeConfiguration.html)
// in the Amazon Elastic Container Service API Reference.
//
// For more information and the input format, see Amazon FSx for Windows File
// Server Volumes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html)
// in the Amazon Elastic Container Service Developer Guide.
#FSxWindowsFileServerAuthorizationConfig: {
	// The authorization credential option to use. The authorization credential
	// options can be provided using either the Amazon Resource Name (ARN) of an
	// Secrets Manager secret or SSM Parameter Store parameter. The ARNs refer to
	// the stored credentials.
	//
	// CredentialsParameter is a required field
	CredentialsParameter?: null | string @go(,*string)

	// A fully qualified domain name hosted by an Directory Service (https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html)
	// Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
	//
	// Domain is a required field
	Domain?: null | string @go(,*string)
}

// This parameter is specified when you are using Amazon FSx for Windows File
// Server (https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html)
// file system for task storage.
//
// For more information and the input format, see Amazon FSx for Windows File
// Server Volumes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html)
// in the Amazon Elastic Container Service Developer Guide.
#FSxWindowsFileServerVolumeConfiguration: {
	// The authorization configuration details for the Amazon FSx for Windows File
	// Server file system.
	//
	// AuthorizationConfig is a required field
	AuthorizationConfig?: null | #FSxWindowsFileServerAuthorizationConfig @go(,*FSxWindowsFileServerAuthorizationConfig)

	// The Amazon FSx for Windows File Server file system ID to use.
	//
	// FileSystemId is a required field
	FileSystemId?: null | string @go(,*string)

	// The directory within the Amazon FSx for Windows File Server file system to
	// mount as the root directory inside the host.
	//
	// RootDirectory is a required field
	RootDirectory?: null | string @go(,*string)
}

// A failed resource. For a list of common causes, see API failure reasons (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html)
// in the Amazon Elastic Container Service Developer Guide.
#Failure: {
	// The Amazon Resource Name (ARN) of the failed resource.
	Arn?: null | string @go(,*string)

	// The details of the failure.
	Detail?: null | string @go(,*string)

	// The reason for the failure.
	Reason?: null | string @go(,*string)
}

// The FireLens configuration for the container. This is used to specify and
// configure a log router for container logs. For more information, see Custom
// Log Routing (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
// in the Amazon Elastic Container Service Developer Guide.
#FirelensConfiguration: {
	// The options to use when configuring the log router. This field is optional
	// and can be used to specify a custom configuration file or to add additional
	// metadata, such as the task, task definition, cluster, and container instance
	// details to the log event. If specified, the syntax to use is "options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}.
	// For more information, see Creating a Task Definition that Uses a FireLens
	// Configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html#firelens-taskdef)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// Tasks hosted on Fargate only support the file configuration file type.
	Options: {[string]: null | string} @go(,map[string]*string)

	// The log router to use. The valid values are fluentd or fluentbit.
	//
	// Type is a required field
	Type?: null | string @go(,*string)
}

// An object representing a container health check. Health check parameters
// that are specified in a container definition override any Docker health checks
// that exist in the container image (such as those specified in a parent image
// or from the image's Dockerfile).
//
// You can view the health status of both individual containers and a task with
// the DescribeTasks API operation or when viewing the task details in the console.
//
// The following describes the possible healthStatus values for a container:
//
//    * HEALTHY-The container health check has passed successfully.
//
//    * UNHEALTHY-The container health check has failed.
//
//    * UNKNOWN-The container health check is being evaluated or there is no
//    container health check defined.
//
// The following describes the possible healthStatus values for a task. The
// container health check status of nonessential containers do not have an effect
// on the health status of a task.
//
//    * HEALTHY-All essential containers within the task have passed their health
//    checks.
//
//    * UNHEALTHY-One or more essential containers have failed their health
//    check.
//
//    * UNKNOWN-The essential containers within the task are still having their
//    health checks evaluated or there are no container health checks defined.
//
// If a task is run manually, and not as part of a service, the task will continue
// its lifecycle regardless of its health status. For tasks that are part of
// a service, if the task reports as unhealthy then the task will be stopped
// and the service scheduler will replace it.
//
// The following are notes about container health check support:
//
//    * Container health checks require version 1.17.0 or greater of the Amazon
//    ECS container agent. For more information, see Updating the Amazon ECS
//    Container Agent (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).
//
//    * Container health checks are supported for Fargate tasks if you are using
//    platform version 1.1.0 or greater. For more information, see Fargate Platform
//    Versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
//
//    * Container health checks are not supported for tasks that are part of
//    a service that is configured to use a Classic Load Balancer.
#HealthCheck: {
	// A string array representing the command that the container runs to determine
	// if it is healthy. The string array must start with CMD to execute the command
	// arguments directly, or CMD-SHELL to run the command with the container's
	// default shell.
	//
	// When you use the Amazon Web Services Management Console JSON panel, the Command
	// Line Interface, or the APIs, you should enclose the list of commands in brackets,
	// as shown below.
	//
	// [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
	//
	// You do not need to include the brackets when you use the Amazon Web Services
	// Management Consoleas shown below.
	//
	// "CMD-SHELL", "curl -f http://localhost/ || exit 1"
	//
	// An exit code of 0 indicates success, and non-zero exit code indicates failure.
	// For more information, see HealthCheck in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/).
	//
	// Command is a required field
	Command: [...null | string] @go(,[]*string)

	// The time period in seconds between each health check execution. You may specify
	// between 5 and 300 seconds. The default value is 30 seconds.
	Interval?: null | int64 @go(,*int64)

	// The number of times to retry a failed health check before the container is
	// considered unhealthy. You may specify between 1 and 10 retries. The default
	// value is 3.
	Retries?: null | int64 @go(,*int64)

	// The optional grace period within which to provide containers time to bootstrap
	// before failed health checks count towards the maximum number of retries.
	// You may specify between 0 and 300 seconds. The startPeriod is disabled by
	// default.
	//
	// If a health check succeeds within the startPeriod, then the container is
	// considered healthy and any subsequent failures count toward the maximum number
	// of retries.
	StartPeriod?: null | int64 @go(,*int64)

	// The time period in seconds to wait for a health check to succeed before it
	// is considered a failure. You may specify between 2 and 60 seconds. The default
	// value is 5.
	Timeout?: null | int64 @go(,*int64)
}

// Hostnames and IP address entries that are added to the /etc/hosts file of
// a container via the extraHosts parameter of its ContainerDefinition.
#HostEntry: {
	// The hostname to use in the /etc/hosts entry.
	//
	// Hostname is a required field
	Hostname?: null | string @go(,*string)

	// The IP address to use in the /etc/hosts entry.
	//
	// IpAddress is a required field
	IpAddress?: null | string @go(,*string)
}

// Details on a container instance bind mount host volume.
#HostVolumeProperties: {
	// When the host parameter is used, specify a sourcePath to declare the path
	// on the host container instance that is presented to the container. If this
	// parameter is empty, then the Docker daemon has assigned a host path for you.
	// If the host parameter contains a sourcePath file location, then the data
	// volume persists at the specified location on the host container instance
	// until you delete it manually. If the sourcePath value does not exist on the
	// host container instance, the Docker daemon creates it. If the location does
	// exist, the contents of the source path folder are exported.
	//
	// If you are using the Fargate launch type, the sourcePath parameter is not
	// supported.
	SourcePath?: null | string @go(,*string)
}

// Details on a Elastic Inference accelerator. For more information, see Working
// with Amazon Elastic Inference on Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html)
// in the Amazon Elastic Container Service Developer Guide.
#InferenceAccelerator: {
	// The Elastic Inference accelerator device name. The deviceName must also be
	// referenced in a container definition as a ResourceRequirement.
	//
	// DeviceName is a required field
	DeviceName?: null | string @go(,*string)

	// The Elastic Inference accelerator type to use.
	//
	// DeviceType is a required field
	DeviceType?: null | string @go(,*string)
}

// Details on an Elastic Inference accelerator task override. This parameter
// is used to override the Elastic Inference accelerator specified in the task
// definition. For more information, see Working with Amazon Elastic Inference
// on Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html)
// in the Amazon Elastic Container Service Developer Guide.
#InferenceAcceleratorOverride: {
	// The Elastic Inference accelerator device name to override for the task. This
	// parameter must match a deviceName specified in the task definition.
	DeviceName?: null | string @go(,*string)

	// The Elastic Inference accelerator type to use.
	DeviceType?: null | string @go(,*string)
}

// The specified parameter is invalid. Review the available parameters for the
// API request.
#InvalidParameterException: {
	Message_?: null | string @go(,*string)
}

// The Linux capabilities for the container that are added to or dropped from
// the default configuration provided by Docker. For more information on the
// default capabilities and the non-default available capabilities, see Runtime
// privilege and Linux capabilities (https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities)
// in the Docker run reference. For more detailed information on these Linux
// capabilities, see the capabilities(7) (http://man7.org/linux/man-pages/man7/capabilities.7.html)
// Linux manual page.
#KernelCapabilities: {
	// The Linux capabilities for the container that have been added to the default
	// configuration provided by Docker. This parameter maps to CapAdd in the Create
	// a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --cap-add option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// Tasks launched on Fargate only support adding the SYS_PTRACE kernel capability.
	//
	// Valid values: "ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" |
	// "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK"
	// | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE"
	// | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW"
	// | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
	// | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" |
	// "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" |
	// "WAKE_ALARM"
	Add: [...null | string] @go(,[]*string)

	// The Linux capabilities for the container that have been removed from the
	// default configuration provided by Docker. This parameter maps to CapDrop
	// in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --cap-drop option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// Valid values: "ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" |
	// "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK"
	// | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE"
	// | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW"
	// | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
	// | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" |
	// "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" |
	// "WAKE_ALARM"
	Drop: [...null | string] @go(,[]*string)
}

// A key-value pair object.
#KeyValuePair: {
	// The name of the key-value pair. For environment variables, this is the name
	// of the environment variable.
	Name?: null | string @go(,*string)

	// The value of the key-value pair. For environment variables, this is the value
	// of the environment variable.
	Value?: null | string @go(,*string)
}

// The limit for the resource has been exceeded.
#LimitExceededException: {
	Message_?: null | string @go(,*string)
}

// Linux-specific options that are applied to the container, such as Linux KernelCapabilities.
#LinuxParameters: {
	// The Linux capabilities for the container that are added to or dropped from
	// the default configuration provided by Docker.
	//
	// For tasks that use the Fargate launch type, capabilities is supported for
	// all platform versions but the add parameter is only supported if using platform
	// version 1.4.0 or later.
	Capabilities?: null | #KernelCapabilities @go(,*KernelCapabilities)

	// Any host devices to expose to the container. This parameter maps to Devices
	// in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
	// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
	// and the --device option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// If you are using tasks that use the Fargate launch type, the devices parameter
	// is not supported.
	Devices: [...null | #Device] @go(,[]*Device)

	// Run an init process inside the container that forwards signals and reaps
	// processes. This parameter maps to the --init option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	// This parameter requires version 1.25 of the Docker Remote API or greater
	// on your container instance. To check the Docker Remote API version on your
	// container instance, log in to your container instance and run the following
	// command: sudo docker version --format '{{.Server.APIVersion}}'
	InitProcessEnabled?: null | bool @go(,*bool)

	// The total amount of swap memory (in MiB) a container can use. This parameter
	// will be translated to the --memory-swap option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration)
	// where the value would be the sum of the container memory plus the maxSwap
	// value.
	//
	// If a maxSwap value of 0 is specified, the container will not use swap. Accepted
	// values are 0 or any positive integer. If the maxSwap parameter is omitted,
	// the container will use the swap configuration for the container instance
	// it is running on. A maxSwap value must be set for the swappiness parameter
	// to be used.
	//
	// If you are using tasks that use the Fargate launch type, the maxSwap parameter
	// is not supported.
	MaxSwap?: null | int64 @go(,*int64)

	// The value for the size (in MiB) of the /dev/shm volume. This parameter maps
	// to the --shm-size option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// If you are using tasks that use the Fargate launch type, the sharedMemorySize
	// parameter is not supported.
	SharedMemorySize?: null | int64 @go(,*int64)

	// This allows you to tune a container's memory swappiness behavior. A swappiness
	// value of 0 will cause swapping to not happen unless absolutely necessary.
	// A swappiness value of 100 will cause pages to be swapped very aggressively.
	// Accepted values are whole numbers between 0 and 100. If the swappiness parameter
	// is not specified, a default value of 60 is used. If a value is not specified
	// for maxSwap then this parameter is ignored. This parameter maps to the --memory-swappiness
	// option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// If you are using tasks that use the Fargate launch type, the swappiness parameter
	// is not supported.
	Swappiness?: null | int64 @go(,*int64)

	// The container path, mount options, and size (in MiB) of the tmpfs mount.
	// This parameter maps to the --tmpfs option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
	//
	// If you are using tasks that use the Fargate launch type, the tmpfs parameter
	// is not supported.
	Tmpfs: [...null | #Tmpfs] @go(,[]*Tmpfs)
}

#ListAccountSettingsInput: {
	// Specifies whether to return the effective settings. If true, the account
	// settings for the root user or the default setting for the principalArn are
	// returned. If false, the account settings for the principalArn are returned
	// if they are set. Otherwise, no account settings are returned.
	EffectiveSettings?: null | bool @go(,*bool)

	// The maximum number of account setting results returned by ListAccountSettings
	// in paginated output. When this parameter is used, ListAccountSettings only
	// returns maxResults results in a single page along with a nextToken response
	// element. The remaining results of the initial request can be seen by sending
	// another ListAccountSettings request with the returned nextToken value. This
	// value can be between 1 and 10. If this parameter is not used, then ListAccountSettings
	// returns up to 10 results and a nextToken value if applicable.
	MaxResults?: null | int64 @go(,*int64)

	// The name of the account setting you want to list the settings for.
	Name?: null | string @go(,*string)

	// The nextToken value returned from a ListAccountSettings request indicating
	// that more results are available to fulfill the request and further calls
	// will be needed. If maxResults was provided, it is possible the number of
	// results to be fewer than maxResults.
	//
	// This token should be treated as an opaque identifier that is only used to
	// retrieve the next items in a list and not for other programmatic purposes.
	NextToken?: null | string @go(,*string)

	// The ARN of the principal, which can be an IAM user, IAM role, or the root
	// user. If this field is omitted, the account settings are listed only for
	// the authenticated user.
	//
	// Federated users assume the account setting of the root user and can't have
	// explicit account settings set for them.
	PrincipalArn?: null | string @go(,*string)

	// The value of the account settings with which to filter results. You must
	// also specify an account setting name to use this parameter.
	Value?: null | string @go(,*string)
}

#ListAccountSettingsOutput: {
	// The nextToken value to include in a future ListAccountSettings request. When
	// the results of a ListAccountSettings request exceed maxResults, this value
	// can be used to retrieve the next page of results. This value is null when
	// there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The account settings for the resource.
	Settings: [...null | #Setting] @go(,[]*Setting)
}

#ListAttributesInput: {
	// The name of the attribute with which to filter the results.
	AttributeName?: null | string @go(,*string)

	// The value of the attribute with which to filter results. You must also specify
	// an attribute name to use this parameter.
	AttributeValue?: null | string @go(,*string)

	// The short name or full Amazon Resource Name (ARN) of the cluster to list
	// attributes. If you do not specify a cluster, the default cluster is assumed.
	Cluster?: null | string @go(,*string)

	// The maximum number of cluster results returned by ListAttributes in paginated
	// output. When this parameter is used, ListAttributes only returns maxResults
	// results in a single page along with a nextToken response element. The remaining
	// results of the initial request can be seen by sending another ListAttributes
	// request with the returned nextToken value. This value can be between 1 and
	// 100. If this parameter is not used, then ListAttributes returns up to 100
	// results and a nextToken value if applicable.
	MaxResults?: null | int64 @go(,*int64)

	// The nextToken value returned from a ListAttributes request indicating that
	// more results are available to fulfill the request and further calls will
	// be needed. If maxResults was provided, it is possible the number of results
	// to be fewer than maxResults.
	//
	// This token should be treated as an opaque identifier that is only used to
	// retrieve the next items in a list and not for other programmatic purposes.
	NextToken?: null | string @go(,*string)

	// The type of the target with which to list attributes.
	//
	// TargetType is a required field
	TargetType?: null | string @go(,*string)
}

#ListAttributesOutput: {
	// A list of attribute objects that meet the criteria of the request.
	Attributes: [...null | #Attribute] @go(,[]*Attribute)

	// The nextToken value to include in a future ListAttributes request. When the
	// results of a ListAttributes request exceed maxResults, this value can be
	// used to retrieve the next page of results. This value is null when there
	// are no more results to return.
	NextToken?: null | string @go(,*string)
}

#ListClustersInput: {
	// The maximum number of cluster results returned by ListClusters in paginated
	// output. When this parameter is used, ListClusters only returns maxResults
	// results in a single page along with a nextToken response element. The remaining
	// results of the initial request can be seen by sending another ListClusters
	// request with the returned nextToken value. This value can be between 1 and
	// 100. If this parameter is not used, then ListClusters returns up to 100 results
	// and a nextToken value if applicable.
	MaxResults?: null | int64 @go(,*int64)

	// The nextToken value returned from a ListClusters request indicating that
	// more results are available to fulfill the request and further calls will
	// be needed. If maxResults was provided, it is possible the number of results
	// to be fewer than maxResults.
	//
	// This token should be treated as an opaque identifier that is only used to
	// retrieve the next items in a list and not for other programmatic purposes.
	NextToken?: null | string @go(,*string)
}

#ListClustersOutput: {
	// The list of full Amazon Resource Name (ARN) entries for each cluster associated
	// with your account.
	ClusterArns: [...null | string] @go(,[]*string)

	// The nextToken value to include in a future ListClusters request. When the
	// results of a ListClusters request exceed maxResults, this value can be used
	// to retrieve the next page of results. This value is null when there are no
	// more results to return.
	NextToken?: null | string @go(,*string)
}

#ListContainerInstancesInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the container instances to list. If you do not specify a cluster, the default
	// cluster is assumed.
	Cluster?: null | string @go(,*string)

	// You can filter the results of a ListContainerInstances operation with cluster
	// query language statements. For more information, see Cluster Query Language
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html)
	// in the Amazon Elastic Container Service Developer Guide.
	Filter?: null | string @go(,*string)

	// The maximum number of container instance results returned by ListContainerInstances
	// in paginated output. When this parameter is used, ListContainerInstances
	// only returns maxResults results in a single page along with a nextToken response
	// element. The remaining results of the initial request can be seen by sending
	// another ListContainerInstances request with the returned nextToken value.
	// This value can be between 1 and 100. If this parameter is not used, then
	// ListContainerInstances returns up to 100 results and a nextToken value if
	// applicable.
	MaxResults?: null | int64 @go(,*int64)

	// The nextToken value returned from a ListContainerInstances request indicating
	// that more results are available to fulfill the request and further calls
	// will be needed. If maxResults was provided, it is possible the number of
	// results to be fewer than maxResults.
	//
	// This token should be treated as an opaque identifier that is only used to
	// retrieve the next items in a list and not for other programmatic purposes.
	NextToken?: null | string @go(,*string)

	// Filters the container instances by status. For example, if you specify the
	// DRAINING status, the results include only container instances that have been
	// set to DRAINING using UpdateContainerInstancesState. If you do not specify
	// this parameter, the default is to include container instances set to all
	// states other than INACTIVE.
	Status?: null | string @go(,*string)
}

#ListContainerInstancesOutput: {
	// The list of container instances with full ARN entries for each container
	// instance associated with the specified cluster.
	ContainerInstanceArns: [...null | string] @go(,[]*string)

	// The nextToken value to include in a future ListContainerInstances request.
	// When the results of a ListContainerInstances request exceed maxResults, this
	// value can be used to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#ListServicesInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster to use when
	// filtering the ListServices results. If you do not specify a cluster, the
	// default cluster is assumed.
	Cluster?: null | string @go(,*string)

	// The launch type to use when filtering the ListServices results.
	LaunchType?: null | string @go(,*string)

	// The maximum number of service results returned by ListServices in paginated
	// output. When this parameter is used, ListServices only returns maxResults
	// results in a single page along with a nextToken response element. The remaining
	// results of the initial request can be seen by sending another ListServices
	// request with the returned nextToken value. This value can be between 1 and
	// 100. If this parameter is not used, then ListServices returns up to 10 results
	// and a nextToken value if applicable.
	MaxResults?: null | int64 @go(,*int64)

	// The nextToken value returned from a ListServices request indicating that
	// more results are available to fulfill the request and further calls will
	// be needed. If maxResults was provided, it is possible the number of results
	// to be fewer than maxResults.
	//
	// This token should be treated as an opaque identifier that is only used to
	// retrieve the next items in a list and not for other programmatic purposes.
	NextToken?: null | string @go(,*string)

	// The scheduling strategy to use when filtering the ListServices results.
	SchedulingStrategy?: null | string @go(,*string)
}

#ListServicesOutput: {
	// The nextToken value to include in a future ListServices request. When the
	// results of a ListServices request exceed maxResults, this value can be used
	// to retrieve the next page of results. This value is null when there are no
	// more results to return.
	NextToken?: null | string @go(,*string)

	// The list of full ARN entries for each service associated with the specified
	// cluster.
	ServiceArns: [...null | string] @go(,[]*string)
}

#ListTagsForResourceInput: {
	// The Amazon Resource Name (ARN) that identifies the resource for which to
	// list the tags. Currently, the supported resources are Amazon ECS tasks, services,
	// task definitions, clusters, and container instances.
	//
	// ResourceArn is a required field
	ResourceArn?: null | string @go(,*string)
}

#ListTagsForResourceOutput: {
	// The tags for the resource.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#ListTaskDefinitionFamiliesInput: {
	// The familyPrefix is a string that is used to filter the results of ListTaskDefinitionFamilies.
	// If you specify a familyPrefix, only task definition family names that begin
	// with the familyPrefix string are returned.
	FamilyPrefix?: null | string @go(,*string)

	// The maximum number of task definition family results returned by ListTaskDefinitionFamilies
	// in paginated output. When this parameter is used, ListTaskDefinitions only
	// returns maxResults results in a single page along with a nextToken response
	// element. The remaining results of the initial request can be seen by sending
	// another ListTaskDefinitionFamilies request with the returned nextToken value.
	// This value can be between 1 and 100. If this parameter is not used, then
	// ListTaskDefinitionFamilies returns up to 100 results and a nextToken value
	// if applicable.
	MaxResults?: null | int64 @go(,*int64)

	// The nextToken value returned from a ListTaskDefinitionFamilies request indicating
	// that more results are available to fulfill the request and further calls
	// will be needed. If maxResults was provided, it is possible the number of
	// results to be fewer than maxResults.
	//
	// This token should be treated as an opaque identifier that is only used to
	// retrieve the next items in a list and not for other programmatic purposes.
	NextToken?: null | string @go(,*string)

	// The task definition family status with which to filter the ListTaskDefinitionFamilies
	// results. By default, both ACTIVE and INACTIVE task definition families are
	// listed. If this parameter is set to ACTIVE, only task definition families
	// that have an ACTIVE task definition revision are returned. If this parameter
	// is set to INACTIVE, only task definition families that do not have any ACTIVE
	// task definition revisions are returned. If you paginate the resulting output,
	// be sure to keep the status value constant in each subsequent request.
	Status?: null | string @go(,*string)
}

#ListTaskDefinitionFamiliesOutput: {
	// The list of task definition family names that match the ListTaskDefinitionFamilies
	// request.
	Families: [...null | string] @go(,[]*string)

	// The nextToken value to include in a future ListTaskDefinitionFamilies request.
	// When the results of a ListTaskDefinitionFamilies request exceed maxResults,
	// this value can be used to retrieve the next page of results. This value is
	// null when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#ListTaskDefinitionsInput: {
	// The full family name with which to filter the ListTaskDefinitions results.
	// Specifying a familyPrefix limits the listed task definitions to task definition
	// revisions that belong to that family.
	FamilyPrefix?: null | string @go(,*string)

	// The maximum number of task definition results returned by ListTaskDefinitions
	// in paginated output. When this parameter is used, ListTaskDefinitions only
	// returns maxResults results in a single page along with a nextToken response
	// element. The remaining results of the initial request can be seen by sending
	// another ListTaskDefinitions request with the returned nextToken value. This
	// value can be between 1 and 100. If this parameter is not used, then ListTaskDefinitions
	// returns up to 100 results and a nextToken value if applicable.
	MaxResults?: null | int64 @go(,*int64)

	// The nextToken value returned from a ListTaskDefinitions request indicating
	// that more results are available to fulfill the request and further calls
	// will be needed. If maxResults was provided, it is possible the number of
	// results to be fewer than maxResults.
	//
	// This token should be treated as an opaque identifier that is only used to
	// retrieve the next items in a list and not for other programmatic purposes.
	NextToken?: null | string @go(,*string)

	// The order in which to sort the results. Valid values are ASC and DESC. By
	// default (ASC), task definitions are listed lexicographically by family name
	// and in ascending numerical order by revision so that the newest task definitions
	// in a family are listed last. Setting this parameter to DESC reverses the
	// sort order on family name and revision so that the newest task definitions
	// in a family are listed first.
	Sort?: null | string @go(,*string)

	// The task definition status with which to filter the ListTaskDefinitions results.
	// By default, only ACTIVE task definitions are listed. By setting this parameter
	// to INACTIVE, you can view task definitions that are INACTIVE as long as an
	// active task or service still references them. If you paginate the resulting
	// output, be sure to keep the status value constant in each subsequent request.
	Status?: null | string @go(,*string)
}

#ListTaskDefinitionsOutput: {
	// The nextToken value to include in a future ListTaskDefinitions request. When
	// the results of a ListTaskDefinitions request exceed maxResults, this value
	// can be used to retrieve the next page of results. This value is null when
	// there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The list of task definition Amazon Resource Name (ARN) entries for the ListTaskDefinitions
	// request.
	TaskDefinitionArns: [...null | string] @go(,[]*string)
}

#ListTasksInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster to use when
	// filtering the ListTasks results. If you do not specify a cluster, the default
	// cluster is assumed.
	Cluster?: null | string @go(,*string)

	// The container instance ID or full ARN of the container instance to use when
	// filtering the ListTasks results. Specifying a containerInstance limits the
	// results to tasks that belong to that container instance.
	ContainerInstance?: null | string @go(,*string)

	// The task desired status to use when filtering the ListTasks results. Specifying
	// a desiredStatus of STOPPED limits the results to tasks that Amazon ECS has
	// set the desired status to STOPPED. This can be useful for debugging tasks
	// that are not starting properly or have died or finished. The default status
	// filter is RUNNING, which shows tasks that Amazon ECS has set the desired
	// status to RUNNING.
	//
	// Although you can filter results based on a desired status of PENDING, this
	// does not return any results. Amazon ECS never sets the desired status of
	// a task to that value (only a task's lastStatus may have a value of PENDING).
	DesiredStatus?: null | string @go(,*string)

	// The name of the task definition family to use when filtering the ListTasks
	// results. Specifying a family limits the results to tasks that belong to that
	// family.
	Family?: null | string @go(,*string)

	// The launch type to use when filtering the ListTasks results.
	LaunchType?: null | string @go(,*string)

	// The maximum number of task results returned by ListTasks in paginated output.
	// When this parameter is used, ListTasks only returns maxResults results in
	// a single page along with a nextToken response element. The remaining results
	// of the initial request can be seen by sending another ListTasks request with
	// the returned nextToken value. This value can be between 1 and 100. If this
	// parameter is not used, then ListTasks returns up to 100 results and a nextToken
	// value if applicable.
	MaxResults?: null | int64 @go(,*int64)

	// The nextToken value returned from a ListTasks request indicating that more
	// results are available to fulfill the request and further calls will be needed.
	// If maxResults was provided, it is possible the number of results to be fewer
	// than maxResults.
	//
	// This token should be treated as an opaque identifier that is only used to
	// retrieve the next items in a list and not for other programmatic purposes.
	NextToken?: null | string @go(,*string)

	// The name of the service to use when filtering the ListTasks results. Specifying
	// a serviceName limits the results to tasks that belong to that service.
	ServiceName?: null | string @go(,*string)

	// The startedBy value with which to filter the task results. Specifying a startedBy
	// value limits the results to tasks that were started with that value.
	StartedBy?: null | string @go(,*string)
}

#ListTasksOutput: {
	// The nextToken value to include in a future ListTasks request. When the results
	// of a ListTasks request exceed maxResults, this value can be used to retrieve
	// the next page of results. This value is null when there are no more results
	// to return.
	NextToken?: null | string @go(,*string)

	// The list of task ARN entries for the ListTasks request.
	TaskArns: [...null | string] @go(,[]*string)
}

// The load balancer configuration to use with a service or task set.
//
// For specific notes and restrictions regarding the use of load balancers with
// services and task sets, see the CreateService and CreateTaskSet actions.
#LoadBalancer: {
	// The name of the container (as it appears in a container definition) to associate
	// with the load balancer.
	ContainerName?: null | string @go(,*string)

	// The port on the container to associate with the load balancer. This port
	// must correspond to a containerPort in the task definition the tasks in the
	// service are using. For tasks that use the EC2 launch type, the container
	// instance they are launched on must allow ingress traffic on the hostPort
	// of the port mapping.
	ContainerPort?: null | int64 @go(,*int64)

	// The name of the load balancer to associate with the Amazon ECS service or
	// task set.
	//
	// A load balancer name is only specified when using a Classic Load Balancer.
	// If you are using an Application Load Balancer or a Network Load Balancer
	// the load balancer name parameter should be omitted.
	LoadBalancerName?: null | string @go(,*string)

	// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target
	// group or groups associated with a service or task set.
	//
	// A target group ARN is only specified when using an Application Load Balancer
	// or Network Load Balancer. If you are using a Classic Load Balancer the target
	// group ARN should be omitted.
	//
	// For services using the ECS deployment controller, you can specify one or
	// multiple target groups. For more information, see Registering Multiple Target
	// Groups with a Service (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// For services using the CODE_DEPLOY deployment controller, you are required
	// to define two target groups for the load balancer. For more information,
	// see Blue/Green Deployment with CodeDeploy (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If your service's task definition uses the awsvpc network mode (which is
	// required for the Fargate launch type), you must choose ip as the target type,
	// not instance, when creating your target groups because tasks that use the
	// awsvpc network mode are associated with an elastic network interface, not
	// an Amazon EC2 instance.
	TargetGroupArn?: null | string @go(,*string)
}

// The log configuration for the container. This parameter maps to LogConfig
// in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
// and the --log-driver option to docker run (https://docs.docker.com/engine/reference/commandline/run/).
//
// By default, containers use the same logging driver that the Docker daemon
// uses; however the container may use a different logging driver than the Docker
// daemon by specifying a log driver configuration in the container definition.
// For more information on the options for different supported log drivers,
// see Configure logging drivers (https://docs.docker.com/engine/admin/logging/overview/)
// in the Docker documentation.
//
// The following should be noted when specifying a log configuration for your
// containers:
//
//    * Amazon ECS currently supports a subset of the logging drivers available
//    to the Docker daemon (shown in the valid values below). Additional log
//    drivers may be available in future releases of the Amazon ECS container
//    agent.
//
//    * This parameter requires version 1.18 of the Docker Remote API or greater
//    on your container instance.
//
//    * For tasks hosted on Amazon EC2 instances, the Amazon ECS container agent
//    must register the available logging drivers with the ECS_AVAILABLE_LOGGING_DRIVERS
//    environment variable before containers placed on that instance can use
//    these log configuration options. For more information, see Amazon ECS
//    container agent configuration (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html)
//    in the Amazon Elastic Container Service Developer Guide.
//
//    * For tasks on Fargate, because you do not have access to the underlying
//    infrastructure your tasks are hosted on, any additional software needed
//    will have to be installed outside of the task. For example, the Fluentd
//    output aggregators or a remote host running Logstash to send Gelf logs
//    to.
#LogConfiguration: {
	// The log driver to use for the container.
	//
	// For tasks on Fargate, the supported log drivers are awslogs, splunk, and
	// awsfirelens.
	//
	// For tasks hosted on Amazon EC2 instances, the supported log drivers are awslogs,
	// fluentd, gelf, json-file, journald, logentries,syslog, splunk, and awsfirelens.
	//
	// For more information about using the awslogs log driver, see Using the awslogs
	// log driver (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// For more information about using the awsfirelens log driver, see Custom log
	// routing (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If you have a custom driver that is not listed, you can fork the Amazon ECS
	// container agent project that is available on GitHub (https://github.com/aws/amazon-ecs-agent)
	// and customize it to work with that driver. We encourage you to submit pull
	// requests for changes that you would like to have included. However, we do
	// not currently provide support for running modified copies of this software.
	//
	// LogDriver is a required field
	LogDriver?: null | string @go(,*string)

	// The configuration options to send to the log driver. This parameter requires
	// version 1.19 of the Docker Remote API or greater on your container instance.
	// To check the Docker Remote API version on your container instance, log in
	// to your container instance and run the following command: sudo docker version
	// --format '{{.Server.APIVersion}}'
	Options: {[string]: null | string} @go(,map[string]*string)

	// The secrets to pass to the log configuration. For more information, see Specifying
	// Sensitive Data (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
	// in the Amazon Elastic Container Service Developer Guide.
	SecretOptions: [...null | #Secret] @go(,[]*Secret)
}

// Details about the managed agent status for the container.
#ManagedAgent: {
	// The Unix timestamp for when the managed agent was last started.
	LastStartedAt?: null | time.Time @go(,*time.Time)

	// The last known status of the managed agent.
	LastStatus?: null | string @go(,*string)

	// The name of the managed agent. When the execute command feature is enabled,
	// the managed agent name is ExecuteCommandAgent.
	Name?: null | string @go(,*string)

	// The reason for why the managed agent is in the state it is in.
	Reason?: null | string @go(,*string)
}

// An object representing a change in state for a managed agent.
#ManagedAgentStateChange: {
	// The name of the container associated with the managed agent.
	//
	// ContainerName is a required field
	ContainerName?: null | string @go(,*string)

	// The name of the managed agent.
	//
	// ManagedAgentName is a required field
	ManagedAgentName?: null | string @go(,*string)

	// The reason for the status of the managed agent.
	Reason?: null | string @go(,*string)

	// The status of the managed agent.
	//
	// Status is a required field
	Status?: null | string @go(,*string)
}

// The managed scaling settings for the Auto Scaling group capacity provider.
//
// When managed scaling is enabled, Amazon ECS manages the scale-in and scale-out
// actions of the Auto Scaling group. Amazon ECS manages a target tracking scaling
// policy using an Amazon ECS-managed CloudWatch metric with the specified targetCapacity
// value as the target value for the metric. For more information, see Using
// Managed Scaling (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/asg-capacity-providers.html#asg-capacity-providers-managed-scaling)
// in the Amazon Elastic Container Service Developer Guide.
//
// If managed scaling is disabled, the user must manage the scaling of the Auto
// Scaling group.
#ManagedScaling: {
	// The period of time, in seconds, after a newly launched Amazon EC2 instance
	// can contribute to CloudWatch metrics for Auto Scaling group. If this parameter
	// is omitted, the default value of 300 seconds is used.
	InstanceWarmupPeriod?: null | int64 @go(,*int64)

	// The maximum number of container instances that Amazon ECS will scale in or
	// scale out at one time. If this parameter is omitted, the default value of
	// 10000 is used.
	MaximumScalingStepSize?: null | int64 @go(,*int64)

	// The minimum number of container instances that Amazon ECS will scale in or
	// scale out at one time. If this parameter is omitted, the default value of
	// 1 is used.
	MinimumScalingStepSize?: null | int64 @go(,*int64)

	// Whether or not to enable managed scaling for the capacity provider.
	Status?: null | string @go(,*string)

	// The target capacity value for the capacity provider. The specified value
	// must be greater than 0 and less than or equal to 100. A value of 100 will
	// result in the Amazon EC2 instances in your Auto Scaling group being completely
	// utilized.
	TargetCapacity?: null | int64 @go(,*int64)
}

// Amazon ECS is unable to determine the current version of the Amazon ECS container
// agent on the container instance and does not have enough information to proceed
// with an update. This could be because the agent running on the container
// instance is an older or custom version that does not use our version information.
#MissingVersionException: {
	Message_?: null | string @go(,*string)
}

// Details on a volume mount point that is used in a container definition.
#MountPoint: {
	// The path on the container to mount the host volume at.
	ContainerPath?: null | string @go(,*string)

	// If this value is true, the container has read-only access to the volume.
	// If this value is false, then the container can write to the volume. The default
	// value is false.
	ReadOnly?: null | bool @go(,*bool)

	// The name of the volume to mount. Must be a volume name referenced in the
	// name parameter of task definition volume.
	SourceVolume?: null | string @go(,*string)
}

// Details on the network bindings between a container and its host container
// instance. After a task reaches the RUNNING status, manual and automatic host
// and container port assignments are visible in the networkBindings section
// of DescribeTasks API responses.
#NetworkBinding: {
	// The IP address that the container is bound to on the container instance.
	BindIP?: null | string @go(,*string)

	// The port number on the container that is used with the network binding.
	ContainerPort?: null | int64 @go(,*int64)

	// The port number on the host that is used with the network binding.
	HostPort?: null | int64 @go(,*int64)

	// The protocol used for the network binding.
	Protocol?: null | string @go(,*string)
}

// An object representing the network configuration for a task or service.
#NetworkConfiguration: {
	// The VPC subnets and security groups associated with a task.
	//
	// All specified subnets and security groups must be from the same VPC.
	AwsvpcConfiguration?: null | #AwsVpcConfiguration @go(,*AwsVpcConfiguration)
}

// An object representing the elastic network interface for tasks that use the
// awsvpc network mode.
#NetworkInterface: {
	// The attachment ID for the network interface.
	AttachmentId?: null | string @go(,*string)

	// The private IPv6 address for the network interface.
	Ipv6Address?: null | string @go(,*string)

	// The private IPv4 address for the network interface.
	PrivateIpv4Address?: null | string @go(,*string)
}

// There is no update available for this Amazon ECS container agent. This could
// be because the agent is already running the latest version, or it is so old
// that there is no update path to the current version.
#NoUpdateAvailableException: {
	Message_?: null | string @go(,*string)
}

// An object representing a constraint on task placement. For more information,
// see Task Placement Constraints (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html)
// in the Amazon Elastic Container Service Developer Guide.
//
// If you are using the Fargate launch type, task placement constraints are
// not supported.
#PlacementConstraint: {
	// A cluster query language expression to apply to the constraint. The expression
	// can have a maximum length of 2000 characters. You can't specify an expression
	// if the constraint type is distinctInstance. For more information, see Cluster
	// query language (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html)
	// in the Amazon Elastic Container Service Developer Guide.
	Expression?: null | string @go(,*string)

	// The type of constraint. Use distinctInstance to ensure that each task in
	// a particular group is running on a different container instance. Use memberOf
	// to restrict the selection to a group of valid candidates.
	Type?: null | string @go(,*string)
}

// The task placement strategy for a task or service. For more information,
// see Task Placement Strategies (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html)
// in the Amazon Elastic Container Service Developer Guide.
#PlacementStrategy: {
	// The field to apply the placement strategy against. For the spread placement
	// strategy, valid values are instanceId (or host, which has the same effect),
	// or any platform or custom attribute that is applied to a container instance,
	// such as attribute:ecs.availability-zone. For the binpack placement strategy,
	// valid values are cpu and memory. For the random placement strategy, this
	// field is not used.
	Field?: null | string @go(,*string)

	// The type of placement strategy. The random placement strategy randomly places
	// tasks on available candidates. The spread placement strategy spreads placement
	// across available candidates evenly based on the field parameter. The binpack
	// strategy places tasks on available candidates that have the least available
	// amount of the resource that is specified with the field parameter. For example,
	// if you binpack on memory, a task is placed on the instance with the least
	// amount of remaining memory (but still enough to run the task).
	Type?: null | string @go(,*string)
}

// The devices that are available on the container instance. The only supported
// device type is a GPU.
#PlatformDevice: {
	// The ID for the GPU(s) on the container instance. The available GPU IDs can
	// also be obtained on the container instance in the /var/lib/ecs/gpu/nvidia_gpu_info.json
	// file.
	//
	// Id is a required field
	Id?: null | string @go(,*string)

	// The type of device that is available on the container instance. The only
	// supported value is GPU.
	//
	// Type is a required field
	Type?: null | string @go(,*string)
}

// The specified platform version does not satisfy the task definition's required
// capabilities.
#PlatformTaskDefinitionIncompatibilityException: {
	Message_?: null | string @go(,*string)
}

// The specified platform version does not exist.
#PlatformUnknownException: {
	Message_?: null | string @go(,*string)
}

// Port mappings allow containers to access ports on the host container instance
// to send or receive traffic. Port mappings are specified as part of the container
// definition.
//
// If you are using containers in a task with the awsvpc or host network mode,
// exposed ports should be specified using containerPort. The hostPort can be
// left blank or it must be the same value as the containerPort.
//
// You cannot expose the same container port for multiple protocols. An error
// will be returned if this is attempted
//
// After a task reaches the RUNNING status, manual and automatic host and container
// port assignments are visible in the networkBindings section of DescribeTasks
// API responses.
#PortMapping: {
	// The port number on the container that is bound to the user-specified or automatically
	// assigned host port.
	//
	// If you are using containers in a task with the awsvpc or host network mode,
	// exposed ports should be specified using containerPort.
	//
	// If you are using containers in a task with the bridge network mode and you
	// specify a container port and not a host port, your container automatically
	// receives a host port in the ephemeral port range. For more information, see
	// hostPort. Port mappings that are automatically assigned in this way do not
	// count toward the 100 reserved ports limit of a container instance.
	ContainerPort?: null | int64 @go(,*int64)

	// The port number on the container instance to reserve for your container.
	//
	// If you are using containers in a task with the awsvpc or host network mode,
	// the hostPort can either be left blank or set to the same value as the containerPort.
	//
	// If you are using containers in a task with the bridge network mode, you can
	// specify a non-reserved host port for your container port mapping, or you
	// can omit the hostPort (or set it to 0) while specifying a containerPort and
	// your container automatically receives a port in the ephemeral port range
	// for your container instance operating system and Docker version.
	//
	// The default ephemeral port range for Docker version 1.6.0 and later is listed
	// on the instance under /proc/sys/net/ipv4/ip_local_port_range. If this kernel
	// parameter is unavailable, the default ephemeral port range from 49153 through
	// 65535 is used. Do not attempt to specify a host port in the ephemeral port
	// range as these are reserved for automatic assignment. In general, ports below
	// 32768 are outside of the ephemeral port range.
	//
	// The default ephemeral port range from 49153 through 65535 is always used
	// for Docker versions before 1.6.0.
	//
	// The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376,
	// and the Amazon ECS container agent ports 51678-51680. Any host port that
	// was previously specified in a running task is also reserved while the task
	// is running (after a task stops, the host port is released). The current reserved
	// ports are displayed in the remainingResources of DescribeContainerInstances
	// output. A container instance can have up to 100 reserved ports at a time,
	// including the default reserved ports. Automatically assigned ports don't
	// count toward the 100 reserved ports limit.
	HostPort?: null | int64 @go(,*int64)

	// The protocol used for the port mapping. Valid values are tcp and udp. The
	// default is tcp.
	Protocol?: null | string @go(,*string)
}

// The configuration details for the App Mesh proxy.
//
// For tasks using the EC2 launch type, the container instances require at least
// version 1.26.0 of the container agent and at least version 1.26.0-1 of the
// ecs-init package to enable a proxy configuration. If your container instances
// are launched from the Amazon ECS-optimized AMI version 20190301 or later,
// then they contain the required versions of the container agent and ecs-init.
// For more information, see Amazon ECS-optimized Linux AMI (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
#ProxyConfiguration: {
	// The name of the container that will serve as the App Mesh proxy.
	//
	// ContainerName is a required field
	ContainerName?: null | string @go(,*string)

	// The set of network configuration parameters to provide the Container Network
	// Interface (CNI) plugin, specified as key-value pairs.
	//
	//    * IgnoredUID - (Required) The user ID (UID) of the proxy container as
	//    defined by the user parameter in a container definition. This is used
	//    to ensure the proxy ignores its own traffic. If IgnoredGID is specified,
	//    this field can be empty.
	//
	//    * IgnoredGID - (Required) The group ID (GID) of the proxy container as
	//    defined by the user parameter in a container definition. This is used
	//    to ensure the proxy ignores its own traffic. If IgnoredUID is specified,
	//    this field can be empty.
	//
	//    * AppPorts - (Required) The list of ports that the application uses. Network
	//    traffic to these ports is forwarded to the ProxyIngressPort and ProxyEgressPort.
	//
	//    * ProxyIngressPort - (Required) Specifies the port that incoming traffic
	//    to the AppPorts is directed to.
	//
	//    * ProxyEgressPort - (Required) Specifies the port that outgoing traffic
	//    from the AppPorts is directed to.
	//
	//    * EgressIgnoredPorts - (Required) The egress traffic going to the specified
	//    ports is ignored and not redirected to the ProxyEgressPort. It can be
	//    an empty list.
	//
	//    * EgressIgnoredIPs - (Required) The egress traffic going to the specified
	//    IP addresses is ignored and not redirected to the ProxyEgressPort. It
	//    can be an empty list.
	Properties: [...null | #KeyValuePair] @go(,[]*KeyValuePair)

	// The proxy type. The only supported value is APPMESH.
	Type?: null | string @go(,*string)
}

#PutAccountSettingDefaultInput: {
	// The resource name for which to modify the account setting. If serviceLongArnFormat
	// is specified, the ARN for your Amazon ECS services is affected. If taskLongArnFormat
	// is specified, the ARN and resource ID for your Amazon ECS tasks is affected.
	// If containerInstanceLongArnFormat is specified, the ARN and resource ID for
	// your Amazon ECS container instances is affected. If awsvpcTrunking is specified,
	// the ENI limit for your Amazon ECS container instances is affected. If containerInsights
	// is specified, the default setting for CloudWatch Container Insights for your
	// clusters is affected.
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// The account setting value for the specified principal ARN. Accepted values
	// are enabled and disabled.
	//
	// Value is a required field
	Value?: null | string @go(,*string)
}

#PutAccountSettingDefaultOutput: {
	// The current setting for a resource.
	Setting?: null | #Setting @go(,*Setting)
}

#PutAccountSettingInput: {
	// The Amazon ECS resource name for which to modify the account setting. If
	// serviceLongArnFormat is specified, the ARN for your Amazon ECS services is
	// affected. If taskLongArnFormat is specified, the ARN and resource ID for
	// your Amazon ECS tasks is affected. If containerInstanceLongArnFormat is specified,
	// the ARN and resource ID for your Amazon ECS container instances is affected.
	// If awsvpcTrunking is specified, the elastic network interface (ENI) limit
	// for your Amazon ECS container instances is affected. If containerInsights
	// is specified, the default setting for CloudWatch Container Insights for your
	// clusters is affected.
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// The ARN of the principal, which can be an IAM user, IAM role, or the root
	// user. If you specify the root user, it modifies the account setting for all
	// IAM users, IAM roles, and the root user of the account unless an IAM user
	// or role explicitly overrides these settings. If this field is omitted, the
	// setting is changed only for the authenticated user.
	//
	// Federated users assume the account setting of the root user and can't have
	// explicit account settings set for them.
	PrincipalArn?: null | string @go(,*string)

	// The account setting value for the specified principal ARN. Accepted values
	// are enabled and disabled.
	//
	// Value is a required field
	Value?: null | string @go(,*string)
}

#PutAccountSettingOutput: {
	// The current account setting for a resource.
	Setting?: null | #Setting @go(,*Setting)
}

#PutAttributesInput: {
	// The attributes to apply to your resource. You can specify up to 10 custom
	// attributes per resource. You can specify up to 10 attributes in a single
	// call.
	//
	// Attributes is a required field
	Attributes: [...null | #Attribute] @go(,[]*Attribute)

	// The short name or full Amazon Resource Name (ARN) of the cluster that contains
	// the resource to apply attributes. If you do not specify a cluster, the default
	// cluster is assumed.
	Cluster?: null | string @go(,*string)
}

#PutAttributesOutput: {
	// The attributes applied to your resource.
	Attributes: [...null | #Attribute] @go(,[]*Attribute)
}

#PutClusterCapacityProvidersInput: {
	// The name of one or more capacity providers to associate with the cluster.
	//
	// If specifying a capacity provider that uses an Auto Scaling group, the capacity
	// provider must already be created. New capacity providers can be created with
	// the CreateCapacityProvider API operation.
	//
	// To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
	// capacity providers. The Fargate capacity providers are available to all accounts
	// and only need to be associated with a cluster to be used.
	//
	// CapacityProviders is a required field
	CapacityProviders: [...null | string] @go(,[]*string)

	// The short name or full Amazon Resource Name (ARN) of the cluster to modify
	// the capacity provider settings for. If you do not specify a cluster, the
	// default cluster is assumed.
	//
	// Cluster is a required field
	Cluster?: null | string @go(,*string)

	// The capacity provider strategy to use by default for the cluster.
	//
	// When creating a service or running a task on a cluster, if no capacity provider
	// or launch type is specified then the default capacity provider strategy for
	// the cluster is used.
	//
	// A capacity provider strategy consists of one or more capacity providers along
	// with the base and weight to assign to them. A capacity provider must be associated
	// with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders
	// API is used to associate a capacity provider with a cluster. Only capacity
	// providers with an ACTIVE or UPDATING status can be used.
	//
	// If specifying a capacity provider that uses an Auto Scaling group, the capacity
	// provider must already be created. New capacity providers can be created with
	// the CreateCapacityProvider API operation.
	//
	// To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
	// capacity providers. The Fargate capacity providers are available to all accounts
	// and only need to be associated with a cluster to be used.
	//
	// DefaultCapacityProviderStrategy is a required field
	DefaultCapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)
}

#PutClusterCapacityProvidersOutput: {
	// Details about the cluster.
	Cluster?: null | #Cluster @go(,*Cluster)
}

#RegisterContainerInstanceInput: {
	// The container instance attributes that this container instance supports.
	Attributes: [...null | #Attribute] @go(,[]*Attribute)

	// The short name or full Amazon Resource Name (ARN) of the cluster with which
	// to register your container instance. If you do not specify a cluster, the
	// default cluster is assumed.
	Cluster?: null | string @go(,*string)

	// The ARN of the container instance (if it was previously registered).
	ContainerInstanceArn?: null | string @go(,*string)

	// The instance identity document for the EC2 instance to register. This document
	// can be found by running the following command from the instance: curl http://169.254.169.254/latest/dynamic/instance-identity/document/
	InstanceIdentityDocument?: null | string @go(,*string)

	// The instance identity document signature for the EC2 instance to register.
	// This signature can be found by running the following command from the instance:
	// curl http://169.254.169.254/latest/dynamic/instance-identity/signature/
	InstanceIdentityDocumentSignature?: null | string @go(,*string)

	// The devices that are available on the container instance. The only supported
	// device type is a GPU.
	PlatformDevices: [...null | #PlatformDevice] @go(,[]*PlatformDevice)

	// The metadata that you apply to the container instance to help you categorize
	// and organize them. Each tag consists of a key and an optional value, both
	// of which you define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The resources available on the instance.
	TotalResources: [...null | #Resource] @go(,[]*Resource)

	// The version information for the Amazon ECS container agent and Docker daemon
	// running on the container instance.
	VersionInfo?: null | #VersionInfo @go(,*VersionInfo)
}

#RegisterContainerInstanceOutput: {
	// The container instance that was registered.
	ContainerInstance?: null | #ContainerInstance @go(,*ContainerInstance)
}

#RegisterTaskDefinitionInput: {
	// A list of container definitions in JSON format that describe the different
	// containers that make up your task.
	//
	// ContainerDefinitions is a required field
	ContainerDefinitions: [...null | #ContainerDefinition] @go(,[]*ContainerDefinition)

	// The number of CPU units used by the task. It can be expressed as an integer
	// using CPU units, for example 1024, or as a string using vCPUs, for example
	// 1 vCPU or 1 vcpu, in a task definition. String values are converted to an
	// integer indicating the CPU units when the task definition is registered.
	//
	// Task-level CPU and memory parameters are ignored for Windows containers.
	// We recommend specifying container-level resources for Windows containers.
	//
	// If you are using the EC2 launch type, this field is optional. Supported values
	// are between 128 CPU units (0.125 vCPUs) and 10240 CPU units (10 vCPUs).
	//
	// If you are using the Fargate launch type, this field is required and you
	// must use one of the following values, which determines your range of supported
	// values for the memory parameter:
	//
	//    * 256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB),
	//    2048 (2 GB)
	//
	//    * 512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072
	//    (3 GB), 4096 (4 GB)
	//
	//    * 1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096
	//    (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
	//
	//    * 2048 (2 vCPU) - Available memory values: Between 4096 (4 GB) and 16384
	//    (16 GB) in increments of 1024 (1 GB)
	//
	//    * 4096 (4 vCPU) - Available memory values: Between 8192 (8 GB) and 30720
	//    (30 GB) in increments of 1024 (1 GB)
	Cpu?: null | string @go(,*string)

	// The amount of ephemeral storage to allocate for the task. This parameter
	// is used to expand the total amount of ephemeral storage available, beyond
	// the default amount, for tasks hosted on Fargate. For more information, see
	// Fargate task storage (https://docs.aws.amazon.com/AmazonECS/latest/userguide/using_data_volumes.html)
	// in the Amazon ECS User Guide for Fargate.
	//
	// This parameter is only supported for tasks hosted on Fargate using platform
	// version 1.4.0 or later.
	EphemeralStorage?: null | #EphemeralStorage @go(,*EphemeralStorage)

	// The Amazon Resource Name (ARN) of the task execution role that grants the
	// Amazon ECS container agent permission to make Amazon Web Services API calls
	// on your behalf. The task execution IAM role is required depending on the
	// requirements of your task. For more information, see Amazon ECS task execution
	// IAM role (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html)
	// in the Amazon Elastic Container Service Developer Guide.
	ExecutionRoleArn?: null | string @go(,*string)

	// You must specify a family for a task definition, which allows you to track
	// multiple versions of the same task definition. The family is used as a name
	// for your task definition. Up to 255 letters (uppercase and lowercase), numbers,
	// underscores, and hyphens are allowed.
	//
	// Family is a required field
	Family?: null | string @go(,*string)

	// The Elastic Inference accelerators to use for the containers in the task.
	InferenceAccelerators: [...null | #InferenceAccelerator] @go(,[]*InferenceAccelerator)

	// The IPC resource namespace to use for the containers in the task. The valid
	// values are host, task, or none. If host is specified, then all containers
	// within the tasks that specified the host IPC mode on the same container instance
	// share the same IPC resources with the host Amazon EC2 instance. If task is
	// specified, all containers within the specified task share the same IPC resources.
	// If none is specified, then IPC resources within the containers of a task
	// are private and not shared with other containers in a task or on the container
	// instance. If no value is specified, then the IPC resource namespace sharing
	// depends on the Docker daemon setting on the container instance. For more
	// information, see IPC settings (https://docs.docker.com/engine/reference/run/#ipc-settings---ipc)
	// in the Docker run reference.
	//
	// If the host IPC mode is used, be aware that there is a heightened risk of
	// undesired IPC namespace expose. For more information, see Docker security
	// (https://docs.docker.com/engine/security/security/).
	//
	// If you are setting namespaced kernel parameters using systemControls for
	// the containers in the task, the following will apply to your IPC resource
	// namespace. For more information, see System Controls (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	//    * For tasks that use the host IPC mode, IPC namespace related systemControls
	//    are not supported.
	//
	//    * For tasks that use the task IPC mode, IPC namespace related systemControls
	//    will apply to all containers within a task.
	//
	// This parameter is not supported for Windows containers or tasks run on Fargate.
	IpcMode?: null | string @go(,*string)

	// The amount of memory (in MiB) used by the task. It can be expressed as an
	// integer using MiB, for example 1024, or as a string using GB, for example
	// 1GB or 1 GB, in a task definition. String values are converted to an integer
	// indicating the MiB when the task definition is registered.
	//
	// Task-level CPU and memory parameters are ignored for Windows containers.
	// We recommend specifying container-level resources for Windows containers.
	//
	// If using the EC2 launch type, this field is optional.
	//
	// If using the Fargate launch type, this field is required and you must use
	// one of the following values, which determines your range of supported values
	// for the cpu parameter:
	//
	//    * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25
	//    vCPU)
	//
	//    * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values:
	//    512 (.5 vCPU)
	//
	//    * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168
	//    (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)
	//
	//    * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) -
	//    Available cpu values: 2048 (2 vCPU)
	//
	//    * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) -
	//    Available cpu values: 4096 (4 vCPU)
	Memory?: null | string @go(,*string)

	// The Docker networking mode to use for the containers in the task. The valid
	// values are none, bridge, awsvpc, and host. If no network mode is specified,
	// the default is bridge.
	//
	// For Amazon ECS tasks on Fargate, the awsvpc network mode is required. For
	// Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used.
	// For Amazon ECS tasks on Amazon EC2 Windows instances, <default> or awsvpc
	// can be used. If the network mode is set to none, you cannot specify port
	// mappings in your container definitions, and the tasks containers do not have
	// external connectivity. The host and awsvpc network modes offer the highest
	// networking performance for containers because they use the EC2 network stack
	// instead of the virtualized network stack provided by the bridge mode.
	//
	// With the host and awsvpc network modes, exposed container ports are mapped
	// directly to the corresponding host port (for the host network mode) or the
	// attached elastic network interface port (for the awsvpc network mode), so
	// you cannot take advantage of dynamic host port mappings.
	//
	// When using the host network mode, you should not run containers using the
	// root user (UID 0). It is considered best practice to use a non-root user.
	//
	// If the network mode is awsvpc, the task is allocated an elastic network interface,
	// and you must specify a NetworkConfiguration value when you create a service
	// or run a task with the task definition. For more information, see Task Networking
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If the network mode is host, you cannot run multiple instantiations of the
	// same task on a single container instance when port mappings are used.
	//
	// For more information, see Network settings (https://docs.docker.com/engine/reference/run/#network-settings)
	// in the Docker run reference.
	NetworkMode?: null | string @go(,*string)

	// The process namespace to use for the containers in the task. The valid values
	// are host or task. If host is specified, then all containers within the tasks
	// that specified the host PID mode on the same container instance share the
	// same process namespace with the host Amazon EC2 instance. If task is specified,
	// all containers within the specified task share the same process namespace.
	// If no value is specified, the default is a private namespace. For more information,
	// see PID settings (https://docs.docker.com/engine/reference/run/#pid-settings---pid)
	// in the Docker run reference.
	//
	// If the host PID mode is used, be aware that there is a heightened risk of
	// undesired process namespace expose. For more information, see Docker security
	// (https://docs.docker.com/engine/security/security/).
	//
	// This parameter is not supported for Windows containers or tasks run on Fargate.
	PidMode?: null | string @go(,*string)

	// An array of placement constraint objects to use for the task. You can specify
	// a maximum of 10 constraints per task (this limit includes constraints in
	// the task definition and those specified at runtime).
	PlacementConstraints: [...null | #TaskDefinitionPlacementConstraint] @go(,[]*TaskDefinitionPlacementConstraint)

	// The configuration details for the App Mesh proxy.
	//
	// For tasks hosted on Amazon EC2 instances, the container instances require
	// at least version 1.26.0 of the container agent and at least version 1.26.0-1
	// of the ecs-init package to enable a proxy configuration. If your container
	// instances are launched from the Amazon ECS-optimized AMI version 20190301
	// or later, then they contain the required versions of the container agent
	// and ecs-init. For more information, see Amazon ECS-optimized AMI versions
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-ami-versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	ProxyConfiguration?: null | #ProxyConfiguration @go(,*ProxyConfiguration)

	// The task launch type that Amazon ECS should validate the task definition
	// against. A client exception is returned if the task definition doesn't validate
	// against the compatibilities specified. If no value is specified, the parameter
	// is omitted from the response.
	RequiresCompatibilities: [...null | string] @go(,[]*string)

	// The metadata that you apply to the task definition to help you categorize
	// and organize them. Each tag consists of a key and an optional value, both
	// of which you define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The short name or full Amazon Resource Name (ARN) of the IAM role that containers
	// in this task can assume. All containers in this task are granted the permissions
	// that are specified in this role. For more information, see IAM Roles for
	// Tasks (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html)
	// in the Amazon Elastic Container Service Developer Guide.
	TaskRoleArn?: null | string @go(,*string)

	// A list of volume definitions in JSON format that containers in your task
	// may use.
	Volumes: [...null | #Volume] @go(,[]*Volume)
}

#RegisterTaskDefinitionOutput: {
	// The list of tags associated with the task definition.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The full description of the registered task definition.
	TaskDefinition?: null | #TaskDefinition @go(,*TaskDefinition)
}

// The repository credentials for private registry authentication.
#RepositoryCredentials: {
	// The Amazon Resource Name (ARN) of the secret containing the private repository
	// credentials.
	//
	// When you are using the Amazon ECS API, CLI, or Amazon Web Services SDK, if
	// the secret exists in the same Region as the task that you are launching then
	// you can use either the full ARN or the name of the secret. When you are using
	// the Amazon Web Services Management Console, you must specify the full ARN
	// of the secret.
	//
	// CredentialsParameter is a required field
	CredentialsParameter?: null | string @go(,*string)
}

// Describes the resources available for a container instance.
#Resource: {
	// When the doubleValue type is set, the value of the resource must be a double
	// precision floating-point type.
	DoubleValue?: null | float64 @go(,*float64)

	// When the integerValue type is set, the value of the resource must be an integer.
	IntegerValue?: null | int64 @go(,*int64)

	// When the longValue type is set, the value of the resource must be an extended
	// precision floating-point type.
	LongValue?: null | int64 @go(,*int64)

	// The name of the resource, such as CPU, MEMORY, PORTS, PORTS_UDP, or a user-defined
	// resource.
	Name?: null | string @go(,*string)

	// When the stringSetValue type is set, the value of the resource must be a
	// string type.
	StringSetValue: [...null | string] @go(,[]*string)

	// The type of the resource, such as INTEGER, DOUBLE, LONG, or STRINGSET.
	Type?: null | string @go(,*string)
}

// The specified resource is in-use and cannot be removed.
#ResourceInUseException: {
	Message_?: null | string @go(,*string)
}

// The specified resource could not be found.
#ResourceNotFoundException: {
	Message_?: null | string @go(,*string)
}

// The type and amount of a resource to assign to a container. The supported
// resource types are GPUs and Elastic Inference accelerators. For more information,
// see Working with GPUs on Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html)
// or Working with Amazon Elastic Inference on Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-eia.html)
// in the Amazon Elastic Container Service Developer Guide
#ResourceRequirement: {
	// The type of resource to assign to a container. The supported values are GPU
	// or InferenceAccelerator.
	//
	// Type is a required field
	Type?: null | string @go(,*string)

	// The value for the specified resource type.
	//
	// If the GPU type is used, the value is the number of physical GPUs the Amazon
	// ECS container agent will reserve for the container. The number of GPUs reserved
	// for all containers in a task should not exceed the number of available GPUs
	// on the container instance the task is launched on.
	//
	// If the InferenceAccelerator type is used, the value should match the deviceName
	// for an InferenceAccelerator specified in a task definition.
	//
	// Value is a required field
	Value?: null | string @go(,*string)
}

#RunTaskInput: {
	// The capacity provider strategy to use for the task.
	//
	// If a capacityProviderStrategy is specified, the launchType parameter must
	// be omitted. If no capacityProviderStrategy or launchType is specified, the
	// defaultCapacityProviderStrategy for the cluster is used.
	//
	// When you use cluster auto scaling, you must specify capacityProviderStrategy
	// and not launchType.
	//
	// A capacity provider strategy may contain a maximum of 6 capacity providers.
	CapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)

	// The short name or full Amazon Resource Name (ARN) of the cluster on which
	// to run your task. If you do not specify a cluster, the default cluster is
	// assumed.
	Cluster?: null | string @go(,*string)

	// The number of instantiations of the specified task to place on your cluster.
	// You can specify up to 10 tasks per call.
	Count?: null | int64 @go(,*int64)

	// Specifies whether to enable Amazon ECS managed tags for the task. For more
	// information, see Tagging Your Amazon ECS Resources (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)
	// in the Amazon Elastic Container Service Developer Guide.
	EnableECSManagedTags?: null | bool @go(,*bool)

	// Whether or not to enable the execute command functionality for the containers
	// in this task. If true, this enables execute command functionality on all
	// containers in the task.
	EnableExecuteCommand?: null | bool @go(,*bool)

	// The name of the task group to associate with the task. The default value
	// is the family name of the task definition (for example, family:my-family-name).
	Group?: null | string @go(,*string)

	// The infrastructure on which to run your standalone task. For more information,
	// see Amazon ECS launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// The FARGATE launch type runs your tasks on Fargate On-Demand infrastructure.
	//
	// Fargate Spot infrastructure is available for use but a capacity provider
	// strategy must be used. For more information, see Fargate capacity providers
	// (https://docs.aws.amazon.com/AmazonECS/latest/userguide/fargate-capacity-providers.html)
	// in the Amazon ECS User Guide for Fargate.
	//
	// The EC2 launch type runs your tasks on Amazon EC2 instances registered to
	// your cluster.
	//
	// The EXTERNAL launch type runs your tasks on your on-premise server or virtual
	// machine (VM) capacity registered to your cluster.
	//
	// A task can use either a launch type or a capacity provider strategy. If a
	// launchType is specified, the capacityProviderStrategy parameter must be omitted.
	//
	// When you use cluster auto scaling, you must specify capacityProviderStrategy
	// and not launchType.
	LaunchType?: null | string @go(,*string)

	// The network configuration for the task. This parameter is required for task
	// definitions that use the awsvpc network mode to receive their own elastic
	// network interface, and it is not supported for other network modes. For more
	// information, see Task networking (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
	// in the Amazon Elastic Container Service Developer Guide.
	NetworkConfiguration?: null | #NetworkConfiguration @go(,*NetworkConfiguration)

	// A list of container overrides in JSON format that specify the name of a container
	// in the specified task definition and the overrides it should receive. You
	// can override the default command for a container (that is specified in the
	// task definition or Docker image) with a command override. You can also override
	// existing environment variables (that are specified in the task definition
	// or Docker image) on a container or add new environment variables to it with
	// an environment override.
	//
	// A total of 8192 characters are allowed for overrides. This limit includes
	// the JSON formatting characters of the override structure.
	Overrides?: null | #TaskOverride @go(,*TaskOverride)

	// An array of placement constraint objects to use for the task. You can specify
	// up to 10 constraints per task (including constraints in the task definition
	// and those specified at runtime).
	PlacementConstraints: [...null | #PlacementConstraint] @go(,[]*PlacementConstraint)

	// The placement strategy objects to use for the task. You can specify a maximum
	// of 5 strategy rules per task.
	PlacementStrategy: [...null | #PlacementStrategy] @go(,[]*PlacementStrategy)

	// The platform version the task should use. A platform version is only specified
	// for tasks hosted on Fargate. If one is not specified, the LATEST platform
	// version is used by default. For more information, see Fargate platform versions
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	PlatformVersion?: null | string @go(,*string)

	// Specifies whether to propagate the tags from the task definition to the task.
	// If no value is specified, the tags are not propagated. Tags can only be propagated
	// to the task during task creation. To add tags to a task after task creation,
	// use the TagResource API action.
	//
	// An error will be received if you specify the SERVICE option when running
	// a task.
	PropagateTags?: null | string @go(,*string)

	// The reference ID to use for the task. The reference ID can have a maximum
	// length of 1024 characters.
	ReferenceId?: null | string @go(,*string)

	// An optional tag specified when a task is started. For example, if you automatically
	// trigger a task to run a batch process job, you could apply a unique identifier
	// for that job to your task with the startedBy parameter. You can then identify
	// which tasks belong to that job by filtering the results of a ListTasks call
	// with the startedBy value. Up to 36 letters (uppercase and lowercase), numbers,
	// hyphens, and underscores are allowed.
	//
	// If a task is started by an Amazon ECS service, then the startedBy parameter
	// contains the deployment ID of the service that starts it.
	StartedBy?: null | string @go(,*string)

	// The metadata that you apply to the task to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The family and revision (family:revision) or full ARN of the task definition
	// to run. If a revision is not specified, the latest ACTIVE revision is used.
	//
	// TaskDefinition is a required field
	TaskDefinition?: null | string @go(,*string)
}

#RunTaskOutput: {
	// Any failures associated with the call.
	Failures: [...null | #Failure] @go(,[]*Failure)

	// A full description of the tasks that were run. The tasks that were successfully
	// placed on your cluster are described here.
	Tasks: [...null | #Task] @go(,[]*Task)
}

// A floating-point percentage of the desired number of tasks to place and keep
// running in the task set.
#Scale: {
	// The unit of measure for the scale value.
	Unit?: null | string @go(,*string)

	// The value, specified as a percent total of a service's desiredCount, to scale
	// the task set. Accepted values are numbers between 0 and 100.
	Value?: null | float64 @go(,*float64)
}

// An object representing the secret to expose to your container. Secrets can
// be exposed to a container in the following ways:
//
//    * To inject sensitive data into your containers as environment variables,
//    use the secrets container definition parameter.
//
//    * To reference sensitive information in the log configuration of a container,
//    use the secretOptions container definition parameter.
//
// For more information, see Specifying Sensitive Data (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html)
// in the Amazon Elastic Container Service Developer Guide.
#Secret: {
	// The name of the secret.
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// The secret to expose to the container. The supported values are either the
	// full ARN of the Secrets Manager secret or the full ARN of the parameter in
	// the SSM Parameter Store.
	//
	// If the SSM Parameter Store parameter exists in the same Region as the task
	// you are launching, then you can use either the full ARN or name of the parameter.
	// If the parameter exists in a different Region, then the full ARN must be
	// specified.
	//
	// ValueFrom is a required field
	ValueFrom?: null | string @go(,*string)
}

// These errors are usually caused by a server issue.
#ServerException: {
	Message_?: null | string @go(,*string)
}

// Details on a service within a cluster
#Service: {
	// The capacity provider strategy the service is using. When using the DescribeServices
	// API, this field is omitted if the service was created using a launch type.
	CapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)

	// The Amazon Resource Name (ARN) of the cluster that hosts the service.
	ClusterArn?: null | string @go(,*string)

	// The Unix timestamp for when the service was created.
	CreatedAt?: null | time.Time @go(,*time.Time)

	// The principal that created the service.
	CreatedBy?: null | string @go(,*string)

	// Optional deployment parameters that control how many tasks run during the
	// deployment and the ordering of stopping and starting tasks.
	DeploymentConfiguration?: null | #DeploymentConfiguration @go(,*DeploymentConfiguration)

	// The deployment controller type the service is using. When using the DescribeServices
	// API, this field is omitted if the service is using the ECS deployment controller
	// type.
	DeploymentController?: null | #DeploymentController @go(,*DeploymentController)

	// The current state of deployments for the service.
	Deployments: [...null | #Deployment] @go(,[]*Deployment)

	// The desired number of instantiations of the task definition to keep running
	// on the service. This value is specified when the service is created with
	// CreateService, and it can be modified with UpdateService.
	DesiredCount?: null | int64 @go(,*int64)

	// Specifies whether to enable Amazon ECS managed tags for the tasks in the
	// service. For more information, see Tagging Your Amazon ECS Resources (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)
	// in the Amazon Elastic Container Service Developer Guide.
	EnableECSManagedTags?: null | bool @go(,*bool)

	// Whether or not the execute command functionality is enabled for the service.
	// If true, the execute command functionality is enabled for all containers
	// in tasks as part of the service.
	EnableExecuteCommand?: null | bool @go(,*bool)

	// The event stream for your service. A maximum of 100 of the latest events
	// are displayed.
	Events: [...null | #ServiceEvent] @go(,[]*ServiceEvent)

	// The period of time, in seconds, that the Amazon ECS service scheduler ignores
	// unhealthy Elastic Load Balancing target health checks after a task has first
	// started.
	HealthCheckGracePeriodSeconds?: null | int64 @go(,*int64)

	// The launch type the service is using. When using the DescribeServices API,
	// this field is omitted if the service was created using a capacity provider
	// strategy.
	LaunchType?: null | string @go(,*string)

	// A list of Elastic Load Balancing load balancer objects, containing the load
	// balancer name, the container name (as it appears in a container definition),
	// and the container port to access from the load balancer.
	LoadBalancers: [...null | #LoadBalancer] @go(,[]*LoadBalancer)

	// The VPC subnet and security group configuration for tasks that receive their
	// own elastic network interface by using the awsvpc networking mode.
	NetworkConfiguration?: null | #NetworkConfiguration @go(,*NetworkConfiguration)

	// The number of tasks in the cluster that are in the PENDING state.
	PendingCount?: null | int64 @go(,*int64)

	// The placement constraints for the tasks in the service.
	PlacementConstraints: [...null | #PlacementConstraint] @go(,[]*PlacementConstraint)

	// The placement strategy that determines how tasks for the service are placed.
	PlacementStrategy: [...null | #PlacementStrategy] @go(,[]*PlacementStrategy)

	// The platform version on which to run your service. A platform version is
	// only specified for tasks hosted on Fargate. If one is not specified, the
	// LATEST platform version is used by default. For more information, see Fargate
	// Platform Versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	PlatformVersion?: null | string @go(,*string)

	// Specifies whether to propagate the tags from the task definition or the service
	// to the task. If no value is specified, the tags are not propagated.
	PropagateTags?: null | string @go(,*string)

	// The ARN of the IAM role associated with the service that allows the Amazon
	// ECS container agent to register container instances with an Elastic Load
	// Balancing load balancer.
	RoleArn?: null | string @go(,*string)

	// The number of tasks in the cluster that are in the RUNNING state.
	RunningCount?: null | int64 @go(,*int64)

	// The scheduling strategy to use for the service. For more information, see
	// Services (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
	//
	// There are two service scheduler strategies available:
	//
	//    * REPLICA-The replica scheduling strategy places and maintains the desired
	//    number of tasks across your cluster. By default, the service scheduler
	//    spreads tasks across Availability Zones. You can use task placement strategies
	//    and constraints to customize task placement decisions.
	//
	//    * DAEMON-The daemon scheduling strategy deploys exactly one task on each
	//    active container instance that meets all of the task placement constraints
	//    that you specify in your cluster. The service scheduler also evaluates
	//    the task placement constraints for running tasks and will stop tasks that
	//    do not meet the placement constraints. Fargate tasks do not support the
	//    DAEMON scheduling strategy.
	SchedulingStrategy?: null | string @go(,*string)

	// The ARN that identifies the service. The ARN contains the arn:aws:ecs namespace,
	// followed by the Region of the service, the Amazon Web Services account ID
	// of the service owner, the service namespace, and then the service name. For
	// example, arn:aws:ecs:region:012345678910:service/my-service.
	ServiceArn?: null | string @go(,*string)

	// The name of your service. Up to 255 letters (uppercase and lowercase), numbers,
	// underscores, and hyphens are allowed. Service names must be unique within
	// a cluster, but you can have similarly named services in multiple clusters
	// within a Region or across multiple Regions.
	ServiceName?: null | string @go(,*string)

	// The details of the service discovery registries to assign to this service.
	// For more information, see Service Discovery (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
	ServiceRegistries: [...null | #ServiceRegistry] @go(,[]*ServiceRegistry)

	// The status of the service. The valid values are ACTIVE, DRAINING, or INACTIVE.
	Status?: null | string @go(,*string)

	// The metadata that you apply to the service to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The task definition to use for tasks in the service. This value is specified
	// when the service is created with CreateService, and it can be modified with
	// UpdateService.
	TaskDefinition?: null | string @go(,*string)

	// Information about a set of Amazon ECS tasks in either an CodeDeploy or an
	// EXTERNAL deployment. An Amazon ECS task set includes details such as the
	// desired number of tasks, how many tasks are running, and whether the task
	// set serves production traffic.
	TaskSets: [...null | #TaskSet] @go(,[]*TaskSet)
}

// Details on an event associated with a service.
#ServiceEvent: {
	// The Unix timestamp for when the event was triggered.
	CreatedAt?: null | time.Time @go(,*time.Time)

	// The ID string of the event.
	Id?: null | string @go(,*string)

	// The event message.
	Message?: null | string @go(,*string)
}

// The specified service is not active. You can't update a service that is inactive.
// If you have previously deleted a service, you can re-create it with CreateService.
#ServiceNotActiveException: {
	Message_?: null | string @go(,*string)
}

// The specified service could not be found. You can view your available services
// with ListServices. Amazon ECS services are cluster-specific and Region-specific.
#ServiceNotFoundException: {
	Message_?: null | string @go(,*string)
}

// Details of the service registry.
#ServiceRegistry: {
	// The container name value, already specified in the task definition, to be
	// used for your service discovery service. If the task definition that your
	// service task specifies uses the bridge or host network mode, you must specify
	// a containerName and containerPort combination from the task definition. If
	// the task definition that your service task specifies uses the awsvpc network
	// mode and a type SRV DNS record is used, you must specify either a containerName
	// and containerPort combination or a port value, but not both.
	ContainerName?: null | string @go(,*string)

	// The port value, already specified in the task definition, to be used for
	// your service discovery service. If the task definition your service task
	// specifies uses the bridge or host network mode, you must specify a containerName
	// and containerPort combination from the task definition. If the task definition
	// your service task specifies uses the awsvpc network mode and a type SRV DNS
	// record is used, you must specify either a containerName and containerPort
	// combination or a port value, but not both.
	ContainerPort?: null | int64 @go(,*int64)

	// The port value used if your service discovery service specified an SRV record.
	// This field may be used if both the awsvpc network mode and SRV records are
	// used.
	Port?: null | int64 @go(,*int64)

	// The Amazon Resource Name (ARN) of the service registry. The currently supported
	// service registry is Cloud Map. For more information, see CreateService (https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html).
	RegistryArn?: null | string @go(,*string)
}

// The details of the execute command session.
#Session: {
	// The ID of the execute command session.
	SessionId?: null | string @go(,*string)

	// A URL back to managed agent on the container that the SSM Session Manager
	// client uses to send commands and receive output from the container.
	StreamUrl?: null | string @go(,*string)

	// An encrypted token value containing session and caller information. Used
	// to authenticate the connection to the container.
	TokenValue?: null | string @go(,*string)
}

// The current account setting for a resource.
#Setting: {
	// The Amazon ECS resource name.
	Name?: null | string @go(,*string)

	// The ARN of the principal, which can be an IAM user, IAM role, or the root
	// user. If this field is omitted, the authenticated user is assumed.
	PrincipalArn?: null | string @go(,*string)

	// Whether the account setting is enabled or disabled for the specified resource.
	Value?: null | string @go(,*string)
}

#StartTaskInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster on which
	// to start your task. If you do not specify a cluster, the default cluster
	// is assumed.
	Cluster?: null | string @go(,*string)

	// The container instance IDs or full ARN entries for the container instances
	// on which you would like to place your task. You can specify up to 10 container
	// instances.
	//
	// ContainerInstances is a required field
	ContainerInstances: [...null | string] @go(,[]*string)

	// Specifies whether to enable Amazon ECS managed tags for the task. For more
	// information, see Tagging Your Amazon ECS Resources (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)
	// in the Amazon Elastic Container Service Developer Guide.
	EnableECSManagedTags?: null | bool @go(,*bool)

	// Whether or not the execute command functionality is enabled for the task.
	// If true, this enables execute command functionality on all containers in
	// the task.
	EnableExecuteCommand?: null | bool @go(,*bool)

	// The name of the task group to associate with the task. The default value
	// is the family name of the task definition (for example, family:my-family-name).
	Group?: null | string @go(,*string)

	// The VPC subnet and security group configuration for tasks that receive their
	// own elastic network interface by using the awsvpc networking mode.
	NetworkConfiguration?: null | #NetworkConfiguration @go(,*NetworkConfiguration)

	// A list of container overrides in JSON format that specify the name of a container
	// in the specified task definition and the overrides it should receive. You
	// can override the default command for a container (that is specified in the
	// task definition or Docker image) with a command override. You can also override
	// existing environment variables (that are specified in the task definition
	// or Docker image) on a container or add new environment variables to it with
	// an environment override.
	//
	// A total of 8192 characters are allowed for overrides. This limit includes
	// the JSON formatting characters of the override structure.
	Overrides?: null | #TaskOverride @go(,*TaskOverride)

	// Specifies whether to propagate the tags from the task definition or the service
	// to the task. If no value is specified, the tags are not propagated.
	PropagateTags?: null | string @go(,*string)

	// The reference ID to use for the task.
	ReferenceId?: null | string @go(,*string)

	// An optional tag specified when a task is started. For example, if you automatically
	// trigger a task to run a batch process job, you could apply a unique identifier
	// for that job to your task with the startedBy parameter. You can then identify
	// which tasks belong to that job by filtering the results of a ListTasks call
	// with the startedBy value. Up to 36 letters (uppercase and lowercase), numbers,
	// hyphens, and underscores are allowed.
	//
	// If a task is started by an Amazon ECS service, then the startedBy parameter
	// contains the deployment ID of the service that starts it.
	StartedBy?: null | string @go(,*string)

	// The metadata that you apply to the task to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The family and revision (family:revision) or full ARN of the task definition
	// to start. If a revision is not specified, the latest ACTIVE revision is used.
	//
	// TaskDefinition is a required field
	TaskDefinition?: null | string @go(,*string)
}

#StartTaskOutput: {
	// Any failures associated with the call.
	Failures: [...null | #Failure] @go(,[]*Failure)

	// A full description of the tasks that were started. Each task that was successfully
	// placed on your container instances is described.
	Tasks: [...null | #Task] @go(,[]*Task)
}

#StopTaskInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the task to stop. If you do not specify a cluster, the default cluster is
	// assumed.
	Cluster?: null | string @go(,*string)

	// An optional message specified when a task is stopped. For example, if you
	// are using a custom scheduler, you can use this parameter to specify the reason
	// for stopping the task here, and the message appears in subsequent DescribeTasks
	// API operations on this task. Up to 255 characters are allowed in this message.
	Reason?: null | string @go(,*string)

	// The task ID or full Amazon Resource Name (ARN) of the task to stop.
	//
	// Task is a required field
	Task?: null | string @go(,*string)
}

#StopTaskOutput: {
	// The task that was stopped.
	Task?: null | #Task @go(,*Task)
}

#SubmitAttachmentStateChangesInput: {
	// Any attachments associated with the state change request.
	//
	// Attachments is a required field
	Attachments: [...null | #AttachmentStateChange] @go(,[]*AttachmentStateChange)

	// The short name or full ARN of the cluster that hosts the container instance
	// the attachment belongs to.
	Cluster?: null | string @go(,*string)
}

#SubmitAttachmentStateChangesOutput: {
	// Acknowledgement of the state change.
	Acknowledgment?: null | string @go(,*string)
}

#SubmitContainerStateChangeInput: {
	// The short name or full ARN of the cluster that hosts the container.
	Cluster?: null | string @go(,*string)

	// The name of the container.
	ContainerName?: null | string @go(,*string)

	// The exit code returned for the state change request.
	ExitCode?: null | int64 @go(,*int64)

	// The network bindings of the container.
	NetworkBindings: [...null | #NetworkBinding] @go(,[]*NetworkBinding)

	// The reason for the state change request.
	Reason?: null | string @go(,*string)

	// The ID of the Docker container.
	RuntimeId?: null | string @go(,*string)

	// The status of the state change request.
	Status?: null | string @go(,*string)

	// The task ID or full Amazon Resource Name (ARN) of the task that hosts the
	// container.
	Task?: null | string @go(,*string)
}

#SubmitContainerStateChangeOutput: {
	// Acknowledgement of the state change.
	Acknowledgment?: null | string @go(,*string)
}

#SubmitTaskStateChangeInput: {
	// Any attachments associated with the state change request.
	Attachments: [...null | #AttachmentStateChange] @go(,[]*AttachmentStateChange)

	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the task.
	Cluster?: null | string @go(,*string)

	// Any containers associated with the state change request.
	Containers: [...null | #ContainerStateChange] @go(,[]*ContainerStateChange)

	// The Unix timestamp for when the task execution stopped.
	ExecutionStoppedAt?: null | time.Time @go(,*time.Time)

	// The details for the managed agent associated with the task.
	ManagedAgents: [...null | #ManagedAgentStateChange] @go(,[]*ManagedAgentStateChange)

	// The Unix timestamp for when the container image pull began.
	PullStartedAt?: null | time.Time @go(,*time.Time)

	// The Unix timestamp for when the container image pull completed.
	PullStoppedAt?: null | time.Time @go(,*time.Time)

	// The reason for the state change request.
	Reason?: null | string @go(,*string)

	// The status of the state change request.
	Status?: null | string @go(,*string)

	// The task ID or full ARN of the task in the state change request.
	Task?: null | string @go(,*string)
}

#SubmitTaskStateChangeOutput: {
	// Acknowledgement of the state change.
	Acknowledgment?: null | string @go(,*string)
}

// A list of namespaced kernel parameters to set in the container. This parameter
// maps to Sysctls in the Create a container (https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate)
// section of the Docker Remote API (https://docs.docker.com/engine/api/v1.35/)
// and the --sysctl option to docker run (https://docs.docker.com/engine/reference/run/#security-configuration).
//
// It is not recommended that you specify network-related systemControls parameters
// for multiple containers in a single task that also uses either the awsvpc
// or host network mode for the following reasons:
//
//    * For tasks that use the awsvpc network mode, if you set systemControls
//    for any container, it applies to all containers in the task. If you set
//    different systemControls for multiple containers in a single task, the
//    container that is started last determines which systemControls take effect.
//
//    * For tasks that use the host network mode, the systemControls parameter
//    applies to the container instance's kernel parameter as well as that of
//    all containers of any tasks running on that container instance.
#SystemControl: {
	// The namespaced kernel parameter for which to set a value.
	Namespace?: null | string @go(,*string)

	// The value for the namespaced kernel parameter specified in namespace.
	Value?: null | string @go(,*string)
}

// The metadata that you apply to a resource to help you categorize and organize
// them. Each tag consists of a key and an optional value, both of which you
// define.
//
// The following basic restrictions apply to tags:
//
//    * Maximum number of tags per resource - 50
//
//    * For each resource, each tag key must be unique, and each tag key can
//    have only one value.
//
//    * Maximum key length - 128 Unicode characters in UTF-8
//
//    * Maximum value length - 256 Unicode characters in UTF-8
//
//    * If your tagging schema is used across multiple services and resources,
//    remember that other services may have restrictions on allowed characters.
//    Generally allowed characters are: letters, numbers, and spaces representable
//    in UTF-8, and the following characters: + - = . _ : / @.
//
//    * Tag keys and values are case-sensitive.
//
//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
//    as a prefix for either keys or values as it is reserved for Amazon Web
//    Services use. You cannot edit or delete tag keys or values with this prefix.
//    Tags with this prefix do not count against your tags per resource limit.
#Tag: {
	// One part of a key-value pair that make up a tag. A key is a general label
	// that acts like a category for more specific tag values.
	Key?: null | string @go(,*string)

	// The optional part of a key-value pair that make up a tag. A value acts as
	// a descriptor within a tag category (key).
	Value?: null | string @go(,*string)
}

#TagResourceInput: {
	// The Amazon Resource Name (ARN) of the resource to which to add tags. Currently,
	// the supported resources are Amazon ECS capacity providers, tasks, services,
	// task definitions, clusters, and container instances.
	//
	// ResourceArn is a required field
	ResourceArn?: null | string @go(,*string)

	// The tags to add to the resource. A tag is an array of key-value pairs.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	//
	// Tags is a required field
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// The target container is not properly configured with the execute command
// agent or the container is no longer active or running.
#TargetNotConnectedException: {
	Message_?: null | string @go(,*string)
}

// The specified target could not be found. You can view your available container
// instances with ListContainerInstances. Amazon ECS container instances are
// cluster-specific and Region-specific.
#TargetNotFoundException: {
	Message_?: null | string @go(,*string)
}

// Details on a task in a cluster.
#Task: {
	// The Elastic Network Adapter associated with the task if the task uses the
	// awsvpc network mode.
	Attachments: [...null | #Attachment] @go(,[]*Attachment)

	// The attributes of the task
	Attributes: [...null | #Attribute] @go(,[]*Attribute)

	// The availability zone of the task.
	AvailabilityZone?: null | string @go(,*string)

	// The capacity provider associated with the task.
	CapacityProviderName?: null | string @go(,*string)

	// The ARN of the cluster that hosts the task.
	ClusterArn?: null | string @go(,*string)

	// The connectivity status of a task.
	Connectivity?: null | string @go(,*string)

	// The Unix timestamp for when the task last went into CONNECTED status.
	ConnectivityAt?: null | time.Time @go(,*time.Time)

	// The ARN of the container instances that host the task.
	ContainerInstanceArn?: null | string @go(,*string)

	// The containers associated with the task.
	Containers: [...null | #Container] @go(,[]*Container)

	// The number of CPU units used by the task as expressed in a task definition.
	// It can be expressed as an integer using CPU units, for example 1024. It can
	// also be expressed as a string using vCPUs, for example 1 vCPU or 1 vcpu.
	// String values are converted to an integer indicating the CPU units when the
	// task definition is registered.
	//
	// If you are using the EC2 launch type, this field is optional. Supported values
	// are between 128 CPU units (0.125 vCPUs) and 10240 CPU units (10 vCPUs).
	//
	// If you are using the Fargate launch type, this field is required and you
	// must use one of the following values, which determines your range of supported
	// values for the memory parameter:
	//
	//    * 256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB),
	//    2048 (2 GB)
	//
	//    * 512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072
	//    (3 GB), 4096 (4 GB)
	//
	//    * 1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096
	//    (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
	//
	//    * 2048 (2 vCPU) - Available memory values: Between 4096 (4 GB) and 16384
	//    (16 GB) in increments of 1024 (1 GB)
	//
	//    * 4096 (4 vCPU) - Available memory values: Between 8192 (8 GB) and 30720
	//    (30 GB) in increments of 1024 (1 GB)
	Cpu?: null | string @go(,*string)

	// The Unix timestamp for when the task was created (the task entered the PENDING
	// state).
	CreatedAt?: null | time.Time @go(,*time.Time)

	// The desired status of the task. For more information, see Task Lifecycle
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html).
	DesiredStatus?: null | string @go(,*string)

	// Whether or not execute command functionality is enabled for this task. If
	// true, this enables execute command functionality on all containers in the
	// task.
	EnableExecuteCommand?: null | bool @go(,*bool)

	// The ephemeral storage settings for the task.
	EphemeralStorage?: null | #EphemeralStorage @go(,*EphemeralStorage)

	// The Unix timestamp for when the task execution stopped.
	ExecutionStoppedAt?: null | time.Time @go(,*time.Time)

	// The name of the task group associated with the task.
	Group?: null | string @go(,*string)

	// The health status for the task, which is determined by the health of the
	// essential containers in the task. If all essential containers in the task
	// are reporting as HEALTHY, then the task status also reports as HEALTHY. If
	// any essential containers in the task are reporting as UNHEALTHY or UNKNOWN,
	// then the task status also reports as UNHEALTHY or UNKNOWN, accordingly.
	//
	// The Amazon ECS container agent does not monitor or report on Docker health
	// checks that are embedded in a container image (such as those specified in
	// a parent image or from the image's Dockerfile) and not specified in the container
	// definition. Health check parameters that are specified in a container definition
	// override any Docker health checks that exist in the container image.
	HealthStatus?: null | string @go(,*string)

	// The Elastic Inference accelerator associated with the task.
	InferenceAccelerators: [...null | #InferenceAccelerator] @go(,[]*InferenceAccelerator)

	// The last known status of the task. For more information, see Task Lifecycle
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-lifecycle.html).
	LastStatus?: null | string @go(,*string)

	// The infrastructure on which your task is running. For more information, see
	// Amazon ECS launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	LaunchType?: null | string @go(,*string)

	// The amount of memory (in MiB) used by the task as expressed in a task definition.
	// It can be expressed as an integer using MiB, for example 1024. It can also
	// be expressed as a string using GB, for example 1GB or 1 GB. String values
	// are converted to an integer indicating the MiB when the task definition is
	// registered.
	//
	// If you are using the EC2 launch type, this field is optional.
	//
	// If you are using the Fargate launch type, this field is required and you
	// must use one of the following values, which determines your range of supported
	// values for the cpu parameter:
	//
	//    * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25
	//    vCPU)
	//
	//    * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values:
	//    512 (.5 vCPU)
	//
	//    * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168
	//    (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)
	//
	//    * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) -
	//    Available cpu values: 2048 (2 vCPU)
	//
	//    * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) -
	//    Available cpu values: 4096 (4 vCPU)
	Memory?: null | string @go(,*string)

	// One or more container overrides.
	Overrides?: null | #TaskOverride @go(,*TaskOverride)

	// The platform version on which your task is running. A platform version is
	// only specified for tasks using the Fargate launch type. If one is not specified,
	// the LATEST platform version is used by default. For more information, see
	// Fargate Platform Versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	PlatformVersion?: null | string @go(,*string)

	// The Unix timestamp for when the container image pull began.
	PullStartedAt?: null | time.Time @go(,*time.Time)

	// The Unix timestamp for when the container image pull completed.
	PullStoppedAt?: null | time.Time @go(,*time.Time)

	// The Unix timestamp for when the task started (the task transitioned from
	// the PENDING state to the RUNNING state).
	StartedAt?: null | time.Time @go(,*time.Time)

	// The tag specified when a task is started. If the task is started by an Amazon
	// ECS service, then the startedBy parameter contains the deployment ID of the
	// service that starts it.
	StartedBy?: null | string @go(,*string)

	// The stop code indicating why a task was stopped. The stoppedReason may contain
	// additional details.
	StopCode?: null | string @go(,*string)

	// The Unix timestamp for when the task was stopped (the task transitioned from
	// the RUNNING state to the STOPPED state).
	StoppedAt?: null | time.Time @go(,*time.Time)

	// The reason that the task was stopped.
	StoppedReason?: null | string @go(,*string)

	// The Unix timestamp for when the task stops (transitions from the RUNNING
	// state to STOPPED).
	StoppingAt?: null | time.Time @go(,*time.Time)

	// The metadata that you apply to the task to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The Amazon Resource Name (ARN) of the task.
	TaskArn?: null | string @go(,*string)

	// The ARN of the task definition that creates the task.
	TaskDefinitionArn?: null | string @go(,*string)

	// The version counter for the task. Every time a task experiences a change
	// that triggers a CloudWatch event, the version counter is incremented. If
	// you are replicating your Amazon ECS task state with CloudWatch Events, you
	// can compare the version of a task reported by the Amazon ECS API actions
	// with the version reported in CloudWatch Events for the task (inside the detail
	// object) to verify that the version in your event stream is current.
	Version?: null | int64 @go(,*int64)
}

// The details of a task definition which describes the container and volume
// definitions of an Amazon Elastic Container Service task. You can specify
// which Docker images to use, the required resources, and other configurations
// related to launching the task definition through an Amazon ECS service or
// task.
#TaskDefinition: {
	// The task launch types the task definition validated against during task definition
	// registration. For more information, see Amazon ECS launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	Compatibilities: [...null | string] @go(,[]*string)

	// A list of container definitions in JSON format that describe the different
	// containers that make up your task. For more information about container definition
	// parameters and defaults, see Amazon ECS Task Definitions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	ContainerDefinitions: [...null | #ContainerDefinition] @go(,[]*ContainerDefinition)

	// The number of cpu units used by the task. If you are using the EC2 launch
	// type, this field is optional and any value can be used. If you are using
	// the Fargate launch type, this field is required and you must use one of the
	// following values, which determines your range of valid values for the memory
	// parameter:
	//
	//    * 256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB),
	//    2048 (2 GB)
	//
	//    * 512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072
	//    (3 GB), 4096 (4 GB)
	//
	//    * 1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096
	//    (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)
	//
	//    * 2048 (2 vCPU) - Available memory values: Between 4096 (4 GB) and 16384
	//    (16 GB) in increments of 1024 (1 GB)
	//
	//    * 4096 (4 vCPU) - Available memory values: Between 8192 (8 GB) and 30720
	//    (30 GB) in increments of 1024 (1 GB)
	Cpu?: null | string @go(,*string)

	// The Unix timestamp for when the task definition was deregistered.
	DeregisteredAt?: null | time.Time @go(,*time.Time)

	// The ephemeral storage settings to use for tasks run with the task definition.
	EphemeralStorage?: null | #EphemeralStorage @go(,*EphemeralStorage)

	// The Amazon Resource Name (ARN) of the task execution role that grants the
	// Amazon ECS container agent permission to make Amazon Web Services API calls
	// on your behalf. The task execution IAM role is required depending on the
	// requirements of your task. For more information, see Amazon ECS task execution
	// IAM role (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html)
	// in the Amazon Elastic Container Service Developer Guide.
	ExecutionRoleArn?: null | string @go(,*string)

	// The name of a family that this task definition is registered to. Up to 255
	// letters (uppercase and lowercase), numbers, hyphens, and underscores are
	// allowed.
	//
	// A family groups multiple versions of a task definition. Amazon ECS gives
	// the first task definition that you registered to a family a revision number
	// of 1. Amazon ECS gives sequential revision numbers to each task definition
	// that you add.
	Family?: null | string @go(,*string)

	// The Elastic Inference accelerator associated with the task.
	InferenceAccelerators: [...null | #InferenceAccelerator] @go(,[]*InferenceAccelerator)

	// The IPC resource namespace to use for the containers in the task. The valid
	// values are host, task, or none. If host is specified, then all containers
	// within the tasks that specified the host IPC mode on the same container instance
	// share the same IPC resources with the host Amazon EC2 instance. If task is
	// specified, all containers within the specified task share the same IPC resources.
	// If none is specified, then IPC resources within the containers of a task
	// are private and not shared with other containers in a task or on the container
	// instance. If no value is specified, then the IPC resource namespace sharing
	// depends on the Docker daemon setting on the container instance. For more
	// information, see IPC settings (https://docs.docker.com/engine/reference/run/#ipc-settings---ipc)
	// in the Docker run reference.
	//
	// If the host IPC mode is used, be aware that there is a heightened risk of
	// undesired IPC namespace expose. For more information, see Docker security
	// (https://docs.docker.com/engine/security/security/).
	//
	// If you are setting namespaced kernel parameters using systemControls for
	// the containers in the task, the following will apply to your IPC resource
	// namespace. For more information, see System Controls (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	//    * For tasks that use the host IPC mode, IPC namespace related systemControls
	//    are not supported.
	//
	//    * For tasks that use the task IPC mode, IPC namespace related systemControls
	//    will apply to all containers within a task.
	//
	// This parameter is not supported for Windows containers or tasks run on Fargate.
	IpcMode?: null | string @go(,*string)

	// The amount (in MiB) of memory used by the task.
	//
	// If your tasks will be run on Amazon EC2 instances, you must specify either
	// a task-level memory value or a container-level memory value. This field is
	// optional and any value can be used. If a task-level memory value is specified
	// then the container-level memory value is optional. For more information regarding
	// container-level memory and memory reservation, see ContainerDefinition (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html).
	//
	// If your tasks will be run on Fargate, this field is required and you must
	// use one of the following values, which determines your range of valid values
	// for the cpu parameter:
	//
	//    * 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25
	//    vCPU)
	//
	//    * 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values:
	//    512 (.5 vCPU)
	//
	//    * 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168
	//    (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)
	//
	//    * Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) -
	//    Available cpu values: 2048 (2 vCPU)
	//
	//    * Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) -
	//    Available cpu values: 4096 (4 vCPU)
	Memory?: null | string @go(,*string)

	// The Docker networking mode to use for the containers in the task. The valid
	// values are none, bridge, awsvpc, and host. If no network mode is specified,
	// the default is bridge.
	//
	// For Amazon ECS tasks on Fargate, the awsvpc network mode is required. For
	// Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used.
	// For Amazon ECS tasks on Amazon EC2 Windows instances, <default> or awsvpc
	// can be used. If the network mode is set to none, you cannot specify port
	// mappings in your container definitions, and the tasks containers do not have
	// external connectivity. The host and awsvpc network modes offer the highest
	// networking performance for containers because they use the EC2 network stack
	// instead of the virtualized network stack provided by the bridge mode.
	//
	// With the host and awsvpc network modes, exposed container ports are mapped
	// directly to the corresponding host port (for the host network mode) or the
	// attached elastic network interface port (for the awsvpc network mode), so
	// you cannot take advantage of dynamic host port mappings.
	//
	// When using the host network mode, you should not run containers using the
	// root user (UID 0). It is considered best practice to use a non-root user.
	//
	// If the network mode is awsvpc, the task is allocated an elastic network interface,
	// and you must specify a NetworkConfiguration value when you create a service
	// or run a task with the task definition. For more information, see Task Networking
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If the network mode is host, you cannot run multiple instantiations of the
	// same task on a single container instance when port mappings are used.
	//
	// For more information, see Network settings (https://docs.docker.com/engine/reference/run/#network-settings)
	// in the Docker run reference.
	NetworkMode?: null | string @go(,*string)

	// The process namespace to use for the containers in the task. The valid values
	// are host or task. If host is specified, then all containers within the tasks
	// that specified the host PID mode on the same container instance share the
	// same process namespace with the host Amazon EC2 instance. If task is specified,
	// all containers within the specified task share the same process namespace.
	// If no value is specified, the default is a private namespace. For more information,
	// see PID settings (https://docs.docker.com/engine/reference/run/#pid-settings---pid)
	// in the Docker run reference.
	//
	// If the host PID mode is used, be aware that there is a heightened risk of
	// undesired process namespace expose. For more information, see Docker security
	// (https://docs.docker.com/engine/security/security/).
	//
	// This parameter is not supported for Windows containers or tasks run on Fargate.
	PidMode?: null | string @go(,*string)

	// An array of placement constraint objects to use for tasks.
	//
	// This parameter is not supported for tasks run on Fargate.
	PlacementConstraints: [...null | #TaskDefinitionPlacementConstraint] @go(,[]*TaskDefinitionPlacementConstraint)

	// The configuration details for the App Mesh proxy.
	//
	// Your Amazon ECS container instances require at least version 1.26.0 of the
	// container agent and at least version 1.26.0-1 of the ecs-init package to
	// enable a proxy configuration. If your container instances are launched from
	// the Amazon ECS-optimized AMI version 20190301 or later, then they contain
	// the required versions of the container agent and ecs-init. For more information,
	// see Amazon ECS-optimized Linux AMI (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
	// in the Amazon Elastic Container Service Developer Guide.
	ProxyConfiguration?: null | #ProxyConfiguration @go(,*ProxyConfiguration)

	// The Unix timestamp for when the task definition was registered.
	RegisteredAt?: null | time.Time @go(,*time.Time)

	// The principal that registered the task definition.
	RegisteredBy?: null | string @go(,*string)

	// The container instance attributes required by your task. When an Amazon EC2
	// instance is registered to your cluster, the Amazon ECS container agent assigns
	// some standard attributes to the instance. You can apply custom attributes,
	// specified as key-value pairs using the Amazon ECS console or the PutAttributes
	// API. These attributes are used when considering task placement for tasks
	// hosted on Amazon EC2 instances. For more information, see Attributes (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// This parameter is not supported for tasks run on Fargate.
	RequiresAttributes: [...null | #Attribute] @go(,[]*Attribute)

	// The task launch types the task definition was validated against. To determine
	// which task launch types the task definition is validated for, see the TaskDefinition$compatibilities
	// parameter.
	RequiresCompatibilities: [...null | string] @go(,[]*string)

	// The revision of the task in a particular family. The revision is a version
	// number of a task definition in a family. When you register a task definition
	// for the first time, the revision is 1. Each time that you register a new
	// revision of a task definition in the same family, the revision value always
	// increases by one, even if you have deregistered previous revisions in this
	// family.
	Revision?: null | int64 @go(,*int64)

	// The status of the task definition.
	Status?: null | string @go(,*string)

	// The full Amazon Resource Name (ARN) of the task definition.
	TaskDefinitionArn?: null | string @go(,*string)

	// The short name or full Amazon Resource Name (ARN) of the Identity and Access
	// Management role that grants containers in the task permission to call Amazon
	// Web Services APIs on your behalf. For more information, see Amazon ECS Task
	// Role (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// IAM roles for tasks on Windows require that the -EnableTaskIAMRole option
	// is set when you launch the Amazon ECS-optimized Windows AMI. Your containers
	// must also run some configuration code in order to take advantage of the feature.
	// For more information, see Windows IAM roles for tasks (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows_task_IAM_roles.html)
	// in the Amazon Elastic Container Service Developer Guide.
	TaskRoleArn?: null | string @go(,*string)

	// The list of data volume definitions for the task. For more information, see
	// Using data volumes in tasks (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// The host and sourcePath parameters are not supported for tasks run on Fargate.
	Volumes: [...null | #Volume] @go(,[]*Volume)
}

// An object representing a constraint on task placement in the task definition.
// For more information, see Task placement constraints (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html)
// in the Amazon Elastic Container Service Developer Guide.
//
// Task placement constraints are not supported for tasks run on Fargate.
#TaskDefinitionPlacementConstraint: {
	// A cluster query language expression to apply to the constraint. For more
	// information, see Cluster query language (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html)
	// in the Amazon Elastic Container Service Developer Guide.
	Expression?: null | string @go(,*string)

	// The type of constraint. The MemberOf constraint restricts selection to be
	// from a group of valid candidates.
	Type?: null | string @go(,*string)
}

// The overrides associated with a task.
#TaskOverride: {
	// One or more container overrides sent to a task.
	ContainerOverrides: [...null | #ContainerOverride] @go(,[]*ContainerOverride)

	// The cpu override for the task.
	Cpu?: null | string @go(,*string)

	// The ephemeral storage setting override for the task.
	//
	// This parameter is only supported for tasks hosted on Fargate using platform
	// version 1.4.0 or later.
	EphemeralStorage?: null | #EphemeralStorage @go(,*EphemeralStorage)

	// The Amazon Resource Name (ARN) of the task execution IAM role override for
	// the task.
	ExecutionRoleArn?: null | string @go(,*string)

	// The Elastic Inference accelerator override for the task.
	InferenceAcceleratorOverrides: [...null | #InferenceAcceleratorOverride] @go(,[]*InferenceAcceleratorOverride)

	// The memory override for the task.
	Memory?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the IAM role that containers in this task
	// can assume. All containers in this task are granted the permissions that
	// are specified in this role.
	TaskRoleArn?: null | string @go(,*string)
}

// Information about a set of Amazon ECS tasks in either an CodeDeploy or an
// EXTERNAL deployment. An Amazon ECS task set includes details such as the
// desired number of tasks, how many tasks are running, and whether the task
// set serves production traffic.
#TaskSet: {
	// The capacity provider strategy associated with the task set.
	CapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)

	// The Amazon Resource Name (ARN) of the cluster that the service that hosts
	// the task set exists in.
	ClusterArn?: null | string @go(,*string)

	// The computed desired count for the task set. This is calculated by multiplying
	// the service's desiredCount by the task set's scale percentage. The result
	// is always rounded up. For example, if the computed desired count is 1.2,
	// it rounds up to 2 tasks.
	ComputedDesiredCount?: null | int64 @go(,*int64)

	// The Unix timestamp for when the task set was created.
	CreatedAt?: null | time.Time @go(,*time.Time)

	// The external ID associated with the task set.
	//
	// If a task set is created by an CodeDeploy deployment, the externalId parameter
	// contains the CodeDeploy deployment ID.
	//
	// If a task set is created for an external deployment and is associated with
	// a service discovery registry, the externalId parameter contains the ECS_TASK_SET_EXTERNAL_ID
	// Cloud Map attribute.
	ExternalId?: null | string @go(,*string)

	// The ID of the task set.
	Id?: null | string @go(,*string)

	// The launch type the tasks in the task set are using. For more information,
	// see Amazon ECS launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	LaunchType?: null | string @go(,*string)

	// Details on a load balancer that is used with a task set.
	LoadBalancers: [...null | #LoadBalancer] @go(,[]*LoadBalancer)

	// The network configuration for the task set.
	NetworkConfiguration?: null | #NetworkConfiguration @go(,*NetworkConfiguration)

	// The number of tasks in the task set that are in the PENDING status during
	// a deployment. A task in the PENDING state is preparing to enter the RUNNING
	// state. A task set enters the PENDING status when it launches for the first
	// time or when it is restarted after being in the STOPPED state.
	PendingCount?: null | int64 @go(,*int64)

	// The Fargate platform version on which the tasks in the task set are running.
	// A platform version is only specified for tasks run on Fargate. For more information,
	// see Fargate platform versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	PlatformVersion?: null | string @go(,*string)

	// The number of tasks in the task set that are in the RUNNING status during
	// a deployment. A task in the RUNNING state is running and ready for use.
	RunningCount?: null | int64 @go(,*int64)

	// A floating-point percentage of the desired number of tasks to place and keep
	// running in the task set.
	Scale?: null | #Scale @go(,*Scale)

	// The Amazon Resource Name (ARN) of the service the task set exists in.
	ServiceArn?: null | string @go(,*string)

	// The details of the service discovery registries to assign to this task set.
	// For more information, see Service discovery (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
	ServiceRegistries: [...null | #ServiceRegistry] @go(,[]*ServiceRegistry)

	// The stability status, which indicates whether the task set has reached a
	// steady state. If the following conditions are met, the task set will be in
	// STEADY_STATE:
	//
	//    * The task runningCount is equal to the computedDesiredCount.
	//
	//    * The pendingCount is 0.
	//
	//    * There are no tasks running on container instances in the DRAINING status.
	//
	//    * All tasks are reporting a healthy status from the load balancers, service
	//    discovery, and container health checks.
	//
	// If any of those conditions are not met, the stability status returns STABILIZING.
	StabilityStatus?: null | string @go(,*string)

	// The Unix timestamp for when the task set stability status was retrieved.
	StabilityStatusAt?: null | time.Time @go(,*time.Time)

	// The tag specified when a task set is started. If the task set is created
	// by an CodeDeploy deployment, the startedBy parameter is CODE_DEPLOY. For
	// a task set created for an external deployment, the startedBy field isn't
	// used.
	StartedBy?: null | string @go(,*string)

	// The status of the task set. The following describes each state:
	//
	// PRIMARY
	//
	// The task set is serving production traffic.
	//
	// ACTIVE
	//
	// The task set is not serving production traffic.
	//
	// DRAINING
	//
	// The tasks in the task set are being stopped and their corresponding targets
	// are being deregistered from their target group.
	Status?: null | string @go(,*string)

	// The metadata that you apply to the task set to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The task definition the task set is using.
	TaskDefinition?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the task set.
	TaskSetArn?: null | string @go(,*string)

	// The Unix timestamp for when the task set was last updated.
	UpdatedAt?: null | time.Time @go(,*time.Time)
}

// The specified task set could not be found. You can view your available task
// sets with DescribeTaskSets. Task sets are specific to each cluster, service
// and Region.
#TaskSetNotFoundException: {
	Message_?: null | string @go(,*string)
}

// The container path, mount options, and size of the tmpfs mount.
#Tmpfs: {
	// The absolute file path where the tmpfs volume is to be mounted.
	//
	// ContainerPath is a required field
	ContainerPath?: null | string @go(,*string)

	// The list of tmpfs volume mount options.
	//
	// Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev"
	// | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" |
	// "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind"
	// | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared"
	// | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime"
	// | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"
	MountOptions: [...null | string] @go(,[]*string)

	// The maximum size (in MiB) of the tmpfs volume.
	//
	// Size is a required field
	Size?: null | int64 @go(,*int64)
}

// The ulimit settings to pass to the container.
//
// Amazon ECS tasks hosted on Fargate use the default resource limit values
// set by the operating system with the exception of the nofile resource limit
// parameter which Fargate overrides. The nofile resource limit sets a restriction
// on the number of open files that a container can use. The default nofile
// soft limit is 1024 and hard limit is 4096.
#Ulimit: {
	// The hard limit for the ulimit type.
	//
	// HardLimit is a required field
	HardLimit?: null | int64 @go(,*int64)

	// The type of the ulimit.
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// The soft limit for the ulimit type.
	//
	// SoftLimit is a required field
	SoftLimit?: null | int64 @go(,*int64)
}

// The specified task is not supported in this Region.
#UnsupportedFeatureException: {
	Message_?: null | string @go(,*string)
}

#UntagResourceInput: {
	// The Amazon Resource Name (ARN) of the resource from which to delete tags.
	// Currently, the supported resources are Amazon ECS capacity providers, tasks,
	// services, task definitions, clusters, and container instances.
	//
	// ResourceArn is a required field
	ResourceArn?: null | string @go(,*string)

	// The keys of the tags to be removed.
	//
	// TagKeys is a required field
	TagKeys: [...null | string] @go(,[]*string)
}

#UpdateCapacityProviderInput: {
	// An object representing the parameters to update for the Auto Scaling group
	// capacity provider.
	//
	// AutoScalingGroupProvider is a required field
	AutoScalingGroupProvider?: null | #AutoScalingGroupProviderUpdate @go(,*AutoScalingGroupProviderUpdate)

	// The name of the capacity provider to update.
	//
	// Name is a required field
	Name?: null | string @go(,*string)
}

#UpdateCapacityProviderOutput: {
	// Details about the capacity provider.
	CapacityProvider?: null | #CapacityProvider @go(,*CapacityProvider)
}

#UpdateClusterInput: {
	// The name of the cluster to modify the settings for.
	//
	// Cluster is a required field
	Cluster?: null | string @go(,*string)

	// The execute command configuration for the cluster.
	Configuration?: null | #ClusterConfiguration @go(,*ClusterConfiguration)

	// The cluster settings for your cluster.
	Settings: [...null | #ClusterSetting] @go(,[]*ClusterSetting)
}

#UpdateClusterOutput: {
	// Details about the cluster.
	Cluster?: null | #Cluster @go(,*Cluster)
}

#UpdateClusterSettingsInput: {
	// The name of the cluster to modify the settings for.
	//
	// Cluster is a required field
	Cluster?: null | string @go(,*string)

	// The setting to use by default for a cluster. This parameter is used to enable
	// CloudWatch Container Insights for a cluster. If this value is specified,
	// it will override the containerInsights value set with PutAccountSetting or
	// PutAccountSettingDefault.
	//
	// Settings is a required field
	Settings: [...null | #ClusterSetting] @go(,[]*ClusterSetting)
}

#UpdateClusterSettingsOutput: {
	// Details about the cluster
	Cluster?: null | #Cluster @go(,*Cluster)
}

#UpdateContainerAgentInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that your
	// container instance is running on. If you do not specify a cluster, the default
	// cluster is assumed.
	Cluster?: null | string @go(,*string)

	// The container instance ID or full ARN entries for the container instance
	// on which you would like to update the Amazon ECS container agent.
	//
	// ContainerInstance is a required field
	ContainerInstance?: null | string @go(,*string)
}

#UpdateContainerAgentOutput: {
	// The container instance for which the container agent was updated.
	ContainerInstance?: null | #ContainerInstance @go(,*ContainerInstance)
}

#UpdateContainerInstancesStateInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the container instance to update. If you do not specify a cluster, the default
	// cluster is assumed.
	Cluster?: null | string @go(,*string)

	// A list of container instance IDs or full ARN entries.
	//
	// ContainerInstances is a required field
	ContainerInstances: [...null | string] @go(,[]*string)

	// The container instance state with which to update the container instance.
	// The only valid values for this action are ACTIVE and DRAINING. A container
	// instance can only be updated to DRAINING status once it has reached an ACTIVE
	// state. If a container instance is in REGISTERING, DEREGISTERING, or REGISTRATION_FAILED
	// state you can describe the container instance but will be unable to update
	// the container instance state.
	//
	// Status is a required field
	Status?: null | string @go(,*string)
}

#UpdateContainerInstancesStateOutput: {
	// The list of container instances.
	ContainerInstances: [...null | #ContainerInstance] @go(,[]*ContainerInstance)

	// Any failures associated with the call.
	Failures: [...null | #Failure] @go(,[]*Failure)
}

// There is already a current Amazon ECS container agent update in progress
// on the specified container instance. If the container agent becomes disconnected
// while it is in a transitional stage, such as PENDING or STAGING, the update
// process can get stuck in that state. However, when the agent reconnects,
// it resumes where it stopped previously.
#UpdateInProgressException: {
	Message_?: null | string @go(,*string)
}

#UpdateServiceInput: {
	// The capacity provider strategy to update the service to use.
	//
	// If the service is using the default capacity provider strategy for the cluster,
	// the service can be updated to use one or more capacity providers as opposed
	// to the default capacity provider strategy. However, when a service is using
	// a capacity provider strategy that is not the default capacity provider strategy,
	// the service cannot be updated to use the cluster's default capacity provider
	// strategy.
	//
	// A capacity provider strategy consists of one or more capacity providers along
	// with the base and weight to assign to them. A capacity provider must be associated
	// with the cluster to be used in a capacity provider strategy. The PutClusterCapacityProviders
	// API is used to associate a capacity provider with a cluster. Only capacity
	// providers with an ACTIVE or UPDATING status can be used.
	//
	// If specifying a capacity provider that uses an Auto Scaling group, the capacity
	// provider must already be created. New capacity providers can be created with
	// the CreateCapacityProvider API operation.
	//
	// To use a Fargate capacity provider, specify either the FARGATE or FARGATE_SPOT
	// capacity providers. The Fargate capacity providers are available to all accounts
	// and only need to be associated with a cluster to be used.
	//
	// The PutClusterCapacityProviders API operation is used to update the list
	// of available capacity providers for a cluster after the cluster is created.
	CapacityProviderStrategy: [...null | #CapacityProviderStrategyItem] @go(,[]*CapacityProviderStrategyItem)

	// The short name or full Amazon Resource Name (ARN) of the cluster that your
	// service is running on. If you do not specify a cluster, the default cluster
	// is assumed.
	Cluster?: null | string @go(,*string)

	// Optional deployment parameters that control how many tasks run during the
	// deployment and the ordering of stopping and starting tasks.
	DeploymentConfiguration?: null | #DeploymentConfiguration @go(,*DeploymentConfiguration)

	// The number of instantiations of the task to place and keep running in your
	// service.
	DesiredCount?: null | int64 @go(,*int64)

	// If true, this enables execute command functionality on all task containers.
	//
	// If you do not want to override the value that was set when the service was
	// created, you can set this to null when performing this action.
	EnableExecuteCommand?: null | bool @go(,*bool)

	// Whether to force a new deployment of the service. Deployments are not forced
	// by default. You can use this option to trigger a new deployment with no service
	// definition changes. For example, you can update a service's tasks to use
	// a newer Docker image with the same image/tag combination (my_image:latest)
	// or to roll Fargate tasks onto a newer platform version.
	ForceNewDeployment?: null | bool @go(,*bool)

	// The period of time, in seconds, that the Amazon ECS service scheduler should
	// ignore unhealthy Elastic Load Balancing target health checks after a task
	// has first started. This is only valid if your service is configured to use
	// a load balancer. If your service's tasks take a while to start and respond
	// to Elastic Load Balancing health checks, you can specify a health check grace
	// period of up to 2,147,483,647 seconds. During that time, the Amazon ECS service
	// scheduler ignores the Elastic Load Balancing health check status. This grace
	// period can prevent the ECS service scheduler from marking tasks as unhealthy
	// and stopping them before they have time to come up.
	HealthCheckGracePeriodSeconds?: null | int64 @go(,*int64)

	// An object representing the network configuration for the service.
	NetworkConfiguration?: null | #NetworkConfiguration @go(,*NetworkConfiguration)

	// An array of task placement constraint objects to update the service to use.
	// If no value is specified, the existing placement constraints for the service
	// will remain unchanged. If this value is specified, it will override any existing
	// placement constraints defined for the service. To remove all existing placement
	// constraints, specify an empty array.
	//
	// You can specify a maximum of 10 constraints per task (this limit includes
	// constraints in the task definition and those specified at runtime).
	PlacementConstraints: [...null | #PlacementConstraint] @go(,[]*PlacementConstraint)

	// The task placement strategy objects to update the service to use. If no value
	// is specified, the existing placement strategy for the service will remain
	// unchanged. If this value is specified, it will override the existing placement
	// strategy defined for the service. To remove an existing placement strategy,
	// specify an empty object.
	//
	// You can specify a maximum of five strategy rules per service.
	PlacementStrategy: [...null | #PlacementStrategy] @go(,[]*PlacementStrategy)

	// The platform version on which your tasks in the service are running. A platform
	// version is only specified for tasks using the Fargate launch type. If a platform
	// version is not specified, the LATEST platform version is used by default.
	// For more information, see Fargate Platform Versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	PlatformVersion?: null | string @go(,*string)

	// The name of the service to update.
	//
	// Service is a required field
	Service?: null | string @go(,*string)

	// The family and revision (family:revision) or full ARN of the task definition
	// to run in your service. If a revision is not specified, the latest ACTIVE
	// revision is used. If you modify the task definition with UpdateService, Amazon
	// ECS spawns a task with the new version of the task definition and then stops
	// an old task after the new version is running.
	TaskDefinition?: null | string @go(,*string)
}

#UpdateServiceOutput: {
	// The full description of your service following the update call.
	Service?: null | #Service @go(,*Service)
}

#UpdateServicePrimaryTaskSetInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the service that the task set exists in.
	//
	// Cluster is a required field
	Cluster?: null | string @go(,*string)

	// The short name or full Amazon Resource Name (ARN) of the task set to set
	// as the primary task set in the deployment.
	//
	// PrimaryTaskSet is a required field
	PrimaryTaskSet?: null | string @go(,*string)

	// The short name or full Amazon Resource Name (ARN) of the service that the
	// task set exists in.
	//
	// Service is a required field
	Service?: null | string @go(,*string)
}

#UpdateServicePrimaryTaskSetOutput: {
	// Details about the task set.
	TaskSet?: null | #TaskSet @go(,*TaskSet)
}

#UpdateTaskSetInput: {
	// The short name or full Amazon Resource Name (ARN) of the cluster that hosts
	// the service that the task set exists in.
	//
	// Cluster is a required field
	Cluster?: null | string @go(,*string)

	// A floating-point percentage of the desired number of tasks to place and keep
	// running in the task set.
	//
	// Scale is a required field
	Scale?: null | #Scale @go(,*Scale)

	// The short name or full Amazon Resource Name (ARN) of the service that the
	// task set exists in.
	//
	// Service is a required field
	Service?: null | string @go(,*string)

	// The short name or full Amazon Resource Name (ARN) of the task set to update.
	//
	// TaskSet is a required field
	TaskSet?: null | string @go(,*string)
}

#UpdateTaskSetOutput: {
	// Details about the task set.
	TaskSet?: null | #TaskSet @go(,*TaskSet)
}

// The Docker and Amazon ECS container agent version information about a container
// instance.
#VersionInfo: {
	// The Git commit hash for the Amazon ECS container agent build on the amazon-ecs-agent
	// (https://github.com/aws/amazon-ecs-agent/commits/master) GitHub repository.
	AgentHash?: null | string @go(,*string)

	// The version number of the Amazon ECS container agent.
	AgentVersion?: null | string @go(,*string)

	// The Docker version running on the container instance.
	DockerVersion?: null | string @go(,*string)
}

// A data volume used in a task definition. For tasks that use the Amazon Elastic
// File System (Amazon EFS), specify an efsVolumeConfiguration. For Windows
// tasks that use Amazon FSx for Windows File Server file system, specify a
// fsxWindowsFileServerVolumeConfiguration. For tasks that use a Docker volume,
// specify a DockerVolumeConfiguration. For tasks that use a bind mount host
// volume, specify a host and optional sourcePath. For more information, see
// Using Data Volumes in Tasks (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
#Volume: {
	// This parameter is specified when you are using Docker volumes.
	//
	// Windows containers only support the use of the local driver. To use bind
	// mounts, specify the host parameter instead.
	//
	// Docker volumes are not supported by tasks run on Fargate.
	DockerVolumeConfiguration?: null | #DockerVolumeConfiguration @go(,*DockerVolumeConfiguration)

	// This parameter is specified when you are using an Amazon Elastic File System
	// file system for task storage.
	EfsVolumeConfiguration?: null | #EFSVolumeConfiguration @go(,*EFSVolumeConfiguration)

	// This parameter is specified when you are using Amazon FSx for Windows File
	// Server file system for task storage.
	FsxWindowsFileServerVolumeConfiguration?: null | #FSxWindowsFileServerVolumeConfiguration @go(,*FSxWindowsFileServerVolumeConfiguration)

	// This parameter is specified when you are using bind mount host volumes. The
	// contents of the host parameter determine whether your bind mount host volume
	// persists on the host container instance and where it is stored. If the host
	// parameter is empty, then the Docker daemon assigns a host path for your data
	// volume. However, the data is not guaranteed to persist after the containers
	// associated with it stop running.
	//
	// Windows containers can mount whole directories on the same drive as $env:ProgramData.
	// Windows containers cannot mount directories on a different drive, and mount
	// point cannot be across drives. For example, you can mount C:\my\path:C:\my\path
	// and D:\:D:\, but not D:\my\path:C:\my\path or D:\:C:\my\path.
	Host?: null | #HostVolumeProperties @go(,*HostVolumeProperties)

	// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers,
	// underscores, and hyphens are allowed. This name is referenced in the sourceVolume
	// parameter of container definition mountPoints.
	Name?: null | string @go(,*string)
}

// Details on a data volume from another container in the same task definition.
#VolumeFrom: {
	// If this value is true, the container has read-only access to the volume.
	// If this value is false, then the container can write to the volume. The default
	// value is false.
	ReadOnly?: null | bool @go(,*bool)

	// The name of another container within the same task definition from which
	// to mount volumes.
	SourceContainer?: null | string @go(,*string)
}

// AgentUpdateStatusPending is a AgentUpdateStatus enum value
#AgentUpdateStatusPending: "PENDING"

// AgentUpdateStatusStaging is a AgentUpdateStatus enum value
#AgentUpdateStatusStaging: "STAGING"

// AgentUpdateStatusStaged is a AgentUpdateStatus enum value
#AgentUpdateStatusStaged: "STAGED"

// AgentUpdateStatusUpdating is a AgentUpdateStatus enum value
#AgentUpdateStatusUpdating: "UPDATING"

// AgentUpdateStatusUpdated is a AgentUpdateStatus enum value
#AgentUpdateStatusUpdated: "UPDATED"

// AgentUpdateStatusFailed is a AgentUpdateStatus enum value
#AgentUpdateStatusFailed: "FAILED"

// AssignPublicIpEnabled is a AssignPublicIp enum value
#AssignPublicIpEnabled: "ENABLED"

// AssignPublicIpDisabled is a AssignPublicIp enum value
#AssignPublicIpDisabled: "DISABLED"

// CapacityProviderFieldTags is a CapacityProviderField enum value
#CapacityProviderFieldTags: "TAGS"

// CapacityProviderStatusActive is a CapacityProviderStatus enum value
#CapacityProviderStatusActive: "ACTIVE"

// CapacityProviderStatusInactive is a CapacityProviderStatus enum value
#CapacityProviderStatusInactive: "INACTIVE"

// CapacityProviderUpdateStatusDeleteInProgress is a CapacityProviderUpdateStatus enum value
#CapacityProviderUpdateStatusDeleteInProgress: "DELETE_IN_PROGRESS"

// CapacityProviderUpdateStatusDeleteComplete is a CapacityProviderUpdateStatus enum value
#CapacityProviderUpdateStatusDeleteComplete: "DELETE_COMPLETE"

// CapacityProviderUpdateStatusDeleteFailed is a CapacityProviderUpdateStatus enum value
#CapacityProviderUpdateStatusDeleteFailed: "DELETE_FAILED"

// CapacityProviderUpdateStatusUpdateInProgress is a CapacityProviderUpdateStatus enum value
#CapacityProviderUpdateStatusUpdateInProgress: "UPDATE_IN_PROGRESS"

// CapacityProviderUpdateStatusUpdateComplete is a CapacityProviderUpdateStatus enum value
#CapacityProviderUpdateStatusUpdateComplete: "UPDATE_COMPLETE"

// CapacityProviderUpdateStatusUpdateFailed is a CapacityProviderUpdateStatus enum value
#CapacityProviderUpdateStatusUpdateFailed: "UPDATE_FAILED"

// ClusterFieldAttachments is a ClusterField enum value
#ClusterFieldAttachments: "ATTACHMENTS"

// ClusterFieldConfigurations is a ClusterField enum value
#ClusterFieldConfigurations: "CONFIGURATIONS"

// ClusterFieldSettings is a ClusterField enum value
#ClusterFieldSettings: "SETTINGS"

// ClusterFieldStatistics is a ClusterField enum value
#ClusterFieldStatistics: "STATISTICS"

// ClusterFieldTags is a ClusterField enum value
#ClusterFieldTags: "TAGS"

// ClusterSettingNameContainerInsights is a ClusterSettingName enum value
#ClusterSettingNameContainerInsights: "containerInsights"

// CompatibilityEc2 is a Compatibility enum value
#CompatibilityEc2: "EC2"

// CompatibilityFargate is a Compatibility enum value
#CompatibilityFargate: "FARGATE"

// CompatibilityExternal is a Compatibility enum value
#CompatibilityExternal: "EXTERNAL"

// ConnectivityConnected is a Connectivity enum value
#ConnectivityConnected: "CONNECTED"

// ConnectivityDisconnected is a Connectivity enum value
#ConnectivityDisconnected: "DISCONNECTED"

// ContainerConditionStart is a ContainerCondition enum value
#ContainerConditionStart: "START"

// ContainerConditionComplete is a ContainerCondition enum value
#ContainerConditionComplete: "COMPLETE"

// ContainerConditionSuccess is a ContainerCondition enum value
#ContainerConditionSuccess: "SUCCESS"

// ContainerConditionHealthy is a ContainerCondition enum value
#ContainerConditionHealthy: "HEALTHY"

// ContainerInstanceFieldTags is a ContainerInstanceField enum value
#ContainerInstanceFieldTags: "TAGS"

// ContainerInstanceStatusActive is a ContainerInstanceStatus enum value
#ContainerInstanceStatusActive: "ACTIVE"

// ContainerInstanceStatusDraining is a ContainerInstanceStatus enum value
#ContainerInstanceStatusDraining: "DRAINING"

// ContainerInstanceStatusRegistering is a ContainerInstanceStatus enum value
#ContainerInstanceStatusRegistering: "REGISTERING"

// ContainerInstanceStatusDeregistering is a ContainerInstanceStatus enum value
#ContainerInstanceStatusDeregistering: "DEREGISTERING"

// ContainerInstanceStatusRegistrationFailed is a ContainerInstanceStatus enum value
#ContainerInstanceStatusRegistrationFailed: "REGISTRATION_FAILED"

// DeploymentControllerTypeEcs is a DeploymentControllerType enum value
#DeploymentControllerTypeEcs: "ECS"

// DeploymentControllerTypeCodeDeploy is a DeploymentControllerType enum value
#DeploymentControllerTypeCodeDeploy: "CODE_DEPLOY"

// DeploymentControllerTypeExternal is a DeploymentControllerType enum value
#DeploymentControllerTypeExternal: "EXTERNAL"

// DeploymentRolloutStateCompleted is a DeploymentRolloutState enum value
#DeploymentRolloutStateCompleted: "COMPLETED"

// DeploymentRolloutStateFailed is a DeploymentRolloutState enum value
#DeploymentRolloutStateFailed: "FAILED"

// DeploymentRolloutStateInProgress is a DeploymentRolloutState enum value
#DeploymentRolloutStateInProgress: "IN_PROGRESS"

// DesiredStatusRunning is a DesiredStatus enum value
#DesiredStatusRunning: "RUNNING"

// DesiredStatusPending is a DesiredStatus enum value
#DesiredStatusPending: "PENDING"

// DesiredStatusStopped is a DesiredStatus enum value
#DesiredStatusStopped: "STOPPED"

// DeviceCgroupPermissionRead is a DeviceCgroupPermission enum value
#DeviceCgroupPermissionRead: "read"

// DeviceCgroupPermissionWrite is a DeviceCgroupPermission enum value
#DeviceCgroupPermissionWrite: "write"

// DeviceCgroupPermissionMknod is a DeviceCgroupPermission enum value
#DeviceCgroupPermissionMknod: "mknod"

// EFSAuthorizationConfigIAMEnabled is a EFSAuthorizationConfigIAM enum value
#EFSAuthorizationConfigIAMEnabled: "ENABLED"

// EFSAuthorizationConfigIAMDisabled is a EFSAuthorizationConfigIAM enum value
#EFSAuthorizationConfigIAMDisabled: "DISABLED"

// EFSTransitEncryptionEnabled is a EFSTransitEncryption enum value
#EFSTransitEncryptionEnabled: "ENABLED"

// EFSTransitEncryptionDisabled is a EFSTransitEncryption enum value
#EFSTransitEncryptionDisabled: "DISABLED"

// EnvironmentFileTypeS3 is a EnvironmentFileType enum value
#EnvironmentFileTypeS3: "s3"

// ExecuteCommandLoggingNone is a ExecuteCommandLogging enum value
#ExecuteCommandLoggingNone: "NONE"

// ExecuteCommandLoggingDefault is a ExecuteCommandLogging enum value
#ExecuteCommandLoggingDefault: "DEFAULT"

// ExecuteCommandLoggingOverride is a ExecuteCommandLogging enum value
#ExecuteCommandLoggingOverride: "OVERRIDE"

// FirelensConfigurationTypeFluentd is a FirelensConfigurationType enum value
#FirelensConfigurationTypeFluentd: "fluentd"

// FirelensConfigurationTypeFluentbit is a FirelensConfigurationType enum value
#FirelensConfigurationTypeFluentbit: "fluentbit"

// HealthStatusHealthy is a HealthStatus enum value
#HealthStatusHealthy: "HEALTHY"

// HealthStatusUnhealthy is a HealthStatus enum value
#HealthStatusUnhealthy: "UNHEALTHY"

// HealthStatusUnknown is a HealthStatus enum value
#HealthStatusUnknown: "UNKNOWN"

// IpcModeHost is a IpcMode enum value
#IpcModeHost: "host"

// IpcModeTask is a IpcMode enum value
#IpcModeTask: "task"

// IpcModeNone is a IpcMode enum value
#IpcModeNone: "none"

// LaunchTypeEc2 is a LaunchType enum value
#LaunchTypeEc2: "EC2"

// LaunchTypeFargate is a LaunchType enum value
#LaunchTypeFargate: "FARGATE"

// LaunchTypeExternal is a LaunchType enum value
#LaunchTypeExternal: "EXTERNAL"

// LogDriverJsonFile is a LogDriver enum value
#LogDriverJsonFile: "json-file"

// LogDriverSyslog is a LogDriver enum value
#LogDriverSyslog: "syslog"

// LogDriverJournald is a LogDriver enum value
#LogDriverJournald: "journald"

// LogDriverGelf is a LogDriver enum value
#LogDriverGelf: "gelf"

// LogDriverFluentd is a LogDriver enum value
#LogDriverFluentd: "fluentd"

// LogDriverAwslogs is a LogDriver enum value
#LogDriverAwslogs: "awslogs"

// LogDriverSplunk is a LogDriver enum value
#LogDriverSplunk: "splunk"

// LogDriverAwsfirelens is a LogDriver enum value
#LogDriverAwsfirelens: "awsfirelens"

// ManagedAgentNameExecuteCommandAgent is a ManagedAgentName enum value
#ManagedAgentNameExecuteCommandAgent: "ExecuteCommandAgent"

// ManagedScalingStatusEnabled is a ManagedScalingStatus enum value
#ManagedScalingStatusEnabled: "ENABLED"

// ManagedScalingStatusDisabled is a ManagedScalingStatus enum value
#ManagedScalingStatusDisabled: "DISABLED"

// ManagedTerminationProtectionEnabled is a ManagedTerminationProtection enum value
#ManagedTerminationProtectionEnabled: "ENABLED"

// ManagedTerminationProtectionDisabled is a ManagedTerminationProtection enum value
#ManagedTerminationProtectionDisabled: "DISABLED"

// NetworkModeBridge is a NetworkMode enum value
#NetworkModeBridge: "bridge"

// NetworkModeHost is a NetworkMode enum value
#NetworkModeHost: "host"

// NetworkModeAwsvpc is a NetworkMode enum value
#NetworkModeAwsvpc: "awsvpc"

// NetworkModeNone is a NetworkMode enum value
#NetworkModeNone: "none"

// PidModeHost is a PidMode enum value
#PidModeHost: "host"

// PidModeTask is a PidMode enum value
#PidModeTask: "task"

// PlacementConstraintTypeDistinctInstance is a PlacementConstraintType enum value
#PlacementConstraintTypeDistinctInstance: "distinctInstance"

// PlacementConstraintTypeMemberOf is a PlacementConstraintType enum value
#PlacementConstraintTypeMemberOf: "memberOf"

// PlacementStrategyTypeRandom is a PlacementStrategyType enum value
#PlacementStrategyTypeRandom: "random"

// PlacementStrategyTypeSpread is a PlacementStrategyType enum value
#PlacementStrategyTypeSpread: "spread"

// PlacementStrategyTypeBinpack is a PlacementStrategyType enum value
#PlacementStrategyTypeBinpack: "binpack"

// PlatformDeviceTypeGpu is a PlatformDeviceType enum value
#PlatformDeviceTypeGpu: "GPU"

// PropagateTagsTaskDefinition is a PropagateTags enum value
#PropagateTagsTaskDefinition: "TASK_DEFINITION"

// PropagateTagsService is a PropagateTags enum value
#PropagateTagsService: "SERVICE"

// ProxyConfigurationTypeAppmesh is a ProxyConfigurationType enum value
#ProxyConfigurationTypeAppmesh: "APPMESH"

// ResourceTypeGpu is a ResourceType enum value
#ResourceTypeGpu: "GPU"

// ResourceTypeInferenceAccelerator is a ResourceType enum value
#ResourceTypeInferenceAccelerator: "InferenceAccelerator"

// ScaleUnitPercent is a ScaleUnit enum value
#ScaleUnitPercent: "PERCENT"

// SchedulingStrategyReplica is a SchedulingStrategy enum value
#SchedulingStrategyReplica: "REPLICA"

// SchedulingStrategyDaemon is a SchedulingStrategy enum value
#SchedulingStrategyDaemon: "DAEMON"

// ScopeTask is a Scope enum value
#ScopeTask: "task"

// ScopeShared is a Scope enum value
#ScopeShared: "shared"

// ServiceFieldTags is a ServiceField enum value
#ServiceFieldTags: "TAGS"

// SettingNameServiceLongArnFormat is a SettingName enum value
#SettingNameServiceLongArnFormat: "serviceLongArnFormat"

// SettingNameTaskLongArnFormat is a SettingName enum value
#SettingNameTaskLongArnFormat: "taskLongArnFormat"

// SettingNameContainerInstanceLongArnFormat is a SettingName enum value
#SettingNameContainerInstanceLongArnFormat: "containerInstanceLongArnFormat"

// SettingNameAwsvpcTrunking is a SettingName enum value
#SettingNameAwsvpcTrunking: "awsvpcTrunking"

// SettingNameContainerInsights is a SettingName enum value
#SettingNameContainerInsights: "containerInsights"

// SortOrderAsc is a SortOrder enum value
#SortOrderAsc: "ASC"

// SortOrderDesc is a SortOrder enum value
#SortOrderDesc: "DESC"

// StabilityStatusSteadyState is a StabilityStatus enum value
#StabilityStatusSteadyState: "STEADY_STATE"

// StabilityStatusStabilizing is a StabilityStatus enum value
#StabilityStatusStabilizing: "STABILIZING"

// TargetTypeContainerInstance is a TargetType enum value
#TargetTypeContainerInstance: "container-instance"

// TaskDefinitionFamilyStatusActive is a TaskDefinitionFamilyStatus enum value
#TaskDefinitionFamilyStatusActive: "ACTIVE"

// TaskDefinitionFamilyStatusInactive is a TaskDefinitionFamilyStatus enum value
#TaskDefinitionFamilyStatusInactive: "INACTIVE"

// TaskDefinitionFamilyStatusAll is a TaskDefinitionFamilyStatus enum value
#TaskDefinitionFamilyStatusAll: "ALL"

// TaskDefinitionFieldTags is a TaskDefinitionField enum value
#TaskDefinitionFieldTags: "TAGS"

// TaskDefinitionPlacementConstraintTypeMemberOf is a TaskDefinitionPlacementConstraintType enum value
#TaskDefinitionPlacementConstraintTypeMemberOf: "memberOf"

// TaskDefinitionStatusActive is a TaskDefinitionStatus enum value
#TaskDefinitionStatusActive: "ACTIVE"

// TaskDefinitionStatusInactive is a TaskDefinitionStatus enum value
#TaskDefinitionStatusInactive: "INACTIVE"

// TaskFieldTags is a TaskField enum value
#TaskFieldTags: "TAGS"

// TaskSetFieldTags is a TaskSetField enum value
#TaskSetFieldTags: "TAGS"

// TaskStopCodeTaskFailedToStart is a TaskStopCode enum value
#TaskStopCodeTaskFailedToStart: "TaskFailedToStart"

// TaskStopCodeEssentialContainerExited is a TaskStopCode enum value
#TaskStopCodeEssentialContainerExited: "EssentialContainerExited"

// TaskStopCodeUserInitiated is a TaskStopCode enum value
#TaskStopCodeUserInitiated: "UserInitiated"

// TransportProtocolTcp is a TransportProtocol enum value
#TransportProtocolTcp: "tcp"

// TransportProtocolUdp is a TransportProtocol enum value
#TransportProtocolUdp: "udp"

// UlimitNameCore is a UlimitName enum value
#UlimitNameCore: "core"

// UlimitNameCpu is a UlimitName enum value
#UlimitNameCpu: "cpu"

// UlimitNameData is a UlimitName enum value
#UlimitNameData: "data"

// UlimitNameFsize is a UlimitName enum value
#UlimitNameFsize: "fsize"

// UlimitNameLocks is a UlimitName enum value
#UlimitNameLocks: "locks"

// UlimitNameMemlock is a UlimitName enum value
#UlimitNameMemlock: "memlock"

// UlimitNameMsgqueue is a UlimitName enum value
#UlimitNameMsgqueue: "msgqueue"

// UlimitNameNice is a UlimitName enum value
#UlimitNameNice: "nice"

// UlimitNameNofile is a UlimitName enum value
#UlimitNameNofile: "nofile"

// UlimitNameNproc is a UlimitName enum value
#UlimitNameNproc: "nproc"

// UlimitNameRss is a UlimitName enum value
#UlimitNameRss: "rss"

// UlimitNameRtprio is a UlimitName enum value
#UlimitNameRtprio: "rtprio"

// UlimitNameRttime is a UlimitName enum value
#UlimitNameRttime: "rttime"

// UlimitNameSigpending is a UlimitName enum value
#UlimitNameSigpending: "sigpending"

// UlimitNameStack is a UlimitName enum value
#UlimitNameStack: "stack"
