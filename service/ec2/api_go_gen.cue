// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/aws/aws-sdk-go/service/ec2

package ec2

import "time"

_#opAcceptReservedInstancesExchangeQuote: "AcceptReservedInstancesExchangeQuote"

_#opAcceptTransitGatewayMulticastDomainAssociations: "AcceptTransitGatewayMulticastDomainAssociations"

_#opAcceptTransitGatewayPeeringAttachment: "AcceptTransitGatewayPeeringAttachment"

_#opAcceptTransitGatewayVpcAttachment: "AcceptTransitGatewayVpcAttachment"

_#opAcceptVpcEndpointConnections: "AcceptVpcEndpointConnections"

_#opAcceptVpcPeeringConnection: "AcceptVpcPeeringConnection"

_#opAdvertiseByoipCidr: "AdvertiseByoipCidr"

_#opAllocateAddress: "AllocateAddress"

_#opAllocateHosts: "AllocateHosts"

_#opApplySecurityGroupsToClientVpnTargetNetwork: "ApplySecurityGroupsToClientVpnTargetNetwork"

_#opAssignIpv6Addresses: "AssignIpv6Addresses"

_#opAssignPrivateIpAddresses: "AssignPrivateIpAddresses"

_#opAssociateAddress: "AssociateAddress"

_#opAssociateClientVpnTargetNetwork: "AssociateClientVpnTargetNetwork"

_#opAssociateDhcpOptions: "AssociateDhcpOptions"

_#opAssociateEnclaveCertificateIamRole: "AssociateEnclaveCertificateIamRole"

_#opAssociateIamInstanceProfile: "AssociateIamInstanceProfile"

_#opAssociateInstanceEventWindow: "AssociateInstanceEventWindow"

_#opAssociateRouteTable: "AssociateRouteTable"

_#opAssociateSubnetCidrBlock: "AssociateSubnetCidrBlock"

_#opAssociateTransitGatewayMulticastDomain: "AssociateTransitGatewayMulticastDomain"

_#opAssociateTransitGatewayRouteTable: "AssociateTransitGatewayRouteTable"

_#opAssociateTrunkInterface: "AssociateTrunkInterface"

_#opAssociateVpcCidrBlock: "AssociateVpcCidrBlock"

_#opAttachClassicLinkVpc: "AttachClassicLinkVpc"

_#opAttachInternetGateway: "AttachInternetGateway"

_#opAttachNetworkInterface: "AttachNetworkInterface"

_#opAttachVolume: "AttachVolume"

_#opAttachVpnGateway: "AttachVpnGateway"

_#opAuthorizeClientVpnIngress: "AuthorizeClientVpnIngress"

_#opAuthorizeSecurityGroupEgress: "AuthorizeSecurityGroupEgress"

_#opAuthorizeSecurityGroupIngress: "AuthorizeSecurityGroupIngress"

_#opBundleInstance: "BundleInstance"

_#opCancelBundleTask: "CancelBundleTask"

_#opCancelCapacityReservation: "CancelCapacityReservation"

_#opCancelConversionTask: "CancelConversionTask"

_#opCancelExportTask: "CancelExportTask"

_#opCancelImportTask: "CancelImportTask"

_#opCancelReservedInstancesListing: "CancelReservedInstancesListing"

_#opCancelSpotFleetRequests: "CancelSpotFleetRequests"

_#opCancelSpotInstanceRequests: "CancelSpotInstanceRequests"

_#opConfirmProductInstance: "ConfirmProductInstance"

_#opCopyFpgaImage: "CopyFpgaImage"

_#opCopyImage: "CopyImage"

_#opCopySnapshot: "CopySnapshot"

_#opCreateCapacityReservation: "CreateCapacityReservation"

_#opCreateCarrierGateway: "CreateCarrierGateway"

_#opCreateClientVpnEndpoint: "CreateClientVpnEndpoint"

_#opCreateClientVpnRoute: "CreateClientVpnRoute"

_#opCreateCustomerGateway: "CreateCustomerGateway"

_#opCreateDefaultSubnet: "CreateDefaultSubnet"

_#opCreateDefaultVpc: "CreateDefaultVpc"

_#opCreateDhcpOptions: "CreateDhcpOptions"

_#opCreateEgressOnlyInternetGateway: "CreateEgressOnlyInternetGateway"

_#opCreateFleet: "CreateFleet"

_#opCreateFlowLogs: "CreateFlowLogs"

_#opCreateFpgaImage: "CreateFpgaImage"

_#opCreateImage: "CreateImage"

_#opCreateInstanceEventWindow: "CreateInstanceEventWindow"

_#opCreateInstanceExportTask: "CreateInstanceExportTask"

_#opCreateInternetGateway: "CreateInternetGateway"

_#opCreateKeyPair: "CreateKeyPair"

_#opCreateLaunchTemplate: "CreateLaunchTemplate"

_#opCreateLaunchTemplateVersion: "CreateLaunchTemplateVersion"

_#opCreateLocalGatewayRoute: "CreateLocalGatewayRoute"

_#opCreateLocalGatewayRouteTableVpcAssociation: "CreateLocalGatewayRouteTableVpcAssociation"

_#opCreateManagedPrefixList: "CreateManagedPrefixList"

_#opCreateNatGateway: "CreateNatGateway"

_#opCreateNetworkAcl: "CreateNetworkAcl"

_#opCreateNetworkAclEntry: "CreateNetworkAclEntry"

_#opCreateNetworkInsightsPath: "CreateNetworkInsightsPath"

_#opCreateNetworkInterface: "CreateNetworkInterface"

_#opCreateNetworkInterfacePermission: "CreateNetworkInterfacePermission"

_#opCreatePlacementGroup: "CreatePlacementGroup"

_#opCreateReplaceRootVolumeTask: "CreateReplaceRootVolumeTask"

_#opCreateReservedInstancesListing: "CreateReservedInstancesListing"

_#opCreateRestoreImageTask: "CreateRestoreImageTask"

_#opCreateRoute: "CreateRoute"

_#opCreateRouteTable: "CreateRouteTable"

_#opCreateSecurityGroup: "CreateSecurityGroup"

_#opCreateSnapshot: "CreateSnapshot"

_#opCreateSnapshots: "CreateSnapshots"

_#opCreateSpotDatafeedSubscription: "CreateSpotDatafeedSubscription"

_#opCreateStoreImageTask: "CreateStoreImageTask"

_#opCreateSubnet: "CreateSubnet"

_#opCreateSubnetCidrReservation: "CreateSubnetCidrReservation"

_#opCreateTags: "CreateTags"

_#opCreateTrafficMirrorFilter: "CreateTrafficMirrorFilter"

_#opCreateTrafficMirrorFilterRule: "CreateTrafficMirrorFilterRule"

_#opCreateTrafficMirrorSession: "CreateTrafficMirrorSession"

_#opCreateTrafficMirrorTarget: "CreateTrafficMirrorTarget"

_#opCreateTransitGateway: "CreateTransitGateway"

_#opCreateTransitGatewayConnect: "CreateTransitGatewayConnect"

_#opCreateTransitGatewayConnectPeer: "CreateTransitGatewayConnectPeer"

_#opCreateTransitGatewayMulticastDomain: "CreateTransitGatewayMulticastDomain"

_#opCreateTransitGatewayPeeringAttachment: "CreateTransitGatewayPeeringAttachment"

_#opCreateTransitGatewayPrefixListReference: "CreateTransitGatewayPrefixListReference"

_#opCreateTransitGatewayRoute: "CreateTransitGatewayRoute"

_#opCreateTransitGatewayRouteTable: "CreateTransitGatewayRouteTable"

_#opCreateTransitGatewayVpcAttachment: "CreateTransitGatewayVpcAttachment"

_#opCreateVolume: "CreateVolume"

_#opCreateVpc: "CreateVpc"

_#opCreateVpcEndpoint: "CreateVpcEndpoint"

_#opCreateVpcEndpointConnectionNotification: "CreateVpcEndpointConnectionNotification"

_#opCreateVpcEndpointServiceConfiguration: "CreateVpcEndpointServiceConfiguration"

_#opCreateVpcPeeringConnection: "CreateVpcPeeringConnection"

_#opCreateVpnConnection: "CreateVpnConnection"

_#opCreateVpnConnectionRoute: "CreateVpnConnectionRoute"

_#opCreateVpnGateway: "CreateVpnGateway"

_#opDeleteCarrierGateway: "DeleteCarrierGateway"

_#opDeleteClientVpnEndpoint: "DeleteClientVpnEndpoint"

_#opDeleteClientVpnRoute: "DeleteClientVpnRoute"

_#opDeleteCustomerGateway: "DeleteCustomerGateway"

_#opDeleteDhcpOptions: "DeleteDhcpOptions"

_#opDeleteEgressOnlyInternetGateway: "DeleteEgressOnlyInternetGateway"

_#opDeleteFleets: "DeleteFleets"

_#opDeleteFlowLogs: "DeleteFlowLogs"

_#opDeleteFpgaImage: "DeleteFpgaImage"

_#opDeleteInstanceEventWindow: "DeleteInstanceEventWindow"

_#opDeleteInternetGateway: "DeleteInternetGateway"

_#opDeleteKeyPair: "DeleteKeyPair"

_#opDeleteLaunchTemplate: "DeleteLaunchTemplate"

_#opDeleteLaunchTemplateVersions: "DeleteLaunchTemplateVersions"

_#opDeleteLocalGatewayRoute: "DeleteLocalGatewayRoute"

_#opDeleteLocalGatewayRouteTableVpcAssociation: "DeleteLocalGatewayRouteTableVpcAssociation"

_#opDeleteManagedPrefixList: "DeleteManagedPrefixList"

_#opDeleteNatGateway: "DeleteNatGateway"

_#opDeleteNetworkAcl: "DeleteNetworkAcl"

_#opDeleteNetworkAclEntry: "DeleteNetworkAclEntry"

_#opDeleteNetworkInsightsAnalysis: "DeleteNetworkInsightsAnalysis"

_#opDeleteNetworkInsightsPath: "DeleteNetworkInsightsPath"

_#opDeleteNetworkInterface: "DeleteNetworkInterface"

_#opDeleteNetworkInterfacePermission: "DeleteNetworkInterfacePermission"

_#opDeletePlacementGroup: "DeletePlacementGroup"

_#opDeleteQueuedReservedInstances: "DeleteQueuedReservedInstances"

_#opDeleteRoute: "DeleteRoute"

_#opDeleteRouteTable: "DeleteRouteTable"

_#opDeleteSecurityGroup: "DeleteSecurityGroup"

_#opDeleteSnapshot: "DeleteSnapshot"

_#opDeleteSpotDatafeedSubscription: "DeleteSpotDatafeedSubscription"

_#opDeleteSubnet: "DeleteSubnet"

_#opDeleteSubnetCidrReservation: "DeleteSubnetCidrReservation"

_#opDeleteTags: "DeleteTags"

_#opDeleteTrafficMirrorFilter: "DeleteTrafficMirrorFilter"

_#opDeleteTrafficMirrorFilterRule: "DeleteTrafficMirrorFilterRule"

_#opDeleteTrafficMirrorSession: "DeleteTrafficMirrorSession"

_#opDeleteTrafficMirrorTarget: "DeleteTrafficMirrorTarget"

_#opDeleteTransitGateway: "DeleteTransitGateway"

_#opDeleteTransitGatewayConnect: "DeleteTransitGatewayConnect"

_#opDeleteTransitGatewayConnectPeer: "DeleteTransitGatewayConnectPeer"

_#opDeleteTransitGatewayMulticastDomain: "DeleteTransitGatewayMulticastDomain"

_#opDeleteTransitGatewayPeeringAttachment: "DeleteTransitGatewayPeeringAttachment"

_#opDeleteTransitGatewayPrefixListReference: "DeleteTransitGatewayPrefixListReference"

_#opDeleteTransitGatewayRoute: "DeleteTransitGatewayRoute"

_#opDeleteTransitGatewayRouteTable: "DeleteTransitGatewayRouteTable"

_#opDeleteTransitGatewayVpcAttachment: "DeleteTransitGatewayVpcAttachment"

_#opDeleteVolume: "DeleteVolume"

_#opDeleteVpc: "DeleteVpc"

_#opDeleteVpcEndpointConnectionNotifications: "DeleteVpcEndpointConnectionNotifications"

_#opDeleteVpcEndpointServiceConfigurations: "DeleteVpcEndpointServiceConfigurations"

_#opDeleteVpcEndpoints: "DeleteVpcEndpoints"

_#opDeleteVpcPeeringConnection: "DeleteVpcPeeringConnection"

_#opDeleteVpnConnection: "DeleteVpnConnection"

_#opDeleteVpnConnectionRoute: "DeleteVpnConnectionRoute"

_#opDeleteVpnGateway: "DeleteVpnGateway"

_#opDeprovisionByoipCidr: "DeprovisionByoipCidr"

_#opDeregisterImage: "DeregisterImage"

_#opDeregisterInstanceEventNotificationAttributes: "DeregisterInstanceEventNotificationAttributes"

_#opDeregisterTransitGatewayMulticastGroupMembers: "DeregisterTransitGatewayMulticastGroupMembers"

_#opDeregisterTransitGatewayMulticastGroupSources: "DeregisterTransitGatewayMulticastGroupSources"

_#opDescribeAccountAttributes: "DescribeAccountAttributes"

_#opDescribeAddresses: "DescribeAddresses"

_#opDescribeAddressesAttribute: "DescribeAddressesAttribute"

_#opDescribeAggregateIdFormat: "DescribeAggregateIdFormat"

_#opDescribeAvailabilityZones: "DescribeAvailabilityZones"

_#opDescribeBundleTasks: "DescribeBundleTasks"

_#opDescribeByoipCidrs: "DescribeByoipCidrs"

_#opDescribeCapacityReservations: "DescribeCapacityReservations"

_#opDescribeCarrierGateways: "DescribeCarrierGateways"

_#opDescribeClassicLinkInstances: "DescribeClassicLinkInstances"

_#opDescribeClientVpnAuthorizationRules: "DescribeClientVpnAuthorizationRules"

_#opDescribeClientVpnConnections: "DescribeClientVpnConnections"

_#opDescribeClientVpnEndpoints: "DescribeClientVpnEndpoints"

_#opDescribeClientVpnRoutes: "DescribeClientVpnRoutes"

_#opDescribeClientVpnTargetNetworks: "DescribeClientVpnTargetNetworks"

_#opDescribeCoipPools: "DescribeCoipPools"

_#opDescribeConversionTasks: "DescribeConversionTasks"

_#opDescribeCustomerGateways: "DescribeCustomerGateways"

_#opDescribeDhcpOptions: "DescribeDhcpOptions"

_#opDescribeEgressOnlyInternetGateways: "DescribeEgressOnlyInternetGateways"

_#opDescribeElasticGpus: "DescribeElasticGpus"

_#opDescribeExportImageTasks: "DescribeExportImageTasks"

_#opDescribeExportTasks: "DescribeExportTasks"

_#opDescribeFastSnapshotRestores: "DescribeFastSnapshotRestores"

_#opDescribeFleetHistory: "DescribeFleetHistory"

_#opDescribeFleetInstances: "DescribeFleetInstances"

_#opDescribeFleets: "DescribeFleets"

_#opDescribeFlowLogs: "DescribeFlowLogs"

_#opDescribeFpgaImageAttribute: "DescribeFpgaImageAttribute"

_#opDescribeFpgaImages: "DescribeFpgaImages"

_#opDescribeHostReservationOfferings: "DescribeHostReservationOfferings"

_#opDescribeHostReservations: "DescribeHostReservations"

_#opDescribeHosts: "DescribeHosts"

_#opDescribeIamInstanceProfileAssociations: "DescribeIamInstanceProfileAssociations"

_#opDescribeIdFormat: "DescribeIdFormat"

_#opDescribeIdentityIdFormat: "DescribeIdentityIdFormat"

_#opDescribeImageAttribute: "DescribeImageAttribute"

_#opDescribeImages: "DescribeImages"

_#opDescribeImportImageTasks: "DescribeImportImageTasks"

_#opDescribeImportSnapshotTasks: "DescribeImportSnapshotTasks"

_#opDescribeInstanceAttribute: "DescribeInstanceAttribute"

_#opDescribeInstanceCreditSpecifications: "DescribeInstanceCreditSpecifications"

_#opDescribeInstanceEventNotificationAttributes: "DescribeInstanceEventNotificationAttributes"

_#opDescribeInstanceEventWindows: "DescribeInstanceEventWindows"

_#opDescribeInstanceStatus: "DescribeInstanceStatus"

_#opDescribeInstanceTypeOfferings: "DescribeInstanceTypeOfferings"

_#opDescribeInstanceTypes: "DescribeInstanceTypes"

_#opDescribeInstances: "DescribeInstances"

_#opDescribeInternetGateways: "DescribeInternetGateways"

_#opDescribeIpv6Pools: "DescribeIpv6Pools"

_#opDescribeKeyPairs: "DescribeKeyPairs"

_#opDescribeLaunchTemplateVersions: "DescribeLaunchTemplateVersions"

_#opDescribeLaunchTemplates: "DescribeLaunchTemplates"

_#opDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations: "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations"

_#opDescribeLocalGatewayRouteTableVpcAssociations: "DescribeLocalGatewayRouteTableVpcAssociations"

_#opDescribeLocalGatewayRouteTables: "DescribeLocalGatewayRouteTables"

_#opDescribeLocalGatewayVirtualInterfaceGroups: "DescribeLocalGatewayVirtualInterfaceGroups"

_#opDescribeLocalGatewayVirtualInterfaces: "DescribeLocalGatewayVirtualInterfaces"

_#opDescribeLocalGateways: "DescribeLocalGateways"

_#opDescribeManagedPrefixLists: "DescribeManagedPrefixLists"

_#opDescribeMovingAddresses: "DescribeMovingAddresses"

_#opDescribeNatGateways: "DescribeNatGateways"

_#opDescribeNetworkAcls: "DescribeNetworkAcls"

_#opDescribeNetworkInsightsAnalyses: "DescribeNetworkInsightsAnalyses"

_#opDescribeNetworkInsightsPaths: "DescribeNetworkInsightsPaths"

_#opDescribeNetworkInterfaceAttribute: "DescribeNetworkInterfaceAttribute"

_#opDescribeNetworkInterfacePermissions: "DescribeNetworkInterfacePermissions"

_#opDescribeNetworkInterfaces: "DescribeNetworkInterfaces"

_#opDescribePlacementGroups: "DescribePlacementGroups"

_#opDescribePrefixLists: "DescribePrefixLists"

_#opDescribePrincipalIdFormat: "DescribePrincipalIdFormat"

_#opDescribePublicIpv4Pools: "DescribePublicIpv4Pools"

_#opDescribeRegions: "DescribeRegions"

_#opDescribeReplaceRootVolumeTasks: "DescribeReplaceRootVolumeTasks"

_#opDescribeReservedInstances: "DescribeReservedInstances"

_#opDescribeReservedInstancesListings: "DescribeReservedInstancesListings"

_#opDescribeReservedInstancesModifications: "DescribeReservedInstancesModifications"

_#opDescribeReservedInstancesOfferings: "DescribeReservedInstancesOfferings"

_#opDescribeRouteTables: "DescribeRouteTables"

_#opDescribeScheduledInstanceAvailability: "DescribeScheduledInstanceAvailability"

_#opDescribeScheduledInstances: "DescribeScheduledInstances"

_#opDescribeSecurityGroupReferences: "DescribeSecurityGroupReferences"

_#opDescribeSecurityGroupRules: "DescribeSecurityGroupRules"

_#opDescribeSecurityGroups: "DescribeSecurityGroups"

_#opDescribeSnapshotAttribute: "DescribeSnapshotAttribute"

_#opDescribeSnapshots: "DescribeSnapshots"

_#opDescribeSpotDatafeedSubscription: "DescribeSpotDatafeedSubscription"

_#opDescribeSpotFleetInstances: "DescribeSpotFleetInstances"

_#opDescribeSpotFleetRequestHistory: "DescribeSpotFleetRequestHistory"

_#opDescribeSpotFleetRequests: "DescribeSpotFleetRequests"

_#opDescribeSpotInstanceRequests: "DescribeSpotInstanceRequests"

_#opDescribeSpotPriceHistory: "DescribeSpotPriceHistory"

_#opDescribeStaleSecurityGroups: "DescribeStaleSecurityGroups"

_#opDescribeStoreImageTasks: "DescribeStoreImageTasks"

_#opDescribeSubnets: "DescribeSubnets"

_#opDescribeTags: "DescribeTags"

_#opDescribeTrafficMirrorFilters: "DescribeTrafficMirrorFilters"

_#opDescribeTrafficMirrorSessions: "DescribeTrafficMirrorSessions"

_#opDescribeTrafficMirrorTargets: "DescribeTrafficMirrorTargets"

_#opDescribeTransitGatewayAttachments: "DescribeTransitGatewayAttachments"

_#opDescribeTransitGatewayConnectPeers: "DescribeTransitGatewayConnectPeers"

_#opDescribeTransitGatewayConnects: "DescribeTransitGatewayConnects"

_#opDescribeTransitGatewayMulticastDomains: "DescribeTransitGatewayMulticastDomains"

_#opDescribeTransitGatewayPeeringAttachments: "DescribeTransitGatewayPeeringAttachments"

_#opDescribeTransitGatewayRouteTables: "DescribeTransitGatewayRouteTables"

_#opDescribeTransitGatewayVpcAttachments: "DescribeTransitGatewayVpcAttachments"

_#opDescribeTransitGateways: "DescribeTransitGateways"

_#opDescribeTrunkInterfaceAssociations: "DescribeTrunkInterfaceAssociations"

_#opDescribeVolumeAttribute: "DescribeVolumeAttribute"

_#opDescribeVolumeStatus: "DescribeVolumeStatus"

_#opDescribeVolumes: "DescribeVolumes"

_#opDescribeVolumesModifications: "DescribeVolumesModifications"

_#opDescribeVpcAttribute: "DescribeVpcAttribute"

_#opDescribeVpcClassicLink: "DescribeVpcClassicLink"

_#opDescribeVpcClassicLinkDnsSupport: "DescribeVpcClassicLinkDnsSupport"

_#opDescribeVpcEndpointConnectionNotifications: "DescribeVpcEndpointConnectionNotifications"

_#opDescribeVpcEndpointConnections: "DescribeVpcEndpointConnections"

_#opDescribeVpcEndpointServiceConfigurations: "DescribeVpcEndpointServiceConfigurations"

_#opDescribeVpcEndpointServicePermissions: "DescribeVpcEndpointServicePermissions"

_#opDescribeVpcEndpointServices: "DescribeVpcEndpointServices"

_#opDescribeVpcEndpoints: "DescribeVpcEndpoints"

_#opDescribeVpcPeeringConnections: "DescribeVpcPeeringConnections"

_#opDescribeVpcs: "DescribeVpcs"

_#opDescribeVpnConnections: "DescribeVpnConnections"

_#opDescribeVpnGateways: "DescribeVpnGateways"

_#opDetachClassicLinkVpc: "DetachClassicLinkVpc"

_#opDetachInternetGateway: "DetachInternetGateway"

_#opDetachNetworkInterface: "DetachNetworkInterface"

_#opDetachVolume: "DetachVolume"

_#opDetachVpnGateway: "DetachVpnGateway"

_#opDisableEbsEncryptionByDefault: "DisableEbsEncryptionByDefault"

_#opDisableFastSnapshotRestores: "DisableFastSnapshotRestores"

_#opDisableImageDeprecation: "DisableImageDeprecation"

_#opDisableSerialConsoleAccess: "DisableSerialConsoleAccess"

_#opDisableTransitGatewayRouteTablePropagation: "DisableTransitGatewayRouteTablePropagation"

_#opDisableVgwRoutePropagation: "DisableVgwRoutePropagation"

_#opDisableVpcClassicLink: "DisableVpcClassicLink"

_#opDisableVpcClassicLinkDnsSupport: "DisableVpcClassicLinkDnsSupport"

_#opDisassociateAddress: "DisassociateAddress"

_#opDisassociateClientVpnTargetNetwork: "DisassociateClientVpnTargetNetwork"

_#opDisassociateEnclaveCertificateIamRole: "DisassociateEnclaveCertificateIamRole"

_#opDisassociateIamInstanceProfile: "DisassociateIamInstanceProfile"

_#opDisassociateInstanceEventWindow: "DisassociateInstanceEventWindow"

_#opDisassociateRouteTable: "DisassociateRouteTable"

_#opDisassociateSubnetCidrBlock: "DisassociateSubnetCidrBlock"

_#opDisassociateTransitGatewayMulticastDomain: "DisassociateTransitGatewayMulticastDomain"

_#opDisassociateTransitGatewayRouteTable: "DisassociateTransitGatewayRouteTable"

_#opDisassociateTrunkInterface: "DisassociateTrunkInterface"

_#opDisassociateVpcCidrBlock: "DisassociateVpcCidrBlock"

_#opEnableEbsEncryptionByDefault: "EnableEbsEncryptionByDefault"

_#opEnableFastSnapshotRestores: "EnableFastSnapshotRestores"

_#opEnableImageDeprecation: "EnableImageDeprecation"

_#opEnableSerialConsoleAccess: "EnableSerialConsoleAccess"

_#opEnableTransitGatewayRouteTablePropagation: "EnableTransitGatewayRouteTablePropagation"

_#opEnableVgwRoutePropagation: "EnableVgwRoutePropagation"

_#opEnableVolumeIO: "EnableVolumeIO"

_#opEnableVpcClassicLink: "EnableVpcClassicLink"

_#opEnableVpcClassicLinkDnsSupport: "EnableVpcClassicLinkDnsSupport"

_#opExportClientVpnClientCertificateRevocationList: "ExportClientVpnClientCertificateRevocationList"

_#opExportClientVpnClientConfiguration: "ExportClientVpnClientConfiguration"

_#opExportImage: "ExportImage"

_#opExportTransitGatewayRoutes: "ExportTransitGatewayRoutes"

_#opGetAssociatedEnclaveCertificateIamRoles: "GetAssociatedEnclaveCertificateIamRoles"

_#opGetAssociatedIpv6PoolCidrs: "GetAssociatedIpv6PoolCidrs"

_#opGetCapacityReservationUsage: "GetCapacityReservationUsage"

_#opGetCoipPoolUsage: "GetCoipPoolUsage"

_#opGetConsoleOutput: "GetConsoleOutput"

_#opGetConsoleScreenshot: "GetConsoleScreenshot"

_#opGetDefaultCreditSpecification: "GetDefaultCreditSpecification"

_#opGetEbsDefaultKmsKeyId: "GetEbsDefaultKmsKeyId"

_#opGetEbsEncryptionByDefault: "GetEbsEncryptionByDefault"

_#opGetFlowLogsIntegrationTemplate: "GetFlowLogsIntegrationTemplate"

_#opGetGroupsForCapacityReservation: "GetGroupsForCapacityReservation"

_#opGetHostReservationPurchasePreview: "GetHostReservationPurchasePreview"

_#opGetLaunchTemplateData: "GetLaunchTemplateData"

_#opGetManagedPrefixListAssociations: "GetManagedPrefixListAssociations"

_#opGetManagedPrefixListEntries: "GetManagedPrefixListEntries"

_#opGetPasswordData: "GetPasswordData"

_#opGetReservedInstancesExchangeQuote: "GetReservedInstancesExchangeQuote"

_#opGetSerialConsoleAccessStatus: "GetSerialConsoleAccessStatus"

_#opGetSubnetCidrReservations: "GetSubnetCidrReservations"

_#opGetTransitGatewayAttachmentPropagations: "GetTransitGatewayAttachmentPropagations"

_#opGetTransitGatewayMulticastDomainAssociations: "GetTransitGatewayMulticastDomainAssociations"

_#opGetTransitGatewayPrefixListReferences: "GetTransitGatewayPrefixListReferences"

_#opGetTransitGatewayRouteTableAssociations: "GetTransitGatewayRouteTableAssociations"

_#opGetTransitGatewayRouteTablePropagations: "GetTransitGatewayRouteTablePropagations"

_#opImportClientVpnClientCertificateRevocationList: "ImportClientVpnClientCertificateRevocationList"

_#opImportImage: "ImportImage"

_#opImportInstance: "ImportInstance"

_#opImportKeyPair: "ImportKeyPair"

_#opImportSnapshot: "ImportSnapshot"

_#opImportVolume: "ImportVolume"

_#opModifyAddressAttribute: "ModifyAddressAttribute"

_#opModifyAvailabilityZoneGroup: "ModifyAvailabilityZoneGroup"

_#opModifyCapacityReservation: "ModifyCapacityReservation"

_#opModifyClientVpnEndpoint: "ModifyClientVpnEndpoint"

_#opModifyDefaultCreditSpecification: "ModifyDefaultCreditSpecification"

_#opModifyEbsDefaultKmsKeyId: "ModifyEbsDefaultKmsKeyId"

_#opModifyFleet: "ModifyFleet"

_#opModifyFpgaImageAttribute: "ModifyFpgaImageAttribute"

_#opModifyHosts: "ModifyHosts"

_#opModifyIdFormat: "ModifyIdFormat"

_#opModifyIdentityIdFormat: "ModifyIdentityIdFormat"

_#opModifyImageAttribute: "ModifyImageAttribute"

_#opModifyInstanceAttribute: "ModifyInstanceAttribute"

_#opModifyInstanceCapacityReservationAttributes: "ModifyInstanceCapacityReservationAttributes"

_#opModifyInstanceCreditSpecification: "ModifyInstanceCreditSpecification"

_#opModifyInstanceEventStartTime: "ModifyInstanceEventStartTime"

_#opModifyInstanceEventWindow: "ModifyInstanceEventWindow"

_#opModifyInstanceMetadataOptions: "ModifyInstanceMetadataOptions"

_#opModifyInstancePlacement: "ModifyInstancePlacement"

_#opModifyLaunchTemplate: "ModifyLaunchTemplate"

_#opModifyManagedPrefixList: "ModifyManagedPrefixList"

_#opModifyNetworkInterfaceAttribute: "ModifyNetworkInterfaceAttribute"

_#opModifyReservedInstances: "ModifyReservedInstances"

_#opModifySecurityGroupRules: "ModifySecurityGroupRules"

_#opModifySnapshotAttribute: "ModifySnapshotAttribute"

_#opModifySpotFleetRequest: "ModifySpotFleetRequest"

_#opModifySubnetAttribute: "ModifySubnetAttribute"

_#opModifyTrafficMirrorFilterNetworkServices: "ModifyTrafficMirrorFilterNetworkServices"

_#opModifyTrafficMirrorFilterRule: "ModifyTrafficMirrorFilterRule"

_#opModifyTrafficMirrorSession: "ModifyTrafficMirrorSession"

_#opModifyTransitGateway: "ModifyTransitGateway"

_#opModifyTransitGatewayPrefixListReference: "ModifyTransitGatewayPrefixListReference"

_#opModifyTransitGatewayVpcAttachment: "ModifyTransitGatewayVpcAttachment"

_#opModifyVolume: "ModifyVolume"

_#opModifyVolumeAttribute: "ModifyVolumeAttribute"

_#opModifyVpcAttribute: "ModifyVpcAttribute"

_#opModifyVpcEndpoint: "ModifyVpcEndpoint"

_#opModifyVpcEndpointConnectionNotification: "ModifyVpcEndpointConnectionNotification"

_#opModifyVpcEndpointServiceConfiguration: "ModifyVpcEndpointServiceConfiguration"

_#opModifyVpcEndpointServicePermissions: "ModifyVpcEndpointServicePermissions"

_#opModifyVpcPeeringConnectionOptions: "ModifyVpcPeeringConnectionOptions"

_#opModifyVpcTenancy: "ModifyVpcTenancy"

_#opModifyVpnConnection: "ModifyVpnConnection"

_#opModifyVpnConnectionOptions: "ModifyVpnConnectionOptions"

_#opModifyVpnTunnelCertificate: "ModifyVpnTunnelCertificate"

_#opModifyVpnTunnelOptions: "ModifyVpnTunnelOptions"

_#opMonitorInstances: "MonitorInstances"

_#opMoveAddressToVpc: "MoveAddressToVpc"

_#opProvisionByoipCidr: "ProvisionByoipCidr"

_#opPurchaseHostReservation: "PurchaseHostReservation"

_#opPurchaseReservedInstancesOffering: "PurchaseReservedInstancesOffering"

_#opPurchaseScheduledInstances: "PurchaseScheduledInstances"

_#opRebootInstances: "RebootInstances"

_#opRegisterImage: "RegisterImage"

_#opRegisterInstanceEventNotificationAttributes: "RegisterInstanceEventNotificationAttributes"

_#opRegisterTransitGatewayMulticastGroupMembers: "RegisterTransitGatewayMulticastGroupMembers"

_#opRegisterTransitGatewayMulticastGroupSources: "RegisterTransitGatewayMulticastGroupSources"

_#opRejectTransitGatewayMulticastDomainAssociations: "RejectTransitGatewayMulticastDomainAssociations"

_#opRejectTransitGatewayPeeringAttachment: "RejectTransitGatewayPeeringAttachment"

_#opRejectTransitGatewayVpcAttachment: "RejectTransitGatewayVpcAttachment"

_#opRejectVpcEndpointConnections: "RejectVpcEndpointConnections"

_#opRejectVpcPeeringConnection: "RejectVpcPeeringConnection"

_#opReleaseAddress: "ReleaseAddress"

_#opReleaseHosts: "ReleaseHosts"

_#opReplaceIamInstanceProfileAssociation: "ReplaceIamInstanceProfileAssociation"

_#opReplaceNetworkAclAssociation: "ReplaceNetworkAclAssociation"

_#opReplaceNetworkAclEntry: "ReplaceNetworkAclEntry"

_#opReplaceRoute: "ReplaceRoute"

_#opReplaceRouteTableAssociation: "ReplaceRouteTableAssociation"

_#opReplaceTransitGatewayRoute: "ReplaceTransitGatewayRoute"

_#opReportInstanceStatus: "ReportInstanceStatus"

_#opRequestSpotFleet: "RequestSpotFleet"

_#opRequestSpotInstances: "RequestSpotInstances"

_#opResetAddressAttribute: "ResetAddressAttribute"

_#opResetEbsDefaultKmsKeyId: "ResetEbsDefaultKmsKeyId"

_#opResetFpgaImageAttribute: "ResetFpgaImageAttribute"

_#opResetImageAttribute: "ResetImageAttribute"

_#opResetInstanceAttribute: "ResetInstanceAttribute"

_#opResetNetworkInterfaceAttribute: "ResetNetworkInterfaceAttribute"

_#opResetSnapshotAttribute: "ResetSnapshotAttribute"

_#opRestoreAddressToClassic: "RestoreAddressToClassic"

_#opRestoreManagedPrefixListVersion: "RestoreManagedPrefixListVersion"

_#opRevokeClientVpnIngress: "RevokeClientVpnIngress"

_#opRevokeSecurityGroupEgress: "RevokeSecurityGroupEgress"

_#opRevokeSecurityGroupIngress: "RevokeSecurityGroupIngress"

_#opRunInstances: "RunInstances"

_#opRunScheduledInstances: "RunScheduledInstances"

_#opSearchLocalGatewayRoutes: "SearchLocalGatewayRoutes"

_#opSearchTransitGatewayMulticastGroups: "SearchTransitGatewayMulticastGroups"

_#opSearchTransitGatewayRoutes: "SearchTransitGatewayRoutes"

_#opSendDiagnosticInterrupt: "SendDiagnosticInterrupt"

_#opStartInstances: "StartInstances"

_#opStartNetworkInsightsAnalysis: "StartNetworkInsightsAnalysis"

_#opStartVpcEndpointServicePrivateDnsVerification: "StartVpcEndpointServicePrivateDnsVerification"

_#opStopInstances: "StopInstances"

_#opTerminateClientVpnConnections: "TerminateClientVpnConnections"

_#opTerminateInstances: "TerminateInstances"

_#opUnassignIpv6Addresses: "UnassignIpv6Addresses"

_#opUnassignPrivateIpAddresses: "UnassignPrivateIpAddresses"

_#opUnmonitorInstances: "UnmonitorInstances"

_#opUpdateSecurityGroupRuleDescriptionsEgress: "UpdateSecurityGroupRuleDescriptionsEgress"

_#opUpdateSecurityGroupRuleDescriptionsIngress: "UpdateSecurityGroupRuleDescriptionsIngress"

_#opWithdrawByoipCidr: "WithdrawByoipCidr"

// Contains the parameters for accepting the quote.
#AcceptReservedInstancesExchangeQuoteInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the Convertible Reserved Instances to exchange for another Convertible
	// Reserved Instance of the same or higher value.
	//
	// ReservedInstanceIds is a required field
	ReservedInstanceIds: [...null | string] @go(,[]*string)

	// The configuration of the target Convertible Reserved Instance to exchange
	// for your current Convertible Reserved Instances.
	TargetConfigurations: [...null | #TargetConfigurationRequest] @go(,[]*TargetConfigurationRequest)
}

// The result of the exchange and whether it was successful.
#AcceptReservedInstancesExchangeQuoteOutput: {
	// The ID of the successful exchange.
	ExchangeId?: null | string @go(,*string)
}

#AcceptTransitGatewayMulticastDomainAssociationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the subnets to associate with the transit gateway multicast domain.
	SubnetIds: [...null | string] @go(,[]*string)

	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#AcceptTransitGatewayMulticastDomainAssociationsOutput: {
	// Describes the multicast domain associations.
	Associations?: null | #TransitGatewayMulticastDomainAssociations @go(,*TransitGatewayMulticastDomainAssociations)
}

#AcceptTransitGatewayPeeringAttachmentInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the transit gateway attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#AcceptTransitGatewayPeeringAttachmentOutput: {
	// The transit gateway peering attachment.
	TransitGatewayPeeringAttachment?: null | #TransitGatewayPeeringAttachment @go(,*TransitGatewayPeeringAttachment)
}

#AcceptTransitGatewayVpcAttachmentInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#AcceptTransitGatewayVpcAttachmentOutput: {
	// The VPC attachment.
	TransitGatewayVpcAttachment?: null | #TransitGatewayVpcAttachment @go(,*TransitGatewayVpcAttachment)
}

#AcceptVpcEndpointConnectionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC endpoint service.
	//
	// ServiceId is a required field
	ServiceId?: null | string @go(,*string)

	// The IDs of one or more interface VPC endpoints.
	//
	// VpcEndpointIds is a required field
	VpcEndpointIds: [...null | string] @go(,[]*string)
}

#AcceptVpcEndpointConnectionsOutput: {
	// Information about the interface endpoints that were not accepted, if applicable.
	Unsuccessful: [...null | #UnsuccessfulItem] @go(,[]*UnsuccessfulItem)
}

#AcceptVpcPeeringConnectionInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC peering connection. You must specify this parameter in
	// the request.
	VpcPeeringConnectionId?: null | string @go(,*string)
}

#AcceptVpcPeeringConnectionOutput: {
	// Information about the VPC peering connection.
	VpcPeeringConnection?: null | #VpcPeeringConnection @go(,*VpcPeeringConnection)
}

// Describes an account attribute.
#AccountAttribute: {
	// The name of the account attribute.
	AttributeName?: null | string @go(,*string)

	// The values for the account attribute.
	AttributeValues: [...null | #AccountAttributeValue] @go(,[]*AccountAttributeValue)
}

// Describes a value of an account attribute.
#AccountAttributeValue: {
	// The value of the attribute.
	AttributeValue?: null | string @go(,*string)
}

// Describes a running instance in a Spot Fleet.
#ActiveInstance: {
	// The health status of the instance. If the status of either the instance status
	// check or the system status check is impaired, the health status of the instance
	// is unhealthy. Otherwise, the health status is healthy.
	InstanceHealth?: null | string @go(,*string)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The ID of the Spot Instance request.
	SpotInstanceRequestId?: null | string @go(,*string)
}

// An entry for a prefix list.
#AddPrefixListEntry: {
	// The CIDR block.
	//
	// Cidr is a required field
	Cidr?: null | string @go(,*string)

	// A description for the entry.
	//
	// Constraints: Up to 255 characters in length.
	Description?: null | string @go(,*string)
}

// Describes an Elastic IP address, or a carrier IP address.
#Address: {
	// The ID representing the allocation of the address for use with EC2-VPC.
	AllocationId?: null | string @go(,*string)

	// The ID representing the association of the address with an instance in a
	// VPC.
	AssociationId?: null | string @go(,*string)

	// The carrier IP address associated. This option is only available for network
	// interfaces which reside in a subnet in a Wavelength Zone (for example an
	// EC2 instance).
	CarrierIp?: null | string @go(,*string)

	// The customer-owned IP address.
	CustomerOwnedIp?: null | string @go(,*string)

	// The ID of the customer-owned address pool.
	CustomerOwnedIpv4Pool?: null | string @go(,*string)

	// Indicates whether this Elastic IP address is for use with instances in EC2-Classic
	// (standard) or instances in a VPC (vpc).
	Domain?: null | string @go(,*string)

	// The ID of the instance that the address is associated with (if any).
	InstanceId?: null | string @go(,*string)

	// The name of the unique set of Availability Zones, Local Zones, or Wavelength
	// Zones from which AWS advertises IP addresses.
	NetworkBorderGroup?: null | string @go(,*string)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the network interface.
	NetworkInterfaceOwnerId?: null | string @go(,*string)

	// The private IP address associated with the Elastic IP address.
	PrivateIpAddress?: null | string @go(,*string)

	// The Elastic IP address.
	PublicIp?: null | string @go(,*string)

	// The ID of an address pool.
	PublicIpv4Pool?: null | string @go(,*string)

	// Any tags assigned to the Elastic IP address.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// The attributes associated with an Elastic IP address.
#AddressAttribute: {
	// [EC2-VPC] The allocation ID.
	AllocationId?: null | string @go(,*string)

	// The pointer (PTR) record for the IP address.
	PtrRecord?: null | string @go(,*string)

	// The updated PTR record for the IP address.
	PtrRecordUpdate?: null | #PtrUpdateStatus @go(,*PtrUpdateStatus)

	// The public IP address.
	PublicIp?: null | string @go(,*string)
}

#AdvertiseByoipCidrInput: {
	// The address range, in CIDR notation. This must be the exact range that you
	// provisioned. You can't advertise only a portion of the provisioned range.
	//
	// Cidr is a required field
	Cidr?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#AdvertiseByoipCidrOutput: {
	// Information about the address range.
	ByoipCidr?: null | #ByoipCidr @go(,*ByoipCidr)
}

#AllocateAddressInput: {
	// [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address
	// pool.
	Address?: null | string @go(,*string)

	// The ID of a customer-owned address pool. Use this parameter to let Amazon
	// EC2 select an address from the address pool. Alternatively, specify a specific
	// address from the address pool.
	CustomerOwnedIpv4Pool?: null | string @go(,*string)

	// Indicates whether the Elastic IP address is for use with instances in a VPC
	// or instances in EC2-Classic.
	//
	// Default: If the Region supports EC2-Classic, the default is standard. Otherwise,
	// the default is vpc.
	Domain?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// A unique set of Availability Zones, Local Zones, or Wavelength Zones from
	// which AWS advertises IP addresses. Use this parameter to limit the IP address
	// to this location. IP addresses cannot move between network border groups.
	//
	// Use DescribeAvailabilityZones (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html)
	// to view the network border groups.
	//
	// You cannot use a network border group with EC2 Classic. If you attempt this
	// operation on EC2 classic, you will receive an InvalidParameterCombination
	// error. For more information, see Error Codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html).
	NetworkBorderGroup?: null | string @go(,*string)

	// The ID of an address pool that you own. Use this parameter to let Amazon
	// EC2 select an address from the address pool. To specify a specific address
	// from the address pool, use the Address parameter instead.
	PublicIpv4Pool?: null | string @go(,*string)

	// The tags to assign to the Elastic IP address.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#AllocateAddressOutput: {
	// [EC2-VPC] The ID that Amazon Web Services assigns to represent the allocation
	// of the Elastic IP address for use with instances in a VPC.
	AllocationId?: null | string @go(,*string)

	// The carrier IP address. This option is only available for network interfaces
	// which reside in a subnet in a Wavelength Zone (for example an EC2 instance).
	CarrierIp?: null | string @go(,*string)

	// The customer-owned IP address.
	CustomerOwnedIp?: null | string @go(,*string)

	// The ID of the customer-owned address pool.
	CustomerOwnedIpv4Pool?: null | string @go(,*string)

	// Indicates whether the Elastic IP address is for use with instances in a VPC
	// (vpc) or instances in EC2-Classic (standard).
	Domain?: null | string @go(,*string)

	// The set of Availability Zones, Local Zones, or Wavelength Zones from which
	// AWS advertises IP addresses.
	NetworkBorderGroup?: null | string @go(,*string)

	// The Elastic IP address.
	PublicIp?: null | string @go(,*string)

	// The ID of an address pool.
	PublicIpv4Pool?: null | string @go(,*string)
}

#AllocateHostsInput: {
	// Indicates whether the host accepts any untargeted instance launches that
	// match its instance type configuration, or if it only accepts Host tenancy
	// instance launches that specify its unique host ID. For more information,
	// see Understanding auto-placement and affinity (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-understanding)
	// in the Amazon EC2 User Guide.
	//
	// Default: on
	AutoPlacement?: null | string @go(,*string)

	// The Availability Zone in which to allocate the Dedicated Host.
	//
	// AvailabilityZone is a required field
	AvailabilityZone?: null | string @go(,*string)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Indicates whether to enable or disable host recovery for the Dedicated Host.
	// Host recovery is disabled by default. For more information, see Host recovery
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html)
	// in the Amazon EC2 User Guide.
	//
	// Default: off
	HostRecovery?: null | string @go(,*string)

	// Specifies the instance family to be supported by the Dedicated Hosts. If
	// you specify an instance family, the Dedicated Hosts support multiple instance
	// types within that instance family.
	//
	// If you want the Dedicated Hosts to support a specific instance type only,
	// omit this parameter and specify InstanceType instead. You cannot specify
	// InstanceFamily and InstanceType in the same request.
	InstanceFamily?: null | string @go(,*string)

	// Specifies the instance type to be supported by the Dedicated Hosts. If you
	// specify an instance type, the Dedicated Hosts support instances of the specified
	// instance type only.
	//
	// If you want the Dedicated Hosts to support multiple instance types in a specific
	// instance family, omit this parameter and specify InstanceFamily instead.
	// You cannot specify InstanceType and InstanceFamily in the same request.
	InstanceType?: null | string @go(,*string)

	// The number of Dedicated Hosts to allocate to your account with these parameters.
	//
	// Quantity is a required field
	Quantity?: null | int64 @go(,*int64)

	// The tags to apply to the Dedicated Host during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

// Contains the output of AllocateHosts.
#AllocateHostsOutput: {
	// The ID of the allocated Dedicated Host. This is used to launch an instance
	// onto a specific host.
	HostIds: [...null | string] @go(,[]*string)
}

// Describes a principal.
#AllowedPrincipal: {
	// The Amazon Resource Name (ARN) of the principal.
	Principal?: null | string @go(,*string)

	// The type of principal.
	PrincipalType?: null | string @go(,*string)
}

// Describes an potential intermediate component of a feasible path.
#AlternatePathHint: {
	// The Amazon Resource Name (ARN) of the component.
	ComponentArn?: null | string @go(,*string)

	// The ID of the component.
	ComponentId?: null | string @go(,*string)
}

// Describes a network access control (ACL) rule.
#AnalysisAclRule: {
	// The IPv4 address range, in CIDR notation.
	Cidr?: null | string @go(,*string)

	// Indicates whether the rule is an outbound rule.
	Egress?: null | bool @go(,*bool)

	// The range of ports.
	PortRange?: null | #PortRange @go(,*PortRange)

	// The protocol.
	Protocol?: null | string @go(,*string)

	// Indicates whether to allow or deny traffic that matches the rule.
	RuleAction?: null | string @go(,*string)

	// The rule number.
	RuleNumber?: null | int64 @go(,*int64)
}

// Describes a path component.
#AnalysisComponent: {
	// The Amazon Resource Name (ARN) of the component.
	Arn?: null | string @go(,*string)

	// The ID of the component.
	Id?: null | string @go(,*string)
}

// Describes a load balancer listener.
#AnalysisLoadBalancerListener: {
	// [Classic Load Balancers] The back-end port for the listener.
	InstancePort?: null | int64 @go(,*int64)

	// The port on which the load balancer is listening.
	LoadBalancerPort?: null | int64 @go(,*int64)
}

// Describes a load balancer target.
#AnalysisLoadBalancerTarget: {
	// The IP address.
	Address?: null | string @go(,*string)

	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// Information about the instance.
	Instance?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The port on which the target is listening.
	Port?: null | int64 @go(,*int64)
}

// Describes a header. Reflects any changes made by a component as traffic passes
// through. The fields of an inbound header are null except for the first component
// of a path.
#AnalysisPacketHeader: {
	// The destination addresses.
	DestinationAddresses: [...null | string] @go(,[]*string)

	// The destination port ranges.
	DestinationPortRanges: [...null | #PortRange] @go(,[]*PortRange)

	// The protocol.
	Protocol?: null | string @go(,*string)

	// The source addresses.
	SourceAddresses: [...null | string] @go(,[]*string)

	// The source port ranges.
	SourcePortRanges: [...null | #PortRange] @go(,[]*PortRange)
}

// Describes a route table route.
#AnalysisRouteTableRoute: {
	// The destination IPv4 address, in CIDR notation.
	DestinationCidr?: null | string @go(,*string)

	// The prefix of the Amazon Web Service.
	DestinationPrefixListId?: null | string @go(,*string)

	// The ID of an egress-only internet gateway.
	EgressOnlyInternetGatewayId?: null | string @go(,*string)

	// The ID of the gateway, such as an internet gateway or virtual private gateway.
	GatewayId?: null | string @go(,*string)

	// The ID of the instance, such as a NAT instance.
	InstanceId?: null | string @go(,*string)

	// The ID of a NAT gateway.
	NatGatewayId?: null | string @go(,*string)

	// The ID of a network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// Describes how the route was created. The following are possible values:
	//
	//    * CreateRouteTable - The route was automatically created when the route
	//    table was created.
	//
	//    * CreateRoute - The route was manually added to the route table.
	//
	//    * EnableVgwRoutePropagation - The route was propagated by route propagation.
	Origin?: null | string @go(,*string)

	// The ID of a transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The ID of a VPC peering connection.
	VpcPeeringConnectionId?: null | string @go(,*string)
}

// Describes a security group rule.
#AnalysisSecurityGroupRule: {
	// The IPv4 address range, in CIDR notation.
	Cidr?: null | string @go(,*string)

	// The direction. The following are possible values:
	//
	//    * egress
	//
	//    * ingress
	Direction?: null | string @go(,*string)

	// The port range.
	PortRange?: null | #PortRange @go(,*PortRange)

	// The prefix list ID.
	PrefixListId?: null | string @go(,*string)

	// The protocol name.
	Protocol?: null | string @go(,*string)

	// The security group ID.
	SecurityGroupId?: null | string @go(,*string)
}

#ApplySecurityGroupsToClientVpnTargetNetworkInput: {
	// The ID of the Client VPN endpoint.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the security groups to apply to the associated target network.
	// Up to 5 security groups can be applied to an associated target network.
	//
	// SecurityGroupIds is a required field
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// The ID of the VPC in which the associated target network is located.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#ApplySecurityGroupsToClientVpnTargetNetworkOutput: {
	// The IDs of the applied security groups.
	SecurityGroupIds: [...null | string] @go(,[]*string)
}

#AssignIpv6AddressesInput: {
	// The number of additional IPv6 addresses to assign to the network interface.
	// The specified number of IPv6 addresses are assigned in addition to the existing
	// IPv6 addresses that are already assigned to the network interface. Amazon
	// EC2 automatically selects the IPv6 addresses from the subnet range. You can't
	// use this option if specifying specific IPv6 addresses.
	Ipv6AddressCount?: null | int64 @go(,*int64)

	// One or more specific IPv6 addresses to be assigned to the network interface.
	// You can't use this option if you're specifying a number of IPv6 addresses.
	Ipv6Addresses: [...null | string] @go(,[]*string)

	// The number of IPv6 Prefix Delegation prefixes that AWS automatically assigns
	// to the network interface. You cannot use this option if you use the Ipv6Prefixes
	// option.
	Ipv6PrefixCount?: null | int64 @go(,*int64)

	// One or more IPv6 Prefix Delegation prefixes assigned to the network interface.
	// You cannot use this option if you use the Ipv6PrefixCount option.
	Ipv6Prefixes: [...null | string] @go(,[]*string)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)
}

#AssignIpv6AddressesOutput: {
	// The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses
	// that were assigned to the network interface before the request are not included.
	AssignedIpv6Addresses: [...null | string] @go(,[]*string)

	// The IPv6 Prefix Delegation prefixes that are assigned to the network interface.
	AssignedIpv6Prefixes: [...null | string] @go(,[]*string)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)
}

// Contains the parameters for AssignPrivateIpAddresses.
#AssignPrivateIpAddressesInput: {
	// Indicates whether to allow an IP address that is already assigned to another
	// network interface or instance to be reassigned to the specified network interface.
	AllowReassignment?: null | bool @go(,*bool)

	// The number of IPv4 Prefix Delegation prefixes that AWS automatically assigns
	// to the network interface. You cannot use this option if you use the Ipv4
	// Prefixes option.
	Ipv4PrefixCount?: null | int64 @go(,*int64)

	// One or more IPv4 Prefix Delegation prefixes assigned to the network interface.
	// You cannot use this option if you use the Ipv4PrefixCount option.
	Ipv4Prefixes: [...null | string] @go(,[]*string)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)

	// One or more IP addresses to be assigned as a secondary private IP address
	// to the network interface. You can't specify this parameter when also specifying
	// a number of secondary IP addresses.
	//
	// If you don't specify an IP address, Amazon EC2 automatically selects an IP
	// address within the subnet range.
	PrivateIpAddresses: [...null | string] @go(,[]*string)

	// The number of secondary IP addresses to assign to the network interface.
	// You can't specify this parameter when also specifying private IP addresses.
	SecondaryPrivateIpAddressCount?: null | int64 @go(,*int64)
}

#AssignPrivateIpAddressesOutput: {
	// The IPv4 Prefix Delegation prefixes that are assigned to the network interface.
	AssignedIpv4Prefixes: [...null | #Ipv4PrefixSpecification] @go(,[]*Ipv4PrefixSpecification)

	// The private IP addresses assigned to the network interface.
	AssignedPrivateIpAddresses: [...null | #AssignedPrivateIpAddress] @go(,[]*AssignedPrivateIpAddress)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)
}

// Describes the private IP addresses assigned to a network interface.
#AssignedPrivateIpAddress: {
	// The private IP address assigned to the network interface.
	PrivateIpAddress?: null | string @go(,*string)
}

#AssociateAddressInput: {
	// [EC2-VPC] The allocation ID. This is required for EC2-VPC.
	AllocationId?: null | string @go(,*string)

	// [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic
	// IP address that is already associated with an instance or network interface
	// to be reassociated with the specified instance or network interface. Otherwise,
	// the operation fails. In a VPC in an EC2-VPC-only account, reassociation is
	// automatic, therefore you can specify false to ensure the operation fails
	// if the Elastic IP address is already associated with another resource.
	AllowReassociation?: null | bool @go(,*bool)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance. The instance must have exactly one attached network
	// interface. For EC2-VPC, you can specify either the instance ID or the network
	// interface ID, but not both. For EC2-Classic, you must specify an instance
	// ID and the instance must be in the running state.
	InstanceId?: null | string @go(,*string)

	// [EC2-VPC] The ID of the network interface. If the instance has more than
	// one network interface, you must specify a network interface ID.
	//
	// For EC2-VPC, you can specify either the instance ID or the network interface
	// ID, but not both.
	NetworkInterfaceId?: null | string @go(,*string)

	// [EC2-VPC] The primary or secondary private IP address to associate with the
	// Elastic IP address. If no private IP address is specified, the Elastic IP
	// address is associated with the primary private IP address.
	PrivateIpAddress?: null | string @go(,*string)

	// [EC2-Classic] The Elastic IP address to associate with the instance. This
	// is required for EC2-Classic.
	PublicIp?: null | string @go(,*string)
}

#AssociateAddressOutput: {
	// [EC2-VPC] The ID that represents the association of the Elastic IP address
	// with an instance.
	AssociationId?: null | string @go(,*string)
}

#AssociateClientVpnTargetNetworkInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The ID of the Client VPN endpoint.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the subnet to associate with the Client VPN endpoint.
	//
	// SubnetId is a required field
	SubnetId?: null | string @go(,*string)
}

#AssociateClientVpnTargetNetworkOutput: {
	// The unique ID of the target network association.
	AssociationId?: null | string @go(,*string)

	// The current state of the target network association.
	Status?: null | #AssociationStatus @go(,*AssociationStatus)
}

#AssociateDhcpOptionsInput: {
	// The ID of the DHCP options set, or default to associate no DHCP options with
	// the VPC.
	//
	// DhcpOptionsId is a required field
	DhcpOptionsId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#AssociateEnclaveCertificateIamRoleInput: {
	// The ARN of the ACM certificate with which to associate the IAM role.
	CertificateArn?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ARN of the IAM role to associate with the ACM certificate. You can associate
	// up to 16 IAM roles with an ACM certificate.
	RoleArn?: null | string @go(,*string)
}

#AssociateEnclaveCertificateIamRoleOutput: {
	// The name of the Amazon S3 bucket to which the certificate was uploaded.
	CertificateS3BucketName?: null | string @go(,*string)

	// The Amazon S3 object key where the certificate, certificate chain, and encrypted
	// private key bundle are stored. The object key is formatted as follows: role_arn/certificate_arn.
	CertificateS3ObjectKey?: null | string @go(,*string)

	// The ID of the KMS key used to encrypt the private key of the certificate.
	EncryptionKmsKeyId?: null | string @go(,*string)
}

#AssociateIamInstanceProfileInput: {
	// The IAM instance profile.
	//
	// IamInstanceProfile is a required field
	IamInstanceProfile?: null | #IamInstanceProfileSpecification @go(,*IamInstanceProfileSpecification)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)
}

#AssociateIamInstanceProfileOutput: {
	// Information about the IAM instance profile association.
	IamInstanceProfileAssociation?: null | #IamInstanceProfileAssociation @go(,*IamInstanceProfileAssociation)
}

#AssociateInstanceEventWindowInput: {
	// One or more targets associated with the specified event window.
	//
	// AssociationTarget is a required field
	AssociationTarget?: null | #InstanceEventWindowAssociationRequest @go(,*InstanceEventWindowAssociationRequest)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the event window.
	//
	// InstanceEventWindowId is a required field
	InstanceEventWindowId?: null | string @go(,*string)
}

#AssociateInstanceEventWindowOutput: {
	// Information about the event window.
	InstanceEventWindow?: null | #InstanceEventWindow @go(,*InstanceEventWindow)
}

#AssociateRouteTableInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the internet gateway or virtual private gateway.
	GatewayId?: null | string @go(,*string)

	// The ID of the route table.
	//
	// RouteTableId is a required field
	RouteTableId?: null | string @go(,*string)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)
}

#AssociateRouteTableOutput: {
	// The route table association ID. This ID is required for disassociating the
	// route table.
	AssociationId?: null | string @go(,*string)

	// The state of the association.
	AssociationState?: null | #RouteTableAssociationState @go(,*RouteTableAssociationState)
}

#AssociateSubnetCidrBlockInput: {
	// The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.
	//
	// Ipv6CidrBlock is a required field
	Ipv6CidrBlock?: null | string @go(,*string)

	// The ID of your subnet.
	//
	// SubnetId is a required field
	SubnetId?: null | string @go(,*string)
}

#AssociateSubnetCidrBlockOutput: {
	// Information about the IPv6 CIDR block association.
	Ipv6CidrBlockAssociation?: null | #SubnetIpv6CidrBlockAssociation @go(,*SubnetIpv6CidrBlockAssociation)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)
}

#AssociateTransitGatewayMulticastDomainInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the subnets to associate with the transit gateway multicast domain.
	SubnetIds: [...null | string] @go(,[]*string)

	// The ID of the transit gateway attachment to associate with the transit gateway
	// multicast domain.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#AssociateTransitGatewayMulticastDomainOutput: {
	// Information about the transit gateway multicast domain associations.
	Associations?: null | #TransitGatewayMulticastDomainAssociations @go(,*TransitGatewayMulticastDomainAssociations)
}

#AssociateTransitGatewayRouteTableInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#AssociateTransitGatewayRouteTableOutput: {
	// The ID of the association.
	Association?: null | #TransitGatewayAssociation @go(,*TransitGatewayAssociation)
}

#AssociateTrunkInterfaceInput: {
	// The ID of the branch network interface.
	//
	// BranchInterfaceId is a required field
	BranchInterfaceId?: null | string @go(,*string)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The application key. This applies to the GRE protocol.
	GreKey?: null | int64 @go(,*int64)

	// The ID of the trunk network interface.
	//
	// TrunkInterfaceId is a required field
	TrunkInterfaceId?: null | string @go(,*string)

	// The ID of the VLAN. This applies to the VLAN protocol.
	VlanId?: null | int64 @go(,*int64)
}

#AssociateTrunkInterfaceOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Information about the association between the trunk network interface and
	// branch network interface.
	InterfaceAssociation?: null | #TrunkInterfaceAssociation @go(,*TrunkInterfaceAssociation)
}

#AssociateVpcCidrBlockInput: {
	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
	// the VPC. You cannot specify the range of IPv6 addresses, or the size of the
	// CIDR block.
	AmazonProvidedIpv6CidrBlock?: null | bool @go(,*bool)

	// An IPv4 CIDR block to associate with the VPC.
	CidrBlock?: null | string @go(,*string)

	// An IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool
	// in the request.
	//
	// To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
	Ipv6CidrBlock?: null | string @go(,*string)

	// The name of the location from which we advertise the IPV6 CIDR block. Use
	// this parameter to limit the CIDR block to this location.
	//
	// You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.
	//
	// You can have one IPv6 CIDR block association per network border group.
	Ipv6CidrBlockNetworkBorderGroup?: null | string @go(,*string)

	// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
	Ipv6Pool?: null | string @go(,*string)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#AssociateVpcCidrBlockOutput: {
	// Information about the IPv4 CIDR block association.
	CidrBlockAssociation?: null | #VpcCidrBlockAssociation @go(,*VpcCidrBlockAssociation)

	// Information about the IPv6 CIDR block association.
	Ipv6CidrBlockAssociation?: null | #VpcIpv6CidrBlockAssociation @go(,*VpcIpv6CidrBlockAssociation)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Information about the associated IAM roles.
#AssociatedRole: {
	// The ARN of the associated IAM role.
	AssociatedRoleArn?: null | string @go(,*string)

	// The name of the Amazon S3 bucket in which the Amazon S3 object is stored.
	CertificateS3BucketName?: null | string @go(,*string)

	// The key of the Amazon S3 object ey where the certificate, certificate chain,
	// and encrypted private key bundle is stored. The object key is formated as
	// follows: role_arn/certificate_arn.
	CertificateS3ObjectKey?: null | string @go(,*string)

	// The ID of the KMS customer master key (CMK) used to encrypt the private key.
	EncryptionKmsKeyId?: null | string @go(,*string)
}

// Describes a target network that is associated with a Client VPN endpoint.
// A target network is a subnet in a VPC.
#AssociatedTargetNetwork: {
	// The ID of the subnet.
	NetworkId?: null | string @go(,*string)

	// The target network type.
	NetworkType?: null | string @go(,*string)
}

// Describes the state of a target network association.
#AssociationStatus: {
	// The state of the target network association.
	Code?: null | string @go(,*string)

	// A message about the status of the target network association, if applicable.
	Message?: null | string @go(,*string)
}

// Describes integration options for Amazon Athena.
#AthenaIntegration: {
	// The location in Amazon S3 to store the generated CloudFormation template.
	//
	// IntegrationResultS3DestinationArn is a required field
	IntegrationResultS3DestinationArn?: null | string @go(,*string)

	// The end date for the partition.
	PartitionEndDate?: null | time.Time @go(,*time.Time)

	// The schedule for adding new partitions to the table.
	//
	// PartitionLoadFrequency is a required field
	PartitionLoadFrequency?: null | string @go(,*string)

	// The start date for the partition.
	PartitionStartDate?: null | time.Time @go(,*time.Time)
}

#AttachClassicLinkVpcInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of one or more of the VPC's security groups. You cannot specify security
	// groups from a different VPC.
	//
	// Groups is a required field
	Groups: [...null | string] @go(,[]*string)

	// The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// The ID of a ClassicLink-enabled VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#AttachClassicLinkVpcOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#AttachInternetGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the internet gateway.
	//
	// InternetGatewayId is a required field
	InternetGatewayId?: null | string @go(,*string)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

// Contains the parameters for AttachNetworkInterface.
#AttachNetworkInterfaceInput: {
	// The index of the device for the network interface attachment.
	//
	// DeviceIndex is a required field
	DeviceIndex?: null | int64 @go(,*int64)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// The index of the network card. Some instance types support multiple network
	// cards. The primary network interface must be assigned to network card index
	// 0. The default is network card index 0.
	NetworkCardIndex?: null | int64 @go(,*int64)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)
}

// Contains the output of AttachNetworkInterface.
#AttachNetworkInterfaceOutput: {
	// The ID of the network interface attachment.
	AttachmentId?: null | string @go(,*string)

	// The index of the network card.
	NetworkCardIndex?: null | int64 @go(,*int64)
}

#AttachVolumeInput: {
	// The device name (for example, /dev/sdh or xvdh).
	//
	// Device is a required field
	Device?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// The ID of the EBS volume. The volume and instance must be within the same
	// Availability Zone.
	//
	// VolumeId is a required field
	VolumeId?: null | string @go(,*string)
}

// Contains the parameters for AttachVpnGateway.
#AttachVpnGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)

	// The ID of the virtual private gateway.
	//
	// VpnGatewayId is a required field
	VpnGatewayId?: null | string @go(,*string)
}

// Contains the output of AttachVpnGateway.
#AttachVpnGatewayOutput: {
	// Information about the attachment.
	VpcAttachment?: null | #VpcAttachment @go(,*VpcAttachment)
}

// Describes a value for a resource attribute that is a Boolean value.
#AttributeBooleanValue: {
	// The attribute value. The valid values are true or false.
	Value?: null | bool @go(,*bool)
}

// Describes a value for a resource attribute that is a String.
#AttributeValue: {
	// The attribute value. The value is case-sensitive.
	Value?: null | string @go(,*string)
}

// Information about an authorization rule.
#AuthorizationRule: {
	// Indicates whether the authorization rule grants access to all clients.
	AccessAll?: null | bool @go(,*bool)

	// The ID of the Client VPN endpoint with which the authorization rule is associated.
	ClientVpnEndpointId?: null | string @go(,*string)

	// A brief description of the authorization rule.
	Description?: null | string @go(,*string)

	// The IPv4 address range, in CIDR notation, of the network to which the authorization
	// rule applies.
	DestinationCidr?: null | string @go(,*string)

	// The ID of the Active Directory group to which the authorization rule grants
	// access.
	GroupId?: null | string @go(,*string)

	// The current state of the authorization rule.
	Status?: null | #ClientVpnAuthorizationRuleStatus @go(,*ClientVpnAuthorizationRuleStatus)
}

#AuthorizeClientVpnIngressInput: {
	// The ID of the group to grant access to, for example, the Active Directory
	// group or identity provider (IdP) group. Required if AuthorizeAllGroups is
	// false or not specified.
	AccessGroupId?: null | string @go(,*string)

	// Indicates whether to grant access to all clients. Specify true to grant all
	// clients who successfully establish a VPN connection access to the network.
	// Must be set to true if AccessGroupId is not specified.
	AuthorizeAllGroups?: null | bool @go(,*bool)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The ID of the Client VPN endpoint.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// A brief description of the authorization rule.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IPv4 address range, in CIDR notation, of the network for which access
	// is being authorized.
	//
	// TargetNetworkCidr is a required field
	TargetNetworkCidr?: null | string @go(,*string)
}

#AuthorizeClientVpnIngressOutput: {
	// The current state of the authorization rule.
	Status?: null | #ClientVpnAuthorizationRuleStatus @go(,*ClientVpnAuthorizationRuleStatus)
}

#AuthorizeSecurityGroupEgressInput: {
	// Not supported. Use a set of IP permissions to specify the CIDR.
	CidrIp?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Not supported. Use a set of IP permissions to specify the port.
	FromPort?: null | int64 @go(,*int64)

	// The ID of the security group.
	//
	// GroupId is a required field
	GroupId?: null | string @go(,*string)

	// The sets of IP permissions. You can't specify a destination security group
	// and a CIDR IP address range in the same set of permissions.
	IpPermissions: [...null | #IpPermission] @go(,[]*IpPermission)

	// Not supported. Use a set of IP permissions to specify the protocol name or
	// number.
	IpProtocol?: null | string @go(,*string)

	// Not supported. Use a set of IP permissions to specify a destination security
	// group.
	SourceSecurityGroupName?: null | string @go(,*string)

	// Not supported. Use a set of IP permissions to specify a destination security
	// group.
	SourceSecurityGroupOwnerId?: null | string @go(,*string)

	// The tags applied to the security group rule.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// Not supported. Use a set of IP permissions to specify the port.
	ToPort?: null | int64 @go(,*int64)
}

#AuthorizeSecurityGroupEgressOutput: {
	// Returns true if the request succeeds; otherwise, returns an error.
	Return?: null | bool @go(,*bool)

	// Information about the outbound (egress) security group rules that were added.
	SecurityGroupRules: [...null | #SecurityGroupRule] @go(,[]*SecurityGroupRule)
}

#AuthorizeSecurityGroupIngressInput: {
	// The IPv4 address range, in CIDR format. You can't specify this parameter
	// when specifying a source security group. To specify an IPv6 address range,
	// use a set of IP permissions.
	//
	// Alternatively, use a set of IP permissions to specify multiple rules and
	// a description for the rule.
	CidrIp?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The start of port range for the TCP and UDP protocols, or an ICMP type number.
	// For the ICMP type number, use -1 to specify all types. If you specify all
	// ICMP types, you must specify all codes.
	//
	// Alternatively, use a set of IP permissions to specify multiple rules and
	// a description for the rule.
	FromPort?: null | int64 @go(,*int64)

	// The ID of the security group. You must specify either the security group
	// ID or the security group name in the request. For security groups in a nondefault
	// VPC, you must specify the security group ID.
	GroupId?: null | string @go(,*string)

	// [EC2-Classic, default VPC] The name of the security group. You must specify
	// either the security group ID or the security group name in the request.
	GroupName?: null | string @go(,*string)

	// The sets of IP permissions.
	IpPermissions: [...null | #IpPermission] @go(,[]*IpPermission)

	// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
	// To specify icmpv6, use a set of IP permissions.
	//
	// [VPC only] Use -1 to specify all protocols. If you specify -1 or a protocol
	// other than tcp, udp, or icmp, traffic on all ports is allowed, regardless
	// of any ports you specify.
	//
	// Alternatively, use a set of IP permissions to specify multiple rules and
	// a description for the rule.
	IpProtocol?: null | string @go(,*string)

	// [EC2-Classic, default VPC] The name of the source security group. You can't
	// specify this parameter in combination with the following parameters: the
	// CIDR IP address range, the start of the port range, the IP protocol, and
	// the end of the port range. Creates rules that grant full ICMP, UDP, and TCP
	// access. To create a rule with a specific IP protocol and port range, use
	// a set of IP permissions instead. For EC2-VPC, the source security group must
	// be in the same VPC.
	SourceSecurityGroupName?: null | string @go(,*string)

	// [nondefault VPC] The Amazon Web Services account ID for the source security
	// group, if the source security group is in a different account. You can't
	// specify this parameter in combination with the following parameters: the
	// CIDR IP address range, the IP protocol, the start of the port range, and
	// the end of the port range. Creates rules that grant full ICMP, UDP, and TCP
	// access. To create a rule with a specific IP protocol and port range, use
	// a set of IP permissions instead.
	SourceSecurityGroupOwnerId?: null | string @go(,*string)

	// [VPC Only] The tags applied to the security group rule.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The end of port range for the TCP and UDP protocols, or an ICMP code number.
	// For the ICMP code number, use -1 to specify all codes. If you specify all
	// ICMP types, you must specify all codes.
	//
	// Alternatively, use a set of IP permissions to specify multiple rules and
	// a description for the rule.
	ToPort?: null | int64 @go(,*int64)
}

#AuthorizeSecurityGroupIngressOutput: {
	// Returns true if the request succeeds; otherwise, returns an error.
	Return?: null | bool @go(,*bool)

	// Information about the inbound (ingress) security group rules that were added.
	SecurityGroupRules: [...null | #SecurityGroupRule] @go(,[]*SecurityGroupRule)
}

// Describes Availability Zones, Local Zones, and Wavelength Zones.
#AvailabilityZone: {
	// For Availability Zones, this parameter has the same value as the Region name.
	//
	// For Local Zones, the name of the associated group, for example us-west-2-lax-1.
	//
	// For Wavelength Zones, the name of the associated group, for example us-east-1-wl1-bos-wlz-1.
	GroupName?: null | string @go(,*string)

	// Any messages about the Availability Zone, Local Zone, or Wavelength Zone.
	Messages: [...null | #AvailabilityZoneMessage] @go(,[]*AvailabilityZoneMessage)

	// The name of the network border group.
	NetworkBorderGroup?: null | string @go(,*string)

	// For Availability Zones, this parameter always has the value of opt-in-not-required.
	//
	// For Local Zones and Wavelength Zones, this parameter is the opt-in status.
	// The possible values are opted-in, and not-opted-in.
	OptInStatus?: null | string @go(,*string)

	// The ID of the zone that handles some of the Local Zone or Wavelength Zone
	// control plane operations, such as API calls.
	ParentZoneId?: null | string @go(,*string)

	// The name of the zone that handles some of the Local Zone or Wavelength Zone
	// control plane operations, such as API calls.
	ParentZoneName?: null | string @go(,*string)

	// The name of the Region.
	RegionName?: null | string @go(,*string)

	// The state of the Availability Zone, Local Zone, or Wavelength Zone.
	State?: null | string @go(,*string)

	// The ID of the Availability Zone, Local Zone, or Wavelength Zone.
	ZoneId?: null | string @go(,*string)

	// The name of the Availability Zone, Local Zone, or Wavelength Zone.
	ZoneName?: null | string @go(,*string)

	// The type of zone. The valid values are availability-zone, local-zone, and
	// wavelength-zone.
	ZoneType?: null | string @go(,*string)
}

// Describes a message about an Availability Zone, Local Zone, or Wavelength
// Zone.
#AvailabilityZoneMessage: {
	// The message about the Availability Zone, Local Zone, or Wavelength Zone.
	Message?: null | string @go(,*string)
}

// The capacity information for instances that can be launched onto the Dedicated
// Host.
#AvailableCapacity: {
	// The number of instances that can be launched onto the Dedicated Host depending
	// on the host's available capacity. For Dedicated Hosts that support multiple
	// instance types, this parameter represents the number of instances for each
	// instance size that is supported on the host.
	AvailableInstanceCapacity: [...null | #InstanceCapacity] @go(,[]*InstanceCapacity)

	// The number of vCPUs available for launching instances onto the Dedicated
	// Host.
	AvailableVCpus?: null | int64 @go(,*int64)
}

#BlobAttributeValue: {
	// Value is automatically base64 encoded/decoded by the SDK.
	Value: bytes @go(,[]byte)
}

// Describes a block device mapping, which defines the EBS volumes and instance
// store volumes to attach to an instance at launch.
#BlockDeviceMapping: {
	// The device name (for example, /dev/sdh or xvdh).
	DeviceName?: null | string @go(,*string)

	// Parameters used to automatically set up EBS volumes when the instance is
	// launched.
	Ebs?: null | #EbsBlockDevice @go(,*EbsBlockDevice)

	// To omit the device from the block device mapping, specify an empty string.
	// When this property is specified, the device is removed from the block device
	// mapping regardless of the assigned value.
	NoDevice?: null | string @go(,*string)

	// The virtual device name (ephemeralN). Instance store volumes are numbered
	// starting from 0. An instance type with 2 available instance store volumes
	// can specify mappings for ephemeral0 and ephemeral1. The number of available
	// instance store volumes depends on the instance type. After you connect to
	// the instance, you must mount the volume.
	//
	// NVMe instance store volumes are automatically enumerated and assigned a device
	// name. Including them in your block device mapping has no effect.
	//
	// Constraints: For M3 instances, you must specify instance store volumes in
	// the block device mapping for the instance. When you launch an M3 instance,
	// we ignore any instance store volumes specified in the block device mapping
	// for the AMI.
	VirtualName?: null | string @go(,*string)
}

// Contains the parameters for BundleInstance.
#BundleInstanceInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance to bundle.
	//
	// Type: String
	//
	// Default: None
	//
	// Required: Yes
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// The bucket in which to store the AMI. You can specify a bucket that you already
	// own or a new bucket that Amazon EC2 creates on your behalf. If you specify
	// a bucket that belongs to someone else, Amazon EC2 returns an error.
	//
	// Storage is a required field
	Storage?: null | #Storage @go(,*Storage)
}

// Contains the output of BundleInstance.
#BundleInstanceOutput: {
	// Information about the bundle task.
	BundleTask?: null | #BundleTask @go(,*BundleTask)
}

// Describes a bundle task.
#BundleTask: {
	// The ID of the bundle task.
	BundleId?: null | string @go(,*string)

	// If the task fails, a description of the error.
	BundleTaskError?: null | #BundleTaskError @go(,*BundleTaskError)

	// The ID of the instance associated with this bundle task.
	InstanceId?: null | string @go(,*string)

	// The level of task completion, as a percent (for example, 20%).
	Progress?: null | string @go(,*string)

	// The time this task started.
	StartTime?: null | time.Time @go(,*time.Time)

	// The state of the task.
	State?: null | string @go(,*string)

	// The Amazon S3 storage locations.
	Storage?: null | #Storage @go(,*Storage)

	// The time of the most recent update for the task.
	UpdateTime?: null | time.Time @go(,*time.Time)
}

// Describes an error for BundleInstance.
#BundleTaskError: {
	// The error code.
	Code?: null | string @go(,*string)

	// The error message.
	Message?: null | string @go(,*string)
}

// Information about an address range that is provisioned for use with your
// Amazon Web Services resources through bring your own IP addresses (BYOIP).
#ByoipCidr: {
	// The address range, in CIDR notation.
	Cidr?: null | string @go(,*string)

	// The description of the address range.
	Description?: null | string @go(,*string)

	// The state of the address pool.
	State?: null | string @go(,*string)

	// Upon success, contains the ID of the address pool. Otherwise, contains an
	// error message.
	StatusMessage?: null | string @go(,*string)
}

// Contains the parameters for CancelBundleTask.
#CancelBundleTaskInput: {
	// The ID of the bundle task.
	//
	// BundleId is a required field
	BundleId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

// Contains the output of CancelBundleTask.
#CancelBundleTaskOutput: {
	// Information about the bundle task.
	BundleTask?: null | #BundleTask @go(,*BundleTask)
}

#CancelCapacityReservationInput: {
	// The ID of the Capacity Reservation to be cancelled.
	//
	// CapacityReservationId is a required field
	CapacityReservationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#CancelCapacityReservationOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#CancelConversionTaskInput: {
	// The ID of the conversion task.
	//
	// ConversionTaskId is a required field
	ConversionTaskId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The reason for canceling the conversion task.
	ReasonMessage?: null | string @go(,*string)
}

#CancelExportTaskInput: {
	// The ID of the export task. This is the ID returned by CreateInstanceExportTask.
	//
	// ExportTaskId is a required field
	ExportTaskId?: null | string @go(,*string)
}

#CancelImportTaskInput: {
	// The reason for canceling the task.
	CancelReason?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the import image or import snapshot task to be canceled.
	ImportTaskId?: null | string @go(,*string)
}

#CancelImportTaskOutput: {
	// The ID of the task being canceled.
	ImportTaskId?: null | string @go(,*string)

	// The current state of the task being canceled.
	PreviousState?: null | string @go(,*string)

	// The current state of the task being canceled.
	State?: null | string @go(,*string)
}

// Contains the parameters for CancelReservedInstancesListing.
#CancelReservedInstancesListingInput: {
	// The ID of the Reserved Instance listing.
	//
	// ReservedInstancesListingId is a required field
	ReservedInstancesListingId?: null | string @go(,*string)
}

// Contains the output of CancelReservedInstancesListing.
#CancelReservedInstancesListingOutput: {
	// The Reserved Instance listing.
	ReservedInstancesListings: [...null | #ReservedInstancesListing] @go(,[]*ReservedInstancesListing)
}

// Describes a Spot Fleet error.
#CancelSpotFleetRequestsError: {
	// The error code.
	Code?: null | string @go(,*string)

	// The description for the error code.
	Message?: null | string @go(,*string)
}

// Describes a Spot Fleet request that was not successfully canceled.
#CancelSpotFleetRequestsErrorItem: {
	// The error.
	Error?: null | #CancelSpotFleetRequestsError @go(,*CancelSpotFleetRequestsError)

	// The ID of the Spot Fleet request.
	SpotFleetRequestId?: null | string @go(,*string)
}

// Contains the parameters for CancelSpotFleetRequests.
#CancelSpotFleetRequestsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the Spot Fleet requests.
	//
	// SpotFleetRequestIds is a required field
	SpotFleetRequestIds: [...null | string] @go(,[]*string)

	// Indicates whether to terminate instances for a Spot Fleet request if it is
	// canceled successfully.
	//
	// TerminateInstances is a required field
	TerminateInstances?: null | bool @go(,*bool)
}

// Contains the output of CancelSpotFleetRequests.
#CancelSpotFleetRequestsOutput: {
	// Information about the Spot Fleet requests that are successfully canceled.
	SuccessfulFleetRequests: [...null | #CancelSpotFleetRequestsSuccessItem] @go(,[]*CancelSpotFleetRequestsSuccessItem)

	// Information about the Spot Fleet requests that are not successfully canceled.
	UnsuccessfulFleetRequests: [...null | #CancelSpotFleetRequestsErrorItem] @go(,[]*CancelSpotFleetRequestsErrorItem)
}

// Describes a Spot Fleet request that was successfully canceled.
#CancelSpotFleetRequestsSuccessItem: {
	// The current state of the Spot Fleet request.
	CurrentSpotFleetRequestState?: null | string @go(,*string)

	// The previous state of the Spot Fleet request.
	PreviousSpotFleetRequestState?: null | string @go(,*string)

	// The ID of the Spot Fleet request.
	SpotFleetRequestId?: null | string @go(,*string)
}

// Contains the parameters for CancelSpotInstanceRequests.
#CancelSpotInstanceRequestsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more Spot Instance request IDs.
	//
	// SpotInstanceRequestIds is a required field
	SpotInstanceRequestIds: [...null | string] @go(,[]*string)
}

// Contains the output of CancelSpotInstanceRequests.
#CancelSpotInstanceRequestsOutput: {
	// One or more Spot Instance requests.
	CancelledSpotInstanceRequests: [...null | #CancelledSpotInstanceRequest] @go(,[]*CancelledSpotInstanceRequest)
}

// Describes a request to cancel a Spot Instance.
#CancelledSpotInstanceRequest: {
	// The ID of the Spot Instance request.
	SpotInstanceRequestId?: null | string @go(,*string)

	// The state of the Spot Instance request.
	State?: null | string @go(,*string)
}

// Describes a Capacity Reservation.
#CapacityReservation: {
	// The Availability Zone in which the capacity is reserved.
	AvailabilityZone?: null | string @go(,*string)

	// The Availability Zone ID of the Capacity Reservation.
	AvailabilityZoneId?: null | string @go(,*string)

	// The remaining capacity. Indicates the number of instances that can be launched
	// in the Capacity Reservation.
	AvailableInstanceCount?: null | int64 @go(,*int64)

	// The Amazon Resource Name (ARN) of the Capacity Reservation.
	CapacityReservationArn?: null | string @go(,*string)

	// The ID of the Capacity Reservation.
	CapacityReservationId?: null | string @go(,*string)

	// The date and time at which the Capacity Reservation was created.
	CreateDate?: null | time.Time @go(,*time.Time)

	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	// This optimization provides dedicated throughput to Amazon EBS and an optimized
	// configuration stack to provide optimal I/O performance. This optimization
	// isn't available with all instance types. Additional usage charges apply when
	// using an EBS- optimized instance.
	EbsOptimized?: null | bool @go(,*bool)

	// The date and time at which the Capacity Reservation expires. When a Capacity
	// Reservation expires, the reserved capacity is released and you can no longer
	// launch instances into it. The Capacity Reservation's state changes to expired
	// when it reaches its end date and time.
	EndDate?: null | time.Time @go(,*time.Time)

	// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation
	// can have one of the following end types:
	//
	//    * unlimited - The Capacity Reservation remains active until you explicitly
	//    cancel it.
	//
	//    * limited - The Capacity Reservation expires automatically at a specified
	//    date and time.
	EndDateType?: null | string @go(,*string)

	// Indicates whether the Capacity Reservation supports instances with temporary,
	// block-level storage.
	EphemeralStorage?: null | bool @go(,*bool)

	// Indicates the type of instance launches that the Capacity Reservation accepts.
	// The options include:
	//
	//    * open - The Capacity Reservation accepts all instances that have matching
	//    attributes (instance type, platform, and Availability Zone). Instances
	//    that have matching attributes launch into the Capacity Reservation automatically
	//    without specifying any additional parameters.
	//
	//    * targeted - The Capacity Reservation only accepts instances that have
	//    matching attributes (instance type, platform, and Availability Zone),
	//    and explicitly target the Capacity Reservation. This ensures that only
	//    permitted instances can use the reserved capacity.
	InstanceMatchCriteria?: null | string @go(,*string)

	// The type of operating system for which the Capacity Reservation reserves
	// capacity.
	InstancePlatform?: null | string @go(,*string)

	// The type of instance for which the Capacity Reservation reserves capacity.
	InstanceType?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Outpost on which the Capacity Reservation
	// was created.
	OutpostArn?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the Capacity Reservation.
	OwnerId?: null | string @go(,*string)

	// The date and time at which the Capacity Reservation was started.
	StartDate?: null | time.Time @go(,*time.Time)

	// The current state of the Capacity Reservation. A Capacity Reservation can
	// be in one of the following states:
	//
	//    * active - The Capacity Reservation is active and the capacity is available
	//    for your use.
	//
	//    * expired - The Capacity Reservation expired automatically at the date
	//    and time specified in your request. The reserved capacity is no longer
	//    available for your use.
	//
	//    * cancelled - The Capacity Reservation was cancelled. The reserved capacity
	//    is no longer available for your use.
	//
	//    * pending - The Capacity Reservation request was successful but the capacity
	//    provisioning is still pending.
	//
	//    * failed - The Capacity Reservation request has failed. A request might
	//    fail due to invalid request parameters, capacity constraints, or instance
	//    limit constraints. Failed requests are retained for 60 minutes.
	State?: null | string @go(,*string)

	// Any tags assigned to the Capacity Reservation.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation
	// can have one of the following tenancy settings:
	//
	//    * default - The Capacity Reservation is created on hardware that is shared
	//    with other Amazon Web Services accounts.
	//
	//    * dedicated - The Capacity Reservation is created on single-tenant hardware
	//    that is dedicated to a single Amazon Web Services account.
	Tenancy?: null | string @go(,*string)

	// The total number of instances for which the Capacity Reservation reserves
	// capacity.
	TotalInstanceCount?: null | int64 @go(,*int64)
}

// Describes a resource group to which a Capacity Reservation has been added.
#CapacityReservationGroup: {
	// The ARN of the resource group.
	GroupArn?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the resource group.
	OwnerId?: null | string @go(,*string)
}

// Describes the strategy for using unused Capacity Reservations for fulfilling
// On-Demand capacity.
//
// This strategy can only be used if the EC2 Fleet is of type instant.
//
// For more information about Capacity Reservations, see On-Demand Capacity
// Reservations (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html)
// in the Amazon EC2 User Guide. For examples of using Capacity Reservations
// in an EC2 Fleet, see EC2 Fleet example configurations (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html)
// in the Amazon EC2 User Guide.
#CapacityReservationOptions: {
	// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand
	// capacity.
	//
	// If you specify use-capacity-reservations-first, the fleet uses unused Capacity
	// Reservations to fulfill On-Demand capacity up to the target On-Demand capacity.
	// If multiple instance pools have unused Capacity Reservations, the On-Demand
	// allocation strategy (lowest-price or prioritized) is applied. If the number
	// of unused Capacity Reservations is less than the On-Demand target capacity,
	// the remaining On-Demand target capacity is launched according to the On-Demand
	// allocation strategy (lowest-price or prioritized).
	//
	// If you do not specify a value, the fleet fulfils the On-Demand capacity according
	// to the chosen On-Demand allocation strategy.
	UsageStrategy?: null | string @go(,*string)
}

// Describes the strategy for using unused Capacity Reservations for fulfilling
// On-Demand capacity.
//
// This strategy can only be used if the EC2 Fleet is of type instant.
//
// For more information about Capacity Reservations, see On-Demand Capacity
// Reservations (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html)
// in the Amazon EC2 User Guide. For examples of using Capacity Reservations
// in an EC2 Fleet, see EC2 Fleet example configurations (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html)
// in the Amazon EC2 User Guide.
#CapacityReservationOptionsRequest: {
	// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand
	// capacity.
	//
	// If you specify use-capacity-reservations-first, the fleet uses unused Capacity
	// Reservations to fulfill On-Demand capacity up to the target On-Demand capacity.
	// If multiple instance pools have unused Capacity Reservations, the On-Demand
	// allocation strategy (lowest-price or prioritized) is applied. If the number
	// of unused Capacity Reservations is less than the On-Demand target capacity,
	// the remaining On-Demand target capacity is launched according to the On-Demand
	// allocation strategy (lowest-price or prioritized).
	//
	// If you do not specify a value, the fleet fulfils the On-Demand capacity according
	// to the chosen On-Demand allocation strategy.
	UsageStrategy?: null | string @go(,*string)
}

// Describes an instance's Capacity Reservation targeting option. You can specify
// only one parameter at a time. If you specify CapacityReservationPreference
// and CapacityReservationTarget, the request fails.
//
// Use the CapacityReservationPreference parameter to configure the instance
// to run as an On-Demand Instance or to run in any open Capacity Reservation
// that has matching attributes (instance type, platform, Availability Zone).
// Use the CapacityReservationTarget parameter to explicitly target a specific
// Capacity Reservation or a Capacity Reservation group.
#CapacityReservationSpecification: {
	// Indicates the instance's Capacity Reservation preferences. Possible preferences
	// include:
	//
	//    * open - The instance can run in any open Capacity Reservation that has
	//    matching attributes (instance type, platform, Availability Zone).
	//
	//    * none - The instance avoids running in a Capacity Reservation even if
	//    one is available. The instance runs as an On-Demand Instance.
	CapacityReservationPreference?: null | string @go(,*string)

	// Information about the target Capacity Reservation or Capacity Reservation
	// group.
	CapacityReservationTarget?: null | #CapacityReservationTarget @go(,*CapacityReservationTarget)
}

// Describes the instance's Capacity Reservation targeting preferences. The
// action returns the capacityReservationPreference response element if the
// instance is configured to run in On-Demand capacity, or if it is configured
// in run in any open Capacity Reservation that has matching attributes (instance
// type, platform, Availability Zone). The action returns the capacityReservationTarget
// response element if the instance explicily targets a specific Capacity Reservation
// or Capacity Reservation group.
#CapacityReservationSpecificationResponse: {
	// Describes the instance's Capacity Reservation preferences. Possible preferences
	// include:
	//
	//    * open - The instance can run in any open Capacity Reservation that has
	//    matching attributes (instance type, platform, Availability Zone).
	//
	//    * none - The instance avoids running in a Capacity Reservation even if
	//    one is available. The instance runs in On-Demand capacity.
	CapacityReservationPreference?: null | string @go(,*string)

	// Information about the targeted Capacity Reservation or Capacity Reservation
	// group.
	CapacityReservationTarget?: null | #CapacityReservationTargetResponse @go(,*CapacityReservationTargetResponse)
}

// Describes a target Capacity Reservation or Capacity Reservation group.
#CapacityReservationTarget: {
	// The ID of the Capacity Reservation in which to run the instance.
	CapacityReservationId?: null | string @go(,*string)

	// The ARN of the Capacity Reservation resource group in which to run the instance.
	CapacityReservationResourceGroupArn?: null | string @go(,*string)
}

// Describes a target Capacity Reservation or Capacity Reservation group.
#CapacityReservationTargetResponse: {
	// The ID of the targeted Capacity Reservation.
	CapacityReservationId?: null | string @go(,*string)

	// The ARN of the targeted Capacity Reservation group.
	CapacityReservationResourceGroupArn?: null | string @go(,*string)
}

// Describes a carrier gateway.
#CarrierGateway: {
	// The ID of the carrier gateway.
	CarrierGatewayId?: null | string @go(,*string)

	// The Amazon Web Services account ID of the owner of the carrier gateway.
	OwnerId?: null | string @go(,*string)

	// The state of the carrier gateway.
	State?: null | string @go(,*string)

	// The tags assigned to the carrier gateway.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC associated with the carrier gateway.
	VpcId?: null | string @go(,*string)
}

// Information about the client certificate used for authentication.
#CertificateAuthentication: {
	// The ARN of the client certificate.
	ClientRootCertificateChain?: null | string @go(,*string)
}

// Information about the client certificate to be used for authentication.
#CertificateAuthenticationRequest: {
	// The ARN of the client certificate. The certificate must be signed by a certificate
	// authority (CA) and it must be provisioned in AWS Certificate Manager (ACM).
	ClientRootCertificateChainArn?: null | string @go(,*string)
}

// Provides authorization for Amazon to bring a specific IP address range to
// a specific Amazon Web Services account using bring your own IP addresses
// (BYOIP). For more information, see Configuring your BYOIP address range (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip)
// in the Amazon Elastic Compute Cloud User Guide.
#CidrAuthorizationContext: {
	// The plain-text authorization message for the prefix and account.
	//
	// Message is a required field
	Message?: null | string @go(,*string)

	// The signed authorization message for the prefix and account.
	//
	// Signature is a required field
	Signature?: null | string @go(,*string)
}

// Describes an IPv4 CIDR block.
#CidrBlock: {
	// The IPv4 CIDR block.
	CidrBlock?: null | string @go(,*string)
}

// Describes the ClassicLink DNS support status of a VPC.
#ClassicLinkDnsSupport: {
	// Indicates whether ClassicLink DNS support is enabled for the VPC.
	ClassicLinkDnsSupported?: null | bool @go(,*bool)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes a linked EC2-Classic instance.
#ClassicLinkInstance: {
	// A list of security groups.
	Groups: [...null | #GroupIdentifier] @go(,[]*GroupIdentifier)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// Any tags assigned to the instance.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes a Classic Load Balancer.
#ClassicLoadBalancer: {
	// The name of the load balancer.
	Name?: null | string @go(,*string)
}

// Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet
// registers the running Spot Instances with these Classic Load Balancers.
#ClassicLoadBalancersConfig: {
	// One or more Classic Load Balancers.
	ClassicLoadBalancers: [...null | #ClassicLoadBalancer] @go(,[]*ClassicLoadBalancer)
}

// Describes the state of a client certificate revocation list.
#ClientCertificateRevocationListStatus: {
	// The state of the client certificate revocation list.
	Code?: null | string @go(,*string)

	// A message about the status of the client certificate revocation list, if
	// applicable.
	Message?: null | string @go(,*string)
}

// The options for managing connection authorization for new client connections.
#ClientConnectOptions: {
	// Indicates whether client connect options are enabled. The default is false
	// (not enabled).
	Enabled?: null | bool @go(,*bool)

	// The Amazon Resource Name (ARN) of the AWS Lambda function used for connection
	// authorization.
	LambdaFunctionArn?: null | string @go(,*string)
}

// The options for managing connection authorization for new client connections.
#ClientConnectResponseOptions: {
	// Indicates whether client connect options are enabled.
	Enabled?: null | bool @go(,*bool)

	// The Amazon Resource Name (ARN) of the AWS Lambda function used for connection
	// authorization.
	LambdaFunctionArn?: null | string @go(,*string)

	// The status of any updates to the client connect options.
	Status?: null | #ClientVpnEndpointAttributeStatus @go(,*ClientVpnEndpointAttributeStatus)
}

// Describes the client-specific data.
#ClientData: {
	// A user-defined comment about the disk upload.
	Comment?: null | string @go(,*string)

	// The time that the disk upload ends.
	UploadEnd?: null | time.Time @go(,*time.Time)

	// The size of the uploaded disk image, in GiB.
	UploadSize?: null | float64 @go(,*float64)

	// The time that the disk upload starts.
	UploadStart?: null | time.Time @go(,*time.Time)
}

// Describes the authentication methods used by a Client VPN endpoint. For more
// information, see Authentication (https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html)
// in the AWS Client VPN Administrator Guide.
#ClientVpnAuthentication: {
	// Information about the Active Directory, if applicable.
	ActiveDirectory?: null | #DirectoryServiceAuthentication @go(,*DirectoryServiceAuthentication)

	// Information about the IAM SAML identity provider, if applicable.
	FederatedAuthentication?: null | #FederatedAuthentication @go(,*FederatedAuthentication)

	// Information about the authentication certificates, if applicable.
	MutualAuthentication?: null | #CertificateAuthentication @go(,*CertificateAuthentication)

	// The authentication type used.
	Type?: null | string @go(,*string)
}

// Describes the authentication method to be used by a Client VPN endpoint.
// For more information, see Authentication (https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication)
// in the AWS Client VPN Administrator Guide.
#ClientVpnAuthenticationRequest: {
	// Information about the Active Directory to be used, if applicable. You must
	// provide this information if Type is directory-service-authentication.
	ActiveDirectory?: null | #DirectoryServiceAuthenticationRequest @go(,*DirectoryServiceAuthenticationRequest)

	// Information about the IAM SAML identity provider to be used, if applicable.
	// You must provide this information if Type is federated-authentication.
	FederatedAuthentication?: null | #FederatedAuthenticationRequest @go(,*FederatedAuthenticationRequest)

	// Information about the authentication certificates to be used, if applicable.
	// You must provide this information if Type is certificate-authentication.
	MutualAuthentication?: null | #CertificateAuthenticationRequest @go(,*CertificateAuthenticationRequest)

	// The type of client authentication to be used.
	Type?: null | string @go(,*string)
}

// Describes the state of an authorization rule.
#ClientVpnAuthorizationRuleStatus: {
	// The state of the authorization rule.
	Code?: null | string @go(,*string)

	// A message about the status of the authorization rule, if applicable.
	Message?: null | string @go(,*string)
}

// Describes a client connection.
#ClientVpnConnection: {
	// The IP address of the client.
	ClientIp?: null | string @go(,*string)

	// The ID of the Client VPN endpoint to which the client is connected.
	ClientVpnEndpointId?: null | string @go(,*string)

	// The common name associated with the client. This is either the name of the
	// client certificate, or the Active Directory user name.
	CommonName?: null | string @go(,*string)

	// The date and time the client connection was terminated.
	ConnectionEndTime?: null | string @go(,*string)

	// The date and time the client connection was established.
	ConnectionEstablishedTime?: null | string @go(,*string)

	// The ID of the client connection.
	ConnectionId?: null | string @go(,*string)

	// The number of bytes received by the client.
	EgressBytes?: null | string @go(,*string)

	// The number of packets received by the client.
	EgressPackets?: null | string @go(,*string)

	// The number of bytes sent by the client.
	IngressBytes?: null | string @go(,*string)

	// The number of packets sent by the client.
	IngressPackets?: null | string @go(,*string)

	// The statuses returned by the client connect handler for posture compliance,
	// if applicable.
	PostureComplianceStatuses: [...null | string] @go(,[]*string)

	// The current state of the client connection.
	Status?: null | #ClientVpnConnectionStatus @go(,*ClientVpnConnectionStatus)

	// The current date and time.
	Timestamp?: null | string @go(,*string)

	// The username of the client who established the client connection. This information
	// is only provided if Active Directory client authentication is used.
	Username?: null | string @go(,*string)
}

// Describes the status of a client connection.
#ClientVpnConnectionStatus: {
	// The state of the client connection.
	Code?: null | string @go(,*string)

	// A message about the status of the client connection, if applicable.
	Message?: null | string @go(,*string)
}

// Describes a Client VPN endpoint.
#ClientVpnEndpoint: {
	// Information about the associated target networks. A target network is a subnet
	// in a VPC.
	//
	// Deprecated: This property is deprecated. To view the target networks associated with a Client VPN endpoint, call DescribeClientVpnTargetNetworks and inspect the clientVpnTargetNetworks response element.
	AssociatedTargetNetworks: [...null | #AssociatedTargetNetwork] @go(,[]*AssociatedTargetNetwork)

	// Information about the authentication method used by the Client VPN endpoint.
	AuthenticationOptions: [...null | #ClientVpnAuthentication] @go(,[]*ClientVpnAuthentication)

	// The IPv4 address range, in CIDR notation, from which client IP addresses
	// are assigned.
	ClientCidrBlock?: null | string @go(,*string)

	// The options for managing connection authorization for new client connections.
	ClientConnectOptions?: null | #ClientConnectResponseOptions @go(,*ClientConnectResponseOptions)

	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId?: null | string @go(,*string)

	// Information about the client connection logging options for the Client VPN
	// endpoint.
	ConnectionLogOptions?: null | #ConnectionLogResponseOptions @go(,*ConnectionLogResponseOptions)

	// The date and time the Client VPN endpoint was created.
	CreationTime?: null | string @go(,*string)

	// The date and time the Client VPN endpoint was deleted, if applicable.
	DeletionTime?: null | string @go(,*string)

	// A brief description of the endpoint.
	Description?: null | string @go(,*string)

	// The DNS name to be used by clients when connecting to the Client VPN endpoint.
	DnsName?: null | string @go(,*string)

	// Information about the DNS servers to be used for DNS resolution.
	DnsServers: [...null | string] @go(,[]*string)

	// The IDs of the security groups for the target network.
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// The URL of the self-service portal.
	SelfServicePortalUrl?: null | string @go(,*string)

	// The ARN of the server certificate.
	ServerCertificateArn?: null | string @go(,*string)

	// Indicates whether split-tunnel is enabled in the AWS Client VPN endpoint.
	//
	// For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client
	// VPN Endpoint (https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html)
	// in the AWS Client VPN Administrator Guide.
	SplitTunnel?: null | bool @go(,*bool)

	// The current state of the Client VPN endpoint.
	Status?: null | #ClientVpnEndpointStatus @go(,*ClientVpnEndpointStatus)

	// Any tags assigned to the Client VPN endpoint.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The transport protocol used by the Client VPN endpoint.
	TransportProtocol?: null | string @go(,*string)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)

	// The port number for the Client VPN endpoint.
	VpnPort?: null | int64 @go(,*int64)

	// The protocol used by the VPN session.
	VpnProtocol?: null | string @go(,*string)
}

// Describes the status of the Client VPN endpoint attribute.
#ClientVpnEndpointAttributeStatus: {
	// The status code.
	Code?: null | string @go(,*string)

	// The status message.
	Message?: null | string @go(,*string)
}

// Describes the state of a Client VPN endpoint.
#ClientVpnEndpointStatus: {
	// The state of the Client VPN endpoint. Possible states include:
	//
	//    * pending-associate - The Client VPN endpoint has been created but no
	//    target networks have been associated. The Client VPN endpoint cannot accept
	//    connections.
	//
	//    * available - The Client VPN endpoint has been created and a target network
	//    has been associated. The Client VPN endpoint can accept connections.
	//
	//    * deleting - The Client VPN endpoint is being deleted. The Client VPN
	//    endpoint cannot accept connections.
	//
	//    * deleted - The Client VPN endpoint has been deleted. The Client VPN endpoint
	//    cannot accept connections.
	Code?: null | string @go(,*string)

	// A message about the status of the Client VPN endpoint.
	Message?: null | string @go(,*string)
}

// Information about a Client VPN endpoint route.
#ClientVpnRoute: {
	// The ID of the Client VPN endpoint with which the route is associated.
	ClientVpnEndpointId?: null | string @go(,*string)

	// A brief description of the route.
	Description?: null | string @go(,*string)

	// The IPv4 address range, in CIDR notation, of the route destination.
	DestinationCidr?: null | string @go(,*string)

	// Indicates how the route was associated with the Client VPN endpoint. associate
	// indicates that the route was automatically added when the target network
	// was associated with the Client VPN endpoint. add-route indicates that the
	// route was manually added using the CreateClientVpnRoute action.
	Origin?: null | string @go(,*string)

	// The current state of the route.
	Status?: null | #ClientVpnRouteStatus @go(,*ClientVpnRouteStatus)

	// The ID of the subnet through which traffic is routed.
	TargetSubnet?: null | string @go(,*string)

	// The route type.
	Type?: null | string @go(,*string)
}

// Describes the state of a Client VPN endpoint route.
#ClientVpnRouteStatus: {
	// The state of the Client VPN endpoint route.
	Code?: null | string @go(,*string)

	// A message about the status of the Client VPN endpoint route, if applicable.
	Message?: null | string @go(,*string)
}

// Describes address usage for a customer-owned address pool.
#CoipAddressUsage: {
	// The allocation ID of the address.
	AllocationId?: null | string @go(,*string)

	// The AWS account ID.
	AwsAccountId?: null | string @go(,*string)

	// The AWS service.
	AwsService?: null | string @go(,*string)

	// The customer-owned IP address.
	CoIp?: null | string @go(,*string)
}

// Describes a customer-owned address pool.
#CoipPool: {
	// The ID of the local gateway route table.
	LocalGatewayRouteTableId?: null | string @go(,*string)

	// The ARN of the address pool.
	PoolArn?: null | string @go(,*string)

	// The address ranges of the address pool.
	PoolCidrs: [...null | string] @go(,[]*string)

	// The ID of the address pool.
	PoolId?: null | string @go(,*string)

	// The tags.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#ConfirmProductInstanceInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// The product code. This must be a product code that you own.
	//
	// ProductCode is a required field
	ProductCode?: null | string @go(,*string)
}

#ConfirmProductInstanceOutput: {
	// The Amazon Web Services account ID of the instance owner. This is only present
	// if the product code is attached to the instance.
	OwnerId?: null | string @go(,*string)

	// The return value of the request. Returns true if the specified product code
	// is owned by the requester and associated with the specified instance.
	Return?: null | bool @go(,*bool)
}

// Describes the client connection logging options for the Client VPN endpoint.
#ConnectionLogOptions: {
	// The name of the CloudWatch Logs log group. Required if connection logging
	// is enabled.
	CloudwatchLogGroup?: null | string @go(,*string)

	// The name of the CloudWatch Logs log stream to which the connection data is
	// published.
	CloudwatchLogStream?: null | string @go(,*string)

	// Indicates whether connection logging is enabled.
	Enabled?: null | bool @go(,*bool)
}

// Information about the client connection logging options for a Client VPN
// endpoint.
#ConnectionLogResponseOptions: {
	// The name of the Amazon CloudWatch Logs log group to which connection logging
	// data is published.
	CloudwatchLogGroup?: null | string @go(,*string)

	// The name of the Amazon CloudWatch Logs log stream to which connection logging
	// data is published.
	CloudwatchLogStream?: null | string @go(,*string)

	// Indicates whether client connection logging is enabled for the Client VPN
	// endpoint.
	Enabled?: null | bool @go(,*bool)
}

// Describes a connection notification for a VPC endpoint or VPC endpoint service.
#ConnectionNotification: {
	// The events for the notification. Valid values are Accept, Connect, Delete,
	// and Reject.
	ConnectionEvents: [...null | string] @go(,[]*string)

	// The ARN of the SNS topic for the notification.
	ConnectionNotificationArn?: null | string @go(,*string)

	// The ID of the notification.
	ConnectionNotificationId?: null | string @go(,*string)

	// The state of the notification.
	ConnectionNotificationState?: null | string @go(,*string)

	// The type of notification.
	ConnectionNotificationType?: null | string @go(,*string)

	// The ID of the endpoint service.
	ServiceId?: null | string @go(,*string)

	// The ID of the VPC endpoint.
	VpcEndpointId?: null | string @go(,*string)
}

// Describes a conversion task.
#ConversionTask: {
	// The ID of the conversion task.
	ConversionTaskId?: null | string @go(,*string)

	// The time when the task expires. If the upload isn't complete before the expiration
	// time, we automatically cancel the task.
	ExpirationTime?: null | string @go(,*string)

	// If the task is for importing an instance, this contains information about
	// the import instance task.
	ImportInstance?: null | #ImportInstanceTaskDetails @go(,*ImportInstanceTaskDetails)

	// If the task is for importing a volume, this contains information about the
	// import volume task.
	ImportVolume?: null | #ImportVolumeTaskDetails @go(,*ImportVolumeTaskDetails)

	// The state of the conversion task.
	State?: null | string @go(,*string)

	// The status message related to the conversion task.
	StatusMessage?: null | string @go(,*string)

	// Any tags assigned to the task.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#CopyFpgaImageInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The description for the new AFI.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The name for the new AFI. The default is the name of the source AFI.
	Name?: null | string @go(,*string)

	// The ID of the source AFI.
	//
	// SourceFpgaImageId is a required field
	SourceFpgaImageId?: null | string @go(,*string)

	// The Region that contains the source AFI.
	//
	// SourceRegion is a required field
	SourceRegion?: null | string @go(,*string)
}

#CopyFpgaImageOutput: {
	// The ID of the new AFI.
	FpgaImageId?: null | string @go(,*string)
}

// Contains the parameters for CopyImage.
#CopyImageInput: {
	// Unique, case-sensitive identifier you provide to ensure idempotency of the
	// request. For more information, see Ensuring idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
	// in the Amazon EC2 API Reference.
	ClientToken?: null | string @go(,*string)

	// A description for the new AMI in the destination Region.
	Description?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Outpost to which to copy the AMI. Only
	// specify this parameter when copying an AMI from an AWS Region to an Outpost.
	// The AMI must be in the Region of the destination Outpost. You cannot copy
	// an AMI from an Outpost to a Region, from one Outpost to another, or within
	// the same Outpost.
	//
	// For more information, see Copying AMIs from an AWS Region to an Outpost (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#copy-amis)
	// in the Amazon Elastic Compute Cloud User Guide.
	DestinationOutpostArn?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Specifies whether the destination snapshots of the copied image should be
	// encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot
	// create an unencrypted copy of an encrypted snapshot. The default CMK for
	// EBS is used unless you specify a non-default AWS Key Management Service (AWS
	// KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	Encrypted?: null | bool @go(,*bool)

	// The identifier of the symmetric AWS Key Management Service (AWS KMS) customer
	// master key (CMK) to use when creating encrypted volumes. If this parameter
	// is not specified, your AWS managed CMK for EBS is used. If you specify a
	// CMK, you must also set the encrypted state to true.
	//
	// You can specify a CMK using any of the following:
	//
	//    * Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * Key alias. For example, alias/ExampleAlias.
	//
	//    * Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
	//
	// AWS authenticates the CMK asynchronously. Therefore, if you specify an identifier
	// that is not valid, the action can appear to complete, but eventually fails.
	//
	// The specified CMK must exist in the destination Region.
	//
	// Amazon EBS does not support asymmetric CMKs.
	KmsKeyId?: null | string @go(,*string)

	// The name of the new AMI in the destination Region.
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// The ID of the AMI to copy.
	//
	// SourceImageId is a required field
	SourceImageId?: null | string @go(,*string)

	// The name of the Region that contains the AMI to copy.
	//
	// SourceRegion is a required field
	SourceRegion?: null | string @go(,*string)
}

// Contains the output of CopyImage.
#CopyImageOutput: {
	// The ID of the new AMI.
	ImageId?: null | string @go(,*string)
}

#CopySnapshotInput: {
	// A description for the EBS snapshot.
	Description?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Outpost to which to copy the snapshot.
	// Only specify this parameter when copying a snapshot from an Amazon Web Services
	// Region to an Outpost. The snapshot must be in the Region for the destination
	// Outpost. You cannot copy a snapshot from an Outpost to a Region, from one
	// Outpost to another, or within the same Outpost.
	//
	// For more information, see Copy snapshots from an Amazon Web Services Region
	// to an Outpost (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#copy-snapshots)
	// in the Amazon Elastic Compute Cloud User Guide.
	DestinationOutpostArn?: null | string @go(,*string)

	// The destination Region to use in the PresignedUrl parameter of a snapshot
	// copy operation. This parameter is only valid for specifying the destination
	// Region in a PresignedUrl parameter, where it is required.
	//
	// The snapshot copy is sent to the regional endpoint that you sent the HTTP
	// request to (for example, ec2.us-east-1.amazonaws.com). With the CLI, this
	// is specified using the --region parameter or the default Region in your Amazon
	// Web Services configuration file.
	DestinationRegion?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// To encrypt a copy of an unencrypted snapshot if encryption by default is
	// not enabled, enable encryption using this parameter. Otherwise, omit this
	// parameter. Encrypted snapshots are encrypted, even if you omit this parameter
	// and encryption by default is not enabled. You cannot set this parameter to
	// false. For more information, see Amazon EBS encryption (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	Encrypted?: null | bool @go(,*bool)

	// The identifier of the Key Management Service (KMS) KMS key to use for Amazon
	// EBS encryption. If this parameter is not specified, your KMS key for Amazon
	// EBS is used. If KmsKeyId is specified, the encrypted state must be true.
	//
	// You can specify the KMS key using any of the following:
	//
	//    * Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * Key alias. For example, alias/ExampleAlias.
	//
	//    * Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
	//
	// Amazon Web Services authenticates the KMS key asynchronously. Therefore,
	// if you specify an ID, alias, or ARN that is not valid, the action can appear
	// to complete, but eventually fails.
	KmsKeyId?: null | string @go(,*string)

	// When you copy an encrypted source snapshot using the Amazon EC2 Query API,
	// you must supply a pre-signed URL. This parameter is optional for unencrypted
	// snapshots. For more information, see Query requests (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html).
	//
	// The PresignedUrl should use the snapshot source endpoint, the CopySnapshot
	// action, and include the SourceRegion, SourceSnapshotId, and DestinationRegion
	// parameters. The PresignedUrl must be signed using Amazon Web Services Signature
	// Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm
	// for this parameter uses the same logic that is described in Authenticating
	// Requests: Using Query Parameters (Amazon Web Services Signature Version 4)
	// (https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html)
	// in the Amazon Simple Storage Service API Reference. An invalid or improperly
	// signed PresignedUrl will cause the copy operation to fail asynchronously,
	// and the snapshot will move to an error state.
	PresignedUrl?: null | string @go(,*string)

	// The ID of the Region that contains the snapshot to be copied.
	//
	// SourceRegion is a required field
	SourceRegion?: null | string @go(,*string)

	// The ID of the EBS snapshot to copy.
	//
	// SourceSnapshotId is a required field
	SourceSnapshotId?: null | string @go(,*string)

	// The tags to apply to the new snapshot.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CopySnapshotOutput: {
	// The ID of the new snapshot.
	SnapshotId?: null | string @go(,*string)

	// Any tags applied to the new snapshot.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// The CPU options for the instance.
#CpuOptions: {
	// The number of CPU cores for the instance.
	CoreCount?: null | int64 @go(,*int64)

	// The number of threads per CPU core.
	ThreadsPerCore?: null | int64 @go(,*int64)
}

// The CPU options for the instance. Both the core count and threads per core
// must be specified in the request.
#CpuOptionsRequest: {
	// The number of CPU cores for the instance.
	CoreCount?: null | int64 @go(,*int64)

	// The number of threads per CPU core. To disable multithreading for the instance,
	// specify a value of 1. Otherwise, specify the default value of 2.
	ThreadsPerCore?: null | int64 @go(,*int64)
}

#CreateCapacityReservationInput: {
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone?: null | string @go(,*string)

	// The ID of the Availability Zone in which to create the Capacity Reservation.
	AvailabilityZoneId?: null | string @go(,*string)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	// This optimization provides dedicated throughput to Amazon EBS and an optimized
	// configuration stack to provide optimal I/O performance. This optimization
	// isn't available with all instance types. Additional usage charges apply when
	// using an EBS- optimized instance.
	EbsOptimized?: null | bool @go(,*bool)

	// The date and time at which the Capacity Reservation expires. When a Capacity
	// Reservation expires, the reserved capacity is released and you can no longer
	// launch instances into it. The Capacity Reservation's state changes to expired
	// when it reaches its end date and time.
	//
	// You must provide an EndDate value if EndDateType is limited. Omit EndDate
	// if EndDateType is unlimited.
	//
	// If the EndDateType is limited, the Capacity Reservation is cancelled within
	// an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55,
	// the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55
	// on 5/31/2019.
	EndDate?: null | time.Time @go(,*time.Time)

	// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation
	// can have one of the following end types:
	//
	//    * unlimited - The Capacity Reservation remains active until you explicitly
	//    cancel it. Do not provide an EndDate if the EndDateType is unlimited.
	//
	//    * limited - The Capacity Reservation expires automatically at a specified
	//    date and time. You must provide an EndDate value if the EndDateType value
	//    is limited.
	EndDateType?: null | string @go(,*string)

	// Indicates whether the Capacity Reservation supports instances with temporary,
	// block-level storage.
	EphemeralStorage?: null | bool @go(,*bool)

	// The number of instances for which to reserve capacity.
	//
	// Valid range: 1 - 1000
	//
	// InstanceCount is a required field
	InstanceCount?: null | int64 @go(,*int64)

	// Indicates the type of instance launches that the Capacity Reservation accepts.
	// The options include:
	//
	//    * open - The Capacity Reservation automatically matches all instances
	//    that have matching attributes (instance type, platform, and Availability
	//    Zone). Instances that have matching attributes run in the Capacity Reservation
	//    automatically without specifying any additional parameters.
	//
	//    * targeted - The Capacity Reservation only accepts instances that have
	//    matching attributes (instance type, platform, and Availability Zone),
	//    and explicitly target the Capacity Reservation. This ensures that only
	//    permitted instances can use the reserved capacity.
	//
	// Default: open
	InstanceMatchCriteria?: null | string @go(,*string)

	// The type of operating system for which to reserve capacity.
	//
	// InstancePlatform is a required field
	InstancePlatform?: null | string @go(,*string)

	// The instance type for which to reserve capacity. For more information, see
	// Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide.
	//
	// InstanceType is a required field
	InstanceType?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity
	// Reservation.
	OutpostArn?: null | string @go(,*string)

	// The tags to apply to the Capacity Reservation during launch.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation
	// can have one of the following tenancy settings:
	//
	//    * default - The Capacity Reservation is created on hardware that is shared
	//    with other Amazon Web Services accounts.
	//
	//    * dedicated - The Capacity Reservation is created on single-tenant hardware
	//    that is dedicated to a single Amazon Web Services account.
	Tenancy?: null | string @go(,*string)
}

#CreateCapacityReservationOutput: {
	// Information about the Capacity Reservation.
	CapacityReservation?: null | #CapacityReservation @go(,*CapacityReservation)
}

#CreateCarrierGatewayInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to ensure idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tags to associate with the carrier gateway.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the VPC to associate with the carrier gateway.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#CreateCarrierGatewayOutput: {
	// Information about the carrier gateway.
	CarrierGateway?: null | #CarrierGateway @go(,*CarrierGateway)
}

#CreateClientVpnEndpointInput: {
	// Information about the authentication method to be used to authenticate clients.
	//
	// AuthenticationOptions is a required field
	AuthenticationOptions: [...null | #ClientVpnAuthenticationRequest] @go(,[]*ClientVpnAuthenticationRequest)

	// The IPv4 address range, in CIDR notation, from which to assign client IP
	// addresses. The address range cannot overlap with the local CIDR of the VPC
	// in which the associated subnet is located, or the routes that you add manually.
	// The address range cannot be changed after the Client VPN endpoint has been
	// created. The CIDR block should be /22 or greater.
	//
	// ClientCidrBlock is a required field
	ClientCidrBlock?: null | string @go(,*string)

	// The options for managing connection authorization for new client connections.
	ClientConnectOptions?: null | #ClientConnectOptions @go(,*ClientConnectOptions)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Information about the client connection logging options.
	//
	// If you enable client connection logging, data about client connections is
	// sent to a Cloudwatch Logs log stream. The following information is logged:
	//
	//    * Client connection requests
	//
	//    * Client connection results (successful and unsuccessful)
	//
	//    * Reasons for unsuccessful client connection requests
	//
	//    * Client connection termination time
	//
	// ConnectionLogOptions is a required field
	ConnectionLogOptions?: null | #ConnectionLogOptions @go(,*ConnectionLogOptions)

	// A brief description of the Client VPN endpoint.
	Description?: null | string @go(,*string)

	// Information about the DNS servers to be used for DNS resolution. A Client
	// VPN endpoint can have up to two DNS servers. If no DNS server is specified,
	// the DNS address configured on the device is used for the DNS server.
	DnsServers: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of one or more security groups to apply to the target network. You
	// must also specify the ID of the VPC that contains the security groups.
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// Specify whether to enable the self-service portal for the Client VPN endpoint.
	//
	// Default Value: enabled
	SelfServicePortal?: null | string @go(,*string)

	// The ARN of the server certificate. For more information, see the AWS Certificate
	// Manager User Guide (https://docs.aws.amazon.com/acm/latest/userguide/).
	//
	// ServerCertificateArn is a required field
	ServerCertificateArn?: null | string @go(,*string)

	// Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint.
	//
	// By default, split-tunnel on a VPN endpoint is disabled.
	//
	// For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client
	// VPN Endpoint (https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html)
	// in the AWS Client VPN Administrator Guide.
	SplitTunnel?: null | bool @go(,*bool)

	// The tags to apply to the Client VPN endpoint during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The transport protocol to be used by the VPN session.
	//
	// Default value: udp
	TransportProtocol?: null | string @go(,*string)

	// The ID of the VPC to associate with the Client VPN endpoint. If no security
	// group IDs are specified in the request, the default security group for the
	// VPC is applied.
	VpcId?: null | string @go(,*string)

	// The port number to assign to the Client VPN endpoint for TCP and UDP traffic.
	//
	// Valid Values: 443 | 1194
	//
	// Default Value: 443
	VpnPort?: null | int64 @go(,*int64)
}

#CreateClientVpnEndpointOutput: {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId?: null | string @go(,*string)

	// The DNS name to be used by clients when establishing their VPN session.
	DnsName?: null | string @go(,*string)

	// The current state of the Client VPN endpoint.
	Status?: null | #ClientVpnEndpointStatus @go(,*ClientVpnEndpointStatus)
}

#CreateClientVpnRouteInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The ID of the Client VPN endpoint to which to add the route.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// A brief description of the route.
	Description?: null | string @go(,*string)

	// The IPv4 address range, in CIDR notation, of the route destination. For example:
	//
	//    * To add a route for Internet access, enter 0.0.0.0/0
	//
	//    * To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range
	//
	//    * To add a route for an on-premises network, enter the AWS Site-to-Site
	//    VPN connection's IPv4 CIDR range
	//
	//    * To add a route for the local network, enter the client CIDR range
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the subnet through which you want to route traffic. The specified
	// subnet must be an existing target network of the Client VPN endpoint.
	//
	// Alternatively, if you're adding a route for the local network, specify local.
	//
	// TargetVpcSubnetId is a required field
	TargetVpcSubnetId?: null | string @go(,*string)
}

#CreateClientVpnRouteOutput: {
	// The current state of the route.
	Status?: null | #ClientVpnRouteStatus @go(,*ClientVpnRouteStatus)
}

// Contains the parameters for CreateCustomerGateway.
#CreateCustomerGatewayInput: {
	// For devices that support BGP, the customer gateway's BGP ASN.
	//
	// Default: 65000
	//
	// BgpAsn is a required field
	BgpAsn?: null | int64 @go(,*int64)

	// The Amazon Resource Name (ARN) for the customer gateway certificate.
	CertificateArn?: null | string @go(,*string)

	// A name for the customer gateway device.
	//
	// Length Constraints: Up to 255 characters.
	DeviceName?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Internet-routable IP address for the customer gateway's outside interface.
	// The address must be static.
	PublicIp?: null | string @go(,*string)

	// The tags to apply to the customer gateway.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The type of VPN connection that this customer gateway supports (ipsec.1).
	//
	// Type is a required field
	Type?: null | string @go(,*string)
}

// Contains the output of CreateCustomerGateway.
#CreateCustomerGatewayOutput: {
	// Information about the customer gateway.
	CustomerGateway?: null | #CustomerGateway @go(,*CustomerGateway)
}

#CreateDefaultSubnetInput: {
	// The Availability Zone in which to create the default subnet.
	//
	// AvailabilityZone is a required field
	AvailabilityZone?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#CreateDefaultSubnetOutput: {
	// Information about the subnet.
	Subnet?: null | #Subnet @go(,*Subnet)
}

#CreateDefaultVpcInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#CreateDefaultVpcOutput: {
	// Information about the VPC.
	Vpc?: null | #Vpc @go(,*Vpc)
}

#CreateDhcpOptionsInput: {
	// A DHCP configuration option.
	//
	// DhcpConfigurations is a required field
	DhcpConfigurations: [...null | #NewDhcpConfiguration] @go(,[]*NewDhcpConfiguration)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tags to assign to the DHCP option.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateDhcpOptionsOutput: {
	// A set of DHCP options.
	DhcpOptions?: null | #DhcpOptions @go(,*DhcpOptions)
}

#CreateEgressOnlyInternetGatewayInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to ensure idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tags to assign to the egress-only internet gateway.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the VPC for which to create the egress-only internet gateway.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#CreateEgressOnlyInternetGatewayOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request.
	ClientToken?: null | string @go(,*string)

	// Information about the egress-only internet gateway.
	EgressOnlyInternetGateway?: null | #EgressOnlyInternetGateway @go(,*EgressOnlyInternetGateway)
}

// Describes the instances that could not be launched by the fleet.
#CreateFleetError: {
	// The error code that indicates why the instance could not be launched. For
	// more information about error codes, see Error Codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html).
	ErrorCode?: null | string @go(,*string)

	// The error message that describes why the instance could not be launched.
	// For more information about error messages, see Error Codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html).
	ErrorMessage?: null | string @go(,*string)

	// The launch templates and overrides that were used for launching the instances.
	// The values that you specify in the Overrides replace the values in the launch
	// template.
	LaunchTemplateAndOverrides?: null | #LaunchTemplateAndOverridesResponse @go(,*LaunchTemplateAndOverridesResponse)

	// Indicates if the instance that could not be launched was a Spot Instance
	// or On-Demand Instance.
	Lifecycle?: null | string @go(,*string)
}

#CreateFleetInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Reserved.
	Context?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Indicates whether running instances should be terminated if the total target
	// capacity of the EC2 Fleet is decreased below the current size of the EC2
	// Fleet.
	ExcessCapacityTerminationPolicy?: null | string @go(,*string)

	// The configuration for the EC2 Fleet.
	//
	// LaunchTemplateConfigs is a required field
	LaunchTemplateConfigs: [...null | #FleetLaunchTemplateConfigRequest] @go(,[]*FleetLaunchTemplateConfigRequest)

	// Describes the configuration of On-Demand Instances in an EC2 Fleet.
	OnDemandOptions?: null | #OnDemandOptionsRequest @go(,*OnDemandOptionsRequest)

	// Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported
	// only for fleets of type maintain. For more information, see EC2 Fleet health
	// checks (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks)
	// in the Amazon EC2 User Guide.
	ReplaceUnhealthyInstances?: null | bool @go(,*bool)

	// Describes the configuration of Spot Instances in an EC2 Fleet.
	SpotOptions?: null | #SpotOptionsRequest @go(,*SpotOptionsRequest)

	// The key-value pair for tagging the EC2 Fleet request on creation. For more
	// information, see Tagging your resources (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources).
	//
	// If the fleet type is instant, specify a resource type of fleet to tag the
	// fleet or instance to tag the instances at launch.
	//
	// If the fleet type is maintain or request, specify a resource type of fleet
	// to tag the fleet. You cannot specify a resource type of instance. To tag
	// instances at launch, specify the tags in a launch template (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template).
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The number of units to request.
	//
	// TargetCapacitySpecification is a required field
	TargetCapacitySpecification?: null | #TargetCapacitySpecificationRequest @go(,*TargetCapacitySpecificationRequest)

	// Indicates whether running instances should be terminated when the EC2 Fleet
	// expires.
	TerminateInstancesWithExpiration?: null | bool @go(,*bool)

	// The fleet type. The default value is maintain.
	//
	//    * maintain - The EC2 Fleet places an asynchronous request for your desired
	//    capacity, and continues to maintain your desired Spot capacity by replenishing
	//    interrupted Spot Instances.
	//
	//    * request - The EC2 Fleet places an asynchronous one-time request for
	//    your desired capacity, but does submit Spot requests in alternative capacity
	//    pools if Spot capacity is unavailable, and does not maintain Spot capacity
	//    if Spot Instances are interrupted.
	//
	//    * instant - The EC2 Fleet places a synchronous one-time request for your
	//    desired capacity, and returns errors for any instances that could not
	//    be launched.
	//
	// For more information, see EC2 Fleet request types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#ec2-fleet-request-type)
	// in the Amazon EC2 User Guide.
	Type?: null | string @go(,*string)

	// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	// The default is to start fulfilling the request immediately.
	ValidFrom?: null | time.Time @go(,*time.Time)

	// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	// At this point, no new EC2 Fleet requests are placed or able to fulfill the
	// request. If no value is specified, the request remains until you cancel it.
	ValidUntil?: null | time.Time @go(,*time.Time)
}

// Describes the instances that were launched by the fleet.
#CreateFleetInstance: {
	// The IDs of the instances.
	InstanceIds: [...null | string] @go(,[]*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The launch templates and overrides that were used for launching the instances.
	// The values that you specify in the Overrides replace the values in the launch
	// template.
	LaunchTemplateAndOverrides?: null | #LaunchTemplateAndOverridesResponse @go(,*LaunchTemplateAndOverridesResponse)

	// Indicates if the instance that was launched is a Spot Instance or On-Demand
	// Instance.
	Lifecycle?: null | string @go(,*string)

	// The value is Windows for Windows instances. Otherwise, the value is blank.
	Platform?: null | string @go(,*string)
}

#CreateFleetOutput: {
	// Information about the instances that could not be launched by the fleet.
	// Supported only for fleets of type instant.
	Errors: [...null | #CreateFleetError] @go(,[]*CreateFleetError)

	// The ID of the EC2 Fleet.
	FleetId?: null | string @go(,*string)

	// Information about the instances that were launched by the fleet. Supported
	// only for fleets of type instant.
	Instances: [...null | #CreateFleetInstance] @go(,[]*CreateFleetInstance)
}

#CreateFlowLogsInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to ensure idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The ARN for the IAM role that permits Amazon EC2 to publish flow logs to
	// a CloudWatch Logs log group in your account.
	//
	// If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn
	// or LogGroupName.
	DeliverLogsPermissionArn?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Specifies the destination to which the flow log data is to be published.
	// Flow log data can be published to a CloudWatch Logs log group or an Amazon
	// S3 bucket. The value specified for this parameter depends on the value specified
	// for LogDestinationType.
	//
	// If LogDestinationType is not specified or cloud-watch-logs, specify the Amazon
	// Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish
	// to a log group called my-logs, specify arn:aws:logs:us-east-1:123456789012:log-group:my-logs.
	// Alternatively, use LogGroupName instead.
	//
	// If LogDestinationType is s3, specify the ARN of the Amazon S3 bucket. You
	// can also specify a subfolder in the bucket. To specify a subfolder in the
	// bucket, use the following ARN format: bucket_ARN/subfolder_name/. For example,
	// to specify a subfolder named my-logs in a bucket named my-bucket, use the
	// following ARN: arn:aws:s3:::my-bucket/my-logs/. You cannot use AWSLogs as
	// a subfolder name. This is a reserved term.
	LogDestination?: null | string @go(,*string)

	// Specifies the type of destination to which the flow log data is to be published.
	// Flow log data can be published to CloudWatch Logs or Amazon S3. To publish
	// flow log data to CloudWatch Logs, specify cloud-watch-logs. To publish flow
	// log data to Amazon S3, specify s3.
	//
	// If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn
	// or LogGroupName.
	//
	// Default: cloud-watch-logs
	LogDestinationType?: null | string @go(,*string)

	// The fields to include in the flow log record, in the order in which they
	// should appear. For a list of available fields, see Flow log records (https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records).
	// If you omit this parameter, the flow log is created using the default format.
	// If you specify this parameter, you must specify at least one field.
	//
	// Specify the fields using the ${field-id} format, separated by spaces. For
	// the CLI, use single quotation marks (' ') to surround the parameter value.
	LogFormat?: null | string @go(,*string)

	// The name of a new or existing CloudWatch Logs log group where Amazon EC2
	// publishes your flow logs.
	//
	// If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn
	// or LogGroupName.
	LogGroupName?: null | string @go(,*string)

	// The maximum interval of time during which a flow of packets is captured and
	// aggregated into a flow log record. You can specify 60 seconds (1 minute)
	// or 600 seconds (10 minutes).
	//
	// When a network interface is attached to a Nitro-based instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances),
	// the aggregation interval is always 60 seconds or less, regardless of the
	// value that you specify.
	//
	// Default: 600
	MaxAggregationInterval?: null | int64 @go(,*int64)

	// The ID of the subnet, network interface, or VPC for which you want to create
	// a flow log.
	//
	// Constraints: Maximum of 1000 resources
	//
	// ResourceIds is a required field
	ResourceIds: [...null | string] @go(,[]*string)

	// The type of resource for which to create the flow log. For example, if you
	// specified a VPC ID for the ResourceId property, specify VPC for this property.
	//
	// ResourceType is a required field
	ResourceType?: null | string @go(,*string)

	// The tags to apply to the flow logs.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The type of traffic to log. You can log traffic that the resource accepts
	// or rejects, or all traffic.
	//
	// TrafficType is a required field
	TrafficType?: null | string @go(,*string)
}

#CreateFlowLogsOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request.
	ClientToken?: null | string @go(,*string)

	// The IDs of the flow logs.
	FlowLogIds: [...null | string] @go(,[]*string)

	// Information about the flow logs that could not be created successfully.
	Unsuccessful: [...null | #UnsuccessfulItem] @go(,[]*UnsuccessfulItem)
}

#CreateFpgaImageInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// A description for the AFI.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The location of the encrypted design checkpoint in Amazon S3. The input must
	// be a tarball.
	//
	// InputStorageLocation is a required field
	InputStorageLocation?: null | #StorageLocation @go(,*StorageLocation)

	// The location in Amazon S3 for the output logs.
	LogsStorageLocation?: null | #StorageLocation @go(,*StorageLocation)

	// A name for the AFI.
	Name?: null | string @go(,*string)

	// The tags to apply to the FPGA image during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateFpgaImageOutput: {
	// The global FPGA image identifier (AGFI ID).
	FpgaImageGlobalId?: null | string @go(,*string)

	// The FPGA image identifier (AFI ID).
	FpgaImageId?: null | string @go(,*string)
}

#CreateImageInput: {
	// The block device mappings. This parameter cannot be used to modify the encryption
	// status of existing volumes or snapshots. To create an AMI with encrypted
	// snapshots, use the CopyImage action.
	BlockDeviceMappings: [...null | #BlockDeviceMapping] @go(,[]*BlockDeviceMapping)

	// A description for the new image.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// A name for the new image.
	//
	// Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets
	// ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('),
	// at-signs (@), or underscores(_)
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// By default, Amazon EC2 attempts to shut down and reboot the instance before
	// creating the image. If the No Reboot option is set, Amazon EC2 doesn't shut
	// down the instance before creating the image. When this option is used, file
	// system integrity on the created image can't be guaranteed.
	NoReboot?: null | bool @go(,*bool)

	// The tags to apply to the AMI and snapshots on creation. You can tag the AMI,
	// the snapshots, or both.
	//
	//    * To tag the AMI, the value for ResourceType must be image.
	//
	//    * To tag the snapshots that are created of the root volume and of other
	//    EBS volumes that are attached to the instance, the value for ResourceType
	//    must be snapshot. The same tag is applied to all of the snapshots that
	//    are created.
	//
	// If you specify other values for ResourceType, the request fails.
	//
	// To tag an AMI or snapshot after it has been created, see CreateTags (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateImageOutput: {
	// The ID of the new AMI.
	ImageId?: null | string @go(,*string)
}

#CreateInstanceEventWindowInput: {
	// The cron expression for the event window, for example, * 0-4,20-23 * * 1,5.
	// If you specify a cron expression, you can't specify a time range.
	//
	// Constraints:
	//
	//    * Only hour and day of the week values are supported.
	//
	//    * For day of the week values, you can specify either integers 0 through
	//    6, or alternative single values SUN through SAT.
	//
	//    * The minute, month, and year must be specified by *.
	//
	//    * The hour value must be one or a multiple range, for example, 0-4 or
	//    0-4,20-23.
	//
	//    * Each hour range must be >= 2 hours, for example, 0-2 or 20-23.
	//
	//    * The event window must be >= 4 hours. The combined total time ranges
	//    in the event window must be >= 4 hours.
	//
	// For more information about cron expressions, see cron (https://en.wikipedia.org/wiki/Cron)
	// on the Wikipedia website.
	CronExpression?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The name of the event window.
	Name?: null | string @go(,*string)

	// The tags to apply to the event window.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The time range for the event window. If you specify a time range, you can't
	// specify a cron expression.
	TimeRanges: [...null | #InstanceEventWindowTimeRangeRequest] @go(,[]*InstanceEventWindowTimeRangeRequest)
}

#CreateInstanceEventWindowOutput: {
	// Information about the event window.
	InstanceEventWindow?: null | #InstanceEventWindow @go(,*InstanceEventWindow)
}

#CreateInstanceExportTaskInput: {
	// A description for the conversion task or the resource being exported. The
	// maximum length is 255 characters.
	Description?: null | string @go(,*string)

	// The format and location for an export instance task.
	//
	// ExportToS3Task is a required field
	ExportToS3Task?: null | #ExportToS3TaskSpecification @go(,*ExportToS3TaskSpecification)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// The tags to apply to the export instance task during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The target virtualization environment.
	//
	// TargetEnvironment is a required field
	TargetEnvironment?: null | string @go(,*string)
}

#CreateInstanceExportTaskOutput: {
	// Information about the export instance task.
	ExportTask?: null | #ExportTask @go(,*ExportTask)
}

#CreateInternetGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tags to assign to the internet gateway.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateInternetGatewayOutput: {
	// Information about the internet gateway.
	InternetGateway?: null | #InternetGateway @go(,*InternetGateway)
}

#CreateKeyPairInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// A unique name for the key pair.
	//
	// Constraints: Up to 255 ASCII characters
	//
	// KeyName is a required field
	KeyName?: null | string @go(,*string)

	// The type of key pair. Note that ED25519 keys are not supported for Windows
	// instances, EC2 Instance Connect, and EC2 Serial Console.
	//
	// Default: rsa
	KeyType?: null | string @go(,*string)

	// The tags to apply to the new key pair.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

// Describes a key pair.
#CreateKeyPairOutput: {
	// The SHA-1 digest of the DER encoded private key.
	KeyFingerprint?: null | string @go(,*string)

	// An unencrypted PEM encoded RSA or ED25519 private key.
	KeyMaterial?: null | string @go(,*string)

	// The name of the key pair.
	KeyName?: null | string @go(,*string)

	// The ID of the key pair.
	KeyPairId?: null | string @go(,*string)

	// Any tags applied to the key pair.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#CreateLaunchTemplateInput: {
	// Unique, case-sensitive identifier you provide to ensure the idempotency of
	// the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Constraint: Maximum 128 ASCII characters.
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The information for the launch template.
	//
	// LaunchTemplateData is a required field
	LaunchTemplateData?: null | #RequestLaunchTemplateData @go(,*RequestLaunchTemplateData)

	// A name for the launch template.
	//
	// LaunchTemplateName is a required field
	LaunchTemplateName?: null | string @go(,*string)

	// The tags to apply to the launch template during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// A description for the first version of the launch template.
	VersionDescription?: null | string @go(,*string)
}

#CreateLaunchTemplateOutput: {
	// Information about the launch template.
	LaunchTemplate?: null | #LaunchTemplate @go(,*LaunchTemplate)

	// If the launch template contains parameters or parameter combinations that
	// are not valid, an error code and an error message are returned for each issue
	// that's found.
	Warning?: null | #ValidationWarning @go(,*ValidationWarning)
}

#CreateLaunchTemplateVersionInput: {
	// Unique, case-sensitive identifier you provide to ensure the idempotency of
	// the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Constraint: Maximum 128 ASCII characters.
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The information for the launch template.
	//
	// LaunchTemplateData is a required field
	LaunchTemplateData?: null | #RequestLaunchTemplateData @go(,*RequestLaunchTemplateData)

	// The ID of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateName?: null | string @go(,*string)

	// The version number of the launch template version on which to base the new
	// version. The new version inherits the same launch parameters as the source
	// version, except for parameters that you specify in LaunchTemplateData. Snapshots
	// applied to the block device mapping are ignored when creating a new version
	// unless they are explicitly included.
	SourceVersion?: null | string @go(,*string)

	// A description for the version of the launch template.
	VersionDescription?: null | string @go(,*string)
}

#CreateLaunchTemplateVersionOutput: {
	// Information about the launch template version.
	LaunchTemplateVersion?: null | #LaunchTemplateVersion @go(,*LaunchTemplateVersion)

	// If the new version of the launch template contains parameters or parameter
	// combinations that are not valid, an error code and an error message are returned
	// for each issue that's found.
	Warning?: null | #ValidationWarning @go(,*ValidationWarning)
}

#CreateLocalGatewayRouteInput: {
	// The CIDR range used for destination matches. Routing decisions are based
	// on the most specific match.
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the local gateway route table.
	//
	// LocalGatewayRouteTableId is a required field
	LocalGatewayRouteTableId?: null | string @go(,*string)

	// The ID of the virtual interface group.
	//
	// LocalGatewayVirtualInterfaceGroupId is a required field
	LocalGatewayVirtualInterfaceGroupId?: null | string @go(,*string)
}

#CreateLocalGatewayRouteOutput: {
	// Information about the route.
	Route?: null | #LocalGatewayRoute @go(,*LocalGatewayRoute)
}

#CreateLocalGatewayRouteTableVpcAssociationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the local gateway route table.
	//
	// LocalGatewayRouteTableId is a required field
	LocalGatewayRouteTableId?: null | string @go(,*string)

	// The tags to assign to the local gateway route table VPC association.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#CreateLocalGatewayRouteTableVpcAssociationOutput: {
	// Information about the association.
	LocalGatewayRouteTableVpcAssociation?: null | #LocalGatewayRouteTableVpcAssociation @go(,*LocalGatewayRouteTableVpcAssociation)
}

#CreateManagedPrefixListInput: {
	// The IP address type.
	//
	// Valid Values: IPv4 | IPv6
	//
	// AddressFamily is a required field
	AddressFamily?: null | string @go(,*string)

	// Unique, case-sensitive identifier you provide to ensure the idempotency of
	// the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Constraints: Up to 255 UTF-8 characters in length.
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more entries for the prefix list.
	Entries: [...null | #AddPrefixListEntry] @go(,[]*AddPrefixListEntry)

	// The maximum number of entries for the prefix list.
	//
	// MaxEntries is a required field
	MaxEntries?: null | int64 @go(,*int64)

	// A name for the prefix list.
	//
	// Constraints: Up to 255 characters in length. The name cannot start with com.amazonaws.
	//
	// PrefixListName is a required field
	PrefixListName?: null | string @go(,*string)

	// The tags to apply to the prefix list during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateManagedPrefixListOutput: {
	// Information about the prefix list.
	PrefixList?: null | #ManagedPrefixList @go(,*ManagedPrefixList)
}

#CreateNatGatewayInput: {
	// [Public NAT gateways only] The allocation ID of an Elastic IP address to
	// associate with the NAT gateway. You cannot specify an Elastic IP address
	// with a private NAT gateway. If the Elastic IP address is associated with
	// another resource, you must first disassociate it.
	AllocationId?: null | string @go(,*string)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to ensure idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Constraint: Maximum 64 ASCII characters.
	ClientToken?: null | string @go(,*string)

	// Indicates whether the NAT gateway supports public or private connectivity.
	// The default is public connectivity.
	ConnectivityType?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The subnet in which to create the NAT gateway.
	//
	// SubnetId is a required field
	SubnetId?: null | string @go(,*string)

	// The tags to assign to the NAT gateway.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateNatGatewayOutput: {
	// Unique, case-sensitive identifier to ensure the idempotency of the request.
	// Only returned if a client token was provided in the request.
	ClientToken?: null | string @go(,*string)

	// Information about the NAT gateway.
	NatGateway?: null | #NatGateway @go(,*NatGateway)
}

#CreateNetworkAclEntryInput: {
	// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
	// We modify the specified CIDR block to its canonical form; for example, if
	// you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
	CidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Indicates whether this is an egress rule (rule is applied to traffic leaving
	// the subnet).
	//
	// Egress is a required field
	Egress?: null | bool @go(,*bool)

	// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
	// 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
	IcmpTypeCode?: null | #IcmpTypeCode @go(,*IcmpTypeCode)

	// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64).
	Ipv6CidrBlock?: null | string @go(,*string)

	// The ID of the network ACL.
	//
	// NetworkAclId is a required field
	NetworkAclId?: null | string @go(,*string)

	// TCP or UDP protocols: The range of ports the rule applies to. Required if
	// specifying protocol 6 (TCP) or 17 (UDP).
	PortRange?: null | #PortRange @go(,*PortRange)

	// The protocol number. A value of "-1" means all protocols. If you specify
	// "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP),
	// traffic on all ports is allowed, regardless of any ports or ICMP types or
	// codes that you specify. If you specify protocol "58" (ICMPv6) and specify
	// an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless
	// of any that you specify. If you specify protocol "58" (ICMPv6) and specify
	// an IPv6 CIDR block, you must specify an ICMP type and code.
	//
	// Protocol is a required field
	Protocol?: null | string @go(,*string)

	// Indicates whether to allow or deny the traffic that matches the rule.
	//
	// RuleAction is a required field
	RuleAction?: null | string @go(,*string)

	// The rule number for the entry (for example, 100). ACL entries are processed
	// in ascending order by rule number.
	//
	// Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is
	// reserved for internal use.
	//
	// RuleNumber is a required field
	RuleNumber?: null | int64 @go(,*int64)
}

#CreateNetworkAclInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tags to assign to the network ACL.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#CreateNetworkAclOutput: {
	// Information about the network ACL.
	NetworkAcl?: null | #NetworkAcl @go(,*NetworkAcl)
}

#CreateNetworkInsightsPathInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to ensure idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The Amazon Web Services resource that is the destination of the path.
	//
	// Destination is a required field
	Destination?: null | string @go(,*string)

	// The IP address of the Amazon Web Services resource that is the destination
	// of the path.
	DestinationIp?: null | string @go(,*string)

	// The destination port.
	DestinationPort?: null | int64 @go(,*int64)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The protocol.
	//
	// Protocol is a required field
	Protocol?: null | string @go(,*string)

	// The Amazon Web Services resource that is the source of the path.
	//
	// Source is a required field
	Source?: null | string @go(,*string)

	// The IP address of the Amazon Web Services resource that is the source of
	// the path.
	SourceIp?: null | string @go(,*string)

	// The tags to add to the path.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateNetworkInsightsPathOutput: {
	// Information about the path.
	NetworkInsightsPath?: null | #NetworkInsightsPath @go(,*NetworkInsightsPath)
}

// Contains the parameters for CreateNetworkInterface.
#CreateNetworkInterfaceInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// A description for the network interface.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of one or more security groups.
	Groups: [...null | string] @go(,[]*string)

	// Indicates the type of network interface. To create an Elastic Fabric Adapter
	// (EFA), specify efa. For more information, see Elastic Fabric Adapter (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html)
	// in the Amazon Elastic Compute Cloud User Guide. To create a trunk network
	// interface, specify efa. For more information, see Network interface trunking
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/eni-trunking.html) in
	// the Amazon Elastic Compute Cloud User Guide.
	InterfaceType?: null | string @go(,*string)

	// The number of IPv4 Prefix Delegation prefixes that AWS automatically assigns
	// to the network interface. You cannot use this option if you use the Ipv4
	// Prefixes option.
	Ipv4PrefixCount?: null | int64 @go(,*int64)

	// One or moreIPv4 Prefix Delegation prefixes assigned to the network interface.
	// You cannot use this option if you use the Ipv4PrefixCount option.
	Ipv4Prefixes: [...null | #Ipv4PrefixSpecificationRequest] @go(,[]*Ipv4PrefixSpecificationRequest)

	// The number of IPv6 addresses to assign to a network interface. Amazon EC2
	// automatically selects the IPv6 addresses from the subnet range. You can't
	// use this option if specifying specific IPv6 addresses. If your subnet has
	// the AssignIpv6AddressOnCreation attribute set to true, you can specify 0
	// to override this setting.
	Ipv6AddressCount?: null | int64 @go(,*int64)

	// One or more specific IPv6 addresses from the IPv6 CIDR block range of your
	// subnet. You can't use this option if you're specifying a number of IPv6 addresses.
	Ipv6Addresses: [...null | #InstanceIpv6Address] @go(,[]*InstanceIpv6Address)

	// The number of IPv6 Prefix Delegation prefixes that AWS automatically assigns
	// to the network interface. You cannot use this option if you use the Ipv6Prefixes
	// option.
	Ipv6PrefixCount?: null | int64 @go(,*int64)

	// One or moreIPv6 Prefix Delegation prefixes assigned to the network interface.
	// You cannot use this option if you use the Ipv6PrefixCount option.
	Ipv6Prefixes: [...null | #Ipv6PrefixSpecificationRequest] @go(,[]*Ipv6PrefixSpecificationRequest)

	// The primary private IPv4 address of the network interface. If you don't specify
	// an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR
	// range. If you specify an IP address, you cannot indicate any IP addresses
	// specified in privateIpAddresses as primary (only one IP address can be designated
	// as primary).
	PrivateIpAddress?: null | string @go(,*string)

	// One or more private IPv4 addresses.
	PrivateIpAddresses: [...null | #PrivateIpAddressSpecification] @go(,[]*PrivateIpAddressSpecification)

	// The number of secondary private IPv4 addresses to assign to a network interface.
	// When you specify a number of secondary IPv4 addresses, Amazon EC2 selects
	// these IP addresses within the subnet's IPv4 CIDR range. You can't specify
	// this option and specify more than one private IP address using privateIpAddresses.
	//
	// The number of IP addresses you can assign to a network interface varies by
	// instance type. For more information, see IP Addresses Per ENI Per Instance
	// Type (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI)
	// in the Amazon Virtual Private Cloud User Guide.
	SecondaryPrivateIpAddressCount?: null | int64 @go(,*int64)

	// The ID of the subnet to associate with the network interface.
	//
	// SubnetId is a required field
	SubnetId?: null | string @go(,*string)

	// The tags to apply to the new network interface.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

// Contains the output of CreateNetworkInterface.
#CreateNetworkInterfaceOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	ClientToken?: null | string @go(,*string)

	// Information about the network interface.
	NetworkInterface?: null | #NetworkInterface @go(,*NetworkInterface)
}

// Contains the parameters for CreateNetworkInterfacePermission.
#CreateNetworkInterfacePermissionInput: {
	// The Amazon Web Services account ID.
	AwsAccountId?: null | string @go(,*string)

	// The Amazon Web Service. Currently not supported.
	AwsService?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)

	// The type of permission to grant.
	//
	// Permission is a required field
	Permission?: null | string @go(,*string)
}

// Contains the output of CreateNetworkInterfacePermission.
#CreateNetworkInterfacePermissionOutput: {
	// Information about the permission for the network interface.
	InterfacePermission?: null | #NetworkInterfacePermission @go(,*NetworkInterfacePermission)
}

#CreatePlacementGroupInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// A name for the placement group. Must be unique within the scope of your account
	// for the Region.
	//
	// Constraints: Up to 255 ASCII characters
	GroupName?: null | string @go(,*string)

	// The number of partitions. Valid only when Strategy is set to partition.
	PartitionCount?: null | int64 @go(,*int64)

	// The placement strategy.
	Strategy?: null | string @go(,*string)

	// The tags to apply to the new placement group.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreatePlacementGroupOutput: {
	// Describes a placement group.
	PlacementGroup?: null | #PlacementGroup @go(,*PlacementGroup)
}

#CreateReplaceRootVolumeTaskInput: {
	// Unique, case-sensitive identifier you provide to ensure the idempotency of
	// the request. If you do not specify a client token, a randomly generated token
	// is used for the request to ensure idempotency. For more information, see
	// Ensuring idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance for which to replace the root volume.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// The ID of the snapshot from which to restore the replacement root volume.
	// If you want to restore the volume to the initial launch state, omit this
	// parameter.
	SnapshotId?: null | string @go(,*string)

	// The tags to apply to the root volume replacement task.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateReplaceRootVolumeTaskOutput: {
	// Information about the root volume replacement task.
	ReplaceRootVolumeTask?: null | #ReplaceRootVolumeTask @go(,*ReplaceRootVolumeTask)
}

// Contains the parameters for CreateReservedInstancesListing.
#CreateReservedInstancesListingInput: {
	// Unique, case-sensitive identifier you provide to ensure idempotency of your
	// listings. This helps avoid duplicate listings. For more information, see
	// Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// ClientToken is a required field
	ClientToken?: null | string @go(,*string)

	// The number of instances that are a part of a Reserved Instance account to
	// be listed in the Reserved Instance Marketplace. This number should be less
	// than or equal to the instance count associated with the Reserved Instance
	// ID specified in this call.
	//
	// InstanceCount is a required field
	InstanceCount?: null | int64 @go(,*int64)

	// A list specifying the price of the Standard Reserved Instance for each month
	// remaining in the Reserved Instance term.
	//
	// PriceSchedules is a required field
	PriceSchedules: [...null | #PriceScheduleSpecification] @go(,[]*PriceScheduleSpecification)

	// The ID of the active Standard Reserved Instance.
	//
	// ReservedInstancesId is a required field
	ReservedInstancesId?: null | string @go(,*string)
}

// Contains the output of CreateReservedInstancesListing.
#CreateReservedInstancesListingOutput: {
	// Information about the Standard Reserved Instance listing.
	ReservedInstancesListings: [...null | #ReservedInstancesListing] @go(,[]*ReservedInstancesListing)
}

#CreateRestoreImageTaskInput: {
	// The name of the S3 bucket that contains the stored AMI object.
	//
	// Bucket is a required field
	Bucket?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The name for the restored AMI. The name must be unique for AMIs in the Region
	// for this account. If you do not provide a name, the new AMI gets the same
	// name as the original AMI.
	Name?: null | string @go(,*string)

	// The name of the stored AMI object in the bucket.
	//
	// ObjectKey is a required field
	ObjectKey?: null | string @go(,*string)

	// The tags to apply to the AMI and snapshots on restoration. You can tag the
	// AMI, the snapshots, or both.
	//
	//    * To tag the AMI, the value for ResourceType must be image.
	//
	//    * To tag the snapshots, the value for ResourceType must be snapshot. The
	//    same tag is applied to all of the snapshots that are created.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateRestoreImageTaskOutput: {
	// The AMI ID.
	ImageId?: null | string @go(,*string)
}

#CreateRouteInput: {
	// The ID of the carrier gateway.
	//
	// You can only use this option when the VPC contains a subnet which is associated
	// with a Wavelength Zone.
	CarrierGatewayId?: null | string @go(,*string)

	// The IPv4 CIDR address block used for the destination match. Routing decisions
	// are based on the most specific match. We modify the specified CIDR block
	// to its canonical form; for example, if you specify 100.68.0.18/18, we modify
	// it to 100.68.0.0/18.
	DestinationCidrBlock?: null | string @go(,*string)

	// The IPv6 CIDR block used for the destination match. Routing decisions are
	// based on the most specific match.
	DestinationIpv6CidrBlock?: null | string @go(,*string)

	// The ID of a prefix list used for the destination match.
	DestinationPrefixListId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// [IPv6 traffic only] The ID of an egress-only internet gateway.
	EgressOnlyInternetGatewayId?: null | string @go(,*string)

	// The ID of an internet gateway or virtual private gateway attached to your
	// VPC.
	GatewayId?: null | string @go(,*string)

	// The ID of a NAT instance in your VPC. The operation fails if you specify
	// an instance ID unless exactly one network interface is attached.
	InstanceId?: null | string @go(,*string)

	// The ID of the local gateway.
	LocalGatewayId?: null | string @go(,*string)

	// [IPv4 traffic only] The ID of a NAT gateway.
	NatGatewayId?: null | string @go(,*string)

	// The ID of a network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The ID of the route table for the route.
	//
	// RouteTableId is a required field
	RouteTableId?: null | string @go(,*string)

	// The ID of a transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
	VpcEndpointId?: null | string @go(,*string)

	// The ID of a VPC peering connection.
	VpcPeeringConnectionId?: null | string @go(,*string)
}

#CreateRouteOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#CreateRouteTableInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tags to assign to the route table.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#CreateRouteTableOutput: {
	// Information about the route table.
	RouteTable?: null | #RouteTable @go(,*RouteTable)
}

#CreateSecurityGroupInput: {
	// A description for the security group. This is informational only.
	//
	// Constraints: Up to 255 characters in length
	//
	// Constraints for EC2-Classic: ASCII characters
	//
	// Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
	//
	// Description is a required field
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The name of the security group.
	//
	// Constraints: Up to 255 characters in length. Cannot start with sg-.
	//
	// Constraints for EC2-Classic: ASCII characters
	//
	// Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
	//
	// GroupName is a required field
	GroupName?: null | string @go(,*string)

	// The tags to assign to the security group.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
	VpcId?: null | string @go(,*string)
}

#CreateSecurityGroupOutput: {
	// The ID of the security group.
	GroupId?: null | string @go(,*string)

	// The tags assigned to the security group.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#CreateSnapshotInput: {
	// A description for the snapshot.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Amazon Resource Name (ARN) of the Outpost on which to create a local
	// snapshot.
	//
	//    * To create a snapshot of a volume in a Region, omit this parameter. The
	//    snapshot is created in the same Region as the volume.
	//
	//    * To create a snapshot of a volume on an Outpost and store the snapshot
	//    in the Region, omit this parameter. The snapshot is created in the Region
	//    for the Outpost.
	//
	//    * To create a snapshot of a volume on an Outpost and store the snapshot
	//    on an Outpost, specify the ARN of the destination Outpost. The snapshot
	//    must be created on the same Outpost as the volume.
	//
	// For more information, see Create local snapshots from volumes on an Outpost
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-snapshot)
	// in the Amazon Elastic Compute Cloud User Guide.
	OutpostArn?: null | string @go(,*string)

	// The tags to apply to the snapshot during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the Amazon EBS volume.
	//
	// VolumeId is a required field
	VolumeId?: null | string @go(,*string)
}

#CreateSnapshotsInput: {
	// Copies the tags from the specified volume to corresponding snapshot.
	CopyTagsFromSource?: null | string @go(,*string)

	// A description propagated to every snapshot specified by the instance.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The instance to specify which volumes should be included in the snapshots.
	//
	// InstanceSpecification is a required field
	InstanceSpecification?: null | #InstanceSpecification @go(,*InstanceSpecification)

	// The Amazon Resource Name (ARN) of the Outpost on which to create the local
	// snapshots.
	//
	//    * To create snapshots from an instance in a Region, omit this parameter.
	//    The snapshots are created in the same Region as the instance.
	//
	//    * To create snapshots from an instance on an Outpost and store the snapshots
	//    in the Region, omit this parameter. The snapshots are created in the Region
	//    for the Outpost.
	//
	//    * To create snapshots from an instance on an Outpost and store the snapshots
	//    on an Outpost, specify the ARN of the destination Outpost. The snapshots
	//    must be created on the same Outpost as the instance.
	//
	// For more information, see Create multi-volume local snapshots from instances
	// on an Outpost (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#create-multivol-snapshot)
	// in the Amazon Elastic Compute Cloud User Guide.
	OutpostArn?: null | string @go(,*string)

	// Tags to apply to every snapshot specified by the instance.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateSnapshotsOutput: {
	// List of snapshots.
	Snapshots: [...null | #SnapshotInfo] @go(,[]*SnapshotInfo)
}

// Contains the parameters for CreateSpotDatafeedSubscription.
#CreateSpotDatafeedSubscriptionInput: {
	// The name of the Amazon S3 bucket in which to store the Spot Instance data
	// feed. For more information about bucket names, see Rules for bucket naming
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules)
	// in the Amazon S3 Developer Guide.
	//
	// Bucket is a required field
	Bucket?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The prefix for the data feed file names.
	Prefix?: null | string @go(,*string)
}

// Contains the output of CreateSpotDatafeedSubscription.
#CreateSpotDatafeedSubscriptionOutput: {
	// The Spot Instance data feed subscription.
	SpotDatafeedSubscription?: null | #SpotDatafeedSubscription @go(,*SpotDatafeedSubscription)
}

#CreateStoreImageTaskInput: {
	// The name of the S3 bucket in which the AMI object will be stored. The bucket
	// must be in the Region in which the request is being made. The AMI object
	// appears in the bucket only after the upload task has completed.
	//
	// Bucket is a required field
	Bucket?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AMI.
	//
	// ImageId is a required field
	ImageId?: null | string @go(,*string)

	// The tags to apply to the AMI object that will be stored in the S3 bucket.
	S3ObjectTags: [...null | #S3ObjectTag] @go(,[]*S3ObjectTag)
}

#CreateStoreImageTaskOutput: {
	// The name of the stored AMI object in the S3 bucket.
	ObjectKey?: null | string @go(,*string)
}

#CreateSubnetCidrReservationInput: {
	// The IPv4 or IPV6 CIDR range to reserve.
	//
	// Cidr is a required field
	Cidr?: null | string @go(,*string)

	// The description to assign to the subnet CIDR reservation.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The type of reservation.
	//
	// The following are valid values:
	//
	//    * prefix: The Amazon EC2 Prefix Delegation feature assigns the IP addresses
	//    to network interfaces that are associated with an instance. For information
	//    about Prefix Delegation, see Prefix Delegation for Amazon EC2 network
	//    interfaces (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-delegation.html)
	//    in the Amazon Elastic Compute Cloud User Guide.
	//
	//    * explicit: You manually assign the IP addresses to resources that reside
	//    in your subnet.
	//
	// ReservationType is a required field
	ReservationType?: null | string @go(,*string)

	// The ID of the subnet.
	//
	// SubnetId is a required field
	SubnetId?: null | string @go(,*string)

	// The tags to assign to the subnet CIDR reservation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateSubnetCidrReservationOutput: {
	// Information about the created subnet CIDR reservation.
	SubnetCidrReservation?: null | #SubnetCidrReservation @go(,*SubnetCidrReservation)
}

#CreateSubnetInput: {
	// The Availability Zone or Local Zone for the subnet.
	//
	// Default: Amazon Web Services selects one for you. If you create more than
	// one subnet in your VPC, we do not necessarily select a different zone for
	// each subnet.
	//
	// To create a subnet in a Local Zone, set this value to the Local Zone ID,
	// for example us-west-2-lax-1a. For information about the Regions that support
	// Local Zones, see Available Regions (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// To create a subnet in an Outpost, set this value to the Availability Zone
	// for the Outpost and specify the Outpost ARN.
	AvailabilityZone?: null | string @go(,*string)

	// The AZ ID or the Local Zone ID of the subnet.
	AvailabilityZoneId?: null | string @go(,*string)

	// The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24.
	// We modify the specified CIDR block to its canonical form; for example, if
	// you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
	//
	// CidrBlock is a required field
	CidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IPv6 network range for the subnet, in CIDR notation. The subnet size
	// must use a /64 prefix length.
	Ipv6CidrBlock?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost
	// ARN, you must also specify the Availability Zone of the Outpost subnet.
	OutpostArn?: null | string @go(,*string)

	// The tags to assign to the subnet.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#CreateSubnetOutput: {
	// Information about the subnet.
	Subnet?: null | #Subnet @go(,*Subnet)
}

#CreateTagsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the resources, separated by spaces.
	//
	// Constraints: Up to 1000 resource IDs. We recommend breaking up this request
	// into smaller batches.
	//
	// Resources is a required field
	Resources: [...null | string] @go(,[]*string)

	// The tags. The value parameter is required, but if you don't want the tag
	// to have a value, specify the parameter with no value, and we set the value
	// to an empty string.
	//
	// Tags is a required field
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#CreateTrafficMirrorFilterInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The description of the Traffic Mirror filter.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tags to assign to a Traffic Mirror filter.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateTrafficMirrorFilterOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Information about the Traffic Mirror filter.
	TrafficMirrorFilter?: null | #TrafficMirrorFilter @go(,*TrafficMirrorFilter)
}

#CreateTrafficMirrorFilterRuleInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The description of the Traffic Mirror rule.
	Description?: null | string @go(,*string)

	// The destination CIDR block to assign to the Traffic Mirror rule.
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// The destination port range.
	DestinationPortRange?: null | #TrafficMirrorPortRangeRequest @go(,*TrafficMirrorPortRangeRequest)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The protocol, for example UDP, to assign to the Traffic Mirror rule.
	//
	// For information about the protocol value, see Protocol Numbers (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
	// on the Internet Assigned Numbers Authority (IANA) website.
	Protocol?: null | int64 @go(,*int64)

	// The action to take (accept | reject) on the filtered traffic.
	//
	// RuleAction is a required field
	RuleAction?: null | string @go(,*string)

	// The number of the Traffic Mirror rule. This number must be unique for each
	// Traffic Mirror rule in a given direction. The rules are processed in ascending
	// order by rule number.
	//
	// RuleNumber is a required field
	RuleNumber?: null | int64 @go(,*int64)

	// The source CIDR block to assign to the Traffic Mirror rule.
	//
	// SourceCidrBlock is a required field
	SourceCidrBlock?: null | string @go(,*string)

	// The source port range.
	SourcePortRange?: null | #TrafficMirrorPortRangeRequest @go(,*TrafficMirrorPortRangeRequest)

	// The type of traffic (ingress | egress).
	//
	// TrafficDirection is a required field
	TrafficDirection?: null | string @go(,*string)

	// The ID of the filter that this rule is associated with.
	//
	// TrafficMirrorFilterId is a required field
	TrafficMirrorFilterId?: null | string @go(,*string)
}

#CreateTrafficMirrorFilterRuleOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The Traffic Mirror rule.
	TrafficMirrorFilterRule?: null | #TrafficMirrorFilterRule @go(,*TrafficMirrorFilterRule)
}

#CreateTrafficMirrorSessionInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The description of the Traffic Mirror session.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the source network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)

	// The number of bytes in each packet to mirror. These are bytes after the VXLAN
	// header. Do not specify this parameter when you want to mirror the entire
	// packet. To mirror a subset of the packet, set this to the length (in bytes)
	// that you want to mirror. For example, if you set this value to 100, then
	// the first 100 bytes that meet the filter criteria are copied to the target.
	//
	// If you do not want to mirror the entire packet, use the PacketLength parameter
	// to specify the number of bytes in each packet to mirror.
	PacketLength?: null | int64 @go(,*int64)

	// The session number determines the order in which sessions are evaluated when
	// an interface is used by multiple sessions. The first session with a matching
	// filter is the one that mirrors the packets.
	//
	// Valid values are 1-32766.
	//
	// SessionNumber is a required field
	SessionNumber?: null | int64 @go(,*int64)

	// The tags to assign to a Traffic Mirror session.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the Traffic Mirror filter.
	//
	// TrafficMirrorFilterId is a required field
	TrafficMirrorFilterId?: null | string @go(,*string)

	// The ID of the Traffic Mirror target.
	//
	// TrafficMirrorTargetId is a required field
	TrafficMirrorTargetId?: null | string @go(,*string)

	// The VXLAN ID for the Traffic Mirror session. For more information about the
	// VXLAN protocol, see RFC 7348 (https://tools.ietf.org/html/rfc7348). If you
	// do not specify a VirtualNetworkId, an account-wide unique id is chosen at
	// random.
	VirtualNetworkId?: null | int64 @go(,*int64)
}

#CreateTrafficMirrorSessionOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Information about the Traffic Mirror session.
	TrafficMirrorSession?: null | #TrafficMirrorSession @go(,*TrafficMirrorSession)
}

#CreateTrafficMirrorTargetInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The description of the Traffic Mirror target.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The network interface ID that is associated with the target.
	NetworkInterfaceId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated
	// with the target.
	NetworkLoadBalancerArn?: null | string @go(,*string)

	// The tags to assign to the Traffic Mirror target.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateTrafficMirrorTargetOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Information about the Traffic Mirror target.
	TrafficMirrorTarget?: null | #TrafficMirrorTarget @go(,*TrafficMirrorTarget)
}

#CreateTransitGatewayConnectInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Connect attachment options.
	//
	// Options is a required field
	Options?: null | #CreateTransitGatewayConnectRequestOptions @go(,*CreateTransitGatewayConnectRequestOptions)

	// The tags to apply to the Connect attachment.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the transit gateway attachment. You can specify a VPC attachment
	// or a AWS Direct Connect attachment.
	//
	// TransportTransitGatewayAttachmentId is a required field
	TransportTransitGatewayAttachmentId?: null | string @go(,*string)
}

#CreateTransitGatewayConnectOutput: {
	// Information about the Connect attachment.
	TransitGatewayConnect?: null | #TransitGatewayConnect @go(,*TransitGatewayConnect)
}

#CreateTransitGatewayConnectPeerInput: {
	// The BGP options for the Connect peer.
	BgpOptions?: null | #TransitGatewayConnectRequestBgpOptions @go(,*TransitGatewayConnectRequestBgpOptions)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The range of inside IP addresses that are used for BGP peering. You must
	// specify a size /29 IPv4 CIDR block from the 169.254.0.0/16 range. The first
	// address from the range must be configured on the appliance as the BGP IP
	// address. You can also optionally specify a size /125 IPv6 CIDR block from
	// the fd00::/8 range.
	//
	// InsideCidrBlocks is a required field
	InsideCidrBlocks: [...null | string] @go(,[]*string)

	// The peer IP address (GRE outer IP address) on the appliance side of the Connect
	// peer.
	//
	// PeerAddress is a required field
	PeerAddress?: null | string @go(,*string)

	// The tags to apply to the Connect peer.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The peer IP address (GRE outer IP address) on the transit gateway side of
	// the Connect peer, which must be specified from a transit gateway CIDR block.
	// If not specified, Amazon automatically assigns the first available IP address
	// from the transit gateway CIDR block.
	TransitGatewayAddress?: null | string @go(,*string)

	// The ID of the Connect attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#CreateTransitGatewayConnectPeerOutput: {
	// Information about the Connect peer.
	TransitGatewayConnectPeer?: null | #TransitGatewayConnectPeer @go(,*TransitGatewayConnectPeer)
}

// The options for a Connect attachment.
#CreateTransitGatewayConnectRequestOptions: {
	// The tunnel protocol.
	//
	// Protocol is a required field
	Protocol?: null | string @go(,*string)
}

#CreateTransitGatewayInput: {
	// A description of the transit gateway.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The transit gateway options.
	Options?: null | #TransitGatewayRequestOptions @go(,*TransitGatewayRequestOptions)

	// The tags to apply to the transit gateway.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateTransitGatewayMulticastDomainInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The options for the transit gateway multicast domain.
	Options?: null | #CreateTransitGatewayMulticastDomainRequestOptions @go(,*CreateTransitGatewayMulticastDomainRequestOptions)

	// The tags for the transit gateway multicast domain.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the transit gateway.
	//
	// TransitGatewayId is a required field
	TransitGatewayId?: null | string @go(,*string)
}

#CreateTransitGatewayMulticastDomainOutput: {
	// Information about the transit gateway multicast domain.
	TransitGatewayMulticastDomain?: null | #TransitGatewayMulticastDomain @go(,*TransitGatewayMulticastDomain)
}

// The options for the transit gateway multicast domain.
#CreateTransitGatewayMulticastDomainRequestOptions: {
	// Indicates whether to automatically accept cross-account subnet associations
	// that are associated with the transit gateway multicast domain.
	AutoAcceptSharedAssociations?: null | string @go(,*string)

	// Specify whether to enable Internet Group Management Protocol (IGMP) version
	// 2 for the transit gateway multicast domain.
	Igmpv2Support?: null | string @go(,*string)

	// Specify whether to enable support for statically configuring multicast group
	// sources for a domain.
	StaticSourcesSupport?: null | string @go(,*string)
}

#CreateTransitGatewayOutput: {
	// Information about the transit gateway.
	TransitGateway?: null | #TransitGateway @go(,*TransitGateway)
}

#CreateTransitGatewayPeeringAttachmentInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The AWS account ID of the owner of the peer transit gateway.
	//
	// PeerAccountId is a required field
	PeerAccountId?: null | string @go(,*string)

	// The Region where the peer transit gateway is located.
	//
	// PeerRegion is a required field
	PeerRegion?: null | string @go(,*string)

	// The ID of the peer transit gateway with which to create the peering attachment.
	//
	// PeerTransitGatewayId is a required field
	PeerTransitGatewayId?: null | string @go(,*string)

	// The tags to apply to the transit gateway peering attachment.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the transit gateway.
	//
	// TransitGatewayId is a required field
	TransitGatewayId?: null | string @go(,*string)
}

#CreateTransitGatewayPeeringAttachmentOutput: {
	// The transit gateway peering attachment.
	TransitGatewayPeeringAttachment?: null | #TransitGatewayPeeringAttachment @go(,*TransitGatewayPeeringAttachment)
}

#CreateTransitGatewayPrefixListReferenceInput: {
	// Indicates whether to drop traffic that matches this route.
	Blackhole?: null | bool @go(,*bool)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the prefix list that is used for destination matches.
	//
	// PrefixListId is a required field
	PrefixListId?: null | string @go(,*string)

	// The ID of the attachment to which traffic is routed.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#CreateTransitGatewayPrefixListReferenceOutput: {
	// Information about the prefix list reference.
	TransitGatewayPrefixListReference?: null | #TransitGatewayPrefixListReference @go(,*TransitGatewayPrefixListReference)
}

#CreateTransitGatewayRouteInput: {
	// Indicates whether to drop traffic that matches this route.
	Blackhole?: null | bool @go(,*bool)

	// The CIDR range used for destination matches. Routing decisions are based
	// on the most specific match.
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#CreateTransitGatewayRouteOutput: {
	// Information about the route.
	Route?: null | #TransitGatewayRoute @go(,*TransitGatewayRoute)
}

#CreateTransitGatewayRouteTableInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tags to apply to the transit gateway route table.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the transit gateway.
	//
	// TransitGatewayId is a required field
	TransitGatewayId?: null | string @go(,*string)
}

#CreateTransitGatewayRouteTableOutput: {
	// Information about the transit gateway route table.
	TransitGatewayRouteTable?: null | #TransitGatewayRouteTable @go(,*TransitGatewayRouteTable)
}

#CreateTransitGatewayVpcAttachmentInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The VPC attachment options.
	Options?: null | #CreateTransitGatewayVpcAttachmentRequestOptions @go(,*CreateTransitGatewayVpcAttachmentRequestOptions)

	// The IDs of one or more subnets. You can specify only one subnet per Availability
	// Zone. You must specify at least one subnet, but we recommend that you specify
	// two subnets for better availability. The transit gateway uses one IP address
	// from each specified subnet.
	//
	// SubnetIds is a required field
	SubnetIds: [...null | string] @go(,[]*string)

	// The tags to apply to the VPC attachment.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the transit gateway.
	//
	// TransitGatewayId is a required field
	TransitGatewayId?: null | string @go(,*string)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#CreateTransitGatewayVpcAttachmentOutput: {
	// Information about the VPC attachment.
	TransitGatewayVpcAttachment?: null | #TransitGatewayVpcAttachment @go(,*TransitGatewayVpcAttachment)
}

// Describes the options for a VPC attachment.
#CreateTransitGatewayVpcAttachmentRequestOptions: {
	// Enable or disable support for appliance mode. If enabled, a traffic flow
	// between a source and destination uses the same Availability Zone for the
	// VPC attachment for the lifetime of that flow. The default is disable.
	ApplianceModeSupport?: null | string @go(,*string)

	// Enable or disable DNS support. The default is enable.
	DnsSupport?: null | string @go(,*string)

	// Enable or disable IPv6 support. The default is disable.
	Ipv6Support?: null | string @go(,*string)
}

#CreateVolumeInput: {
	// The Availability Zone in which to create the volume.
	//
	// AvailabilityZone is a required field
	AvailabilityZone?: null | string @go(,*string)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Indicates whether the volume should be encrypted. The effect of setting the
	// encryption state to true depends on the volume origin (new or from a snapshot),
	// starting encryption state, ownership, and whether encryption by default is
	// enabled. For more information, see Encryption by default (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// Encrypted Amazon EBS volumes must be attached to instances that support Amazon
	// EBS encryption. For more information, see Supported instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
	Encrypted?: null | bool @go(,*bool)

	// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes,
	// this represents the number of IOPS that are provisioned for the volume. For
	// gp2 volumes, this represents the baseline performance of the volume and the
	// rate at which the volume accumulates I/O credits for bursting.
	//
	// The following are the supported values for each volume type:
	//
	//    * gp3: 3,000-16,000 IOPS
	//
	//    * io1: 100-64,000 IOPS
	//
	//    * io2: 100-64,000 IOPS
	//
	// io1 and io2 volumes support up to 64,000 IOPS only on Instances built on
	// the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).
	// Other instance families support performance up to 32,000 IOPS.
	//
	// This parameter is required for io1 and io2 volumes. The default for gp3 volumes
	// is 3,000 IOPS. This parameter is not supported for gp2, st1, sc1, or standard
	// volumes.
	Iops?: null | int64 @go(,*int64)

	// The identifier of the Key Management Service (KMS) KMS key to use for Amazon
	// EBS encryption. If this parameter is not specified, your KMS key for Amazon
	// EBS is used. If KmsKeyId is specified, the encrypted state must be true.
	//
	// You can specify the KMS key using any of the following:
	//
	//    * Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * Key alias. For example, alias/ExampleAlias.
	//
	//    * Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
	//
	// Amazon Web Services authenticates the KMS key asynchronously. Therefore,
	// if you specify an ID, alias, or ARN that is not valid, the action can appear
	// to complete, but eventually fails.
	KmsKeyId?: null | string @go(,*string)

	// Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach,
	// you can attach the volume to up to 16 Instances built on the Nitro System
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances)
	// in the same Availability Zone. This parameter is supported with io1 and io2
	// volumes only. For more information, see Amazon EBS Multi-Attach (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	MultiAttachEnabled?: null | bool @go(,*bool)

	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn?: null | string @go(,*string)

	// The size of the volume, in GiBs. You must specify either a snapshot ID or
	// a volume size. If you specify a snapshot, the default is the snapshot size.
	// You can specify a volume size that is equal to or larger than the snapshot
	// size.
	//
	// The following are the supported volumes sizes for each volume type:
	//
	//    * gp2 and gp3: 1-16,384
	//
	//    * io1 and io2: 4-16,384
	//
	//    * st1 and sc1: 125-16,384
	//
	//    * standard: 1-1,024
	Size?: null | int64 @go(,*int64)

	// The snapshot from which to create the volume. You must specify either a snapshot
	// ID or a volume size.
	SnapshotId?: null | string @go(,*string)

	// The tags to apply to the volume during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The throughput to provision for a volume, with a maximum of 1,000 MiB/s.
	//
	// This parameter is valid only for gp3 volumes.
	//
	// Valid Range: Minimum value of 125. Maximum value of 1000.
	Throughput?: null | int64 @go(,*int64)

	// The volume type. This parameter can be one of the following values:
	//
	//    * General Purpose SSD: gp2 | gp3
	//
	//    * Provisioned IOPS SSD: io1 | io2
	//
	//    * Throughput Optimized HDD: st1
	//
	//    * Cold HDD: sc1
	//
	//    * Magnetic: standard
	//
	// For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// Default: gp2
	VolumeType?: null | string @go(,*string)
}

// Describes the user or group to be added or removed from the list of create
// volume permissions for a volume.
#CreateVolumePermission: {
	// The group to be added or removed. The possible value is all.
	Group?: null | string @go(,*string)

	// The ID of the Amazon Web Services account to be added or removed.
	UserId?: null | string @go(,*string)
}

// Describes modifications to the list of create volume permissions for a volume.
#CreateVolumePermissionModifications: {
	// Adds the specified Amazon Web Services account ID or group to the list.
	Add: [...null | #CreateVolumePermission] @go(,[]*CreateVolumePermission)

	// Removes the specified Amazon Web Services account ID or group from the list.
	Remove: [...null | #CreateVolumePermission] @go(,[]*CreateVolumePermission)
}

#CreateVpcEndpointConnectionNotificationInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// One or more endpoint events for which to receive notifications. Valid values
	// are Accept, Connect, Delete, and Reject.
	//
	// ConnectionEvents is a required field
	ConnectionEvents: [...null | string] @go(,[]*string)

	// The ARN of the SNS topic for the notifications.
	//
	// ConnectionNotificationArn is a required field
	ConnectionNotificationArn?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the endpoint service.
	ServiceId?: null | string @go(,*string)

	// The ID of the endpoint.
	VpcEndpointId?: null | string @go(,*string)
}

#CreateVpcEndpointConnectionNotificationOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request.
	ClientToken?: null | string @go(,*string)

	// Information about the notification.
	ConnectionNotification?: null | #ConnectionNotification @go(,*ConnectionNotification)
}

// Contains the parameters for CreateVpcEndpoint.
#CreateVpcEndpointInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// (Interface and gateway endpoints) A policy to attach to the endpoint that
	// controls access to the service. The policy must be in valid JSON format.
	// If this parameter is not specified, we attach a default policy that allows
	// full access to the service.
	PolicyDocument?: null | string @go(,*string)

	// (Interface endpoint) Indicates whether to associate a private hosted zone
	// with the specified VPC. The private hosted zone contains a record set for
	// the default public DNS name for the service for the Region (for example,
	// kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses
	// of the endpoint network interfaces in the VPC. This enables you to make requests
	// to the default public DNS name for the service instead of the public DNS
	// names that are automatically generated by the VPC endpoint service.
	//
	// To use a private hosted zone, you must set the following VPC attributes to
	// true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to
	// set the VPC attributes.
	//
	// Default: true
	PrivateDnsEnabled?: null | bool @go(,*bool)

	// (Gateway endpoint) One or more route table IDs.
	RouteTableIds: [...null | string] @go(,[]*string)

	// (Interface endpoint) The ID of one or more security groups to associate with
	// the endpoint network interface.
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// The service name. To get a list of available services, use the DescribeVpcEndpointServices
	// request, or get the name from the service provider.
	//
	// ServiceName is a required field
	ServiceName?: null | string @go(,*string)

	// (Interface and Gateway Load Balancer endpoints) The ID of one or more subnets
	// in which to create an endpoint network interface. For a Gateway Load Balancer
	// endpoint, you can specify one subnet only.
	SubnetIds: [...null | string] @go(,[]*string)

	// The tags to associate with the endpoint.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The type of endpoint.
	//
	// Default: Gateway
	VpcEndpointType?: null | string @go(,*string)

	// The ID of the VPC in which the endpoint will be used.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

// Contains the output of CreateVpcEndpoint.
#CreateVpcEndpointOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request.
	ClientToken?: null | string @go(,*string)

	// Information about the endpoint.
	VpcEndpoint?: null | #VpcEndpoint @go(,*VpcEndpoint)
}

#CreateVpcEndpointServiceConfigurationInput: {
	// Indicates whether requests from service consumers to create an endpoint to
	// your service must be accepted. To accept a request, use AcceptVpcEndpointConnections.
	AcceptanceRequired?: null | bool @go(,*bool)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Amazon Resource Names (ARNs) of one or more Gateway Load Balancers.
	GatewayLoadBalancerArns: [...null | string] @go(,[]*string)

	// The Amazon Resource Names (ARNs) of one or more Network Load Balancers for
	// your service.
	NetworkLoadBalancerArns: [...null | string] @go(,[]*string)

	// (Interface endpoint configuration) The private DNS name to assign to the
	// VPC endpoint service.
	PrivateDnsName?: null | string @go(,*string)

	// The tags to associate with the service.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateVpcEndpointServiceConfigurationOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request.
	ClientToken?: null | string @go(,*string)

	// Information about the service configuration.
	ServiceConfiguration?: null | #ServiceConfiguration @go(,*ServiceConfiguration)
}

#CreateVpcInput: {
	// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for
	// the VPC. You cannot specify the range of IP addresses, or the size of the
	// CIDR block.
	AmazonProvidedIpv6CidrBlock?: null | bool @go(,*bool)

	// The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16.
	// We modify the specified CIDR block to its canonical form; for example, if
	// you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
	//
	// CidrBlock is a required field
	CidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tenancy options for instances launched into the VPC. For default, instances
	// are launched with shared tenancy by default. You can launch instances with
	// any tenancy into a shared tenancy VPC. For dedicated, instances are launched
	// as dedicated tenancy instances by default. You can only launch instances
	// with a tenancy of dedicated or host into a dedicated tenancy VPC.
	//
	// Important: The host value cannot be used with this parameter. Use the default
	// or dedicated values only.
	//
	// Default: default
	InstanceTenancy?: null | string @go(,*string)

	// The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool
	// in the request.
	//
	// To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
	Ipv6CidrBlock?: null | string @go(,*string)

	// The name of the location from which we advertise the IPV6 CIDR block. Use
	// this parameter to limit the address to this location.
	//
	// You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.
	Ipv6CidrBlockNetworkBorderGroup?: null | string @go(,*string)

	// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
	Ipv6Pool?: null | string @go(,*string)

	// The tags to assign to the VPC.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#CreateVpcOutput: {
	// Information about the VPC.
	Vpc?: null | #Vpc @go(,*Vpc)
}

#CreateVpcPeeringConnectionInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Amazon Web Services account ID of the owner of the accepter VPC.
	//
	// Default: Your Amazon Web Services account ID
	PeerOwnerId?: null | string @go(,*string)

	// The Region code for the accepter VPC, if the accepter VPC is located in a
	// Region other than the Region in which you make the request.
	//
	// Default: The Region in which you make the request.
	PeerRegion?: null | string @go(,*string)

	// The ID of the VPC with which you are creating the VPC peering connection.
	// You must specify this parameter in the request.
	PeerVpcId?: null | string @go(,*string)

	// The tags to assign to the peering connection.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the requester VPC. You must specify this parameter in the request.
	VpcId?: null | string @go(,*string)
}

#CreateVpcPeeringConnectionOutput: {
	// Information about the VPC peering connection.
	VpcPeeringConnection?: null | #VpcPeeringConnection @go(,*VpcPeeringConnection)
}

// Contains the parameters for CreateVpnConnection.
#CreateVpnConnectionInput: {
	// The ID of the customer gateway.
	//
	// CustomerGatewayId is a required field
	CustomerGatewayId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The options for the VPN connection.
	Options?: null | #VpnConnectionOptionsSpecification @go(,*VpnConnectionOptionsSpecification)

	// The tags to apply to the VPN connection.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The ID of the transit gateway. If you specify a transit gateway, you cannot
	// specify a virtual private gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The type of VPN connection (ipsec.1).
	//
	// Type is a required field
	Type?: null | string @go(,*string)

	// The ID of the virtual private gateway. If you specify a virtual private gateway,
	// you cannot specify a transit gateway.
	VpnGatewayId?: null | string @go(,*string)
}

// Contains the output of CreateVpnConnection.
#CreateVpnConnectionOutput: {
	// Information about the VPN connection.
	VpnConnection?: null | #VpnConnection @go(,*VpnConnection)
}

// Contains the parameters for CreateVpnConnectionRoute.
#CreateVpnConnectionRouteInput: {
	// The CIDR block associated with the local subnet of the customer network.
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// The ID of the VPN connection.
	//
	// VpnConnectionId is a required field
	VpnConnectionId?: null | string @go(,*string)
}

// Contains the parameters for CreateVpnGateway.
#CreateVpnGatewayInput: {
	// A private Autonomous System Number (ASN) for the Amazon side of a BGP session.
	// If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If
	// you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range.
	//
	// Default: 64512
	AmazonSideAsn?: null | int64 @go(,*int64)

	// The Availability Zone for the virtual private gateway.
	AvailabilityZone?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tags to apply to the virtual private gateway.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The type of VPN connection this virtual private gateway supports.
	//
	// Type is a required field
	Type?: null | string @go(,*string)
}

// Contains the output of CreateVpnGateway.
#CreateVpnGatewayOutput: {
	// Information about the virtual private gateway.
	VpnGateway?: null | #VpnGateway @go(,*VpnGateway)
}

// Describes the credit option for CPU usage of a T2, T3, or T3a instance.
#CreditSpecification: {
	// The credit option for CPU usage of a T2, T3, or T3a instance. Valid values
	// are standard and unlimited.
	CpuCredits?: null | string @go(,*string)
}

// The credit option for CPU usage of a T2, T3, or T3a instance.
#CreditSpecificationRequest: {
	// The credit option for CPU usage of a T2, T3, or T3a instance. Valid values
	// are standard and unlimited.
	//
	// CpuCredits is a required field
	CpuCredits?: null | string @go(,*string)
}

// Describes a customer gateway.
#CustomerGateway: {
	// The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number
	// (ASN).
	BgpAsn?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) for the customer gateway certificate.
	CertificateArn?: null | string @go(,*string)

	// The ID of the customer gateway.
	CustomerGatewayId?: null | string @go(,*string)

	// The name of customer gateway device.
	DeviceName?: null | string @go(,*string)

	// The Internet-routable IP address of the customer gateway's outside interface.
	IpAddress?: null | string @go(,*string)

	// The current state of the customer gateway (pending | available | deleting
	// | deleted).
	State?: null | string @go(,*string)

	// Any tags assigned to the customer gateway.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The type of VPN connection the customer gateway supports (ipsec.1).
	Type?: null | string @go(,*string)
}

#DeleteCarrierGatewayInput: {
	// The ID of the carrier gateway.
	//
	// CarrierGatewayId is a required field
	CarrierGatewayId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DeleteCarrierGatewayOutput: {
	// Information about the carrier gateway.
	CarrierGateway?: null | #CarrierGateway @go(,*CarrierGateway)
}

#DeleteClientVpnEndpointInput: {
	// The ID of the Client VPN to be deleted.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DeleteClientVpnEndpointOutput: {
	// The current state of the Client VPN endpoint.
	Status?: null | #ClientVpnEndpointStatus @go(,*ClientVpnEndpointStatus)
}

#DeleteClientVpnRouteInput: {
	// The ID of the Client VPN endpoint from which the route is to be deleted.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// The IPv4 address range, in CIDR notation, of the route to be deleted.
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the target subnet used by the route.
	TargetVpcSubnetId?: null | string @go(,*string)
}

#DeleteClientVpnRouteOutput: {
	// The current state of the route.
	Status?: null | #ClientVpnRouteStatus @go(,*ClientVpnRouteStatus)
}

// Contains the parameters for DeleteCustomerGateway.
#DeleteCustomerGatewayInput: {
	// The ID of the customer gateway.
	//
	// CustomerGatewayId is a required field
	CustomerGatewayId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DeleteDhcpOptionsInput: {
	// The ID of the DHCP options set.
	//
	// DhcpOptionsId is a required field
	DhcpOptionsId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DeleteEgressOnlyInternetGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the egress-only internet gateway.
	//
	// EgressOnlyInternetGatewayId is a required field
	EgressOnlyInternetGatewayId?: null | string @go(,*string)
}

#DeleteEgressOnlyInternetGatewayOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	ReturnCode?: null | bool @go(,*bool)
}

// Describes an EC2 Fleet error.
#DeleteFleetError: {
	// The error code.
	Code?: null | string @go(,*string)

	// The description for the error code.
	Message?: null | string @go(,*string)
}

// Describes an EC2 Fleet that was not successfully deleted.
#DeleteFleetErrorItem: {
	// The error.
	Error?: null | #DeleteFleetError @go(,*DeleteFleetError)

	// The ID of the EC2 Fleet.
	FleetId?: null | string @go(,*string)
}

// Describes an EC2 Fleet that was successfully deleted.
#DeleteFleetSuccessItem: {
	// The current state of the EC2 Fleet.
	CurrentFleetState?: null | string @go(,*string)

	// The ID of the EC2 Fleet.
	FleetId?: null | string @go(,*string)

	// The previous state of the EC2 Fleet.
	PreviousFleetState?: null | string @go(,*string)
}

#DeleteFleetsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the EC2 Fleets.
	//
	// FleetIds is a required field
	FleetIds: [...null | string] @go(,[]*string)

	// Indicates whether to terminate the instances when the EC2 Fleet is deleted.
	// The default is to terminate the instances.
	//
	// To let the instances continue to run after the EC2 Fleet is deleted, specify
	// NoTerminateInstances. Supported only for fleets of type maintain and request.
	//
	// For instant fleets, you cannot specify NoTerminateInstances. A deleted instant
	// fleet with running instances is not supported.
	//
	// TerminateInstances is a required field
	TerminateInstances?: null | bool @go(,*bool)
}

#DeleteFleetsOutput: {
	// Information about the EC2 Fleets that are successfully deleted.
	SuccessfulFleetDeletions: [...null | #DeleteFleetSuccessItem] @go(,[]*DeleteFleetSuccessItem)

	// Information about the EC2 Fleets that are not successfully deleted.
	UnsuccessfulFleetDeletions: [...null | #DeleteFleetErrorItem] @go(,[]*DeleteFleetErrorItem)
}

#DeleteFlowLogsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more flow log IDs.
	//
	// Constraint: Maximum of 1000 flow log IDs.
	//
	// FlowLogIds is a required field
	FlowLogIds: [...null | string] @go(,[]*string)
}

#DeleteFlowLogsOutput: {
	// Information about the flow logs that could not be deleted successfully.
	Unsuccessful: [...null | #UnsuccessfulItem] @go(,[]*UnsuccessfulItem)
}

#DeleteFpgaImageInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AFI.
	//
	// FpgaImageId is a required field
	FpgaImageId?: null | string @go(,*string)
}

#DeleteFpgaImageOutput: {
	// Is true if the request succeeds, and an error otherwise.
	Return?: null | bool @go(,*bool)
}

#DeleteInstanceEventWindowInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Specify true to force delete the event window. Use the force delete parameter
	// if the event window is currently associated with targets.
	ForceDelete?: null | bool @go(,*bool)

	// The ID of the event window.
	//
	// InstanceEventWindowId is a required field
	InstanceEventWindowId?: null | string @go(,*string)
}

#DeleteInstanceEventWindowOutput: {
	// The state of the event window.
	InstanceEventWindowState?: null | #InstanceEventWindowStateChange @go(,*InstanceEventWindowStateChange)
}

#DeleteInternetGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the internet gateway.
	//
	// InternetGatewayId is a required field
	InternetGatewayId?: null | string @go(,*string)
}

#DeleteKeyPairInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The name of the key pair.
	KeyName?: null | string @go(,*string)

	// The ID of the key pair.
	KeyPairId?: null | string @go(,*string)
}

#DeleteLaunchTemplateInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateName?: null | string @go(,*string)
}

#DeleteLaunchTemplateOutput: {
	// Information about the launch template.
	LaunchTemplate?: null | #LaunchTemplate @go(,*LaunchTemplate)
}

#DeleteLaunchTemplateVersionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateName?: null | string @go(,*string)

	// The version numbers of one or more launch template versions to delete.
	//
	// Versions is a required field
	Versions: [...null | string] @go(,[]*string)
}

#DeleteLaunchTemplateVersionsOutput: {
	// Information about the launch template versions that were successfully deleted.
	SuccessfullyDeletedLaunchTemplateVersions: [...null | #DeleteLaunchTemplateVersionsResponseSuccessItem] @go(,[]*DeleteLaunchTemplateVersionsResponseSuccessItem)

	// Information about the launch template versions that could not be deleted.
	UnsuccessfullyDeletedLaunchTemplateVersions: [...null | #DeleteLaunchTemplateVersionsResponseErrorItem] @go(,[]*DeleteLaunchTemplateVersionsResponseErrorItem)
}

// Describes a launch template version that could not be deleted.
#DeleteLaunchTemplateVersionsResponseErrorItem: {
	// The ID of the launch template.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template.
	LaunchTemplateName?: null | string @go(,*string)

	// Information about the error.
	ResponseError?: null | #ResponseError @go(,*ResponseError)

	// The version number of the launch template.
	VersionNumber?: null | int64 @go(,*int64)
}

// Describes a launch template version that was successfully deleted.
#DeleteLaunchTemplateVersionsResponseSuccessItem: {
	// The ID of the launch template.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template.
	LaunchTemplateName?: null | string @go(,*string)

	// The version number of the launch template.
	VersionNumber?: null | int64 @go(,*int64)
}

#DeleteLocalGatewayRouteInput: {
	// The CIDR range for the route. This must match the CIDR for the route exactly.
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the local gateway route table.
	//
	// LocalGatewayRouteTableId is a required field
	LocalGatewayRouteTableId?: null | string @go(,*string)
}

#DeleteLocalGatewayRouteOutput: {
	// Information about the route.
	Route?: null | #LocalGatewayRoute @go(,*LocalGatewayRoute)
}

#DeleteLocalGatewayRouteTableVpcAssociationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the association.
	//
	// LocalGatewayRouteTableVpcAssociationId is a required field
	LocalGatewayRouteTableVpcAssociationId?: null | string @go(,*string)
}

#DeleteLocalGatewayRouteTableVpcAssociationOutput: {
	// Information about the association.
	LocalGatewayRouteTableVpcAssociation?: null | #LocalGatewayRouteTableVpcAssociation @go(,*LocalGatewayRouteTableVpcAssociation)
}

#DeleteManagedPrefixListInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the prefix list.
	//
	// PrefixListId is a required field
	PrefixListId?: null | string @go(,*string)
}

#DeleteManagedPrefixListOutput: {
	// Information about the prefix list.
	PrefixList?: null | #ManagedPrefixList @go(,*ManagedPrefixList)
}

#DeleteNatGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the NAT gateway.
	//
	// NatGatewayId is a required field
	NatGatewayId?: null | string @go(,*string)
}

#DeleteNatGatewayOutput: {
	// The ID of the NAT gateway.
	NatGatewayId?: null | string @go(,*string)
}

#DeleteNetworkAclEntryInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Indicates whether the rule is an egress rule.
	//
	// Egress is a required field
	Egress?: null | bool @go(,*bool)

	// The ID of the network ACL.
	//
	// NetworkAclId is a required field
	NetworkAclId?: null | string @go(,*string)

	// The rule number of the entry to delete.
	//
	// RuleNumber is a required field
	RuleNumber?: null | int64 @go(,*int64)
}

#DeleteNetworkAclInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the network ACL.
	//
	// NetworkAclId is a required field
	NetworkAclId?: null | string @go(,*string)
}

#DeleteNetworkInsightsAnalysisInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the network insights analysis.
	//
	// NetworkInsightsAnalysisId is a required field
	NetworkInsightsAnalysisId?: null | string @go(,*string)
}

#DeleteNetworkInsightsAnalysisOutput: {
	// The ID of the network insights analysis.
	NetworkInsightsAnalysisId?: null | string @go(,*string)
}

#DeleteNetworkInsightsPathInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the path.
	//
	// NetworkInsightsPathId is a required field
	NetworkInsightsPathId?: null | string @go(,*string)
}

#DeleteNetworkInsightsPathOutput: {
	// The ID of the path.
	NetworkInsightsPathId?: null | string @go(,*string)
}

// Contains the parameters for DeleteNetworkInterface.
#DeleteNetworkInterfaceInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)
}

// Contains the parameters for DeleteNetworkInterfacePermission.
#DeleteNetworkInterfacePermissionInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Specify true to remove the permission even if the network interface is attached
	// to an instance.
	Force?: null | bool @go(,*bool)

	// The ID of the network interface permission.
	//
	// NetworkInterfacePermissionId is a required field
	NetworkInterfacePermissionId?: null | string @go(,*string)
}

// Contains the output for DeleteNetworkInterfacePermission.
#DeleteNetworkInterfacePermissionOutput: {
	// Returns true if the request succeeds, otherwise returns an error.
	Return?: null | bool @go(,*bool)
}

#DeletePlacementGroupInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The name of the placement group.
	//
	// GroupName is a required field
	GroupName?: null | string @go(,*string)
}

// Describes the error for a Reserved Instance whose queued purchase could not
// be deleted.
#DeleteQueuedReservedInstancesError: {
	// The error code.
	Code?: null | string @go(,*string)

	// The error message.
	Message?: null | string @go(,*string)
}

#DeleteQueuedReservedInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the Reserved Instances.
	//
	// ReservedInstancesIds is a required field
	ReservedInstancesIds: [...null | string] @go(,[]*string)
}

#DeleteQueuedReservedInstancesOutput: {
	// Information about the queued purchases that could not be deleted.
	FailedQueuedPurchaseDeletions: [...null | #FailedQueuedPurchaseDeletion] @go(,[]*FailedQueuedPurchaseDeletion)

	// Information about the queued purchases that were successfully deleted.
	SuccessfulQueuedPurchaseDeletions: [...null | #SuccessfulQueuedPurchaseDeletion] @go(,[]*SuccessfulQueuedPurchaseDeletion)
}

#DeleteRouteInput: {
	// The IPv4 CIDR range for the route. The value you specify must match the CIDR
	// for the route exactly.
	DestinationCidrBlock?: null | string @go(,*string)

	// The IPv6 CIDR range for the route. The value you specify must match the CIDR
	// for the route exactly.
	DestinationIpv6CidrBlock?: null | string @go(,*string)

	// The ID of the prefix list for the route.
	DestinationPrefixListId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the route table.
	//
	// RouteTableId is a required field
	RouteTableId?: null | string @go(,*string)
}

#DeleteRouteTableInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the route table.
	//
	// RouteTableId is a required field
	RouteTableId?: null | string @go(,*string)
}

#DeleteSecurityGroupInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the security group. Required for a nondefault VPC.
	GroupId?: null | string @go(,*string)

	// [EC2-Classic, default VPC] The name of the security group. You can specify
	// either the security group name or the security group ID.
	GroupName?: null | string @go(,*string)
}

#DeleteSnapshotInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the EBS snapshot.
	//
	// SnapshotId is a required field
	SnapshotId?: null | string @go(,*string)
}

// Contains the parameters for DeleteSpotDatafeedSubscription.
#DeleteSpotDatafeedSubscriptionInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DeleteSubnetCidrReservationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the subnet CIDR reservation.
	//
	// SubnetCidrReservationId is a required field
	SubnetCidrReservationId?: null | string @go(,*string)
}

#DeleteSubnetCidrReservationOutput: {
	// Information about the deleted subnet CIDR reservation.
	DeletedSubnetCidrReservation?: null | #SubnetCidrReservation @go(,*SubnetCidrReservation)
}

#DeleteSubnetInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the subnet.
	//
	// SubnetId is a required field
	SubnetId?: null | string @go(,*string)
}

#DeleteTagsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the resources, separated by spaces.
	//
	// Constraints: Up to 1000 resource IDs. We recommend breaking up this request
	// into smaller batches.
	//
	// Resources is a required field
	Resources: [...null | string] @go(,[]*string)

	// The tags to delete. Specify a tag key and an optional tag value to delete
	// specific tags. If you specify a tag key without a tag value, we delete any
	// tag with this key regardless of its value. If you specify a tag key with
	// an empty string as the tag value, we delete the tag only if its value is
	// an empty string.
	//
	// If you omit this parameter, we delete all user-defined tags for the specified
	// resources. We do not delete Amazon Web Services-generated tags (tags that
	// have the aws: prefix).
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#DeleteTrafficMirrorFilterInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the Traffic Mirror filter.
	//
	// TrafficMirrorFilterId is a required field
	TrafficMirrorFilterId?: null | string @go(,*string)
}

#DeleteTrafficMirrorFilterOutput: {
	// The ID of the Traffic Mirror filter.
	TrafficMirrorFilterId?: null | string @go(,*string)
}

#DeleteTrafficMirrorFilterRuleInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the Traffic Mirror rule.
	//
	// TrafficMirrorFilterRuleId is a required field
	TrafficMirrorFilterRuleId?: null | string @go(,*string)
}

#DeleteTrafficMirrorFilterRuleOutput: {
	// The ID of the deleted Traffic Mirror rule.
	TrafficMirrorFilterRuleId?: null | string @go(,*string)
}

#DeleteTrafficMirrorSessionInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the Traffic Mirror session.
	//
	// TrafficMirrorSessionId is a required field
	TrafficMirrorSessionId?: null | string @go(,*string)
}

#DeleteTrafficMirrorSessionOutput: {
	// The ID of the deleted Traffic Mirror session.
	TrafficMirrorSessionId?: null | string @go(,*string)
}

#DeleteTrafficMirrorTargetInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the Traffic Mirror target.
	//
	// TrafficMirrorTargetId is a required field
	TrafficMirrorTargetId?: null | string @go(,*string)
}

#DeleteTrafficMirrorTargetOutput: {
	// The ID of the deleted Traffic Mirror target.
	TrafficMirrorTargetId?: null | string @go(,*string)
}

#DeleteTransitGatewayConnectInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the Connect attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#DeleteTransitGatewayConnectOutput: {
	// Information about the deleted Connect attachment.
	TransitGatewayConnect?: null | #TransitGatewayConnect @go(,*TransitGatewayConnect)
}

#DeleteTransitGatewayConnectPeerInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the Connect peer.
	//
	// TransitGatewayConnectPeerId is a required field
	TransitGatewayConnectPeerId?: null | string @go(,*string)
}

#DeleteTransitGatewayConnectPeerOutput: {
	// Information about the deleted Connect peer.
	TransitGatewayConnectPeer?: null | #TransitGatewayConnectPeer @go(,*TransitGatewayConnectPeer)
}

#DeleteTransitGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the transit gateway.
	//
	// TransitGatewayId is a required field
	TransitGatewayId?: null | string @go(,*string)
}

#DeleteTransitGatewayMulticastDomainInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the transit gateway multicast domain.
	//
	// TransitGatewayMulticastDomainId is a required field
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#DeleteTransitGatewayMulticastDomainOutput: {
	// Information about the deleted transit gateway multicast domain.
	TransitGatewayMulticastDomain?: null | #TransitGatewayMulticastDomain @go(,*TransitGatewayMulticastDomain)
}

#DeleteTransitGatewayOutput: {
	// Information about the deleted transit gateway.
	TransitGateway?: null | #TransitGateway @go(,*TransitGateway)
}

#DeleteTransitGatewayPeeringAttachmentInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the transit gateway peering attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#DeleteTransitGatewayPeeringAttachmentOutput: {
	// The transit gateway peering attachment.
	TransitGatewayPeeringAttachment?: null | #TransitGatewayPeeringAttachment @go(,*TransitGatewayPeeringAttachment)
}

#DeleteTransitGatewayPrefixListReferenceInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the prefix list.
	//
	// PrefixListId is a required field
	PrefixListId?: null | string @go(,*string)

	// The ID of the route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#DeleteTransitGatewayPrefixListReferenceOutput: {
	// Information about the deleted prefix list reference.
	TransitGatewayPrefixListReference?: null | #TransitGatewayPrefixListReference @go(,*TransitGatewayPrefixListReference)
}

#DeleteTransitGatewayRouteInput: {
	// The CIDR range for the route. This must match the CIDR for the route exactly.
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#DeleteTransitGatewayRouteOutput: {
	// Information about the route.
	Route?: null | #TransitGatewayRoute @go(,*TransitGatewayRoute)
}

#DeleteTransitGatewayRouteTableInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#DeleteTransitGatewayRouteTableOutput: {
	// Information about the deleted transit gateway route table.
	TransitGatewayRouteTable?: null | #TransitGatewayRouteTable @go(,*TransitGatewayRouteTable)
}

#DeleteTransitGatewayVpcAttachmentInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#DeleteTransitGatewayVpcAttachmentOutput: {
	// Information about the deleted VPC attachment.
	TransitGatewayVpcAttachment?: null | #TransitGatewayVpcAttachment @go(,*TransitGatewayVpcAttachment)
}

#DeleteVolumeInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the volume.
	//
	// VolumeId is a required field
	VolumeId?: null | string @go(,*string)
}

#DeleteVpcEndpointConnectionNotificationsInput: {
	// One or more notification IDs.
	//
	// ConnectionNotificationIds is a required field
	ConnectionNotificationIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DeleteVpcEndpointConnectionNotificationsOutput: {
	// Information about the notifications that could not be deleted successfully.
	Unsuccessful: [...null | #UnsuccessfulItem] @go(,[]*UnsuccessfulItem)
}

#DeleteVpcEndpointServiceConfigurationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of one or more services.
	//
	// ServiceIds is a required field
	ServiceIds: [...null | string] @go(,[]*string)
}

#DeleteVpcEndpointServiceConfigurationsOutput: {
	// Information about the service configurations that were not deleted, if applicable.
	Unsuccessful: [...null | #UnsuccessfulItem] @go(,[]*UnsuccessfulItem)
}

// Contains the parameters for DeleteVpcEndpoints.
#DeleteVpcEndpointsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more VPC endpoint IDs.
	//
	// VpcEndpointIds is a required field
	VpcEndpointIds: [...null | string] @go(,[]*string)
}

// Contains the output of DeleteVpcEndpoints.
#DeleteVpcEndpointsOutput: {
	// Information about the VPC endpoints that were not successfully deleted.
	Unsuccessful: [...null | #UnsuccessfulItem] @go(,[]*UnsuccessfulItem)
}

#DeleteVpcInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#DeleteVpcPeeringConnectionInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC peering connection.
	//
	// VpcPeeringConnectionId is a required field
	VpcPeeringConnectionId?: null | string @go(,*string)
}

#DeleteVpcPeeringConnectionOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

// Contains the parameters for DeleteVpnConnection.
#DeleteVpnConnectionInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPN connection.
	//
	// VpnConnectionId is a required field
	VpnConnectionId?: null | string @go(,*string)
}

// Contains the parameters for DeleteVpnConnectionRoute.
#DeleteVpnConnectionRouteInput: {
	// The CIDR block associated with the local subnet of the customer network.
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// The ID of the VPN connection.
	//
	// VpnConnectionId is a required field
	VpnConnectionId?: null | string @go(,*string)
}

// Contains the parameters for DeleteVpnGateway.
#DeleteVpnGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the virtual private gateway.
	//
	// VpnGatewayId is a required field
	VpnGatewayId?: null | string @go(,*string)
}

#DeprovisionByoipCidrInput: {
	// The address range, in CIDR notation. The prefix must be the same prefix that
	// you specified when you provisioned the address range.
	//
	// Cidr is a required field
	Cidr?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DeprovisionByoipCidrOutput: {
	// Information about the address range.
	ByoipCidr?: null | #ByoipCidr @go(,*ByoipCidr)
}

// Contains the parameters for DeregisterImage.
#DeregisterImageInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AMI.
	//
	// ImageId is a required field
	ImageId?: null | string @go(,*string)
}

#DeregisterInstanceEventNotificationAttributesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Information about the tag keys to deregister.
	InstanceTagAttribute?: null | #DeregisterInstanceTagAttributeRequest @go(,*DeregisterInstanceTagAttributeRequest)
}

#DeregisterInstanceEventNotificationAttributesOutput: {
	// The resulting set of tag keys.
	InstanceTagAttribute?: null | #InstanceTagNotificationAttribute @go(,*InstanceTagNotificationAttribute)
}

// Information about the tag keys to deregister for the current Region. You
// can either specify individual tag keys or deregister all tag keys in the
// current Region. You must specify either IncludeAllTagsOfInstance or InstanceTagKeys
// in the request
#DeregisterInstanceTagAttributeRequest: {
	// Indicates whether to deregister all tag keys in the current Region. Specify
	// false to deregister all tag keys.
	IncludeAllTagsOfInstance?: null | bool @go(,*bool)

	// Information about the tag keys to deregister.
	InstanceTagKeys: [...null | string] @go(,[]*string)
}

#DeregisterTransitGatewayMulticastGroupMembersInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress?: null | string @go(,*string)

	// The IDs of the group members' network interfaces.
	NetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#DeregisterTransitGatewayMulticastGroupMembersOutput: {
	// Information about the deregistered members.
	DeregisteredMulticastGroupMembers?: null | #TransitGatewayMulticastDeregisteredGroupMembers @go(,*TransitGatewayMulticastDeregisteredGroupMembers)
}

#DeregisterTransitGatewayMulticastGroupSourcesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress?: null | string @go(,*string)

	// The IDs of the group sources' network interfaces.
	NetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#DeregisterTransitGatewayMulticastGroupSourcesOutput: {
	// Information about the deregistered group sources.
	DeregisteredMulticastGroupSources?: null | #TransitGatewayMulticastDeregisteredGroupSources @go(,*TransitGatewayMulticastDeregisteredGroupSources)
}

#DescribeAccountAttributesInput: {
	// The account attribute names.
	AttributeNames: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DescribeAccountAttributesOutput: {
	// Information about the account attributes.
	AccountAttributes: [...null | #AccountAttribute] @go(,[]*AccountAttribute)
}

#DescribeAddressesAttributeInput: {
	// [EC2-VPC] The allocation IDs.
	AllocationIds: [...null | string] @go(,[]*string)

	// The attribute of the IP address.
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeAddressesAttributeOutput: {
	// Information about the IP addresses.
	Addresses: [...null | #AddressAttribute] @go(,[]*AddressAttribute)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeAddressesInput: {
	// [EC2-VPC] Information about the allocation IDs.
	AllocationIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. Filter names and values are case-sensitive.
	//
	//    * allocation-id - [EC2-VPC] The allocation ID for the address.
	//
	//    * association-id - [EC2-VPC] The association ID for the address.
	//
	//    * domain - Indicates whether the address is for use in EC2-Classic (standard)
	//    or in a VPC (vpc).
	//
	//    * instance-id - The ID of the instance the address is associated with,
	//    if any.
	//
	//    * network-border-group - A unique set of Availability Zones, Local Zones,
	//    or Wavelength Zones from where Amazon Web Services advertises IP addresses.
	//
	//    * network-interface-id - [EC2-VPC] The ID of the network interface that
	//    the address is associated with, if any.
	//
	//    * network-interface-owner-id - The Amazon Web Services account ID of the
	//    owner.
	//
	//    * private-ip-address - [EC2-VPC] The private IP address associated with
	//    the Elastic IP address.
	//
	//    * public-ip - The Elastic IP address, or the carrier IP address.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// One or more Elastic IP addresses.
	//
	// Default: Describes all your Elastic IP addresses.
	PublicIps: [...null | string] @go(,[]*string)
}

#DescribeAddressesOutput: {
	// Information about the Elastic IP addresses.
	Addresses: [...null | #Address] @go(,[]*Address)
}

#DescribeAggregateIdFormatInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DescribeAggregateIdFormatOutput: {
	// Information about each resource's ID format.
	Statuses: [...null | #IdFormat] @go(,[]*IdFormat)

	// Indicates whether all resource types in the Region are configured to use
	// longer IDs. This value is only true if all users are configured to use longer
	// IDs for all resources types in the Region.
	UseLongIdsAggregated?: null | bool @go(,*bool)
}

#DescribeAvailabilityZonesInput: {
	// Include all Availability Zones, Local Zones, and Wavelength Zones regardless
	// of your opt-in status.
	//
	// If you do not use this parameter, the results include only the zones for
	// the Regions where you have chosen the option to opt in.
	AllAvailabilityZones?: null | bool @go(,*bool)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * group-name - For Availability Zones, use the Region name. For Local
	//    Zones, use the name of the group associated with the Local Zone (for example,
	//    us-west-2-lax-1) For Wavelength Zones, use the name of the group associated
	//    with the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).
	//
	//    * message - The Zone message.
	//
	//    * opt-in-status - The opt-in status (opted-in, and not-opted-in | opt-in-not-required).
	//
	//    * parent-zoneID - The ID of the zone that handles some of the Local Zone
	//    and Wavelength Zone control plane operations, such as API calls.
	//
	//    * parent-zoneName - The ID of the zone that handles some of the Local
	//    Zone and Wavelength Zone control plane operations, such as API calls.
	//
	//    * region-name - The name of the Region for the Zone (for example, us-east-1).
	//
	//    * state - The state of the Availability Zone, the Local Zone, or the Wavelength
	//    Zone (available | information | impaired | unavailable).
	//
	//    * zone-id - The ID of the Availability Zone (for example, use1-az1), the
	//    Local Zone (for example, usw2-lax1-az1), or the Wavelength Zone (for example,
	//    us-east-1-wl1-bos-wlz-1).
	//
	//    * zone-type - The type of zone, for example, local-zone.
	//
	//    * zone-name - The name of the Availability Zone (for example, us-east-1a),
	//    the Local Zone (for example, us-west-2-lax-1a), or the Wavelength Zone
	//    (for example, us-east-1-wl1-bos-wlz-1).
	//
	//    * zone-type - The type of zone, for example, local-zone.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the Availability Zones, Local Zones, and Wavelength Zones.
	ZoneIds: [...null | string] @go(,[]*string)

	// The names of the Availability Zones, Local Zones, and Wavelength Zones.
	ZoneNames: [...null | string] @go(,[]*string)
}

#DescribeAvailabilityZonesOutput: {
	// Information about the Availability Zones, Local Zones, and Wavelength Zones.
	AvailabilityZones: [...null | #AvailabilityZone] @go(,[]*AvailabilityZone)
}

#DescribeBundleTasksInput: {
	// The bundle task IDs.
	//
	// Default: Describes all your bundle tasks.
	BundleIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * bundle-id - The ID of the bundle task.
	//
	//    * error-code - If the task failed, the error code returned.
	//
	//    * error-message - If the task failed, the error message returned.
	//
	//    * instance-id - The ID of the instance.
	//
	//    * progress - The level of task completion, as a percentage (for example,
	//    20%).
	//
	//    * s3-bucket - The Amazon S3 bucket to store the AMI.
	//
	//    * s3-prefix - The beginning of the AMI name.
	//
	//    * start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).
	//
	//    * state - The state of the task (pending | waiting-for-shutdown | bundling
	//    | storing | cancelling | complete | failed).
	//
	//    * update-time - The time of the most recent update for the task.
	Filters: [...null | #Filter] @go(,[]*Filter)
}

#DescribeBundleTasksOutput: {
	// Information about the bundle tasks.
	BundleTasks: [...null | #BundleTask] @go(,[]*BundleTask)
}

#DescribeByoipCidrsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	//
	// MaxResults is a required field
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeByoipCidrsOutput: {
	// Information about your address ranges.
	ByoipCidrs: [...null | #ByoipCidr] @go(,[]*ByoipCidr)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeCapacityReservationsInput: {
	// The ID of the Capacity Reservation.
	CapacityReservationIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * instance-type - The type of instance for which the Capacity Reservation
	//    reserves capacity.
	//
	//    * owner-id - The ID of the Amazon Web Services account that owns the Capacity
	//    Reservation.
	//
	//    * availability-zone-id - The Availability Zone ID of the Capacity Reservation.
	//
	//    * instance-platform - The type of operating system for which the Capacity
	//    Reservation reserves capacity.
	//
	//    * availability-zone - The Availability Zone ID of the Capacity Reservation.
	//
	//    * tenancy - Indicates the tenancy of the Capacity Reservation. A Capacity
	//    Reservation can have one of the following tenancy settings: default -
	//    The Capacity Reservation is created on hardware that is shared with other
	//    Amazon Web Services accounts. dedicated - The Capacity Reservation is
	//    created on single-tenant hardware that is dedicated to a single Amazon
	//    Web Services account.
	//
	//    * outpost-arn - The Amazon Resource Name (ARN) of the Outpost on which
	//    the Capacity Reservation was created.
	//
	//    * state - The current state of the Capacity Reservation. A Capacity Reservation
	//    can be in one of the following states: active- The Capacity Reservation
	//    is active and the capacity is available for your use. expired - The Capacity
	//    Reservation expired automatically at the date and time specified in your
	//    request. The reserved capacity is no longer available for your use. cancelled
	//    - The Capacity Reservation was cancelled. The reserved capacity is no
	//    longer available for your use. pending - The Capacity Reservation request
	//    was successful but the capacity provisioning is still pending. failed
	//    - The Capacity Reservation request has failed. A request might fail due
	//    to invalid request parameters, capacity constraints, or instance limit
	//    constraints. Failed requests are retained for 60 minutes.
	//
	//    * start-date - The date and time at which the Capacity Reservation was
	//    started.
	//
	//    * end-date - The date and time at which the Capacity Reservation expires.
	//    When a Capacity Reservation expires, the reserved capacity is released
	//    and you can no longer launch instances into it. The Capacity Reservation's
	//    state changes to expired when it reaches its end date and time.
	//
	//    * end-date-type - Indicates the way in which the Capacity Reservation
	//    ends. A Capacity Reservation can have one of the following end types:
	//    unlimited - The Capacity Reservation remains active until you explicitly
	//    cancel it. limited - The Capacity Reservation expires automatically at
	//    a specified date and time.
	//
	//    * instance-match-criteria - Indicates the type of instance launches that
	//    the Capacity Reservation accepts. The options include: open - The Capacity
	//    Reservation accepts all instances that have matching attributes (instance
	//    type, platform, and Availability Zone). Instances that have matching attributes
	//    launch into the Capacity Reservation automatically without specifying
	//    any additional parameters. targeted - The Capacity Reservation only accepts
	//    instances that have matching attributes (instance type, platform, and
	//    Availability Zone), and explicitly target the Capacity Reservation. This
	//    ensures that only permitted instances can use the reserved capacity.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the returned
	// nextToken value. This value can be between 5 and 500. If maxResults is given
	// a larger value than 500, you receive an error.
	MaxResults?: null | int64 @go(,*int64)

	// The token to use to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeCapacityReservationsOutput: {
	// Information about the Capacity Reservations.
	CapacityReservations: [...null | #CapacityReservation] @go(,[]*CapacityReservation)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeCarrierGatewaysInput: {
	// One or more carrier gateway IDs.
	CarrierGatewayIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * carrier-gateway-id - The ID of the carrier gateway.
	//
	//    * state - The state of the carrier gateway (pending | failed | available
	//    | deleting | deleted).
	//
	//    * owner-id - The Amazon Web Services account ID of the owner of the carrier
	//    gateway.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-id - The ID of the VPC associated with the carrier gateway.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeCarrierGatewaysOutput: {
	// Information about the carrier gateway.
	CarrierGateways: [...null | #CarrierGateway] @go(,[]*CarrierGateway)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeClassicLinkInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * group-id - The ID of a VPC security group that's associated with the
	//    instance.
	//
	//    * instance-id - The ID of the instance.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-id - The ID of the VPC to which the instance is linked. vpc-id -
	//    The ID of the VPC that the instance is linked to.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// One or more instance IDs. Must be instances linked to a VPC through ClassicLink.
	InstanceIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	//
	// Constraint: If the value is greater than 1000, we return only 1000 items.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeClassicLinkInstancesOutput: {
	// Information about one or more linked EC2-Classic instances.
	Instances: [...null | #ClassicLinkInstance] @go(,[]*ClassicLinkInstance)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeClientVpnAuthorizationRulesInput: {
	// The ID of the Client VPN endpoint.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. Filter names and values are case-sensitive.
	//
	//    * description - The description of the authorization rule.
	//
	//    * destination-cidr - The CIDR of the network to which the authorization
	//    rule applies.
	//
	//    * group-id - The ID of the Active Directory group to which the authorization
	//    rule grants access.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the nextToken
	// value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeClientVpnAuthorizationRulesOutput: {
	// Information about the authorization rules.
	AuthorizationRules: [...null | #AuthorizationRule] @go(,[]*AuthorizationRule)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeClientVpnConnectionsInput: {
	// The ID of the Client VPN endpoint.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. Filter names and values are case-sensitive.
	//
	//    * connection-id - The ID of the connection.
	//
	//    * username - For Active Directory client authentication, the user name
	//    of the client who established the client connection.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the nextToken
	// value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeClientVpnConnectionsOutput: {
	// Information about the active and terminated client connections.
	Connections: [...null | #ClientVpnConnection] @go(,[]*ClientVpnConnection)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeClientVpnEndpointsInput: {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. Filter names and values are case-sensitive.
	//
	//    * endpoint-id - The ID of the Client VPN endpoint.
	//
	//    * transport-protocol - The transport protocol (tcp | udp).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the nextToken
	// value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeClientVpnEndpointsOutput: {
	// Information about the Client VPN endpoints.
	ClientVpnEndpoints: [...null | #ClientVpnEndpoint] @go(,[]*ClientVpnEndpoint)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeClientVpnRoutesInput: {
	// The ID of the Client VPN endpoint.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. Filter names and values are case-sensitive.
	//
	//    * destination-cidr - The CIDR of the route destination.
	//
	//    * origin - How the route was associated with the Client VPN endpoint (associate
	//    | add-route).
	//
	//    * target-subnet - The ID of the subnet through which traffic is routed.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the nextToken
	// value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeClientVpnRoutesOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the Client VPN endpoint routes.
	Routes: [...null | #ClientVpnRoute] @go(,[]*ClientVpnRoute)
}

#DescribeClientVpnTargetNetworksInput: {
	// The IDs of the target network associations.
	AssociationIds: [...null | string] @go(,[]*string)

	// The ID of the Client VPN endpoint.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. Filter names and values are case-sensitive.
	//
	//    * association-id - The ID of the association.
	//
	//    * target-network-id - The ID of the subnet specified as the target network.
	//
	//    * vpc-id - The ID of the VPC in which the target network is located.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the nextToken
	// value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeClientVpnTargetNetworksOutput: {
	// Information about the associated target networks.
	ClientVpnTargetNetworks: [...null | #TargetNetwork] @go(,[]*TargetNetwork)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeCoipPoolsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters. The following are the possible values:
	//
	//    * coip-pool.pool-id
	//
	//    * coip-pool.local-gateway-route-table-id
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the address pools.
	PoolIds: [...null | string] @go(,[]*string)
}

#DescribeCoipPoolsOutput: {
	// Information about the address pools.
	CoipPools: [...null | #CoipPool] @go(,[]*CoipPool)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeConversionTasksInput: {
	// The conversion task IDs.
	ConversionTaskIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DescribeConversionTasksOutput: {
	// Information about the conversion tasks.
	ConversionTasks: [...null | #ConversionTask] @go(,[]*ConversionTask)
}

// Contains the parameters for DescribeCustomerGateways.
#DescribeCustomerGatewaysInput: {
	// One or more customer gateway IDs.
	//
	// Default: Describes all your customer gateways.
	CustomerGatewayIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous
	//    System Number (ASN).
	//
	//    * customer-gateway-id - The ID of the customer gateway.
	//
	//    * ip-address - The IP address of the customer gateway's Internet-routable
	//    external interface.
	//
	//    * state - The state of the customer gateway (pending | available | deleting
	//    | deleted).
	//
	//    * type - The type of customer gateway. Currently, the only supported type
	//    is ipsec.1.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)
}

// Contains the output of DescribeCustomerGateways.
#DescribeCustomerGatewaysOutput: {
	// Information about one or more customer gateways.
	CustomerGateways: [...null | #CustomerGateway] @go(,[]*CustomerGateway)
}

#DescribeDhcpOptionsInput: {
	// The IDs of one or more DHCP options sets.
	//
	// Default: Describes all your DHCP options sets.
	DhcpOptionsIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * dhcp-options-id - The ID of a DHCP options set.
	//
	//    * key - The key for one of the options (for example, domain-name).
	//
	//    * value - The value for one of the options.
	//
	//    * owner-id - The ID of the Amazon Web Services account that owns the DHCP
	//    options set.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeDhcpOptionsOutput: {
	// Information about one or more DHCP options sets.
	DhcpOptions: [...null | #DhcpOptions] @go(,[]*DhcpOptions)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeEgressOnlyInternetGatewaysInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more egress-only internet gateway IDs.
	EgressOnlyInternetGatewayIds: [...null | string] @go(,[]*string)

	// One or more filters.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeEgressOnlyInternetGatewaysOutput: {
	// Information about the egress-only internet gateways.
	EgressOnlyInternetGateways: [...null | #EgressOnlyInternetGateway] @go(,[]*EgressOnlyInternetGateway)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeElasticGpusInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Elastic Graphics accelerator IDs.
	ElasticGpuIds: [...null | string] @go(,[]*string)

	// The filters.
	//
	//    * availability-zone - The Availability Zone in which the Elastic Graphics
	//    accelerator resides.
	//
	//    * elastic-gpu-health - The status of the Elastic Graphics accelerator
	//    (OK | IMPAIRED).
	//
	//    * elastic-gpu-state - The state of the Elastic Graphics accelerator (ATTACHED).
	//
	//    * elastic-gpu-type - The type of Elastic Graphics accelerator; for example,
	//    eg1.medium.
	//
	//    * instance-id - The ID of the instance to which the Elastic Graphics accelerator
	//    is associated.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. This
	// value can be between 5 and 1000.
	MaxResults?: null | int64 @go(,*int64)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeElasticGpusOutput: {
	// Information about the Elastic Graphics accelerators.
	ElasticGpuSet: [...null | #ElasticGpus] @go(,[]*ElasticGpus)

	// The total number of items to return. If the total number of items available
	// is more than the value specified in max-items then a Next-Token will be provided
	// in the output that you can use to resume pagination.
	MaxResults?: null | int64 @go(,*int64)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeExportImageTasksInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the export image tasks.
	ExportImageTaskIds: [...null | string] @go(,[]*string)

	// Filter tasks using the task-state filter and one of the following values:
	// active, completed, deleting, or deleted.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return in a single call.
	MaxResults?: null | int64 @go(,*int64)

	// A token that indicates the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeExportImageTasksOutput: {
	// Information about the export image tasks.
	ExportImageTasks: [...null | #ExportImageTask] @go(,[]*ExportImageTask)

	// The token to use to get the next page of results. This value is null when
	// there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeExportTasksInput: {
	// The export task IDs.
	ExportTaskIds: [...null | string] @go(,[]*string)

	// the filters for the export tasks.
	Filters: [...null | #Filter] @go(,[]*Filter)
}

#DescribeExportTasksOutput: {
	// Information about the export tasks.
	ExportTasks: [...null | #ExportTask] @go(,[]*ExportTask)
}

// Describes fast snapshot restores for a snapshot.
#DescribeFastSnapshotRestoreSuccessItem: {
	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// The time at which fast snapshot restores entered the disabled state.
	DisabledTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the disabling state.
	DisablingTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the enabled state.
	EnabledTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the enabling state.
	EnablingTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the optimizing state.
	OptimizingTime?: null | time.Time @go(,*time.Time)

	// The Amazon Web Services owner alias that enabled fast snapshot restores on
	// the snapshot. This is intended for future use.
	OwnerAlias?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that enabled fast snapshot restores
	// on the snapshot.
	OwnerId?: null | string @go(,*string)

	// The ID of the snapshot.
	SnapshotId?: null | string @go(,*string)

	// The state of fast snapshot restores.
	State?: null | string @go(,*string)

	// The reason for the state transition. The possible values are as follows:
	//
	//    * Client.UserInitiated - The state successfully transitioned to enabling
	//    or disabling.
	//
	//    * Client.UserInitiated - Lifecycle state transition - The state successfully
	//    transitioned to optimizing, enabled, or disabled.
	StateTransitionReason?: null | string @go(,*string)
}

#DescribeFastSnapshotRestoresInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters. The possible values are:
	//
	//    * availability-zone: The Availability Zone of the snapshot.
	//
	//    * owner-id: The ID of the Amazon Web Services account that enabled fast
	//    snapshot restore on the snapshot.
	//
	//    * snapshot-id: The ID of the snapshot.
	//
	//    * state: The state of fast snapshot restores for the snapshot (enabling
	//    | optimizing | enabled | disabling | disabled).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeFastSnapshotRestoresOutput: {
	// Information about the state of fast snapshot restores.
	FastSnapshotRestores: [...null | #DescribeFastSnapshotRestoreSuccessItem] @go(,[]*DescribeFastSnapshotRestoreSuccessItem)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

// Describes the instances that could not be launched by the fleet.
#DescribeFleetError: {
	// The error code that indicates why the instance could not be launched. For
	// more information about error codes, see Error Codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html).
	ErrorCode?: null | string @go(,*string)

	// The error message that describes why the instance could not be launched.
	// For more information about error messages, see Error Codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html).
	ErrorMessage?: null | string @go(,*string)

	// The launch templates and overrides that were used for launching the instances.
	// The values that you specify in the Overrides replace the values in the launch
	// template.
	LaunchTemplateAndOverrides?: null | #LaunchTemplateAndOverridesResponse @go(,*LaunchTemplateAndOverridesResponse)

	// Indicates if the instance that could not be launched was a Spot Instance
	// or On-Demand Instance.
	Lifecycle?: null | string @go(,*string)
}

#DescribeFleetHistoryInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The type of events to describe. By default, all events are described.
	EventType?: null | string @go(,*string)

	// The ID of the EC2 Fleet.
	//
	// FleetId is a required field
	FleetId?: null | string @go(,*string)

	// The maximum number of results to return in a single call. Specify a value
	// between 1 and 1000. The default value is 1000. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)

	// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	//
	// StartTime is a required field
	StartTime?: null | time.Time @go(,*time.Time)
}

#DescribeFleetHistoryOutput: {
	// The ID of the EC Fleet.
	FleetId?: null | string @go(,*string)

	// Information about the events in the history of the EC2 Fleet.
	HistoryRecords: [...null | #HistoryRecordEntry] @go(,[]*HistoryRecordEntry)

	// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	// All records up to this time were retrieved.
	//
	// If nextToken indicates that there are more results, this value is not present.
	LastEvaluatedTime?: null | time.Time @go(,*time.Time)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)

	// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	StartTime?: null | time.Time @go(,*time.Time)
}

#DescribeFleetInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * instance-type - The instance type.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The ID of the EC2 Fleet.
	//
	// FleetId is a required field
	FleetId?: null | string @go(,*string)

	// The maximum number of results to return in a single call. Specify a value
	// between 1 and 1000. The default value is 1000. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)
}

#DescribeFleetInstancesOutput: {
	// The running instances. This list is refreshed periodically and might be out
	// of date.
	ActiveInstances: [...null | #ActiveInstance] @go(,[]*ActiveInstance)

	// The ID of the EC2 Fleet.
	FleetId?: null | string @go(,*string)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)
}

#DescribeFleetsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * activity-status - The progress of the EC2 Fleet ( error | pending-fulfillment
	//    | pending-termination | fulfilled).
	//
	//    * excess-capacity-termination-policy - Indicates whether to terminate
	//    running instances if the target capacity is decreased below the current
	//    EC2 Fleet size (true | false).
	//
	//    * fleet-state - The state of the EC2 Fleet (submitted | active | deleted
	//    | failed | deleted-running | deleted-terminating | modifying).
	//
	//    * replace-unhealthy-instances - Indicates whether EC2 Fleet should replace
	//    unhealthy instances (true | false).
	//
	//    * type - The type of request (instant | request | maintain).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The ID of the EC2 Fleets.
	FleetIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. Specify a value
	// between 1 and 1000. The default value is 1000. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)
}

// Describes the instances that were launched by the fleet.
#DescribeFleetsInstances: {
	// The IDs of the instances.
	InstanceIds: [...null | string] @go(,[]*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The launch templates and overrides that were used for launching the instances.
	// The values that you specify in the Overrides replace the values in the launch
	// template.
	LaunchTemplateAndOverrides?: null | #LaunchTemplateAndOverridesResponse @go(,*LaunchTemplateAndOverridesResponse)

	// Indicates if the instance that was launched is a Spot Instance or On-Demand
	// Instance.
	Lifecycle?: null | string @go(,*string)

	// The value is Windows for Windows instances. Otherwise, the value is blank.
	Platform?: null | string @go(,*string)
}

#DescribeFleetsOutput: {
	// Information about the EC2 Fleets.
	Fleets: [...null | #FleetData] @go(,[]*FleetData)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)
}

#DescribeFlowLogsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).
	//
	//    * log-destination-type - The type of destination to which the flow log
	//    publishes data. Possible destination types include cloud-watch-logs and
	//    s3.
	//
	//    * flow-log-id - The ID of the flow log.
	//
	//    * log-group-name - The name of the log group.
	//
	//    * resource-id - The ID of the VPC, subnet, or network interface.
	//
	//    * traffic-type - The type of traffic (ACCEPT | REJECT | ALL).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filter: [...null | #Filter] @go(,[]*Filter)

	// One or more flow log IDs.
	//
	// Constraint: Maximum of 1000 flow log IDs.
	FlowLogIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeFlowLogsOutput: {
	// Information about the flow logs.
	FlowLogs: [...null | #FlowLog] @go(,[]*FlowLog)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeFpgaImageAttributeInput: {
	// The AFI attribute.
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AFI.
	//
	// FpgaImageId is a required field
	FpgaImageId?: null | string @go(,*string)
}

#DescribeFpgaImageAttributeOutput: {
	// Information about the attribute.
	FpgaImageAttribute?: null | #FpgaImageAttribute @go(,*FpgaImageAttribute)
}

#DescribeFpgaImagesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * create-time - The creation time of the AFI.
	//
	//    * fpga-image-id - The FPGA image identifier (AFI ID).
	//
	//    * fpga-image-global-id - The global FPGA image identifier (AGFI ID).
	//
	//    * name - The name of the AFI.
	//
	//    * owner-id - The AWS account ID of the AFI owner.
	//
	//    * product-code - The product code.
	//
	//    * shell-version - The version of the AWS Shell that was used to create
	//    the bitstream.
	//
	//    * state - The state of the AFI (pending | failed | available | unavailable).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * update-time - The time of the most recent update.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The AFI IDs.
	FpgaImageIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)

	// Filters the AFI by owner. Specify an AWS account ID, self (owner is the sender
	// of the request), or an AWS owner alias (valid values are amazon | aws-marketplace).
	Owners: [...null | string] @go(,[]*string)
}

#DescribeFpgaImagesOutput: {
	// Information about the FPGA images.
	FpgaImages: [...null | #FpgaImage] @go(,[]*FpgaImage)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeHostReservationOfferingsInput: {
	// The filters.
	//
	//    * instance-family - The instance family of the offering (for example,
	//    m4).
	//
	//    * payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).
	Filter: [...null | #Filter] @go(,[]*Filter)

	// This is the maximum duration of the reservation to purchase, specified in
	// seconds. Reservations are available in one-year and three-year terms. The
	// number of seconds specified must be the number of seconds in a year (365x24x60x60)
	// times one of the supported durations (1 or 3). For example, specify 94608000
	// for three years.
	MaxDuration?: null | int64 @go(,*int64)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the returned
	// nextToken value. This value can be between 5 and 500. If maxResults is given
	// a larger value than 500, you receive an error.
	MaxResults?: null | int64 @go(,*int64)

	// This is the minimum duration of the reservation you'd like to purchase, specified
	// in seconds. Reservations are available in one-year and three-year terms.
	// The number of seconds specified must be the number of seconds in a year (365x24x60x60)
	// times one of the supported durations (1 or 3). For example, specify 31536000
	// for one year.
	MinDuration?: null | int64 @go(,*int64)

	// The token to use to retrieve the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the reservation offering.
	OfferingId?: null | string @go(,*string)
}

#DescribeHostReservationOfferingsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the offerings.
	OfferingSet: [...null | #HostOffering] @go(,[]*HostOffering)
}

#DescribeHostReservationsInput: {
	// The filters.
	//
	//    * instance-family - The instance family (for example, m4).
	//
	//    * payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).
	//
	//    * state - The state of the reservation (payment-pending | payment-failed
	//    | active | retired).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filter: [...null | #Filter] @go(,[]*Filter)

	// The host reservation IDs.
	HostReservationIdSet: [...null | string] @go(,[]*string)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the returned
	// nextToken value. This value can be between 5 and 500. If maxResults is given
	// a larger value than 500, you receive an error.
	MaxResults?: null | int64 @go(,*int64)

	// The token to use to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeHostReservationsOutput: {
	// Details about the reservation's configuration.
	HostReservationSet: [...null | #HostReservation] @go(,[]*HostReservation)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeHostsInput: {
	// The filters.
	//
	//    * auto-placement - Whether auto-placement is enabled or disabled (on |
	//    off).
	//
	//    * availability-zone - The Availability Zone of the host.
	//
	//    * client-token - The idempotency token that you provided when you allocated
	//    the host.
	//
	//    * host-reservation-id - The ID of the reservation assigned to this host.
	//
	//    * instance-type - The instance type size that the Dedicated Host is configured
	//    to support.
	//
	//    * state - The allocation state of the Dedicated Host (available | under-assessment
	//    | permanent-failure | released | released-permanent-failure).
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filter: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
	HostIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the returned
	// nextToken value. This value can be between 5 and 500. If maxResults is given
	// a larger value than 500, you receive an error.
	//
	// You cannot specify this parameter and the host IDs parameter in the same
	// request.
	MaxResults?: null | int64 @go(,*int64)

	// The token to use to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeHostsOutput: {
	// Information about the Dedicated Hosts.
	Hosts: [...null | #Host] @go(,[]*Host)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeIamInstanceProfileAssociationsInput: {
	// The IAM instance profile associations.
	AssociationIds: [...null | string] @go(,[]*string)

	// The filters.
	//
	//    * instance-id - The ID of the instance.
	//
	//    * state - The state of the association (associating | associated | disassociating).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeIamInstanceProfileAssociationsOutput: {
	// Information about the IAM instance profile associations.
	IamInstanceProfileAssociations: [...null | #IamInstanceProfileAssociation] @go(,[]*IamInstanceProfileAssociation)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeIdFormatInput: {
	// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options
	// | elastic-ip-allocation | elastic-ip-association | export-task | flow-log
	// | image | import-task | instance | internet-gateway | network-acl | network-acl-association
	// | network-interface | network-interface-attachment | prefix-list | reservation
	// | route-table | route-table-association | security-group | snapshot | subnet
	// | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association
	// | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
	Resource?: null | string @go(,*string)
}

#DescribeIdFormatOutput: {
	// Information about the ID format for the resource.
	Statuses: [...null | #IdFormat] @go(,[]*IdFormat)
}

#DescribeIdentityIdFormatInput: {
	// The ARN of the principal, which can be an IAM role, IAM user, or the root
	// user.
	//
	// PrincipalArn is a required field
	PrincipalArn?: null | string @go(,*string)

	// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options
	// | elastic-ip-allocation | elastic-ip-association | export-task | flow-log
	// | image | import-task | instance | internet-gateway | network-acl | network-acl-association
	// | network-interface | network-interface-attachment | prefix-list | reservation
	// | route-table | route-table-association | security-group | snapshot | subnet
	// | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association
	// | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
	Resource?: null | string @go(,*string)
}

#DescribeIdentityIdFormatOutput: {
	// Information about the ID format for the resources.
	Statuses: [...null | #IdFormat] @go(,[]*IdFormat)
}

// Contains the parameters for DescribeImageAttribute.
#DescribeImageAttributeInput: {
	// The AMI attribute.
	//
	// Note: The blockDeviceMapping attribute is deprecated. Using this attribute
	// returns the Client.AuthFailure error. To get information about the block
	// device mappings for an AMI, use the DescribeImages action.
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AMI.
	//
	// ImageId is a required field
	ImageId?: null | string @go(,*string)
}

// Describes an image attribute.
#DescribeImageAttributeOutput: {
	// The block device mapping entries.
	BlockDeviceMappings: [...null | #BlockDeviceMapping] @go(,[]*BlockDeviceMapping)

	// Describes a value for a resource attribute that is a String.
	BootMode?: null | #AttributeValue @go(,*AttributeValue)

	// A description for the AMI.
	Description?: null | #AttributeValue @go(,*AttributeValue)

	// The ID of the AMI.
	ImageId?: null | string @go(,*string)

	// The kernel ID.
	KernelId?: null | #AttributeValue @go(,*AttributeValue)

	// The launch permissions.
	LaunchPermissions: [...null | #LaunchPermission] @go(,[]*LaunchPermission)

	// The product codes.
	ProductCodes: [...null | #ProductCode] @go(,[]*ProductCode)

	// The RAM disk ID.
	RamdiskId?: null | #AttributeValue @go(,*AttributeValue)

	// Indicates whether enhanced networking with the Intel 82599 Virtual Function
	// interface is enabled.
	SriovNetSupport?: null | #AttributeValue @go(,*AttributeValue)
}

#DescribeImagesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Scopes the images by users with explicit launch permissions. Specify an AWS
	// account ID, self (the sender of the request), or all (public AMIs).
	ExecutableUsers: [...null | string] @go(,[]*string)

	// The filters.
	//
	//    * architecture - The image architecture (i386 | x86_64 | arm64).
	//
	//    * block-device-mapping.delete-on-termination - A Boolean value that indicates
	//    whether the Amazon EBS volume is deleted on instance termination.
	//
	//    * block-device-mapping.device-name - The device name specified in the
	//    block device mapping (for example, /dev/sdh or xvdh).
	//
	//    * block-device-mapping.snapshot-id - The ID of the snapshot used for the
	//    EBS volume.
	//
	//    * block-device-mapping.volume-size - The volume size of the EBS volume,
	//    in GiB.
	//
	//    * block-device-mapping.volume-type - The volume type of the EBS volume
	//    (gp2 | io1 | io2 | st1 | sc1 | standard).
	//
	//    * block-device-mapping.encrypted - A Boolean that indicates whether the
	//    EBS volume is encrypted.
	//
	//    * description - The description of the image (provided during image creation).
	//
	//    * ena-support - A Boolean that indicates whether enhanced networking with
	//    ENA is enabled.
	//
	//    * hypervisor - The hypervisor type (ovm | xen).
	//
	//    * image-id - The ID of the image.
	//
	//    * image-type - The image type (machine | kernel | ramdisk).
	//
	//    * is-public - A Boolean that indicates whether the image is public.
	//
	//    * kernel-id - The kernel ID.
	//
	//    * manifest-location - The location of the image manifest.
	//
	//    * name - The name of the AMI (provided during image creation).
	//
	//    * owner-alias - The owner alias (amazon | aws-marketplace). The valid
	//    aliases are defined in an Amazon-maintained list. This is not the AWS
	//    account alias that can be set using the IAM console. We recommend that
	//    you use the Owner request parameter instead of this filter.
	//
	//    * owner-id - The AWS account ID of the owner. We recommend that you use
	//    the Owner request parameter instead of this filter.
	//
	//    * platform - The platform. To only list Windows-based AMIs, use windows.
	//
	//    * product-code - The product code.
	//
	//    * product-code.type - The type of the product code (devpay | marketplace).
	//
	//    * ramdisk-id - The RAM disk ID.
	//
	//    * root-device-name - The device name of the root device volume (for example,
	//    /dev/sda1).
	//
	//    * root-device-type - The type of the root device volume (ebs | instance-store).
	//
	//    * state - The state of the image (available | pending | failed).
	//
	//    * state-reason-code - The reason code for the state change.
	//
	//    * state-reason-message - The message for the state change.
	//
	//    * sriov-net-support - A value of simple indicates that enhanced networking
	//    with the Intel 82599 VF interface is enabled.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * virtualization-type - The virtualization type (paravirtual | hvm).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The image IDs.
	//
	// Default: Describes all images available to you.
	ImageIds: [...null | string] @go(,[]*string)

	// If true, all deprecated AMIs are included in the response. If false, no deprecated
	// AMIs are included in the response. If no value is specified, the default
	// value is false.
	//
	// If you are the AMI owner, all deprecated AMIs appear in the response regardless
	// of the value (true or false) that you set for this parameter.
	IncludeDeprecated?: null | bool @go(,*bool)

	// Scopes the results to images with the specified owners. You can specify a
	// combination of AWS account IDs, self, amazon, and aws-marketplace. If you
	// omit this parameter, the results include all images for which you have launch
	// permissions, regardless of ownership.
	Owners: [...null | string] @go(,[]*string)
}

#DescribeImagesOutput: {
	// Information about the images.
	Images: [...null | #Image] @go(,[]*Image)
}

#DescribeImportImageTasksInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Filter tasks using the task-state filter and one of the following values:
	// active, completed, deleting, or deleted.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the import image tasks.
	ImportTaskIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call.
	MaxResults?: null | int64 @go(,*int64)

	// A token that indicates the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeImportImageTasksOutput: {
	// A list of zero or more import image tasks that are currently active or were
	// completed or canceled in the previous 7 days.
	ImportImageTasks: [...null | #ImportImageTask] @go(,[]*ImportImageTask)

	// The token to use to get the next page of results. This value is null when
	// there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeImportSnapshotTasksInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// A list of import snapshot task IDs.
	ImportTaskIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// A token that indicates the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeImportSnapshotTasksOutput: {
	// A list of zero or more import snapshot tasks that are currently active or
	// were completed or canceled in the previous 7 days.
	ImportSnapshotTasks: [...null | #ImportSnapshotTask] @go(,[]*ImportSnapshotTask)

	// The token to use to get the next page of results. This value is null when
	// there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceAttributeInput: {
	// The instance attribute.
	//
	// Note: The enaSupport attribute is not supported at this time.
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)
}

// Describes an instance attribute.
#DescribeInstanceAttributeOutput: {
	// The block device mapping of the instance.
	BlockDeviceMappings: [...null | #InstanceBlockDeviceMapping] @go(,[]*InstanceBlockDeviceMapping)

	// If the value is true, you can't terminate the instance through the Amazon
	// EC2 console, CLI, or API; otherwise, you can.
	DisableApiTermination?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Indicates whether the instance is optimized for Amazon EBS I/O.
	EbsOptimized?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Indicates whether enhanced networking with ENA is enabled.
	EnaSupport?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter
	// to true; otherwise, set it to false.
	EnclaveOptions?: null | #EnclaveOptions @go(,*EnclaveOptions)

	// The security groups associated with the instance.
	Groups: [...null | #GroupIdentifier] @go(,[]*GroupIdentifier)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// Indicates whether an instance stops or terminates when you initiate shutdown
	// from the instance (using the operating system command for system shutdown).
	InstanceInitiatedShutdownBehavior?: null | #AttributeValue @go(,*AttributeValue)

	// The instance type.
	InstanceType?: null | #AttributeValue @go(,*AttributeValue)

	// The kernel ID.
	KernelId?: null | #AttributeValue @go(,*AttributeValue)

	// A list of product codes.
	ProductCodes: [...null | #ProductCode] @go(,[]*ProductCode)

	// The RAM disk ID.
	RamdiskId?: null | #AttributeValue @go(,*AttributeValue)

	// The device name of the root device volume (for example, /dev/sda1).
	RootDeviceName?: null | #AttributeValue @go(,*AttributeValue)

	// Enable or disable source/destination checks, which ensure that the instance
	// is either the source or the destination of any traffic that it receives.
	// If the value is true, source/destination checks are enabled; otherwise, they
	// are disabled. The default value is true. You must disable source/destination
	// checks if the instance runs services such as network address translation,
	// routing, or firewalls.
	SourceDestCheck?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Indicates whether enhanced networking with the Intel 82599 Virtual Function
	// interface is enabled.
	SriovNetSupport?: null | #AttributeValue @go(,*AttributeValue)

	// The user data.
	UserData?: null | #AttributeValue @go(,*AttributeValue)
}

#DescribeInstanceCreditSpecificationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * instance-id - The ID of the instance.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The instance IDs.
	//
	// Default: Describes all your instances.
	//
	// Constraints: Maximum 1000 explicitly specified instance IDs.
	InstanceIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. This
	// value can be between 5 and 1000. You cannot specify this parameter and the
	// instance IDs parameter in the same call.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceCreditSpecificationsOutput: {
	// Information about the credit option for CPU usage of an instance.
	InstanceCreditSpecifications: [...null | #InstanceCreditSpecification] @go(,[]*InstanceCreditSpecification)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceEventNotificationAttributesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DescribeInstanceEventNotificationAttributesOutput: {
	// Information about the registered tag keys.
	InstanceTagAttribute?: null | #InstanceTagNotificationAttribute @go(,*InstanceTagNotificationAttribute)
}

// Describe instance event windows by InstanceEventWindow.
#DescribeInstanceEventWindowsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * dedicated-host-id - The event windows associated with the specified
	//    Dedicated Host ID.
	//
	//    * event-window-name - The event windows associated with the specified
	//    names.
	//
	//    * instance-id - The event windows associated with the specified instance
	//    ID.
	//
	//    * instance-tag - The event windows associated with the specified tag and
	//    value.
	//
	//    * instance-tag-key - The event windows associated with the specified tag
	//    key, regardless of the value.
	//
	//    * instance-tag-value - The event windows associated with the specified
	//    tag value, regardless of the key.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the event
	//    window. Use the tag key in the filter name and the tag value as the filter
	//    value. For example, to find all resources that have a tag with the key
	//    Owner and the value CMX, specify tag:Owner for the filter name and CMX
	//    for the filter value.
	//
	//    * tag-key - The key of a tag assigned to the event window. Use this filter
	//    to find all event windows that have a tag with a specific key, regardless
	//    of the tag value.
	//
	//    * tag-value - The value of a tag assigned to the event window. Use this
	//    filter to find all event windows that have a tag with a specific value,
	//    regardless of the tag key.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the event windows.
	InstanceEventWindowIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. This
	// value can be between 20 and 500. You cannot specify this parameter and the
	// event window IDs parameter in the same call.
	MaxResults?: null | int64 @go(,*int64)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceEventWindowsOutput: {
	// Information about the event windows.
	InstanceEventWindows: [...null | #InstanceEventWindow] @go(,[]*InstanceEventWindow)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceStatusInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * availability-zone - The Availability Zone of the instance.
	//
	//    * event.code - The code for the scheduled event (instance-reboot | system-reboot
	//    | system-maintenance | instance-retirement | instance-stop).
	//
	//    * event.description - A description of the event.
	//
	//    * event.instance-event-id - The ID of the event whose date and time you
	//    are modifying.
	//
	//    * event.not-after - The latest end time for the scheduled event (for example,
	//    2014-09-15T17:15:20.000Z).
	//
	//    * event.not-before - The earliest start time for the scheduled event (for
	//    example, 2014-09-15T17:15:20.000Z).
	//
	//    * event.not-before-deadline - The deadline for starting the event (for
	//    example, 2014-09-15T17:15:20.000Z).
	//
	//    * instance-state-code - The code for the instance state, as a 16-bit unsigned
	//    integer. The high byte is used for internal purposes and should be ignored.
	//    The low byte is set based on the state represented. The valid values are
	//    0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping),
	//    and 80 (stopped).
	//
	//    * instance-state-name - The state of the instance (pending | running |
	//    shutting-down | terminated | stopping | stopped).
	//
	//    * instance-status.reachability - Filters on instance status where the
	//    name is reachability (passed | failed | initializing | insufficient-data).
	//
	//    * instance-status.status - The status of the instance (ok | impaired |
	//    initializing | insufficient-data | not-applicable).
	//
	//    * system-status.reachability - Filters on system status where the name
	//    is reachability (passed | failed | initializing | insufficient-data).
	//
	//    * system-status.status - The system status of the instance (ok | impaired
	//    | initializing | insufficient-data | not-applicable).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// When true, includes the health status for all instances. When false, includes
	// the health status for running instances only.
	//
	// Default: false
	IncludeAllInstances?: null | bool @go(,*bool)

	// The instance IDs.
	//
	// Default: Describes all your instances.
	//
	// Constraints: Maximum 100 explicitly specified instance IDs.
	InstanceIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. This
	// value can be between 5 and 1000. You cannot specify this parameter and the
	// instance IDs parameter in the same call.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceStatusOutput: {
	// Information about the status of the instances.
	InstanceStatuses: [...null | #InstanceStatus] @go(,[]*InstanceStatus)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceTypeOfferingsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. Filter names and values are case-sensitive.
	//
	//    * location - This depends on the location type. For example, if the location
	//    type is region (default), the location is the Region code (for example,
	//    us-east-2.)
	//
	//    * instance-type - The instance type. For example, c5.2xlarge.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The location type.
	LocationType?: null | string @go(,*string)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the next
	// token value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceTypeOfferingsOutput: {
	// The instance types offered.
	InstanceTypeOfferings: [...null | #InstanceTypeOffering] @go(,[]*InstanceTypeOffering)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceTypesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. Filter names and values are case-sensitive.
	//
	//    * auto-recovery-supported - Indicates whether auto recovery is supported
	//    (true | false).
	//
	//    * bare-metal - Indicates whether it is a bare metal instance type (true
	//    | false).
	//
	//    * burstable-performance-supported - Indicates whether it is a burstable
	//    performance instance type (true | false).
	//
	//    * current-generation - Indicates whether this instance type is the latest
	//    generation instance type of an instance family (true | false).
	//
	//    * ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps - The baseline
	//    bandwidth performance for an EBS-optimized instance type, in Mbps.
	//
	//    * ebs-info.ebs-optimized-info.baseline-iops - The baseline input/output
	//    storage operations per second for an EBS-optimized instance type.
	//
	//    * ebs-info.ebs-optimized-info.baseline-throughput-in-mbps - The baseline
	//    throughput performance for an EBS-optimized instance type, in MB/s.
	//
	//    * ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps - The maximum
	//    bandwidth performance for an EBS-optimized instance type, in Mbps.
	//
	//    * ebs-info.ebs-optimized-info.maximum-iops - The maximum input/output
	//    storage operations per second for an EBS-optimized instance type.
	//
	//    * ebs-info.ebs-optimized-info.maximum-throughput-in-mbps - The maximum
	//    throughput performance for an EBS-optimized instance type, in MB/s.
	//
	//    * ebs-info.ebs-optimized-support - Indicates whether the instance type
	//    is EBS-optimized (supported | unsupported | default).
	//
	//    * ebs-info.encryption-support - Indicates whether EBS encryption is supported
	//    (supported | unsupported).
	//
	//    * ebs-info.nvme-support - Indicates whether non-volatile memory express
	//    (NVMe) is supported for EBS volumes (required | supported | unsupported).
	//
	//    * free-tier-eligible - Indicates whether the instance type is eligible
	//    to use in the free tier (true | false).
	//
	//    * hibernation-supported - Indicates whether On-Demand hibernation is supported
	//    (true | false).
	//
	//    * hypervisor - The hypervisor (nitro | xen).
	//
	//    * instance-storage-info.disk.count - The number of local disks.
	//
	//    * instance-storage-info.disk.size-in-gb - The storage size of each instance
	//    storage disk, in GB.
	//
	//    * instance-storage-info.disk.type - The storage technology for the local
	//    instance storage disks (hdd | ssd).
	//
	//    * instance-storage-info.nvme-support - Indicates whether non-volatile
	//    memory express (NVMe) is supported for instance store (required | supported)
	//    | unsupported).
	//
	//    * instance-storage-info.total-size-in-gb - The total amount of storage
	//    available from all local instance storage, in GB.
	//
	//    * instance-storage-supported - Indicates whether the instance type has
	//    local instance storage (true | false).
	//
	//    * instance-type - The instance type (for example c5.2xlarge or c5*).
	//
	//    * memory-info.size-in-mib - The memory size.
	//
	//    * network-info.efa-info.maximum-efa-interfaces - The maximum number of
	//    Elastic Fabric Adapters (EFAs) per instance.
	//
	//    * network-info.efa-supported - Indicates whether the instance type supports
	//    Elastic Fabric Adapter (EFA) (true | false).
	//
	//    * network-info.ena-support - Indicates whether Elastic Network Adapter
	//    (ENA) is supported or required (required | supported | unsupported).
	//
	//    * network-info.encryption-in-transit-supported - Indicates whether the
	//    instance type automatically encrypts in-transit traffic between instances.
	//
	//    * network-info.ipv4-addresses-per-interface - The maximum number of private
	//    IPv4 addresses per network interface.
	//
	//    * network-info.ipv6-addresses-per-interface - The maximum number of private
	//    IPv6 addresses per network interface.
	//
	//    * network-info.ipv6-supported - Indicates whether the instance type supports
	//    IPv6 (true | false).
	//
	//    * network-info.maximum-network-interfaces - The maximum number of network
	//    interfaces per instance.
	//
	//    * network-info.network-performance - The network performance (for example,
	//    "25 Gigabit").
	//
	//    * processor-info.supported-architecture - The CPU architecture (arm64
	//    | i386 | x86_64).
	//
	//    * processor-info.sustained-clock-speed-in-ghz - The CPU clock speed, in
	//    GHz.
	//
	//    * supported-boot-mode - The boot mode (legacy-bios | uefi).
	//
	//    * supported-root-device-type - The root device type (ebs | instance-store).
	//
	//    * supported-usage-class - The usage class (on-demand | spot).
	//
	//    * supported-virtualization-type - The virtualization type (hvm | paravirtual).
	//
	//    * vcpu-info.default-cores - The default number of cores for the instance
	//    type.
	//
	//    * vcpu-info.default-threads-per-core - The default number of threads per
	//    core for the instance type.
	//
	//    * vcpu-info.default-vcpus - The default number of vCPUs for the instance
	//    type.
	//
	//    * vcpu-info.valid-cores - The number of cores that can be configured for
	//    the instance type.
	//
	//    * vcpu-info.valid-threads-per-core - The number of threads per core that
	//    can be configured for the instance type. For example, "1" or "1,2".
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The instance types. For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide.
	InstanceTypes: [...null | string] @go(,[]*string)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the next
	// token value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeInstanceTypesOutput: {
	// The instance type. For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide.
	InstanceTypes: [...null | #InstanceTypeInfo] @go(,[]*InstanceTypeInfo)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * affinity - The affinity setting for an instance running on a Dedicated
	//    Host (default | host).
	//
	//    * architecture - The instance architecture (i386 | x86_64 | arm64).
	//
	//    * availability-zone - The Availability Zone of the instance.
	//
	//    * block-device-mapping.attach-time - The attach time for an EBS volume
	//    mapped to the instance, for example, 2010-09-15T17:15:20.000Z.
	//
	//    * block-device-mapping.delete-on-termination - A Boolean that indicates
	//    whether the EBS volume is deleted on instance termination.
	//
	//    * block-device-mapping.device-name - The device name specified in the
	//    block device mapping (for example, /dev/sdh or xvdh).
	//
	//    * block-device-mapping.status - The status for the EBS volume (attaching
	//    | attached | detaching | detached).
	//
	//    * block-device-mapping.volume-id - The volume ID of the EBS volume.
	//
	//    * client-token - The idempotency token you provided when you launched
	//    the instance.
	//
	//    * dns-name - The public DNS name of the instance.
	//
	//    * group-id - The ID of the security group for the instance. EC2-Classic
	//    only.
	//
	//    * group-name - The name of the security group for the instance. EC2-Classic
	//    only.
	//
	//    * hibernation-options.configured - A Boolean that indicates whether the
	//    instance is enabled for hibernation. A value of true means that the instance
	//    is enabled for hibernation.
	//
	//    * host-id - The ID of the Dedicated Host on which the instance is running,
	//    if applicable.
	//
	//    * hypervisor - The hypervisor type of the instance (ovm | xen). The value
	//    xen is used for both Xen and Nitro hypervisors.
	//
	//    * iam-instance-profile.arn - The instance profile associated with the
	//    instance. Specified as an ARN.
	//
	//    * image-id - The ID of the image used to launch the instance.
	//
	//    * instance-id - The ID of the instance.
	//
	//    * instance-lifecycle - Indicates whether this is a Spot Instance or a
	//    Scheduled Instance (spot | scheduled).
	//
	//    * instance-state-code - The state of the instance, as a 16-bit unsigned
	//    integer. The high byte is used for internal purposes and should be ignored.
	//    The low byte is set based on the state represented. The valid values are:
	//    0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping),
	//    and 80 (stopped).
	//
	//    * instance-state-name - The state of the instance (pending | running |
	//    shutting-down | terminated | stopping | stopped).
	//
	//    * instance-type - The type of instance (for example, t2.micro).
	//
	//    * instance.group-id - The ID of the security group for the instance.
	//
	//    * instance.group-name - The name of the security group for the instance.
	//
	//    * ip-address - The public IPv4 address of the instance.
	//
	//    * kernel-id - The kernel ID.
	//
	//    * key-name - The name of the key pair used when the instance was launched.
	//
	//    * launch-index - When launching multiple instances, this is the index
	//    for the instance in the launch group (for example, 0, 1, 2, and so on).
	//
	//    * launch-time - The time when the instance was launched.
	//
	//    * metadata-options.http-tokens - The metadata request authorization state
	//    (optional | required)
	//
	//    * metadata-options.http-put-response-hop-limit - The http metadata request
	//    put response hop limit (integer, possible values 1 to 64)
	//
	//    * metadata-options.http-endpoint - Enable or disable metadata access on
	//    http endpoint (enabled | disabled)
	//
	//    * monitoring-state - Indicates whether detailed monitoring is enabled
	//    (disabled | enabled).
	//
	//    * network-interface.addresses.private-ip-address - The private IPv4 address
	//    associated with the network interface.
	//
	//    * network-interface.addresses.primary - Specifies whether the IPv4 address
	//    of the network interface is the primary private IPv4 address.
	//
	//    * network-interface.addresses.association.public-ip - The ID of the association
	//    of an Elastic IP address (IPv4) with a network interface.
	//
	//    * network-interface.addresses.association.ip-owner-id - The owner ID of
	//    the private IPv4 address associated with the network interface.
	//
	//    * network-interface.association.public-ip - The address of the Elastic
	//    IP address (IPv4) bound to the network interface.
	//
	//    * network-interface.association.ip-owner-id - The owner of the Elastic
	//    IP address (IPv4) associated with the network interface.
	//
	//    * network-interface.association.allocation-id - The allocation ID returned
	//    when you allocated the Elastic IP address (IPv4) for your network interface.
	//
	//    * network-interface.association.association-id - The association ID returned
	//    when the network interface was associated with an IPv4 address.
	//
	//    * network-interface.attachment.attachment-id - The ID of the interface
	//    attachment.
	//
	//    * network-interface.attachment.instance-id - The ID of the instance to
	//    which the network interface is attached.
	//
	//    * network-interface.attachment.instance-owner-id - The owner ID of the
	//    instance to which the network interface is attached.
	//
	//    * network-interface.attachment.device-index - The device index to which
	//    the network interface is attached.
	//
	//    * network-interface.attachment.status - The status of the attachment (attaching
	//    | attached | detaching | detached).
	//
	//    * network-interface.attachment.attach-time - The time that the network
	//    interface was attached to an instance.
	//
	//    * network-interface.attachment.delete-on-termination - Specifies whether
	//    the attachment is deleted when an instance is terminated.
	//
	//    * network-interface.availability-zone - The Availability Zone for the
	//    network interface.
	//
	//    * network-interface.description - The description of the network interface.
	//
	//    * network-interface.group-id - The ID of a security group associated with
	//    the network interface.
	//
	//    * network-interface.group-name - The name of a security group associated
	//    with the network interface.
	//
	//    * network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated
	//    with the network interface.
	//
	//    * network-interface.mac-address - The MAC address of the network interface.
	//
	//    * network-interface.network-interface-id - The ID of the network interface.
	//
	//    * network-interface.owner-id - The ID of the owner of the network interface.
	//
	//    * network-interface.private-dns-name - The private DNS name of the network
	//    interface.
	//
	//    * network-interface.requester-id - The requester ID for the network interface.
	//
	//    * network-interface.requester-managed - Indicates whether the network
	//    interface is being managed by Amazon Web Services.
	//
	//    * network-interface.status - The status of the network interface (available)
	//    | in-use).
	//
	//    * network-interface.source-dest-check - Whether the network interface
	//    performs source/destination checking. A value of true means that checking
	//    is enabled, and false means that checking is disabled. The value must
	//    be false for the network interface to perform network address translation
	//    (NAT) in your VPC.
	//
	//    * network-interface.subnet-id - The ID of the subnet for the network interface.
	//
	//    * network-interface.vpc-id - The ID of the VPC for the network interface.
	//
	//    * outpost-arn - The Amazon Resource Name (ARN) of the Outpost.
	//
	//    * owner-id - The Amazon Web Services account ID of the instance owner.
	//
	//    * placement-group-name - The name of the placement group for the instance.
	//
	//    * placement-partition-number - The partition in which the instance is
	//    located.
	//
	//    * platform - The platform. To list only Windows instances, use windows.
	//
	//    * private-dns-name - The private IPv4 DNS name of the instance.
	//
	//    * private-ip-address - The private IPv4 address of the instance.
	//
	//    * product-code - The product code associated with the AMI used to launch
	//    the instance.
	//
	//    * product-code.type - The type of product code (devpay | marketplace).
	//
	//    * ramdisk-id - The RAM disk ID.
	//
	//    * reason - The reason for the current state of the instance (for example,
	//    shows "User Initiated [date]" when you stop or terminate the instance).
	//    Similar to the state-reason-code filter.
	//
	//    * requester-id - The ID of the entity that launched the instance on your
	//    behalf (for example, Amazon Web Services Management Console, Auto Scaling,
	//    and so on).
	//
	//    * reservation-id - The ID of the instance's reservation. A reservation
	//    ID is created any time you launch an instance. A reservation ID has a
	//    one-to-one relationship with an instance launch request, but can be associated
	//    with more than one instance if you launch multiple instances using the
	//    same launch request. For example, if you launch one instance, you get
	//    one reservation ID. If you launch ten instances using the same launch
	//    request, you also get one reservation ID.
	//
	//    * root-device-name - The device name of the root device volume (for example,
	//    /dev/sda1).
	//
	//    * root-device-type - The type of the root device volume (ebs | instance-store).
	//
	//    * source-dest-check - Indicates whether the instance performs source/destination
	//    checking. A value of true means that checking is enabled, and false means
	//    that checking is disabled. The value must be false for the instance to
	//    perform network address translation (NAT) in your VPC.
	//
	//    * spot-instance-request-id - The ID of the Spot Instance request.
	//
	//    * state-reason-code - The reason code for the state change.
	//
	//    * state-reason-message - A message that describes the state change.
	//
	//    * subnet-id - The ID of the subnet for the instance.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources that have a tag with a specific key, regardless
	//    of the tag value.
	//
	//    * tenancy - The tenancy of an instance (dedicated | default | host).
	//
	//    * virtualization-type - The virtualization type of the instance (paravirtual
	//    | hvm).
	//
	//    * vpc-id - The ID of the VPC that the instance is running in.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The instance IDs.
	//
	// Default: Describes all your instances.
	InstanceIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. This
	// value can be between 5 and 1000. You cannot specify this parameter and the
	// instance IDs parameter in the same call.
	MaxResults?: null | int64 @go(,*int64)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeInstancesOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the reservations.
	Reservations: [...null | #Reservation] @go(,[]*Reservation)
}

#DescribeInternetGatewaysInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * attachment.state - The current state of the attachment between the gateway
	//    and the VPC (available). Present only if a VPC is attached.
	//
	//    * attachment.vpc-id - The ID of an attached VPC.
	//
	//    * internet-gateway-id - The ID of the Internet gateway.
	//
	//    * owner-id - The ID of the Amazon Web Services account that owns the internet
	//    gateway.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// One or more internet gateway IDs.
	//
	// Default: Describes all your internet gateways.
	InternetGatewayIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeInternetGatewaysOutput: {
	// Information about one or more internet gateways.
	InternetGateways: [...null | #InternetGateway] @go(,[]*InternetGateway)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeIpv6PoolsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the IPv6 address pools.
	PoolIds: [...null | string] @go(,[]*string)
}

#DescribeIpv6PoolsOutput: {
	// Information about the IPv6 address pools.
	Ipv6Pools: [...null | #Ipv6Pool] @go(,[]*Ipv6Pool)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeKeyPairsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * key-pair-id - The ID of the key pair.
	//
	//    * fingerprint - The fingerprint of the key pair.
	//
	//    * key-name - The name of the key pair.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The key pair names.
	//
	// Default: Describes all of your key pairs.
	KeyNames: [...null | string] @go(,[]*string)

	// The IDs of the key pairs.
	KeyPairIds: [...null | string] @go(,[]*string)
}

#DescribeKeyPairsOutput: {
	// Information about the key pairs.
	KeyPairs: [...null | #KeyPairInfo] @go(,[]*KeyPairInfo)
}

#DescribeLaunchTemplateVersionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * create-time - The time the launch template version was created.
	//
	//    * ebs-optimized - A boolean that indicates whether the instance is optimized
	//    for Amazon EBS I/O.
	//
	//    * iam-instance-profile - The ARN of the IAM instance profile.
	//
	//    * image-id - The ID of the AMI.
	//
	//    * instance-type - The instance type.
	//
	//    * is-default-version - A boolean that indicates whether the launch template
	//    version is the default version.
	//
	//    * kernel-id - The kernel ID.
	//
	//    * ram-disk-id - The RAM disk ID.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The ID of the launch template. To describe one or more versions of a specified
	// launch template, you must specify either the launch template ID or the launch
	// template name in the request. To describe all the latest or default launch
	// template versions in your account, you must omit this parameter.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template. To describe one or more versions of a specified
	// launch template, you must specify either the launch template ID or the launch
	// template name in the request. To describe all the latest or default launch
	// template versions in your account, you must omit this parameter.
	LaunchTemplateName?: null | string @go(,*string)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. This
	// value can be between 1 and 200.
	MaxResults?: null | int64 @go(,*int64)

	// The version number up to which to describe launch template versions.
	MaxVersion?: null | string @go(,*string)

	// The version number after which to describe launch template versions.
	MinVersion?: null | string @go(,*string)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more versions of the launch template. Valid values depend on whether
	// you are describing a specified launch template (by ID or name) or all launch
	// templates in your account.
	//
	// To describe one or more versions of a specified launch template, valid values
	// are $Latest, $Default, and numbers.
	//
	// To describe all launch templates in your account that are defined as the
	// latest version, the valid value is $Latest. To describe all launch templates
	// in your account that are defined as the default version, the valid value
	// is $Default. You can specify $Latest and $Default in the same call. You cannot
	// specify numbers.
	Versions: [...null | string] @go(,[]*string)
}

#DescribeLaunchTemplateVersionsOutput: {
	// Information about the launch template versions.
	LaunchTemplateVersions: [...null | #LaunchTemplateVersion] @go(,[]*LaunchTemplateVersion)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeLaunchTemplatesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * create-time - The time the launch template was created.
	//
	//    * launch-template-name - The name of the launch template.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// One or more launch template IDs.
	LaunchTemplateIds: [...null | string] @go(,[]*string)

	// One or more launch template names.
	LaunchTemplateNames: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. This
	// value can be between 1 and 200.
	MaxResults?: null | int64 @go(,*int64)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeLaunchTemplatesOutput: {
	// Information about the launch templates.
	LaunchTemplates: [...null | #LaunchTemplate] @go(,[]*LaunchTemplate)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * local-gateway-id - The ID of a local gateway.
	//
	//    * local-gateway-route-table-id - The ID of the local gateway route table.
	//
	//    * local-gateway-route-table-virtual-interface-group-association-id - The
	//    ID of the association.
	//
	//    * local-gateway-route-table-virtual-interface-group-id - The ID of the
	//    virtual interface group.
	//
	//    * state - The state of the association.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the associations.
	LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput: {
	// Information about the associations.
	LocalGatewayRouteTableVirtualInterfaceGroupAssociations: [...null | #LocalGatewayRouteTableVirtualInterfaceGroupAssociation] @go(,[]*LocalGatewayRouteTableVirtualInterfaceGroupAssociation)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayRouteTableVpcAssociationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * local-gateway-id - The ID of a local gateway.
	//
	//    * local-gateway-route-table-id - The ID of the local gateway route table.
	//
	//    * local-gateway-route-table-vpc-association-id - The ID of the association.
	//
	//    * state - The state of the association.
	//
	//    * vpc-id - The ID of the VPC.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the associations.
	LocalGatewayRouteTableVpcAssociationIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayRouteTableVpcAssociationsOutput: {
	// Information about the associations.
	LocalGatewayRouteTableVpcAssociations: [...null | #LocalGatewayRouteTableVpcAssociation] @go(,[]*LocalGatewayRouteTableVpcAssociation)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayRouteTablesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * local-gateway-id - The ID of a local gateway.
	//
	//    * local-gateway-route-table-id - The ID of a local gateway route table.
	//
	//    * outpost-arn - The Amazon Resource Name (ARN) of the Outpost.
	//
	//    * state - The state of the local gateway route table.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the local gateway route tables.
	LocalGatewayRouteTableIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayRouteTablesOutput: {
	// Information about the local gateway route tables.
	LocalGatewayRouteTables: [...null | #LocalGatewayRouteTable] @go(,[]*LocalGatewayRouteTable)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayVirtualInterfaceGroupsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * local-gateway-id - The ID of a local gateway.
	//
	//    * local-gateway-virtual-interface-id - The ID of the virtual interface.
	//
	//    * local-gateway-virtual-interface-group-id - The ID of the virtual interface
	//    group.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the virtual interface groups.
	LocalGatewayVirtualInterfaceGroupIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayVirtualInterfaceGroupsOutput: {
	// The virtual interface groups.
	LocalGatewayVirtualInterfaceGroups: [...null | #LocalGatewayVirtualInterfaceGroup] @go(,[]*LocalGatewayVirtualInterfaceGroup)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayVirtualInterfacesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the virtual interfaces.
	LocalGatewayVirtualInterfaceIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewayVirtualInterfacesOutput: {
	// Information about the virtual interfaces.
	LocalGatewayVirtualInterfaces: [...null | #LocalGatewayVirtualInterface] @go(,[]*LocalGatewayVirtualInterface)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewaysInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// One or more filters.
	//
	//    * local-gateway-id - The ID of a local gateway.
	//
	//    * local-gateway-route-table-id - The ID of the local gateway route table.
	//
	//    * local-gateway-route-table-virtual-interface-group-association-id - The
	//    ID of the association.
	//
	//    * local-gateway-route-table-virtual-interface-group-id - The ID of the
	//    virtual interface group.
	//
	//    * outpost-arn - The Amazon Resource Name (ARN) of the Outpost.
	//
	//    * state - The state of the association.
	LocalGatewayIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeLocalGatewaysOutput: {
	// Information about the local gateways.
	LocalGateways: [...null | #LocalGateway] @go(,[]*LocalGateway)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeManagedPrefixListsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * owner-id - The ID of the prefix list owner.
	//
	//    * prefix-list-id - The ID of the prefix list.
	//
	//    * prefix-list-name - The name of the prefix list.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more prefix list IDs.
	PrefixListIds: [...null | string] @go(,[]*string)
}

#DescribeManagedPrefixListsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the prefix lists.
	PrefixLists: [...null | #ManagedPrefixList] @go(,[]*ManagedPrefixList)
}

#DescribeMovingAddressesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * moving-status - The status of the Elastic IP address (MovingToVpc |
	//    RestoringToClassic).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results of the initial request can be seen by sending another
	// request with the returned NextToken value. This value can be between 5 and
	// 1000; if MaxResults is given a value outside of this range, an error is returned.
	//
	// Default: If no value is provided, the default is 1000.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more Elastic IP addresses.
	PublicIps: [...null | string] @go(,[]*string)
}

#DescribeMovingAddressesOutput: {
	// The status for each Elastic IP address.
	MovingAddressStatuses: [...null | #MovingAddressStatus] @go(,[]*MovingAddressStatus)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeNatGatewaysInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * nat-gateway-id - The ID of the NAT gateway.
	//
	//    * state - The state of the NAT gateway (pending | failed | available |
	//    deleting | deleted).
	//
	//    * subnet-id - The ID of the subnet in which the NAT gateway resides.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-id - The ID of the VPC in which the NAT gateway resides.
	Filter: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// One or more NAT gateway IDs.
	NatGatewayIds: [...null | string] @go(,[]*string)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeNatGatewaysOutput: {
	// Information about the NAT gateways.
	NatGateways: [...null | #NatGateway] @go(,[]*NatGateway)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeNetworkAclsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * association.association-id - The ID of an association ID for the ACL.
	//
	//    * association.network-acl-id - The ID of the network ACL involved in the
	//    association.
	//
	//    * association.subnet-id - The ID of the subnet involved in the association.
	//
	//    * default - Indicates whether the ACL is the default network ACL for the
	//    VPC.
	//
	//    * entry.cidr - The IPv4 CIDR range specified in the entry.
	//
	//    * entry.icmp.code - The ICMP code specified in the entry, if any.
	//
	//    * entry.icmp.type - The ICMP type specified in the entry, if any.
	//
	//    * entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.
	//
	//    * entry.port-range.from - The start of the port range specified in the
	//    entry.
	//
	//    * entry.port-range.to - The end of the port range specified in the entry.
	//
	//    * entry.protocol - The protocol specified in the entry (tcp | udp | icmp
	//    or a protocol number).
	//
	//    * entry.rule-action - Allows or denies the matching traffic (allow | deny).
	//
	//    * entry.rule-number - The number of an entry (in other words, rule) in
	//    the set of ACL entries.
	//
	//    * network-acl-id - The ID of the network ACL.
	//
	//    * owner-id - The ID of the Amazon Web Services account that owns the network
	//    ACL.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-id - The ID of the VPC for the network ACL.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// One or more network ACL IDs.
	//
	// Default: Describes all your network ACLs.
	NetworkAclIds: [...null | string] @go(,[]*string)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeNetworkAclsOutput: {
	// Information about one or more network ACLs.
	NetworkAcls: [...null | #NetworkAcl] @go(,[]*NetworkAcl)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeNetworkInsightsAnalysesInput: {
	// The time when the network insights analyses ended.
	AnalysisEndTime?: null | time.Time @go(,*time.Time)

	// The time when the network insights analyses started.
	AnalysisStartTime?: null | time.Time @go(,*time.Time)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters. The following are possible values:
	//
	//    * PathFound - A Boolean value that indicates whether a feasible path is
	//    found.
	//
	//    * Status - The status of the analysis (running | succeeded | failed).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The ID of the network insights analyses. You must specify either analysis
	// IDs or a path ID.
	NetworkInsightsAnalysisIds: [...null | string] @go(,[]*string)

	// The ID of the path. You must specify either a path ID or analysis IDs.
	NetworkInsightsPathId?: null | string @go(,*string)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeNetworkInsightsAnalysesOutput: {
	// Information about the network insights analyses.
	NetworkInsightsAnalyses: [...null | #NetworkInsightsAnalysis] @go(,[]*NetworkInsightsAnalysis)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeNetworkInsightsPathsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters. The following are possible values:
	//
	//    * Destination - The ID of the resource.
	//
	//    * DestinationPort - The destination port.
	//
	//    * Name - The path name.
	//
	//    * Protocol - The protocol.
	//
	//    * Source - The ID of the resource.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The IDs of the paths.
	NetworkInsightsPathIds: [...null | string] @go(,[]*string)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeNetworkInsightsPathsOutput: {
	// Information about the paths.
	NetworkInsightsPaths: [...null | #NetworkInsightsPath] @go(,[]*NetworkInsightsPath)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

// Contains the parameters for DescribeNetworkInterfaceAttribute.
#DescribeNetworkInterfaceAttributeInput: {
	// The attribute of the network interface. This parameter is required.
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)
}

// Contains the output of DescribeNetworkInterfaceAttribute.
#DescribeNetworkInterfaceAttributeOutput: {
	// The attachment (if any) of the network interface.
	Attachment?: null | #NetworkInterfaceAttachment @go(,*NetworkInterfaceAttachment)

	// The description of the network interface.
	Description?: null | #AttributeValue @go(,*AttributeValue)

	// The security groups associated with the network interface.
	Groups: [...null | #GroupIdentifier] @go(,[]*GroupIdentifier)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// Indicates whether source/destination checking is enabled.
	SourceDestCheck?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)
}

// Contains the parameters for DescribeNetworkInterfacePermissions.
#DescribeNetworkInterfacePermissionsInput: {
	// One or more filters.
	//
	//    * network-interface-permission.network-interface-permission-id - The ID
	//    of the permission.
	//
	//    * network-interface-permission.network-interface-id - The ID of the network
	//    interface.
	//
	//    * network-interface-permission.aws-account-id - The Amazon Web Services
	//    account ID.
	//
	//    * network-interface-permission.aws-service - The Amazon Web Service.
	//
	//    * network-interface-permission.permission - The type of permission (INSTANCE-ATTACH
	//    | EIP-ASSOCIATE).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. If
	// this parameter is not specified, up to 50 results are returned by default.
	MaxResults?: null | int64 @go(,*int64)

	// One or more network interface permission IDs.
	NetworkInterfacePermissionIds: [...null | string] @go(,[]*string)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)
}

// Contains the output for DescribeNetworkInterfacePermissions.
#DescribeNetworkInterfacePermissionsOutput: {
	// The network interface permissions.
	NetworkInterfacePermissions: [...null | #NetworkInterfacePermission] @go(,[]*NetworkInterfacePermission)

	// The token to use to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

// Contains the parameters for DescribeNetworkInterfaces.
#DescribeNetworkInterfacesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * addresses.private-ip-address - The private IPv4 addresses associated
	//    with the network interface.
	//
	//    * addresses.primary - Whether the private IPv4 address is the primary
	//    IP address associated with the network interface.
	//
	//    * addresses.association.public-ip - The association ID returned when the
	//    network interface was associated with the Elastic IP address (IPv4).
	//
	//    * addresses.association.owner-id - The owner ID of the addresses associated
	//    with the network interface.
	//
	//    * association.association-id - The association ID returned when the network
	//    interface was associated with an IPv4 address.
	//
	//    * association.allocation-id - The allocation ID returned when you allocated
	//    the Elastic IP address (IPv4) for your network interface.
	//
	//    * association.ip-owner-id - The owner of the Elastic IP address (IPv4)
	//    associated with the network interface.
	//
	//    * association.public-ip - The address of the Elastic IP address (IPv4)
	//    bound to the network interface.
	//
	//    * association.public-dns-name - The public DNS name for the network interface
	//    (IPv4).
	//
	//    * attachment.attachment-id - The ID of the interface attachment.
	//
	//    * attachment.attach-time - The time that the network interface was attached
	//    to an instance.
	//
	//    * attachment.delete-on-termination - Indicates whether the attachment
	//    is deleted when an instance is terminated.
	//
	//    * attachment.device-index - The device index to which the network interface
	//    is attached.
	//
	//    * attachment.instance-id - The ID of the instance to which the network
	//    interface is attached.
	//
	//    * attachment.instance-owner-id - The owner ID of the instance to which
	//    the network interface is attached.
	//
	//    * attachment.status - The status of the attachment (attaching | attached
	//    | detaching | detached).
	//
	//    * availability-zone - The Availability Zone of the network interface.
	//
	//    * description - The description of the network interface.
	//
	//    * group-id - The ID of a security group associated with the network interface.
	//
	//    * group-name - The name of a security group associated with the network
	//    interface.
	//
	//    * ipv6-addresses.ipv6-address - An IPv6 address associated with the network
	//    interface.
	//
	//    * mac-address - The MAC address of the network interface.
	//
	//    * network-interface-id - The ID of the network interface.
	//
	//    * owner-id - The Amazon Web Services account ID of the network interface
	//    owner.
	//
	//    * private-ip-address - The private IPv4 address or addresses of the network
	//    interface.
	//
	//    * private-dns-name - The private DNS name of the network interface (IPv4).
	//
	//    * requester-id - The alias or Amazon Web Services account ID of the principal
	//    or service that created the network interface.
	//
	//    * requester-managed - Indicates whether the network interface is being
	//    managed by an Amazon Web Service (for example, Amazon Web Services Management
	//    Console, Auto Scaling, and so on).
	//
	//    * source-dest-check - Indicates whether the network interface performs
	//    source/destination checking. A value of true means checking is enabled,
	//    and false means checking is disabled. The value must be false for the
	//    network interface to perform network address translation (NAT) in your
	//    VPC.
	//
	//    * status - The status of the network interface. If the network interface
	//    is not attached to an instance, the status is available; if a network
	//    interface is attached to an instance the status is in-use.
	//
	//    * subnet-id - The ID of the subnet for the network interface.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-id - The ID of the VPC for the network interface.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of items to return for this request. The request returns
	// a token that you can specify in a subsequent call to get the next set of
	// results. You cannot specify this parameter and the network interface IDs
	// parameter in the same request.
	MaxResults?: null | int64 @go(,*int64)

	// One or more network interface IDs.
	//
	// Default: Describes all your network interfaces.
	NetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

// Contains the output of DescribeNetworkInterfaces.
#DescribeNetworkInterfacesOutput: {
	// Information about one or more network interfaces.
	NetworkInterfaces: [...null | #NetworkInterface] @go(,[]*NetworkInterface)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribePlacementGroupsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * group-name - The name of the placement group.
	//
	//    * state - The state of the placement group (pending | available | deleting
	//    | deleted).
	//
	//    * strategy - The strategy of the placement group (cluster | spread | partition).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources that have a tag with a specific key, regardless
	//    of the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the placement groups.
	GroupIds: [...null | string] @go(,[]*string)

	// The names of the placement groups.
	//
	// Default: Describes all your placement groups, or only those otherwise specified.
	GroupNames: [...null | string] @go(,[]*string)
}

#DescribePlacementGroupsOutput: {
	// Information about the placement groups.
	PlacementGroups: [...null | #PlacementGroup] @go(,[]*PlacementGroup)
}

#DescribePrefixListsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * prefix-list-id: The ID of a prefix list.
	//
	//    * prefix-list-name: The name of a prefix list.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more prefix list IDs.
	PrefixListIds: [...null | string] @go(,[]*string)
}

#DescribePrefixListsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// All available prefix lists.
	PrefixLists: [...null | #PrefixList] @go(,[]*PrefixList)
}

#DescribePrincipalIdFormatInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)

	// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options
	// | elastic-ip-allocation | elastic-ip-association | export-task | flow-log
	// | image | import-task | instance | internet-gateway | network-acl | network-acl-association
	// | network-interface | network-interface-attachment | prefix-list | reservation
	// | route-table | route-table-association | security-group | snapshot | subnet
	// | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association
	// | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
	Resources: [...null | string] @go(,[]*string)
}

#DescribePrincipalIdFormatOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the ID format settings for the ARN.
	Principals: [...null | #PrincipalIdFormat] @go(,[]*PrincipalIdFormat)
}

#DescribePublicIpv4PoolsInput: {
	// One or more filters.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the address pools.
	PoolIds: [...null | string] @go(,[]*string)
}

#DescribePublicIpv4PoolsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the address pools.
	PublicIpv4Pools: [...null | #PublicIpv4Pool] @go(,[]*PublicIpv4Pool)
}

#DescribeRegionsInput: {
	// Indicates whether to display all Regions, including Regions that are disabled
	// for your account.
	AllRegions?: null | bool @go(,*bool)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * endpoint - The endpoint of the Region (for example, ec2.us-east-1.amazonaws.com).
	//
	//    * opt-in-status - The opt-in status of the Region (opt-in-not-required
	//    | opted-in | not-opted-in).
	//
	//    * region-name - The name of the Region (for example, us-east-1).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The names of the Regions. You can specify any Regions, whether they are enabled
	// and disabled for your account.
	RegionNames: [...null | string] @go(,[]*string)
}

#DescribeRegionsOutput: {
	// Information about the Regions.
	Regions: [...null | #Region] @go(,[]*Region)
}

#DescribeReplaceRootVolumeTasksInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Filter to use:
	//
	//    * instance-id - The ID of the instance for which the root volume replacement
	//    task was created.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the root volume replacement task to view.
	ReplaceRootVolumeTaskIds: [...null | string] @go(,[]*string)
}

#DescribeReplaceRootVolumeTasksOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the root volume replacement task.
	ReplaceRootVolumeTasks: [...null | #ReplaceRootVolumeTask] @go(,[]*ReplaceRootVolumeTask)
}

// Contains the parameters for DescribeReservedInstances.
#DescribeReservedInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * availability-zone - The Availability Zone where the Reserved Instance
	//    can be used.
	//
	//    * duration - The duration of the Reserved Instance (one year or three
	//    years), in seconds (31536000 | 94608000).
	//
	//    * end - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).
	//
	//    * fixed-price - The purchase price of the Reserved Instance (for example,
	//    9800.0).
	//
	//    * instance-type - The instance type that is covered by the reservation.
	//
	//    * scope - The scope of the Reserved Instance (Region or Availability Zone).
	//
	//    * product-description - The Reserved Instance product platform description.
	//    Instances that include (Amazon VPC) in the product platform description
	//    will only be displayed to EC2-Classic account holders and are for use
	//    with Amazon VPC (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE
	//    Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux
	//    (Amazon VPC) | Red Hat Enterprise Linux with HA (Amazon VPC) | Windows
	//    | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with
	//    SQL Server Standard (Amazon VPC) | Windows with SQL Server Web | Windows
	//    with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise
	//    | Windows with SQL Server Enterprise (Amazon VPC)).
	//
	//    * reserved-instances-id - The ID of the Reserved Instance.
	//
	//    * start - The time at which the Reserved Instance purchase request was
	//    placed (for example, 2014-08-07T11:54:42.000Z).
	//
	//    * state - The state of the Reserved Instance (payment-pending | active
	//    | payment-failed | retired).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * usage-price - The usage price of the Reserved Instance, per hour (for
	//    example, 0.84).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// Describes whether the Reserved Instance is Standard or Convertible.
	OfferingClass?: null | string @go(,*string)

	// The Reserved Instance offering type. If you are using tools that predate
	// the 2011-11-01 API version, you only have access to the Medium Utilization
	// Reserved Instance offering type.
	OfferingType?: null | string @go(,*string)

	// One or more Reserved Instance IDs.
	//
	// Default: Describes all your Reserved Instances, or only those otherwise specified.
	ReservedInstancesIds: [...null | string] @go(,[]*string)
}

// Contains the parameters for DescribeReservedInstancesListings.
#DescribeReservedInstancesListingsInput: {
	// One or more filters.
	//
	//    * reserved-instances-id - The ID of the Reserved Instances.
	//
	//    * reserved-instances-listing-id - The ID of the Reserved Instances listing.
	//
	//    * status - The status of the Reserved Instance listing (pending | active
	//    | cancelled | closed).
	//
	//    * status-message - The reason for the status.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// One or more Reserved Instance IDs.
	ReservedInstancesId?: null | string @go(,*string)

	// One or more Reserved Instance listing IDs.
	ReservedInstancesListingId?: null | string @go(,*string)
}

// Contains the output of DescribeReservedInstancesListings.
#DescribeReservedInstancesListingsOutput: {
	// Information about the Reserved Instance listing.
	ReservedInstancesListings: [...null | #ReservedInstancesListing] @go(,[]*ReservedInstancesListing)
}

// Contains the parameters for DescribeReservedInstancesModifications.
#DescribeReservedInstancesModificationsInput: {
	// One or more filters.
	//
	//    * client-token - The idempotency token for the modification request.
	//
	//    * create-date - The time when the modification request was created.
	//
	//    * effective-date - The time when the modification becomes effective.
	//
	//    * modification-result.reserved-instances-id - The ID for the Reserved
	//    Instances created as part of the modification request. This ID is only
	//    available when the status of the modification is fulfilled.
	//
	//    * modification-result.target-configuration.availability-zone - The Availability
	//    Zone for the new Reserved Instances.
	//
	//    * modification-result.target-configuration.instance-count - The number
	//    of new Reserved Instances.
	//
	//    * modification-result.target-configuration.instance-type - The instance
	//    type of the new Reserved Instances.
	//
	//    * modification-result.target-configuration.platform - The network platform
	//    of the new Reserved Instances (EC2-Classic | EC2-VPC).
	//
	//    * reserved-instances-id - The ID of the Reserved Instances modified.
	//
	//    * reserved-instances-modification-id - The ID of the modification request.
	//
	//    * status - The status of the Reserved Instances modification request (processing
	//    | fulfilled | failed).
	//
	//    * status-message - The reason for the status.
	//
	//    * update-date - The time when the modification request was last updated.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)

	// IDs for the submitted modification request.
	ReservedInstancesModificationIds: [...null | string] @go(,[]*string)
}

// Contains the output of DescribeReservedInstancesModifications.
#DescribeReservedInstancesModificationsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The Reserved Instance modification information.
	ReservedInstancesModifications: [...null | #ReservedInstancesModification] @go(,[]*ReservedInstancesModification)
}

// Contains the parameters for DescribeReservedInstancesOfferings.
#DescribeReservedInstancesOfferingsInput: {
	// The Availability Zone in which the Reserved Instance can be used.
	AvailabilityZone?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * availability-zone - The Availability Zone where the Reserved Instance
	//    can be used.
	//
	//    * duration - The duration of the Reserved Instance (for example, one year
	//    or three years), in seconds (31536000 | 94608000).
	//
	//    * fixed-price - The purchase price of the Reserved Instance (for example,
	//    9800.0).
	//
	//    * instance-type - The instance type that is covered by the reservation.
	//
	//    * marketplace - Set to true to show only Reserved Instance Marketplace
	//    offerings. When this filter is not used, which is the default behavior,
	//    all offerings from both Amazon Web Services and the Reserved Instance
	//    Marketplace are listed.
	//
	//    * product-description - The Reserved Instance product platform description.
	//    Instances that include (Amazon VPC) in the product platform description
	//    will only be displayed to EC2-Classic account holders and are for use
	//    with Amazon VPC. (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux |
	//    SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise
	//    Linux (Amazon VPC) | Red Hat Enterprise Linux with HA (Amazon VPC) | Windows
	//    | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with
	//    SQL Server Standard (Amazon VPC) | Windows with SQL Server Web | Windows
	//    with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise
	//    | Windows with SQL Server Enterprise (Amazon VPC))
	//
	//    * reserved-instances-offering-id - The Reserved Instances offering ID.
	//
	//    * scope - The scope of the Reserved Instance (Availability Zone or Region).
	//
	//    * usage-price - The usage price of the Reserved Instance, per hour (for
	//    example, 0.84).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// Include Reserved Instance Marketplace offerings in the response.
	IncludeMarketplace?: null | bool @go(,*bool)

	// The tenancy of the instances covered by the reservation. A Reserved Instance
	// with a tenancy of dedicated is applied to instances that run in a VPC on
	// single-tenant hardware (i.e., Dedicated Instances).
	//
	// Important: The host value cannot be used with this parameter. Use the default
	// or dedicated values only.
	//
	// Default: default
	InstanceTenancy?: null | string @go(,*string)

	// The instance type that the reservation will cover (for example, m1.small).
	// For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide.
	InstanceType?: null | string @go(,*string)

	// The maximum duration (in seconds) to filter when searching for offerings.
	//
	// Default: 94608000 (3 years)
	MaxDuration?: null | int64 @go(,*int64)

	// The maximum number of instances to filter when searching for offerings.
	//
	// Default: 20
	MaxInstanceCount?: null | int64 @go(,*int64)

	// The maximum number of results to return for the request in a single page.
	// The remaining results of the initial request can be seen by sending another
	// request with the returned NextToken value. The maximum is 100.
	//
	// Default: 100
	MaxResults?: null | int64 @go(,*int64)

	// The minimum duration (in seconds) to filter when searching for offerings.
	//
	// Default: 2592000 (1 month)
	MinDuration?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)

	// The offering class of the Reserved Instance. Can be standard or convertible.
	OfferingClass?: null | string @go(,*string)

	// The Reserved Instance offering type. If you are using tools that predate
	// the 2011-11-01 API version, you only have access to the Medium Utilization
	// Reserved Instance offering type.
	OfferingType?: null | string @go(,*string)

	// The Reserved Instance product platform description. Instances that include
	// (Amazon VPC) in the description are for use with Amazon VPC.
	ProductDescription?: null | string @go(,*string)

	// One or more Reserved Instances offering IDs.
	ReservedInstancesOfferingIds: [...null | string] @go(,[]*string)
}

// Contains the output of DescribeReservedInstancesOfferings.
#DescribeReservedInstancesOfferingsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// A list of Reserved Instances offerings.
	ReservedInstancesOfferings: [...null | #ReservedInstancesOffering] @go(,[]*ReservedInstancesOffering)
}

// Contains the output for DescribeReservedInstances.
#DescribeReservedInstancesOutput: {
	// A list of Reserved Instances.
	ReservedInstances: [...null | #ReservedInstances] @go(,[]*ReservedInstances)
}

#DescribeRouteTablesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * association.route-table-association-id - The ID of an association ID
	//    for the route table.
	//
	//    * association.route-table-id - The ID of the route table involved in the
	//    association.
	//
	//    * association.subnet-id - The ID of the subnet involved in the association.
	//
	//    * association.main - Indicates whether the route table is the main route
	//    table for the VPC (true | false). Route tables that do not have an association
	//    ID are not returned in the response.
	//
	//    * owner-id - The ID of the Amazon Web Services account that owns the route
	//    table.
	//
	//    * route-table-id - The ID of the route table.
	//
	//    * route.destination-cidr-block - The IPv4 CIDR range specified in a route
	//    in the table.
	//
	//    * route.destination-ipv6-cidr-block - The IPv6 CIDR range specified in
	//    a route in the route table.
	//
	//    * route.destination-prefix-list-id - The ID (prefix) of the Amazon Web
	//    Service specified in a route in the table.
	//
	//    * route.egress-only-internet-gateway-id - The ID of an egress-only Internet
	//    gateway specified in a route in the route table.
	//
	//    * route.gateway-id - The ID of a gateway specified in a route in the table.
	//
	//    * route.instance-id - The ID of an instance specified in a route in the
	//    table.
	//
	//    * route.nat-gateway-id - The ID of a NAT gateway.
	//
	//    * route.transit-gateway-id - The ID of a transit gateway.
	//
	//    * route.origin - Describes how the route was created. CreateRouteTable
	//    indicates that the route was automatically created when the route table
	//    was created; CreateRoute indicates that the route was manually added to
	//    the route table; EnableVgwRoutePropagation indicates that the route was
	//    propagated by route propagation.
	//
	//    * route.state - The state of a route in the route table (active | blackhole).
	//    The blackhole state indicates that the route's target isn't available
	//    (for example, the specified gateway isn't attached to the VPC, the specified
	//    NAT instance has been terminated, and so on).
	//
	//    * route.vpc-peering-connection-id - The ID of a VPC peering connection
	//    specified in a route in the table.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-id - The ID of the VPC for the route table.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more route table IDs.
	//
	// Default: Describes all your route tables.
	RouteTableIds: [...null | string] @go(,[]*string)
}

// Contains the output of DescribeRouteTables.
#DescribeRouteTablesOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about one or more route tables.
	RouteTables: [...null | #RouteTable] @go(,[]*RouteTable)
}

// Contains the parameters for DescribeScheduledInstanceAvailability.
#DescribeScheduledInstanceAvailabilityInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * availability-zone - The Availability Zone (for example, us-west-2a).
	//
	//    * instance-type - The instance type (for example, c4.large).
	//
	//    * network-platform - The network platform (EC2-Classic or EC2-VPC).
	//
	//    * platform - The platform (Linux/UNIX or Windows).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The time period for the first schedule to start.
	//
	// FirstSlotStartTimeRange is a required field
	FirstSlotStartTimeRange?: null | #SlotDateTimeRangeRequest @go(,*SlotDateTimeRangeRequest)

	// The maximum number of results to return in a single call. This value can
	// be between 5 and 300. The default value is 300. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The maximum available duration, in hours. This value must be greater than
	// MinSlotDurationInHours and less than 1,720.
	MaxSlotDurationInHours?: null | int64 @go(,*int64)

	// The minimum available duration, in hours. The minimum required duration is
	// 1,200 hours per year. For example, the minimum daily schedule is 4 hours,
	// the minimum weekly schedule is 24 hours, and the minimum monthly schedule
	// is 100 hours.
	MinSlotDurationInHours?: null | int64 @go(,*int64)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)

	// The schedule recurrence.
	//
	// Recurrence is a required field
	Recurrence?: null | #ScheduledInstanceRecurrenceRequest @go(,*ScheduledInstanceRecurrenceRequest)
}

// Contains the output of DescribeScheduledInstanceAvailability.
#DescribeScheduledInstanceAvailabilityOutput: {
	// The token required to retrieve the next set of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the available Scheduled Instances.
	ScheduledInstanceAvailabilitySet: [...null | #ScheduledInstanceAvailability] @go(,[]*ScheduledInstanceAvailability)
}

// Contains the parameters for DescribeScheduledInstances.
#DescribeScheduledInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * availability-zone - The Availability Zone (for example, us-west-2a).
	//
	//    * instance-type - The instance type (for example, c4.large).
	//
	//    * network-platform - The network platform (EC2-Classic or EC2-VPC).
	//
	//    * platform - The platform (Linux/UNIX or Windows).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return in a single call. This value can
	// be between 5 and 300. The default value is 100. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)

	// The Scheduled Instance IDs.
	ScheduledInstanceIds: [...null | string] @go(,[]*string)

	// The time period for the first schedule to start.
	SlotStartTimeRange?: null | #SlotStartTimeRangeRequest @go(,*SlotStartTimeRangeRequest)
}

// Contains the output of DescribeScheduledInstances.
#DescribeScheduledInstancesOutput: {
	// The token required to retrieve the next set of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the Scheduled Instances.
	ScheduledInstanceSet: [...null | #ScheduledInstance] @go(,[]*ScheduledInstance)
}

#DescribeSecurityGroupReferencesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the security groups in your account.
	//
	// GroupId is a required field
	GroupId: [...null | string] @go(,[]*string)
}

#DescribeSecurityGroupReferencesOutput: {
	// Information about the VPCs with the referencing security groups.
	SecurityGroupReferenceSet: [...null | #SecurityGroupReference] @go(,[]*SecurityGroupReference)
}

#DescribeSecurityGroupRulesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * group-id - The ID of the security group.
	//
	//    * security-group-rule-id - The ID of the security group rule.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another request with the returned NextToken value.
	// This value can be between 5 and 1000. If this parameter is not specified,
	// then all results are returned.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the security group rules.
	SecurityGroupRuleIds: [...null | string] @go(,[]*string)
}

#DescribeSecurityGroupRulesOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about security group rules.
	SecurityGroupRules: [...null | #SecurityGroupRule] @go(,[]*SecurityGroupRule)
}

#DescribeSecurityGroupsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters. If using multiple filters for rules, the results include security
	// groups for which any combination of rules - not necessarily a single rule
	// - match all filters.
	//
	//    * description - The description of the security group.
	//
	//    * egress.ip-permission.cidr - An IPv4 CIDR block for an outbound security
	//    group rule.
	//
	//    * egress.ip-permission.from-port - For an outbound rule, the start of
	//    port range for the TCP and UDP protocols, or an ICMP type number.
	//
	//    * egress.ip-permission.group-id - The ID of a security group that has
	//    been referenced in an outbound security group rule.
	//
	//    * egress.ip-permission.group-name - The name of a security group that
	//    is referenced in an outbound security group rule.
	//
	//    * egress.ip-permission.ipv6-cidr - An IPv6 CIDR block for an outbound
	//    security group rule.
	//
	//    * egress.ip-permission.prefix-list-id - The ID of a prefix list to which
	//    a security group rule allows outbound access.
	//
	//    * egress.ip-permission.protocol - The IP protocol for an outbound security
	//    group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).
	//
	//    * egress.ip-permission.to-port - For an outbound rule, the end of port
	//    range for the TCP and UDP protocols, or an ICMP code.
	//
	//    * egress.ip-permission.user-id - The ID of an Amazon Web Services account
	//    that has been referenced in an outbound security group rule.
	//
	//    * group-id - The ID of the security group.
	//
	//    * group-name - The name of the security group.
	//
	//    * ip-permission.cidr - An IPv4 CIDR block for an inbound security group
	//    rule.
	//
	//    * ip-permission.from-port - For an inbound rule, the start of port range
	//    for the TCP and UDP protocols, or an ICMP type number.
	//
	//    * ip-permission.group-id - The ID of a security group that has been referenced
	//    in an inbound security group rule.
	//
	//    * ip-permission.group-name - The name of a security group that is referenced
	//    in an inbound security group rule.
	//
	//    * ip-permission.ipv6-cidr - An IPv6 CIDR block for an inbound security
	//    group rule.
	//
	//    * ip-permission.prefix-list-id - The ID of a prefix list from which a
	//    security group rule allows inbound access.
	//
	//    * ip-permission.protocol - The IP protocol for an inbound security group
	//    rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).
	//
	//    * ip-permission.to-port - For an inbound rule, the end of port range for
	//    the TCP and UDP protocols, or an ICMP code.
	//
	//    * ip-permission.user-id - The ID of an Amazon Web Services account that
	//    has been referenced in an inbound security group rule.
	//
	//    * owner-id - The Amazon Web Services account ID of the owner of the security
	//    group.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-id - The ID of the VPC specified when the security group was created.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The IDs of the security groups. Required for security groups in a nondefault
	// VPC.
	//
	// Default: Describes all of your security groups.
	GroupIds: [...null | string] @go(,[]*string)

	// [EC2-Classic and default VPC only] The names of the security groups. You
	// can specify either the security group name or the security group ID. For
	// security groups in a nondefault VPC, use the group-name filter to describe
	// security groups by name.
	//
	// Default: Describes all of your security groups.
	GroupNames: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another request with the returned NextToken value.
	// This value can be between 5 and 1000. If this parameter is not specified,
	// then all results are returned.
	MaxResults?: null | int64 @go(,*int64)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeSecurityGroupsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the security groups.
	SecurityGroups: [...null | #SecurityGroup] @go(,[]*SecurityGroup)
}

#DescribeSnapshotAttributeInput: {
	// The snapshot attribute you would like to view.
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the EBS snapshot.
	//
	// SnapshotId is a required field
	SnapshotId?: null | string @go(,*string)
}

#DescribeSnapshotAttributeOutput: {
	// The users and groups that have the permissions for creating volumes from
	// the snapshot.
	CreateVolumePermissions: [...null | #CreateVolumePermission] @go(,[]*CreateVolumePermission)

	// The product codes.
	ProductCodes: [...null | #ProductCode] @go(,[]*ProductCode)

	// The ID of the EBS snapshot.
	SnapshotId?: null | string @go(,*string)
}

#DescribeSnapshotsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * description - A description of the snapshot.
	//
	//    * encrypted - Indicates whether the snapshot is encrypted (true | false)
	//
	//    * owner-alias - The owner alias, from an Amazon-maintained list (amazon).
	//    This is not the user-configured Amazon Web Services account alias set
	//    using the IAM console. We recommend that you use the related parameter
	//    instead of this filter.
	//
	//    * owner-id - The Amazon Web Services account ID of the owner. We recommend
	//    that you use the related parameter instead of this filter.
	//
	//    * progress - The progress of the snapshot, as a percentage (for example,
	//    80%).
	//
	//    * snapshot-id - The snapshot ID.
	//
	//    * start-time - The time stamp when the snapshot was initiated.
	//
	//    * status - The status of the snapshot (pending | completed | error).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * volume-id - The ID of the volume the snapshot is for.
	//
	//    * volume-size - The size of the volume, in GiB.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of snapshot results returned by DescribeSnapshots in paginated
	// output. When this parameter is used, DescribeSnapshots only returns MaxResults
	// results in a single page along with a NextToken response element. The remaining
	// results of the initial request can be seen by sending another DescribeSnapshots
	// request with the returned NextToken value. This value can be between 5 and
	// 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results
	// are returned. If this parameter is not used, then DescribeSnapshots returns
	// all results. You cannot specify this parameter and the snapshot IDs parameter
	// in the same request.
	MaxResults?: null | int64 @go(,*int64)

	// The NextToken value returned from a previous paginated DescribeSnapshots
	// request where MaxResults was used and the results exceeded the value of that
	// parameter. Pagination continues from the end of the previous results that
	// returned the NextToken value. This value is null when there are no more results
	// to return.
	NextToken?: null | string @go(,*string)

	// Scopes the results to snapshots with the specified owners. You can specify
	// a combination of Amazon Web Services account IDs, self, and amazon.
	OwnerIds: [...null | string] @go(,[]*string)

	// The IDs of the Amazon Web Services accounts that can create volumes from
	// the snapshot.
	RestorableByUserIds: [...null | string] @go(,[]*string)

	// The snapshot IDs.
	//
	// Default: Describes the snapshots for which you have create volume permissions.
	SnapshotIds: [...null | string] @go(,[]*string)
}

#DescribeSnapshotsOutput: {
	// The NextToken value to include in a future DescribeSnapshots request. When
	// the results of a DescribeSnapshots request exceed MaxResults, this value
	// can be used to retrieve the next page of results. This value is null when
	// there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the snapshots.
	Snapshots: [...null | #Snapshot] @go(,[]*Snapshot)
}

// Contains the parameters for DescribeSpotDatafeedSubscription.
#DescribeSpotDatafeedSubscriptionInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

// Contains the output of DescribeSpotDatafeedSubscription.
#DescribeSpotDatafeedSubscriptionOutput: {
	// The Spot Instance data feed subscription.
	SpotDatafeedSubscription?: null | #SpotDatafeedSubscription @go(,*SpotDatafeedSubscription)
}

// Contains the parameters for DescribeSpotFleetInstances.
#DescribeSpotFleetInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return in a single call. Specify a value
	// between 1 and 1000. The default value is 1000. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)

	// The ID of the Spot Fleet request.
	//
	// SpotFleetRequestId is a required field
	SpotFleetRequestId?: null | string @go(,*string)
}

// Contains the output of DescribeSpotFleetInstances.
#DescribeSpotFleetInstancesOutput: {
	// The running instances. This list is refreshed periodically and might be out
	// of date.
	ActiveInstances: [...null | #ActiveInstance] @go(,[]*ActiveInstance)

	// The token required to retrieve the next set of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The ID of the Spot Fleet request.
	SpotFleetRequestId?: null | string @go(,*string)
}

// Contains the parameters for DescribeSpotFleetRequestHistory.
#DescribeSpotFleetRequestHistoryInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The type of events to describe. By default, all events are described.
	EventType?: null | string @go(,*string)

	// The maximum number of results to return in a single call. Specify a value
	// between 1 and 1000. The default value is 1000. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)

	// The ID of the Spot Fleet request.
	//
	// SpotFleetRequestId is a required field
	SpotFleetRequestId?: null | string @go(,*string)

	// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	//
	// StartTime is a required field
	StartTime?: null | time.Time @go(,*time.Time)
}

// Contains the output of DescribeSpotFleetRequestHistory.
#DescribeSpotFleetRequestHistoryOutput: {
	// Information about the events in the history of the Spot Fleet request.
	HistoryRecords: [...null | #HistoryRecord] @go(,[]*HistoryRecord)

	// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	// All records up to this time were retrieved.
	//
	// If nextToken indicates that there are more results, this value is not present.
	LastEvaluatedTime?: null | time.Time @go(,*time.Time)

	// The token required to retrieve the next set of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The ID of the Spot Fleet request.
	SpotFleetRequestId?: null | string @go(,*string)

	// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	StartTime?: null | time.Time @go(,*time.Time)
}

// Contains the parameters for DescribeSpotFleetRequests.
#DescribeSpotFleetRequestsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return in a single call. Specify a value
	// between 1 and 1000. The default value is 1000. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the Spot Fleet requests.
	SpotFleetRequestIds: [...null | string] @go(,[]*string)
}

// Contains the output of DescribeSpotFleetRequests.
#DescribeSpotFleetRequestsOutput: {
	// The token required to retrieve the next set of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the configuration of your Spot Fleet.
	SpotFleetRequestConfigs: [...null | #SpotFleetRequestConfig] @go(,[]*SpotFleetRequestConfig)
}

// Contains the parameters for DescribeSpotInstanceRequests.
#DescribeSpotInstanceRequestsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * availability-zone-group - The Availability Zone group.
	//
	//    * create-time - The time stamp when the Spot Instance request was created.
	//
	//    * fault-code - The fault code related to the request.
	//
	//    * fault-message - The fault message related to the request.
	//
	//    * instance-id - The ID of the instance that fulfilled the request.
	//
	//    * launch-group - The Spot Instance launch group.
	//
	//    * launch.block-device-mapping.delete-on-termination - Indicates whether
	//    the EBS volume is deleted on instance termination.
	//
	//    * launch.block-device-mapping.device-name - The device name for the volume
	//    in the block device mapping (for example, /dev/sdh or xvdh).
	//
	//    * launch.block-device-mapping.snapshot-id - The ID of the snapshot for
	//    the EBS volume.
	//
	//    * launch.block-device-mapping.volume-size - The size of the EBS volume,
	//    in GiB.
	//
	//    * launch.block-device-mapping.volume-type - The type of EBS volume: gp2
	//    for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for
	//    Throughput Optimized HDD, sc1for Cold HDD, or standard for Magnetic.
	//
	//    * launch.group-id - The ID of the security group for the instance.
	//
	//    * launch.group-name - The name of the security group for the instance.
	//
	//    * launch.image-id - The ID of the AMI.
	//
	//    * launch.instance-type - The type of instance (for example, m3.medium).
	//
	//    * launch.kernel-id - The kernel ID.
	//
	//    * launch.key-name - The name of the key pair the instance launched with.
	//
	//    * launch.monitoring-enabled - Whether detailed monitoring is enabled for
	//    the Spot Instance.
	//
	//    * launch.ramdisk-id - The RAM disk ID.
	//
	//    * launched-availability-zone - The Availability Zone in which the request
	//    is launched.
	//
	//    * network-interface.addresses.primary - Indicates whether the IP address
	//    is the primary private IP address.
	//
	//    * network-interface.delete-on-termination - Indicates whether the network
	//    interface is deleted when the instance is terminated.
	//
	//    * network-interface.description - A description of the network interface.
	//
	//    * network-interface.device-index - The index of the device for the network
	//    interface attachment on the instance.
	//
	//    * network-interface.group-id - The ID of the security group associated
	//    with the network interface.
	//
	//    * network-interface.network-interface-id - The ID of the network interface.
	//
	//    * network-interface.private-ip-address - The primary private IP address
	//    of the network interface.
	//
	//    * network-interface.subnet-id - The ID of the subnet for the instance.
	//
	//    * product-description - The product description associated with the instance
	//    (Linux/UNIX | Windows).
	//
	//    * spot-instance-request-id - The Spot Instance request ID.
	//
	//    * spot-price - The maximum hourly price for any Spot Instance launched
	//    to fulfill the request.
	//
	//    * state - The state of the Spot Instance request (open | active | closed
	//    | cancelled | failed). Spot request status information can help you track
	//    your Amazon EC2 Spot Instance requests. For more information, see Spot
	//    request status (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html)
	//    in the Amazon EC2 User Guide for Linux Instances.
	//
	//    * status-code - The short code describing the most recent evaluation of
	//    your Spot Instance request.
	//
	//    * status-message - The message explaining the status of the Spot Instance
	//    request.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * type - The type of Spot Instance request (one-time | persistent).
	//
	//    * valid-from - The start date of the request.
	//
	//    * valid-until - The end date of the request.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return in a single call. Specify a value
	// between 5 and 1000. To retrieve the remaining results, make another call
	// with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to request the next set of results. This value is null when there
	// are no more results to return.
	NextToken?: null | string @go(,*string)

	// One or more Spot Instance request IDs.
	SpotInstanceRequestIds: [...null | string] @go(,[]*string)
}

// Contains the output of DescribeSpotInstanceRequests.
#DescribeSpotInstanceRequestsOutput: {
	// The token to use to retrieve the next set of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// One or more Spot Instance requests.
	SpotInstanceRequests: [...null | #SpotInstanceRequest] @go(,[]*SpotInstanceRequest)
}

// Contains the parameters for DescribeSpotPriceHistory.
#DescribeSpotPriceHistoryInput: {
	// Filters the results by the specified Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The date and time, up to the current date, from which to stop retrieving
	// the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	EndTime?: null | time.Time @go(,*time.Time)

	// One or more filters.
	//
	//    * availability-zone - The Availability Zone for which prices should be
	//    returned.
	//
	//    * instance-type - The type of instance (for example, m3.medium).
	//
	//    * product-description - The product description for the Spot price (Linux/UNIX
	//    | Red Hat Enterprise Linux | SUSE Linux | Windows | Linux/UNIX (Amazon
	//    VPC) | Red Hat Enterprise Linux (Amazon VPC) | SUSE Linux (Amazon VPC)
	//    | Windows (Amazon VPC)).
	//
	//    * spot-price - The Spot price. The value must match exactly (or use wildcards;
	//    greater than or less than comparison is not supported).
	//
	//    * timestamp - The time stamp of the Spot price history, in UTC format
	//    (for example, YYYY-MM-DDTHH:MM:SSZ). You can use wildcards (* and ?).
	//    Greater than or less than comparison is not supported.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// Filters the results by the specified instance types.
	InstanceTypes: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. Specify a value
	// between 1 and 1000. The default value is 1000. To retrieve the remaining
	// results, make another call with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of results.
	NextToken?: null | string @go(,*string)

	// Filters the results by the specified basic product descriptions.
	ProductDescriptions: [...null | string] @go(,[]*string)

	// The date and time, up to the past 90 days, from which to start retrieving
	// the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	StartTime?: null | time.Time @go(,*time.Time)
}

// Contains the output of DescribeSpotPriceHistory.
#DescribeSpotPriceHistoryOutput: {
	// The token required to retrieve the next set of results. This value is null
	// or an empty string when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The historical Spot prices.
	SpotPriceHistory: [...null | #SpotPrice] @go(,[]*SpotPrice)
}

#DescribeStaleSecurityGroupsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of items to return for this request. The request returns
	// a token that you can specify in a subsequent call to get the next set of
	// results.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of items to return. (You received this token from
	// a prior call.)
	NextToken?: null | string @go(,*string)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#DescribeStaleSecurityGroupsOutput: {
	// The token to use when requesting the next set of items. If there are no additional
	// items to return, the string is empty.
	NextToken?: null | string @go(,*string)

	// Information about the stale security groups.
	StaleSecurityGroupSet: [...null | #StaleSecurityGroup] @go(,[]*StaleSecurityGroup)
}

#DescribeStoreImageTasksInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * task-state - Returns tasks in a certain state (InProgress | Completed
	//    | Failed)
	//
	//    * bucket - Returns task information for tasks that targeted a specific
	//    bucket. For the filter value, specify the bucket name.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The AMI IDs for which to show progress. Up to 20 AMI IDs can be included
	// in a request.
	ImageIds: [...null | string] @go(,[]*string)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another call with the returned NextToken value. This
	// value can be between 1 and 200. You cannot specify this parameter and the
	// ImageIDs parameter in the same call.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeStoreImageTasksOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The information about the AMI store tasks.
	StoreImageTaskResults: [...null | #StoreImageTaskResult] @go(,[]*StoreImageTaskResult)
}

#DescribeSubnetsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * availability-zone - The Availability Zone for the subnet. You can also
	//    use availabilityZone as the filter name.
	//
	//    * availability-zone-id - The ID of the Availability Zone for the subnet.
	//    You can also use availabilityZoneId as the filter name.
	//
	//    * available-ip-address-count - The number of IPv4 addresses in the subnet
	//    that are available.
	//
	//    * cidr-block - The IPv4 CIDR block of the subnet. The CIDR block you specify
	//    must exactly match the subnet's CIDR block for information to be returned
	//    for the subnet. You can also use cidr or cidrBlock as the filter names.
	//
	//    * default-for-az - Indicates whether this is the default subnet for the
	//    Availability Zone. You can also use defaultForAz as the filter name.
	//
	//    * ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated
	//    with the subnet.
	//
	//    * ipv6-cidr-block-association.association-id - An association ID for an
	//    IPv6 CIDR block associated with the subnet.
	//
	//    * ipv6-cidr-block-association.state - The state of an IPv6 CIDR block
	//    associated with the subnet.
	//
	//    * outpost-arn - The Amazon Resource Name (ARN) of the Outpost.
	//
	//    * owner-id - The ID of the Amazon Web Services account that owns the subnet.
	//
	//    * state - The state of the subnet (pending | available).
	//
	//    * subnet-arn - The Amazon Resource Name (ARN) of the subnet.
	//
	//    * subnet-id - The ID of the subnet.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-id - The ID of the VPC for the subnet.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more subnet IDs.
	//
	// Default: Describes all your subnets.
	SubnetIds: [...null | string] @go(,[]*string)
}

#DescribeSubnetsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about one or more subnets.
	Subnets: [...null | #Subnet] @go(,[]*Subnet)
}

#DescribeTagsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * key - The tag key.
	//
	//    * resource-id - The ID of the resource.
	//
	//    * resource-type - The resource type (customer-gateway | dedicated-host
	//    | dhcp-options | elastic-ip | fleet | fpga-image | host-reservation |
	//    image | instance | internet-gateway | key-pair | launch-template | natgateway
	//    | network-acl | network-interface | placement-group | reserved-instances
	//    | route-table | security-group | snapshot | spot-instances-request | subnet
	//    | volume | vpc | vpc-endpoint | vpc-endpoint-service | vpc-peering-connection
	//    | vpn-connection | vpn-gateway).
	//
	//    * tag:<key> - The key/value combination of the tag. For example, specify
	//    "tag:Owner" for the filter name and "TeamA" for the filter value to find
	//    resources with the tag "Owner=TeamA".
	//
	//    * value - The tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return in a single call. This value can
	// be between 5 and 1000. To retrieve the remaining results, make another call
	// with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeTagsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The tags.
	Tags: [...null | #TagDescription] @go(,[]*TagDescription)
}

#DescribeTrafficMirrorFiltersInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * description: The Traffic Mirror filter description.
	//
	//    * traffic-mirror-filter-id: The ID of the Traffic Mirror filter.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the Traffic Mirror filter.
	TrafficMirrorFilterIds: [...null | string] @go(,[]*string)
}

#DescribeTrafficMirrorFiltersOutput: {
	// The token to use to retrieve the next page of results. The value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about one or more Traffic Mirror filters.
	TrafficMirrorFilters: [...null | #TrafficMirrorFilter] @go(,[]*TrafficMirrorFilter)
}

#DescribeTrafficMirrorSessionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * description: The Traffic Mirror session description.
	//
	//    * network-interface-id: The ID of the Traffic Mirror session network interface.
	//
	//    * owner-id: The ID of the account that owns the Traffic Mirror session.
	//
	//    * packet-length: The assigned number of packets to mirror.
	//
	//    * session-number: The assigned session number.
	//
	//    * traffic-mirror-filter-id: The ID of the Traffic Mirror filter.
	//
	//    * traffic-mirror-session-id: The ID of the Traffic Mirror session.
	//
	//    * traffic-mirror-target-id: The ID of the Traffic Mirror target.
	//
	//    * virtual-network-id: The virtual network ID of the Traffic Mirror session.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the Traffic Mirror session.
	TrafficMirrorSessionIds: [...null | string] @go(,[]*string)
}

#DescribeTrafficMirrorSessionsOutput: {
	// The token to use to retrieve the next page of results. The value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror
	// sessions are described. Alternatively, you can filter the results.
	TrafficMirrorSessions: [...null | #TrafficMirrorSession] @go(,[]*TrafficMirrorSession)
}

#DescribeTrafficMirrorTargetsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * description: The Traffic Mirror target description.
	//
	//    * network-interface-id: The ID of the Traffic Mirror session network interface.
	//
	//    * network-load-balancer-arn: The Amazon Resource Name (ARN) of the Network
	//    Load Balancer that is associated with the session.
	//
	//    * owner-id: The ID of the account that owns the Traffic Mirror session.
	//
	//    * traffic-mirror-target-id: The ID of the Traffic Mirror target.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the Traffic Mirror targets.
	TrafficMirrorTargetIds: [...null | string] @go(,[]*string)
}

#DescribeTrafficMirrorTargetsOutput: {
	// The token to use to retrieve the next page of results. The value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about one or more Traffic Mirror targets.
	TrafficMirrorTargets: [...null | #TrafficMirrorTarget] @go(,[]*TrafficMirrorTarget)
}

#DescribeTransitGatewayAttachmentsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * association.state - The state of the association (associating | associated
	//    | disassociating).
	//
	//    * association.transit-gateway-route-table-id - The ID of the route table
	//    for the transit gateway.
	//
	//    * resource-id - The ID of the resource.
	//
	//    * resource-owner-id - The ID of the AWS account that owns the resource.
	//
	//    * resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway
	//    | peering | connect.
	//
	//    * state - The state of the attachment. Valid values are available | deleted
	//    | deleting | failed | failing | initiatingRequest | modifying | pendingAcceptance
	//    | pending | rollingBack | rejected | rejecting.
	//
	//    * transit-gateway-attachment-id - The ID of the attachment.
	//
	//    * transit-gateway-id - The ID of the transit gateway.
	//
	//    * transit-gateway-owner-id - The ID of the AWS account that owns the transit
	//    gateway.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the attachments.
	TransitGatewayAttachmentIds: [...null | string] @go(,[]*string)
}

#DescribeTransitGatewayAttachmentsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the attachments.
	TransitGatewayAttachments: [...null | #TransitGatewayAttachment] @go(,[]*TransitGatewayAttachment)
}

#DescribeTransitGatewayConnectPeersInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * state - The state of the Connect peer (pending | available | deleting
	//    | deleted).
	//
	//    * transit-gateway-attachment-id - The ID of the attachment.
	//
	//    * transit-gateway-connect-peer-id - The ID of the Connect peer.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the Connect peers.
	TransitGatewayConnectPeerIds: [...null | string] @go(,[]*string)
}

#DescribeTransitGatewayConnectPeersOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the Connect peers.
	TransitGatewayConnectPeers: [...null | #TransitGatewayConnectPeer] @go(,[]*TransitGatewayConnectPeer)
}

#DescribeTransitGatewayConnectsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * options.protocol - The tunnel protocol (gre).
	//
	//    * state - The state of the attachment (initiating | initiatingRequest
	//    | pendingAcceptance | rollingBack | pending | available | modifying |
	//    deleting | deleted | failed | rejected | rejecting | failing).
	//
	//    * transit-gateway-attachment-id - The ID of the Connect attachment.
	//
	//    * transit-gateway-id - The ID of the transit gateway.
	//
	//    * transport-transit-gateway-attachment-id - The ID of the transit gateway
	//    attachment from which the Connect attachment was created.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the attachments.
	TransitGatewayAttachmentIds: [...null | string] @go(,[]*string)
}

#DescribeTransitGatewayConnectsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the Connect attachments.
	TransitGatewayConnects: [...null | #TransitGatewayConnect] @go(,[]*TransitGatewayConnect)
}

#DescribeTransitGatewayMulticastDomainsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * state - The state of the transit gateway multicast domain. Valid values
	//    are pending | available | deleting | deleted.
	//
	//    * transit-gateway-id - The ID of the transit gateway.
	//
	//    * transit-gateway-multicast-domain-id - The ID of the transit gateway
	//    multicast domain.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainIds: [...null | string] @go(,[]*string)
}

#DescribeTransitGatewayMulticastDomainsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the transit gateway multicast domains.
	TransitGatewayMulticastDomains: [...null | #TransitGatewayMulticastDomain] @go(,[]*TransitGatewayMulticastDomain)
}

#DescribeTransitGatewayPeeringAttachmentsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * transit-gateway-attachment-id - The ID of the transit gateway attachment.
	//
	//    * local-owner-id - The ID of your AWS account.
	//
	//    * remote-owner-id - The ID of the AWS account in the remote Region that
	//    owns the transit gateway.
	//
	//    * state - The state of the peering attachment. Valid values are available
	//    | deleted | deleting | failed | failing | initiatingRequest | modifying
	//    | pendingAcceptance | pending | rollingBack | rejected | rejecting).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources that have a tag with a specific key, regardless
	//    of the tag value.
	//
	//    * transit-gateway-id - The ID of the transit gateway.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more IDs of the transit gateway peering attachments.
	TransitGatewayAttachmentIds: [...null | string] @go(,[]*string)
}

#DescribeTransitGatewayPeeringAttachmentsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The transit gateway peering attachments.
	TransitGatewayPeeringAttachments: [...null | #TransitGatewayPeeringAttachment] @go(,[]*TransitGatewayPeeringAttachment)
}

#DescribeTransitGatewayRouteTablesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * default-association-route-table - Indicates whether this is the default
	//    association route table for the transit gateway (true | false).
	//
	//    * default-propagation-route-table - Indicates whether this is the default
	//    propagation route table for the transit gateway (true | false).
	//
	//    * state - The state of the route table (available | deleting | deleted
	//    | pending).
	//
	//    * transit-gateway-id - The ID of the transit gateway.
	//
	//    * transit-gateway-route-table-id - The ID of the transit gateway route
	//    table.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the transit gateway route tables.
	TransitGatewayRouteTableIds: [...null | string] @go(,[]*string)
}

#DescribeTransitGatewayRouteTablesOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the transit gateway route tables.
	TransitGatewayRouteTables: [...null | #TransitGatewayRouteTable] @go(,[]*TransitGatewayRouteTable)
}

#DescribeTransitGatewayVpcAttachmentsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * state - The state of the attachment. Valid values are available | deleted
	//    | deleting | failed | failing | initiatingRequest | modifying | pendingAcceptance
	//    | pending | rollingBack | rejected | rejecting.
	//
	//    * transit-gateway-attachment-id - The ID of the attachment.
	//
	//    * transit-gateway-id - The ID of the transit gateway.
	//
	//    * vpc-id - The ID of the VPC.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the attachments.
	TransitGatewayAttachmentIds: [...null | string] @go(,[]*string)
}

#DescribeTransitGatewayVpcAttachmentsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the VPC attachments.
	TransitGatewayVpcAttachments: [...null | #TransitGatewayVpcAttachment] @go(,[]*TransitGatewayVpcAttachment)
}

#DescribeTransitGatewaysInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * options.propagation-default-route-table-id - The ID of the default propagation
	//    route table.
	//
	//    * options.amazon-side-asn - The private ASN for the Amazon side of a BGP
	//    session.
	//
	//    * options.association-default-route-table-id - The ID of the default association
	//    route table.
	//
	//    * options.auto-accept-shared-attachments - Indicates whether there is
	//    automatic acceptance of attachment requests (enable | disable).
	//
	//    * options.default-route-table-association - Indicates whether resource
	//    attachments are automatically associated with the default association
	//    route table (enable | disable).
	//
	//    * options.default-route-table-propagation - Indicates whether resource
	//    attachments automatically propagate routes to the default propagation
	//    route table (enable | disable).
	//
	//    * options.dns-support - Indicates whether DNS support is enabled (enable
	//    | disable).
	//
	//    * options.vpn-ecmp-support - Indicates whether Equal Cost Multipath Protocol
	//    support is enabled (enable | disable).
	//
	//    * owner-id - The ID of the AWS account that owns the transit gateway.
	//
	//    * state - The state of the transit gateway (available | deleted | deleting
	//    | modifying | pending).
	//
	//    * transit-gateway-id - The ID of the transit gateway.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of the transit gateways.
	TransitGatewayIds: [...null | string] @go(,[]*string)
}

#DescribeTransitGatewaysOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the transit gateways.
	TransitGateways: [...null | #TransitGateway] @go(,[]*TransitGateway)
}

#DescribeTrunkInterfaceAssociationsInput: {
	// The IDs of the associations.
	AssociationIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * gre-key - The ID of a trunk interface association.
	//
	//    * interface-protocol - The interface protocol. Valid values are VLAN and
	//    GRE.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeTrunkInterfaceAssociationsOutput: {
	// Information about the trunk associations.
	InterfaceAssociations: [...null | #TrunkInterfaceAssociation] @go(,[]*TrunkInterfaceAssociation)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeVolumeAttributeInput: {
	// The attribute of the volume. This parameter is required.
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the volume.
	//
	// VolumeId is a required field
	VolumeId?: null | string @go(,*string)
}

#DescribeVolumeAttributeOutput: {
	// The state of autoEnableIO attribute.
	AutoEnableIO?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// A list of product codes.
	ProductCodes: [...null | #ProductCode] @go(,[]*ProductCode)

	// The ID of the volume.
	VolumeId?: null | string @go(,*string)
}

#DescribeVolumeStatusInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * action.code - The action code for the event (for example, enable-volume-io).
	//
	//    * action.description - A description of the action.
	//
	//    * action.event-id - The event ID associated with the action.
	//
	//    * availability-zone - The Availability Zone of the instance.
	//
	//    * event.description - A description of the event.
	//
	//    * event.event-id - The event ID.
	//
	//    * event.event-type - The event type (for io-enabled: passed | failed;
	//    for io-performance: io-performance:degraded | io-performance:severely-degraded
	//    | io-performance:stalled).
	//
	//    * event.not-after - The latest end time for the event.
	//
	//    * event.not-before - The earliest start time for the event.
	//
	//    * volume-status.details-name - The cause for volume-status.status (io-enabled
	//    | io-performance).
	//
	//    * volume-status.details-status - The status of volume-status.details-name
	//    (for io-enabled: passed | failed; for io-performance: normal | degraded
	//    | severely-degraded | stalled).
	//
	//    * volume-status.status - The status of the volume (ok | impaired | warning
	//    | insufficient-data).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of volume results returned by DescribeVolumeStatus in
	// paginated output. When this parameter is used, the request only returns MaxResults
	// results in a single page along with a NextToken response element. The remaining
	// results of the initial request can be seen by sending another request with
	// the returned NextToken value. This value can be between 5 and 1,000; if MaxResults
	// is given a value larger than 1,000, only 1,000 results are returned. If this
	// parameter is not used, then DescribeVolumeStatus returns all results. You
	// cannot specify this parameter and the volume IDs parameter in the same request.
	MaxResults?: null | int64 @go(,*int64)

	// The NextToken value to include in a future DescribeVolumeStatus request.
	// When the results of the request exceed MaxResults, this value can be used
	// to retrieve the next page of results. This value is null when there are no
	// more results to return.
	NextToken?: null | string @go(,*string)

	// The IDs of the volumes.
	//
	// Default: Describes all your volumes.
	VolumeIds: [...null | string] @go(,[]*string)
}

#DescribeVolumeStatusOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the status of the volumes.
	VolumeStatuses: [...null | #VolumeStatusItem] @go(,[]*VolumeStatusItem)
}

#DescribeVolumesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * attachment.attach-time - The time stamp when the attachment initiated.
	//
	//    * attachment.delete-on-termination - Whether the volume is deleted on
	//    instance termination.
	//
	//    * attachment.device - The device name specified in the block device mapping
	//    (for example, /dev/sda1).
	//
	//    * attachment.instance-id - The ID of the instance the volume is attached
	//    to.
	//
	//    * attachment.status - The attachment state (attaching | attached | detaching).
	//
	//    * availability-zone - The Availability Zone in which the volume was created.
	//
	//    * create-time - The time stamp when the volume was created.
	//
	//    * encrypted - Indicates whether the volume is encrypted (true | false)
	//
	//    * multi-attach-enabled - Indicates whether the volume is enabled for Multi-Attach
	//    (true | false)
	//
	//    * fast-restored - Indicates whether the volume was created from a snapshot
	//    that is enabled for fast snapshot restore (true | false).
	//
	//    * size - The size of the volume, in GiB.
	//
	//    * snapshot-id - The snapshot from which the volume was created.
	//
	//    * status - The state of the volume (creating | available | in-use | deleting
	//    | deleted | error).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * volume-id - The volume ID.
	//
	//    * volume-type - The Amazon EBS volume type (gp2 | gp3 | io1 | io2 | st1
	//    | sc1| standard)
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of volume results returned by DescribeVolumes in paginated
	// output. When this parameter is used, DescribeVolumes only returns MaxResults
	// results in a single page along with a NextToken response element. The remaining
	// results of the initial request can be seen by sending another DescribeVolumes
	// request with the returned NextToken value. This value can be between 5 and
	// 500; if MaxResults is given a value larger than 500, only 500 results are
	// returned. If this parameter is not used, then DescribeVolumes returns all
	// results. You cannot specify this parameter and the volume IDs parameter in
	// the same request.
	MaxResults?: null | int64 @go(,*int64)

	// The NextToken value returned from a previous paginated DescribeVolumes request
	// where MaxResults was used and the results exceeded the value of that parameter.
	// Pagination continues from the end of the previous results that returned the
	// NextToken value. This value is null when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The volume IDs.
	VolumeIds: [...null | string] @go(,[]*string)
}

#DescribeVolumesModificationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters.
	//
	//    * modification-state - The current modification state (modifying | optimizing
	//    | completed | failed).
	//
	//    * original-iops - The original IOPS rate of the volume.
	//
	//    * original-size - The original size of the volume, in GiB.
	//
	//    * original-volume-type - The original volume type of the volume (standard
	//    | io1 | io2 | gp2 | sc1 | st1).
	//
	//    * originalMultiAttachEnabled - Indicates whether Multi-Attach support
	//    was enabled (true | false).
	//
	//    * start-time - The modification start time.
	//
	//    * target-iops - The target IOPS rate of the volume.
	//
	//    * target-size - The target size of the volume, in GiB.
	//
	//    * target-volume-type - The target volume type of the volume (standard
	//    | io1 | io2 | gp2 | sc1 | st1).
	//
	//    * targetMultiAttachEnabled - Indicates whether Multi-Attach support is
	//    to be enabled (true | false).
	//
	//    * volume-id - The ID of the volume.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results (up to a limit of 500) to be returned in a
	// paginated request.
	MaxResults?: null | int64 @go(,*int64)

	// The nextToken value returned by a previous paginated request.
	NextToken?: null | string @go(,*string)

	// The IDs of the volumes.
	VolumeIds: [...null | string] @go(,[]*string)
}

#DescribeVolumesModificationsOutput: {
	// Token for pagination, null if there are no more results
	NextToken?: null | string @go(,*string)

	// Information about the volume modifications.
	VolumesModifications: [...null | #VolumeModification] @go(,[]*VolumeModification)
}

#DescribeVolumesOutput: {
	// The NextToken value to include in a future DescribeVolumes request. When
	// the results of a DescribeVolumes request exceed MaxResults, this value can
	// be used to retrieve the next page of results. This value is null when there
	// are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the volumes.
	Volumes: [...null | #Volume] @go(,[]*Volume)
}

#DescribeVpcAttributeInput: {
	// The VPC attribute.
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#DescribeVpcAttributeOutput: {
	// Indicates whether the instances launched in the VPC get DNS hostnames. If
	// this attribute is true, instances in the VPC get DNS hostnames; otherwise,
	// they do not.
	EnableDnsHostnames?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Indicates whether DNS resolution is enabled for the VPC. If this attribute
	// is true, the Amazon DNS server resolves DNS hostnames for your instances
	// to their corresponding IP addresses; otherwise, it does not.
	EnableDnsSupport?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

#DescribeVpcClassicLinkDnsSupportInput: {
	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more VPC IDs.
	VpcIds: [...null | string] @go(,[]*string)
}

#DescribeVpcClassicLinkDnsSupportOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the ClassicLink DNS support status of the VPCs.
	Vpcs: [...null | #ClassicLinkDnsSupport] @go(,[]*ClassicLinkDnsSupport)
}

#DescribeVpcClassicLinkInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * is-classic-link-enabled - Whether the VPC is enabled for ClassicLink
	//    (true | false).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// One or more VPCs for which you want to describe the ClassicLink status.
	VpcIds: [...null | string] @go(,[]*string)
}

#DescribeVpcClassicLinkOutput: {
	// The ClassicLink status of one or more VPCs.
	Vpcs: [...null | #VpcClassicLink] @go(,[]*VpcClassicLink)
}

#DescribeVpcEndpointConnectionNotificationsInput: {
	// The ID of the notification.
	ConnectionNotificationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * connection-notification-arn - The ARN of the SNS topic for the notification.
	//
	//    * connection-notification-id - The ID of the notification.
	//
	//    * connection-notification-state - The state of the notification (Enabled
	//    | Disabled).
	//
	//    * connection-notification-type - The type of notification (Topic).
	//
	//    * service-id - The ID of the endpoint service.
	//
	//    * vpc-endpoint-id - The ID of the VPC endpoint.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return in a single call. To retrieve the
	// remaining results, make another request with the returned NextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token to request the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeVpcEndpointConnectionNotificationsOutput: {
	// One or more notifications.
	ConnectionNotificationSet: [...null | #ConnectionNotification] @go(,[]*ConnectionNotification)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#DescribeVpcEndpointConnectionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * service-id - The ID of the service.
	//
	//    * vpc-endpoint-owner - The AWS account number of the owner of the endpoint.
	//
	//    * vpc-endpoint-state - The state of the endpoint (pendingAcceptance |
	//    pending | available | deleting | deleted | rejected | failed).
	//
	//    * vpc-endpoint-id - The ID of the endpoint.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results of the initial request can be seen by sending another
	// request with the returned NextToken value. This value can be between 5 and
	// 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results
	// are returned.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#DescribeVpcEndpointConnectionsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about one or more VPC endpoint connections.
	VpcEndpointConnections: [...null | #VpcEndpointConnection] @go(,[]*VpcEndpointConnection)
}

#DescribeVpcEndpointServiceConfigurationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * service-name - The name of the service.
	//
	//    * service-id - The ID of the service.
	//
	//    * service-state - The state of the service (Pending | Available | Deleting
	//    | Deleted | Failed).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results of the initial request can be seen by sending another
	// request with the returned NextToken value. This value can be between 5 and
	// 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results
	// are returned.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)

	// The IDs of one or more services.
	ServiceIds: [...null | string] @go(,[]*string)
}

#DescribeVpcEndpointServiceConfigurationsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about one or more services.
	ServiceConfigurations: [...null | #ServiceConfiguration] @go(,[]*ServiceConfiguration)
}

#DescribeVpcEndpointServicePermissionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * principal - The ARN of the principal.
	//
	//    * principal-type - The principal type (All | Service | OrganizationUnit
	//    | Account | User | Role).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return for the request in a single page.
	// The remaining results of the initial request can be seen by sending another
	// request with the returned NextToken value. This value can be between 5 and
	// 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results
	// are returned.
	MaxResults?: null | int64 @go(,*int64)

	// The token to retrieve the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the service.
	//
	// ServiceId is a required field
	ServiceId?: null | string @go(,*string)
}

#DescribeVpcEndpointServicePermissionsOutput: {
	// Information about one or more allowed principals.
	AllowedPrincipals: [...null | #AllowedPrincipal] @go(,[]*AllowedPrincipal)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

// Contains the parameters for DescribeVpcEndpointServices.
#DescribeVpcEndpointServicesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * service-name - The name of the service.
	//
	//    * service-type - The type of service (Interface | Gateway).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of items to return for this request. The request returns
	// a token that you can specify in a subsequent call to get the next set of
	// results.
	//
	// Constraint: If the value is greater than 1,000, we return only 1,000 items.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of items to return. (You received this token from
	// a prior call.)
	NextToken?: null | string @go(,*string)

	// One or more service names.
	ServiceNames: [...null | string] @go(,[]*string)
}

// Contains the output of DescribeVpcEndpointServices.
#DescribeVpcEndpointServicesOutput: {
	// The token to use when requesting the next set of items. If there are no additional
	// items to return, the string is empty.
	NextToken?: null | string @go(,*string)

	// Information about the service.
	ServiceDetails: [...null | #ServiceDetail] @go(,[]*ServiceDetail)

	// A list of supported services.
	ServiceNames: [...null | string] @go(,[]*string)
}

// Contains the parameters for DescribeVpcEndpoints.
#DescribeVpcEndpointsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * service-name - The name of the service.
	//
	//    * vpc-id - The ID of the VPC in which the endpoint resides.
	//
	//    * vpc-endpoint-id - The ID of the endpoint.
	//
	//    * vpc-endpoint-state - The state of the endpoint (pendingAcceptance |
	//    pending | available | deleting | deleted | rejected | failed).
	//
	//    * vpc-endpoint-type - The type of VPC endpoint (Interface | Gateway |
	//    GatewayLoadBalancer).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of items to return for this request. The request returns
	// a token that you can specify in a subsequent call to get the next set of
	// results.
	//
	// Constraint: If the value is greater than 1,000, we return only 1,000 items.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next set of items to return. (You received this token from
	// a prior call.)
	NextToken?: null | string @go(,*string)

	// One or more endpoint IDs.
	VpcEndpointIds: [...null | string] @go(,[]*string)
}

// Contains the output of DescribeVpcEndpoints.
#DescribeVpcEndpointsOutput: {
	// The token to use when requesting the next set of items. If there are no additional
	// items to return, the string is empty.
	NextToken?: null | string @go(,*string)

	// Information about the endpoints.
	VpcEndpoints: [...null | #VpcEndpoint] @go(,[]*VpcEndpoint)
}

#DescribeVpcPeeringConnectionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.
	//
	//    * accepter-vpc-info.owner-id - The ID of the Amazon Web Services account
	//    that owns the accepter VPC.
	//
	//    * accepter-vpc-info.vpc-id - The ID of the accepter VPC.
	//
	//    * expiration-time - The expiration date and time for the VPC peering connection.
	//
	//    * requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's
	//    VPC.
	//
	//    * requester-vpc-info.owner-id - The ID of the Amazon Web Services account
	//    that owns the requester VPC.
	//
	//    * requester-vpc-info.vpc-id - The ID of the requester VPC.
	//
	//    * status-code - The status of the VPC peering connection (pending-acceptance
	//    | failed | expired | provisioning | active | deleting | deleted | rejected).
	//
	//    * status-message - A message that provides more information about the
	//    status of the VPC peering connection, if applicable.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-peering-connection-id - The ID of the VPC peering connection.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more VPC peering connection IDs.
	//
	// Default: Describes all your VPC peering connections.
	VpcPeeringConnectionIds: [...null | string] @go(,[]*string)
}

#DescribeVpcPeeringConnectionsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the VPC peering connections.
	VpcPeeringConnections: [...null | #VpcPeeringConnection] @go(,[]*VpcPeeringConnection)
}

#DescribeVpcsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify
	//    must exactly match the VPC's CIDR block for information to be returned
	//    for the VPC. Must contain the slash followed by one or two digits (for
	//    example, /28).
	//
	//    * cidr-block-association.cidr-block - An IPv4 CIDR block associated with
	//    the VPC.
	//
	//    * cidr-block-association.association-id - The association ID for an IPv4
	//    CIDR block associated with the VPC.
	//
	//    * cidr-block-association.state - The state of an IPv4 CIDR block associated
	//    with the VPC.
	//
	//    * dhcp-options-id - The ID of a set of DHCP options.
	//
	//    * ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated
	//    with the VPC.
	//
	//    * ipv6-cidr-block-association.ipv6-pool - The ID of the IPv6 address pool
	//    from which the IPv6 CIDR block is allocated.
	//
	//    * ipv6-cidr-block-association.association-id - The association ID for
	//    an IPv6 CIDR block associated with the VPC.
	//
	//    * ipv6-cidr-block-association.state - The state of an IPv6 CIDR block
	//    associated with the VPC.
	//
	//    * is-default - Indicates whether the VPC is the default VPC.
	//
	//    * owner-id - The ID of the Amazon Web Services account that owns the VPC.
	//
	//    * state - The state of the VPC (pending | available).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * vpc-id - The ID of the VPC.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// One or more VPC IDs.
	//
	// Default: Describes all your VPCs.
	VpcIds: [...null | string] @go(,[]*string)
}

#DescribeVpcsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about one or more VPCs.
	Vpcs: [...null | #Vpc] @go(,[]*Vpc)
}

// Contains the parameters for DescribeVpnConnections.
#DescribeVpnConnectionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * customer-gateway-configuration - The configuration information for the
	//    customer gateway.
	//
	//    * customer-gateway-id - The ID of a customer gateway associated with the
	//    VPN connection.
	//
	//    * state - The state of the VPN connection (pending | available | deleting
	//    | deleted).
	//
	//    * option.static-routes-only - Indicates whether the connection has static
	//    routes only. Used for devices that do not support Border Gateway Protocol
	//    (BGP).
	//
	//    * route.destination-cidr-block - The destination CIDR block. This corresponds
	//    to the subnet used in a customer data center.
	//
	//    * bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP
	//    device.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * type - The type of VPN connection. Currently the only supported type
	//    is ipsec.1.
	//
	//    * vpn-connection-id - The ID of the VPN connection.
	//
	//    * vpn-gateway-id - The ID of a virtual private gateway associated with
	//    the VPN connection.
	//
	//    * transit-gateway-id - The ID of a transit gateway associated with the
	//    VPN connection.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// One or more VPN connection IDs.
	//
	// Default: Describes your VPN connections.
	VpnConnectionIds: [...null | string] @go(,[]*string)
}

// Contains the output of DescribeVpnConnections.
#DescribeVpnConnectionsOutput: {
	// Information about one or more VPN connections.
	VpnConnections: [...null | #VpnConnection] @go(,[]*VpnConnection)
}

// Contains the parameters for DescribeVpnGateways.
#DescribeVpnGatewaysInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * amazon-side-asn - The Autonomous System Number (ASN) for the Amazon
	//    side of the gateway.
	//
	//    * attachment.state - The current state of the attachment between the gateway
	//    and the VPC (attaching | attached | detaching | detached).
	//
	//    * attachment.vpc-id - The ID of an attached VPC.
	//
	//    * availability-zone - The Availability Zone for the virtual private gateway
	//    (if applicable).
	//
	//    * state - The state of the virtual private gateway (pending | available
	//    | deleting | deleted).
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	//
	//    * type - The type of virtual private gateway. Currently the only supported
	//    type is ipsec.1.
	//
	//    * vpn-gateway-id - The ID of the virtual private gateway.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// One or more virtual private gateway IDs.
	//
	// Default: Describes all your virtual private gateways.
	VpnGatewayIds: [...null | string] @go(,[]*string)
}

// Contains the output of DescribeVpnGateways.
#DescribeVpnGatewaysOutput: {
	// Information about one or more virtual private gateways.
	VpnGateways: [...null | #VpnGateway] @go(,[]*VpnGateway)
}

#DetachClassicLinkVpcInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance to unlink from the VPC.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// The ID of the VPC to which the instance is linked.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#DetachClassicLinkVpcOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#DetachInternetGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the internet gateway.
	//
	// InternetGatewayId is a required field
	InternetGatewayId?: null | string @go(,*string)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

// Contains the parameters for DetachNetworkInterface.
#DetachNetworkInterfaceInput: {
	// The ID of the attachment.
	//
	// AttachmentId is a required field
	AttachmentId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Specifies whether to force a detachment.
	//
	//    * Use the Force parameter only as a last resort to detach a network interface
	//    from a failed instance.
	//
	//    * If you use the Force parameter to detach a network interface, you might
	//    not be able to attach a different network interface to the same index
	//    on the instance without first stopping and starting the instance.
	//
	//    * If you force the detachment of a network interface, the instance metadata
	//    (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
	//    might not get updated. This means that the attributes associated with
	//    the detached network interface might still be visible. The instance metadata
	//    will get updated when you stop and start the instance.
	Force?: null | bool @go(,*bool)
}

#DetachVolumeInput: {
	// The device name.
	Device?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Forces detachment if the previous detachment attempt did not occur cleanly
	// (for example, logging into an instance, unmounting the volume, and detaching
	// normally). This option can lead to data loss or a corrupted file system.
	// Use this option only as a last resort to detach a volume from a failed instance.
	// The instance won't have an opportunity to flush file system caches or file
	// system metadata. If you use this option, you must perform file system check
	// and repair procedures.
	Force?: null | bool @go(,*bool)

	// The ID of the instance. If you are detaching a Multi-Attach enabled volume,
	// you must specify an instance ID.
	InstanceId?: null | string @go(,*string)

	// The ID of the volume.
	//
	// VolumeId is a required field
	VolumeId?: null | string @go(,*string)
}

// Contains the parameters for DetachVpnGateway.
#DetachVpnGatewayInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)

	// The ID of the virtual private gateway.
	//
	// VpnGatewayId is a required field
	VpnGatewayId?: null | string @go(,*string)
}

// Describes a DHCP configuration option.
#DhcpConfiguration: {
	// The name of a DHCP option.
	Key?: null | string @go(,*string)

	// One or more values for the DHCP option.
	Values: [...null | #AttributeValue] @go(,[]*AttributeValue)
}

// Describes a set of DHCP options.
#DhcpOptions: {
	// One or more DHCP options in the set.
	DhcpConfigurations: [...null | #DhcpConfiguration] @go(,[]*DhcpConfiguration)

	// The ID of the set of DHCP options.
	DhcpOptionsId?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the DHCP options set.
	OwnerId?: null | string @go(,*string)

	// Any tags assigned to the DHCP options set.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes an Active Directory.
#DirectoryServiceAuthentication: {
	// The ID of the Active Directory used for authentication.
	DirectoryId?: null | string @go(,*string)
}

// Describes the Active Directory to be used for client authentication.
#DirectoryServiceAuthenticationRequest: {
	// The ID of the Active Directory to be used for authentication.
	DirectoryId?: null | string @go(,*string)
}

#DisableEbsEncryptionByDefaultInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DisableEbsEncryptionByDefaultOutput: {
	// The updated status of encryption by default.
	EbsEncryptionByDefault?: null | bool @go(,*bool)
}

// Contains information about the errors that occurred when disabling fast snapshot
// restores.
#DisableFastSnapshotRestoreErrorItem: {
	// The errors.
	FastSnapshotRestoreStateErrors: [...null | #DisableFastSnapshotRestoreStateErrorItem] @go(,[]*DisableFastSnapshotRestoreStateErrorItem)

	// The ID of the snapshot.
	SnapshotId?: null | string @go(,*string)
}

// Describes an error that occurred when disabling fast snapshot restores.
#DisableFastSnapshotRestoreStateError: {
	// The error code.
	Code?: null | string @go(,*string)

	// The error message.
	Message?: null | string @go(,*string)
}

// Contains information about an error that occurred when disabling fast snapshot
// restores.
#DisableFastSnapshotRestoreStateErrorItem: {
	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// The error.
	Error?: null | #DisableFastSnapshotRestoreStateError @go(,*DisableFastSnapshotRestoreStateError)
}

// Describes fast snapshot restores that were successfully disabled.
#DisableFastSnapshotRestoreSuccessItem: {
	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// The time at which fast snapshot restores entered the disabled state.
	DisabledTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the disabling state.
	DisablingTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the enabled state.
	EnabledTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the enabling state.
	EnablingTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the optimizing state.
	OptimizingTime?: null | time.Time @go(,*time.Time)

	// The Amazon Web Services owner alias that enabled fast snapshot restores on
	// the snapshot. This is intended for future use.
	OwnerAlias?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that enabled fast snapshot restores
	// on the snapshot.
	OwnerId?: null | string @go(,*string)

	// The ID of the snapshot.
	SnapshotId?: null | string @go(,*string)

	// The state of fast snapshot restores for the snapshot.
	State?: null | string @go(,*string)

	// The reason for the state transition. The possible values are as follows:
	//
	//    * Client.UserInitiated - The state successfully transitioned to enabling
	//    or disabling.
	//
	//    * Client.UserInitiated - Lifecycle state transition - The state successfully
	//    transitioned to optimizing, enabled, or disabled.
	StateTransitionReason?: null | string @go(,*string)
}

#DisableFastSnapshotRestoresInput: {
	// One or more Availability Zones. For example, us-east-2a.
	//
	// AvailabilityZones is a required field
	AvailabilityZones: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of one or more snapshots. For example, snap-1234567890abcdef0.
	//
	// SourceSnapshotIds is a required field
	SourceSnapshotIds: [...null | string] @go(,[]*string)
}

#DisableFastSnapshotRestoresOutput: {
	// Information about the snapshots for which fast snapshot restores were successfully
	// disabled.
	Successful: [...null | #DisableFastSnapshotRestoreSuccessItem] @go(,[]*DisableFastSnapshotRestoreSuccessItem)

	// Information about the snapshots for which fast snapshot restores could not
	// be disabled.
	Unsuccessful: [...null | #DisableFastSnapshotRestoreErrorItem] @go(,[]*DisableFastSnapshotRestoreErrorItem)
}

#DisableImageDeprecationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AMI.
	//
	// ImageId is a required field
	ImageId?: null | string @go(,*string)
}

#DisableImageDeprecationOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#DisableSerialConsoleAccessInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DisableSerialConsoleAccessOutput: {
	// If true, access to the EC2 serial console of all instances is enabled for
	// your account. If false, access to the EC2 serial console of all instances
	// is disabled for your account.
	SerialConsoleAccessEnabled?: null | bool @go(,*bool)
}

#DisableTransitGatewayRouteTablePropagationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the propagation route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#DisableTransitGatewayRouteTablePropagationOutput: {
	// Information about route propagation.
	Propagation?: null | #TransitGatewayPropagation @go(,*TransitGatewayPropagation)
}

// Contains the parameters for DisableVgwRoutePropagation.
#DisableVgwRoutePropagationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the virtual private gateway.
	//
	// GatewayId is a required field
	GatewayId?: null | string @go(,*string)

	// The ID of the route table.
	//
	// RouteTableId is a required field
	RouteTableId?: null | string @go(,*string)
}

#DisableVpcClassicLinkDnsSupportInput: {
	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

#DisableVpcClassicLinkDnsSupportOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#DisableVpcClassicLinkInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#DisableVpcClassicLinkOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#DisassociateAddressInput: {
	// [EC2-VPC] The association ID. Required for EC2-VPC.
	AssociationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
	PublicIp?: null | string @go(,*string)
}

#DisassociateClientVpnTargetNetworkInput: {
	// The ID of the target network association.
	//
	// AssociationId is a required field
	AssociationId?: null | string @go(,*string)

	// The ID of the Client VPN endpoint from which to disassociate the target network.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DisassociateClientVpnTargetNetworkOutput: {
	// The ID of the target network association.
	AssociationId?: null | string @go(,*string)

	// The current state of the target network association.
	Status?: null | #AssociationStatus @go(,*AssociationStatus)
}

#DisassociateEnclaveCertificateIamRoleInput: {
	// The ARN of the ACM certificate from which to disassociate the IAM role.
	CertificateArn?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ARN of the IAM role to disassociate.
	RoleArn?: null | string @go(,*string)
}

#DisassociateEnclaveCertificateIamRoleOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#DisassociateIamInstanceProfileInput: {
	// The ID of the IAM instance profile association.
	//
	// AssociationId is a required field
	AssociationId?: null | string @go(,*string)
}

#DisassociateIamInstanceProfileOutput: {
	// Information about the IAM instance profile association.
	IamInstanceProfileAssociation?: null | #IamInstanceProfileAssociation @go(,*IamInstanceProfileAssociation)
}

#DisassociateInstanceEventWindowInput: {
	// One or more targets to disassociate from the specified event window.
	//
	// AssociationTarget is a required field
	AssociationTarget?: null | #InstanceEventWindowDisassociationRequest @go(,*InstanceEventWindowDisassociationRequest)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the event window.
	//
	// InstanceEventWindowId is a required field
	InstanceEventWindowId?: null | string @go(,*string)
}

#DisassociateInstanceEventWindowOutput: {
	// Information about the event window.
	InstanceEventWindow?: null | #InstanceEventWindow @go(,*InstanceEventWindow)
}

#DisassociateRouteTableInput: {
	// The association ID representing the current association between the route
	// table and subnet or gateway.
	//
	// AssociationId is a required field
	AssociationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DisassociateSubnetCidrBlockInput: {
	// The association ID for the CIDR block.
	//
	// AssociationId is a required field
	AssociationId?: null | string @go(,*string)
}

#DisassociateSubnetCidrBlockOutput: {
	// Information about the IPv6 CIDR block association.
	Ipv6CidrBlockAssociation?: null | #SubnetIpv6CidrBlockAssociation @go(,*SubnetIpv6CidrBlockAssociation)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)
}

#DisassociateTransitGatewayMulticastDomainInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the subnets;
	SubnetIds: [...null | string] @go(,[]*string)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#DisassociateTransitGatewayMulticastDomainOutput: {
	// Information about the association.
	Associations?: null | #TransitGatewayMulticastDomainAssociations @go(,*TransitGatewayMulticastDomainAssociations)
}

#DisassociateTransitGatewayRouteTableInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#DisassociateTransitGatewayRouteTableOutput: {
	// Information about the association.
	Association?: null | #TransitGatewayAssociation @go(,*TransitGatewayAssociation)
}

#DisassociateTrunkInterfaceInput: {
	// The ID ofthe association
	//
	// AssociationId is a required field
	AssociationId?: null | string @go(,*string)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#DisassociateTrunkInterfaceOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#DisassociateVpcCidrBlockInput: {
	// The association ID for the CIDR block.
	//
	// AssociationId is a required field
	AssociationId?: null | string @go(,*string)
}

#DisassociateVpcCidrBlockOutput: {
	// Information about the IPv4 CIDR block association.
	CidrBlockAssociation?: null | #VpcCidrBlockAssociation @go(,*VpcCidrBlockAssociation)

	// Information about the IPv6 CIDR block association.
	Ipv6CidrBlockAssociation?: null | #VpcIpv6CidrBlockAssociation @go(,*VpcIpv6CidrBlockAssociation)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes a disk image.
#DiskImage: {
	// A description of the disk image.
	Description?: null | string @go(,*string)

	// Information about the disk image.
	Image?: null | #DiskImageDetail @go(,*DiskImageDetail)

	// Information about the volume.
	Volume?: null | #VolumeDetail @go(,*VolumeDetail)
}

// Describes a disk image.
#DiskImageDescription: {
	// The checksum computed for the disk image.
	Checksum?: null | string @go(,*string)

	// The disk image format.
	Format?: null | string @go(,*string)

	// A presigned URL for the import manifest stored in Amazon S3. For information
	// about creating a presigned URL for an Amazon S3 object, read the "Query String
	// Request Authentication Alternative" section of the Authenticating REST Requests
	// (https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html)
	// topic in the Amazon Simple Storage Service Developer Guide.
	//
	// For information about the import manifest referenced by this API action,
	// see VM Import Manifest (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
	ImportManifestUrl?: null | string @go(,*string)

	// The size of the disk image, in GiB.
	Size?: null | int64 @go(,*int64)
}

// Describes a disk image.
#DiskImageDetail: {
	// The size of the disk image, in GiB.
	//
	// Bytes is a required field
	Bytes?: null | int64 @go(,*int64)

	// The disk image format.
	//
	// Format is a required field
	Format?: null | string @go(,*string)

	// A presigned URL for the import manifest stored in Amazon S3 and presented
	// here as an Amazon S3 presigned URL. For information about creating a presigned
	// URL for an Amazon S3 object, read the "Query String Request Authentication
	// Alternative" section of the Authenticating REST Requests (https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html)
	// topic in the Amazon Simple Storage Service Developer Guide.
	//
	// For information about the import manifest referenced by this API action,
	// see VM Import Manifest (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html).
	//
	// ImportManifestUrl is a required field
	ImportManifestUrl?: null | string @go(,*string)
}

// Describes a disk image volume.
#DiskImageVolumeDescription: {
	// The volume identifier.
	Id?: null | string @go(,*string)

	// The size of the volume, in GiB.
	Size?: null | int64 @go(,*int64)
}

// Describes the disk.
#DiskInfo: {
	// The number of disks with this configuration.
	Count?: null | int64 @go(,*int64)

	// The size of the disk in GB.
	SizeInGB?: null | int64 @go(,*int64)

	// The type of disk.
	Type?: null | string @go(,*string)
}

// Describes a DNS entry.
#DnsEntry: {
	// The DNS name.
	DnsName?: null | string @go(,*string)

	// The ID of the private hosted zone.
	HostedZoneId?: null | string @go(,*string)
}

// Information about the DNS server to be used.
#DnsServersOptionsModifyStructure: {
	// The IPv4 address range, in CIDR notation, of the DNS servers to be used.
	// You can specify up to two DNS servers. Ensure that the DNS servers can be
	// reached by the clients. The specified values overwrite the existing values.
	CustomDnsServers: [...null | string] @go(,[]*string)

	// Indicates whether DNS servers should be used. Specify False to delete the
	// existing DNS servers.
	Enabled?: null | bool @go(,*bool)
}

// Describes a block device for an EBS volume.
#EbsBlockDevice: {
	// Indicates whether the EBS volume is deleted on instance termination. For
	// more information, see Preserving Amazon EBS volumes on instance termination
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination)
	// in the Amazon EC2 User Guide.
	DeleteOnTermination?: null | bool @go(,*bool)

	// Indicates whether the encryption state of an EBS volume is changed while
	// being restored from a backing snapshot. The effect of setting the encryption
	// state to true depends on the volume origin (new or from a snapshot), starting
	// encryption state, ownership, and whether encryption by default is enabled.
	// For more information, see Amazon EBS encryption (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-parameters)
	// in the Amazon EC2 User Guide.
	//
	// In no case can you remove encryption from an encrypted volume.
	//
	// Encrypted volumes can only be attached to instances that support Amazon EBS
	// encryption. For more information, see Supported instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
	//
	// This parameter is not returned by .
	Encrypted?: null | bool @go(,*bool)

	// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes,
	// this represents the number of IOPS that are provisioned for the volume. For
	// gp2 volumes, this represents the baseline performance of the volume and the
	// rate at which the volume accumulates I/O credits for bursting.
	//
	// The following are the supported values for each volume type:
	//
	//    * gp3: 3,000-16,000 IOPS
	//
	//    * io1: 100-64,000 IOPS
	//
	//    * io2: 100-64,000 IOPS
	//
	// For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built
	// on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).
	// Other instance families guarantee performance up to 32,000 IOPS.
	//
	// This parameter is required for io1 and io2 volumes. The default for gp3 volumes
	// is 3,000 IOPS. This parameter is not supported for gp2, st1, sc1, or standard
	// volumes.
	Iops?: null | int64 @go(,*int64)

	// Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed
	// CMK under which the EBS volume is encrypted.
	//
	// This parameter is only supported on BlockDeviceMapping objects called by
	// RunInstances (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html),
	// RequestSpotFleet (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html),
	// and RequestSpotInstances (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html).
	KmsKeyId?: null | string @go(,*string)

	// The ARN of the Outpost on which the snapshot is stored.
	OutpostArn?: null | string @go(,*string)

	// The ID of the snapshot.
	SnapshotId?: null | string @go(,*string)

	// The throughput that the volume supports, in MiB/s.
	//
	// This parameter is valid only for gp3 volumes.
	//
	// Valid Range: Minimum value of 125. Maximum value of 1000.
	Throughput?: null | int64 @go(,*int64)

	// The size of the volume, in GiBs. You must specify either a snapshot ID or
	// a volume size. If you specify a snapshot, the default is the snapshot size.
	// You can specify a volume size that is equal to or larger than the snapshot
	// size.
	//
	// The following are the supported volumes sizes for each volume type:
	//
	//    * gp2 and gp3:1-16,384
	//
	//    * io1 and io2: 4-16,384
	//
	//    * st1 and sc1: 125-16,384
	//
	//    * standard: 1-1,024
	VolumeSize?: null | int64 @go(,*int64)

	// The volume type. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
	// in the Amazon EC2 User Guide. If the volume type is io1 or io2, you must
	// specify the IOPS that the volume supports.
	VolumeType?: null | string @go(,*string)
}

// Describes the Amazon EBS features supported by the instance type.
#EbsInfo: {
	// Describes the optimized EBS performance for the instance type.
	EbsOptimizedInfo?: null | #EbsOptimizedInfo @go(,*EbsOptimizedInfo)

	// Indicates whether the instance type is Amazon EBS-optimized. For more information,
	// see Amazon EBS-optimized instances (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html)
	// in Amazon EC2 User Guide.
	EbsOptimizedSupport?: null | string @go(,*string)

	// Indicates whether Amazon EBS encryption is supported.
	EncryptionSupport?: null | string @go(,*string)

	// Indicates whether non-volatile memory express (NVMe) is supported.
	NvmeSupport?: null | string @go(,*string)
}

// Describes a parameter used to set up an EBS volume in a block device mapping.
#EbsInstanceBlockDevice: {
	// The time stamp when the attachment initiated.
	AttachTime?: null | time.Time @go(,*time.Time)

	// Indicates whether the volume is deleted on instance termination.
	DeleteOnTermination?: null | bool @go(,*bool)

	// The attachment state.
	Status?: null | string @go(,*string)

	// The ID of the EBS volume.
	VolumeId?: null | string @go(,*string)
}

// Describes information used to set up an EBS volume specified in a block device
// mapping.
#EbsInstanceBlockDeviceSpecification: {
	// Indicates whether the volume is deleted on instance termination.
	DeleteOnTermination?: null | bool @go(,*bool)

	// The ID of the EBS volume.
	VolumeId?: null | string @go(,*string)
}

// Describes the optimized EBS performance for supported instance types.
#EbsOptimizedInfo: {
	// The baseline bandwidth performance for an EBS-optimized instance type, in
	// Mbps.
	BaselineBandwidthInMbps?: null | int64 @go(,*int64)

	// The baseline input/output storage operations per seconds for an EBS-optimized
	// instance type.
	BaselineIops?: null | int64 @go(,*int64)

	// The baseline throughput performance for an EBS-optimized instance type, in
	// MB/s.
	BaselineThroughputInMBps?: null | float64 @go(,*float64)

	// The maximum bandwidth performance for an EBS-optimized instance type, in
	// Mbps.
	MaximumBandwidthInMbps?: null | int64 @go(,*int64)

	// The maximum input/output storage operations per second for an EBS-optimized
	// instance type.
	MaximumIops?: null | int64 @go(,*int64)

	// The maximum throughput performance for an EBS-optimized instance type, in
	// MB/s.
	MaximumThroughputInMBps?: null | float64 @go(,*float64)
}

// Describes the Elastic Fabric Adapters for the instance type.
#EfaInfo: {
	// The maximum number of Elastic Fabric Adapters for the instance type.
	MaximumEfaInterfaces?: null | int64 @go(,*int64)
}

// Describes an egress-only internet gateway.
#EgressOnlyInternetGateway: {
	// Information about the attachment of the egress-only internet gateway.
	Attachments: [...null | #InternetGatewayAttachment] @go(,[]*InternetGatewayAttachment)

	// The ID of the egress-only internet gateway.
	EgressOnlyInternetGatewayId?: null | string @go(,*string)

	// The tags assigned to the egress-only internet gateway.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes the association between an instance and an Elastic Graphics accelerator.
#ElasticGpuAssociation: {
	// The ID of the association.
	ElasticGpuAssociationId?: null | string @go(,*string)

	// The state of the association between the instance and the Elastic Graphics
	// accelerator.
	ElasticGpuAssociationState?: null | string @go(,*string)

	// The time the Elastic Graphics accelerator was associated with the instance.
	ElasticGpuAssociationTime?: null | string @go(,*string)

	// The ID of the Elastic Graphics accelerator.
	ElasticGpuId?: null | string @go(,*string)
}

// Describes the status of an Elastic Graphics accelerator.
#ElasticGpuHealth: {
	// The health status.
	Status?: null | string @go(,*string)
}

// A specification for an Elastic Graphics accelerator.
#ElasticGpuSpecification: {
	// The type of Elastic Graphics accelerator. For more information about the
	// values to specify for Type, see Elastic Graphics Basics (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html#elastic-graphics-basics),
	// specifically the Elastic Graphics accelerator column, in the Amazon Elastic
	// Compute Cloud User Guide for Windows Instances.
	//
	// Type is a required field
	Type?: null | string @go(,*string)
}

// Describes an elastic GPU.
#ElasticGpuSpecificationResponse: {
	// The elastic GPU type.
	Type?: null | string @go(,*string)
}

// Describes an Elastic Graphics accelerator.
#ElasticGpus: {
	// The Availability Zone in the which the Elastic Graphics accelerator resides.
	AvailabilityZone?: null | string @go(,*string)

	// The status of the Elastic Graphics accelerator.
	ElasticGpuHealth?: null | #ElasticGpuHealth @go(,*ElasticGpuHealth)

	// The ID of the Elastic Graphics accelerator.
	ElasticGpuId?: null | string @go(,*string)

	// The state of the Elastic Graphics accelerator.
	ElasticGpuState?: null | string @go(,*string)

	// The type of Elastic Graphics accelerator.
	ElasticGpuType?: null | string @go(,*string)

	// The ID of the instance to which the Elastic Graphics accelerator is attached.
	InstanceId?: null | string @go(,*string)

	// The tags assigned to the Elastic Graphics accelerator.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes an elastic inference accelerator.
#ElasticInferenceAccelerator: {
	// The number of elastic inference accelerators to attach to the instance.
	//
	// Default: 1
	Count?: null | int64 @go(,*int64)

	// The type of elastic inference accelerator. The possible values are eia1.medium,
	// eia1.large, eia1.xlarge, eia2.medium, eia2.large, and eia2.xlarge.
	//
	// Type is a required field
	Type?: null | string @go(,*string)
}

// Describes the association between an instance and an elastic inference accelerator.
#ElasticInferenceAcceleratorAssociation: {
	// The Amazon Resource Name (ARN) of the elastic inference accelerator.
	ElasticInferenceAcceleratorArn?: null | string @go(,*string)

	// The ID of the association.
	ElasticInferenceAcceleratorAssociationId?: null | string @go(,*string)

	// The state of the elastic inference accelerator.
	ElasticInferenceAcceleratorAssociationState?: null | string @go(,*string)

	// The time at which the elastic inference accelerator is associated with an
	// instance.
	ElasticInferenceAcceleratorAssociationTime?: null | time.Time @go(,*time.Time)
}

#EnableEbsEncryptionByDefaultInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#EnableEbsEncryptionByDefaultOutput: {
	// The updated status of encryption by default.
	EbsEncryptionByDefault?: null | bool @go(,*bool)
}

// Contains information about the errors that occurred when enabling fast snapshot
// restores.
#EnableFastSnapshotRestoreErrorItem: {
	// The errors.
	FastSnapshotRestoreStateErrors: [...null | #EnableFastSnapshotRestoreStateErrorItem] @go(,[]*EnableFastSnapshotRestoreStateErrorItem)

	// The ID of the snapshot.
	SnapshotId?: null | string @go(,*string)
}

// Describes an error that occurred when enabling fast snapshot restores.
#EnableFastSnapshotRestoreStateError: {
	// The error code.
	Code?: null | string @go(,*string)

	// The error message.
	Message?: null | string @go(,*string)
}

// Contains information about an error that occurred when enabling fast snapshot
// restores.
#EnableFastSnapshotRestoreStateErrorItem: {
	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// The error.
	Error?: null | #EnableFastSnapshotRestoreStateError @go(,*EnableFastSnapshotRestoreStateError)
}

// Describes fast snapshot restores that were successfully enabled.
#EnableFastSnapshotRestoreSuccessItem: {
	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// The time at which fast snapshot restores entered the disabled state.
	DisabledTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the disabling state.
	DisablingTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the enabled state.
	EnabledTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the enabling state.
	EnablingTime?: null | time.Time @go(,*time.Time)

	// The time at which fast snapshot restores entered the optimizing state.
	OptimizingTime?: null | time.Time @go(,*time.Time)

	// The Amazon Web Services owner alias that enabled fast snapshot restores on
	// the snapshot. This is intended for future use.
	OwnerAlias?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that enabled fast snapshot restores
	// on the snapshot.
	OwnerId?: null | string @go(,*string)

	// The ID of the snapshot.
	SnapshotId?: null | string @go(,*string)

	// The state of fast snapshot restores.
	State?: null | string @go(,*string)

	// The reason for the state transition. The possible values are as follows:
	//
	//    * Client.UserInitiated - The state successfully transitioned to enabling
	//    or disabling.
	//
	//    * Client.UserInitiated - Lifecycle state transition - The state successfully
	//    transitioned to optimizing, enabled, or disabled.
	StateTransitionReason?: null | string @go(,*string)
}

#EnableFastSnapshotRestoresInput: {
	// One or more Availability Zones. For example, us-east-2a.
	//
	// AvailabilityZones is a required field
	AvailabilityZones: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of one or more snapshots. For example, snap-1234567890abcdef0. You
	// can specify a snapshot that was shared with you from another Amazon Web Services
	// account.
	//
	// SourceSnapshotIds is a required field
	SourceSnapshotIds: [...null | string] @go(,[]*string)
}

#EnableFastSnapshotRestoresOutput: {
	// Information about the snapshots for which fast snapshot restores were successfully
	// enabled.
	Successful: [...null | #EnableFastSnapshotRestoreSuccessItem] @go(,[]*EnableFastSnapshotRestoreSuccessItem)

	// Information about the snapshots for which fast snapshot restores could not
	// be enabled.
	Unsuccessful: [...null | #EnableFastSnapshotRestoreErrorItem] @go(,[]*EnableFastSnapshotRestoreErrorItem)
}

#EnableImageDeprecationInput: {
	// The date and time to deprecate the AMI, in UTC, in the following format:
	// YYYY-MM-DDTHH:MM:SSZ. If you specify a value for seconds, Amazon EC2 rounds
	// the seconds to the nearest minute.
	//
	// You can’t specify a date in the past. The upper limit for DeprecateAt is
	// 10 years from now.
	//
	// DeprecateAt is a required field
	DeprecateAt?: null | time.Time @go(,*time.Time)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AMI.
	//
	// ImageId is a required field
	ImageId?: null | string @go(,*string)
}

#EnableImageDeprecationOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#EnableSerialConsoleAccessInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#EnableSerialConsoleAccessOutput: {
	// If true, access to the EC2 serial console of all instances is enabled for
	// your account. If false, access to the EC2 serial console of all instances
	// is disabled for your account.
	SerialConsoleAccessEnabled?: null | bool @go(,*bool)
}

#EnableTransitGatewayRouteTablePropagationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the propagation route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#EnableTransitGatewayRouteTablePropagationOutput: {
	// Information about route propagation.
	Propagation?: null | #TransitGatewayPropagation @go(,*TransitGatewayPropagation)
}

// Contains the parameters for EnableVgwRoutePropagation.
#EnableVgwRoutePropagationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the virtual private gateway that is attached to a VPC. The virtual
	// private gateway must be attached to the same VPC that the routing tables
	// are associated with.
	//
	// GatewayId is a required field
	GatewayId?: null | string @go(,*string)

	// The ID of the route table. The routing table must be associated with the
	// same VPC that the virtual private gateway is attached to.
	//
	// RouteTableId is a required field
	RouteTableId?: null | string @go(,*string)
}

#EnableVolumeIOInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the volume.
	//
	// VolumeId is a required field
	VolumeId?: null | string @go(,*string)
}

#EnableVpcClassicLinkDnsSupportInput: {
	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

#EnableVpcClassicLinkDnsSupportOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#EnableVpcClassicLinkInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#EnableVpcClassicLinkOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
#EnclaveOptions: {
	// If this parameter is set to true, the instance is enabled for Amazon Web
	// Services Nitro Enclaves; otherwise, it is not enabled for Amazon Web Services
	// Nitro Enclaves.
	Enabled?: null | bool @go(,*bool)
}

// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
// For more information, see What is Amazon Web Services Nitro Enclaves? (https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html)
// in the Amazon Web Services Nitro Enclaves User Guide.
#EnclaveOptionsRequest: {
	// To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter
	// to true.
	Enabled?: null | bool @go(,*bool)
}

// Describes an EC2 Fleet or Spot Fleet event.
#EventInformation: {
	// The description of the event.
	EventDescription?: null | string @go(,*string)

	// The event.
	//
	// The following are the error events:
	//
	//    * iamFleetRoleInvalid - The EC2 Fleet or Spot Fleet did not have the required
	//    permissions either to launch or terminate an instance.
	//
	//    * spotFleetRequestConfigurationInvalid - The configuration is not valid.
	//    For more information, see the description of the event.
	//
	//    * spotInstanceCountLimitExceeded - You've reached the limit on the number
	//    of Spot Instances that you can launch.
	//
	// The following are the fleetRequestChange events:
	//
	//    * active - The EC2 Fleet or Spot Fleet request has been validated and
	//    Amazon EC2 is attempting to maintain the target number of running Spot
	//    Instances.
	//
	//    * cancelled - The EC2 Fleet or Spot Fleet request is canceled and has
	//    no running Spot Instances. The EC2 Fleet or Spot Fleet will be deleted
	//    two days after its instances were terminated.
	//
	//    * cancelled_running - The EC2 Fleet or Spot Fleet request is canceled
	//    and does not launch additional Spot Instances. Existing Spot Instances
	//    continue to run until they are interrupted or terminated.
	//
	//    * cancelled_terminating - The EC2 Fleet or Spot Fleet request is canceled
	//    and its Spot Instances are terminating.
	//
	//    * expired - The EC2 Fleet or Spot Fleet request has expired. A subsequent
	//    event indicates that the instances were terminated, if the request was
	//    created with TerminateInstancesWithExpiration set.
	//
	//    * modify_in_progress - A request to modify the EC2 Fleet or Spot Fleet
	//    request was accepted and is in progress.
	//
	//    * modify_succeeded - The EC2 Fleet or Spot Fleet request was modified.
	//
	//    * price_update - The price for a launch configuration was adjusted because
	//    it was too high. This change is permanent.
	//
	//    * submitted - The EC2 Fleet or Spot Fleet request is being evaluated and
	//    Amazon EC2 is preparing to launch the target number of Spot Instances.
	//
	// The following are the instanceChange events:
	//
	//    * launched - A request was fulfilled and a new instance was launched.
	//
	//    * terminated - An instance was terminated by the user.
	//
	// The following are the Information events:
	//
	//    * launchSpecTemporarilyBlacklisted - The configuration is not valid and
	//    several attempts to launch instances have failed. For more information,
	//    see the description of the event.
	//
	//    * launchSpecUnusable - The price in a launch specification is not valid
	//    because it is below the Spot price or the Spot price is above the On-Demand
	//    price.
	//
	//    * fleetProgressHalted - The price in every launch specification is not
	//    valid. A launch specification might become valid if the Spot price changes.
	EventSubType?: null | string @go(,*string)

	// The ID of the instance. This information is available only for instanceChange
	// events.
	InstanceId?: null | string @go(,*string)
}

// Describes an explanation code for an unreachable path. For more information,
// see Reachability Analyzer explanation codes (https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html).
#Explanation: {
	// The network ACL.
	Acl?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The network ACL rule.
	AclRule?: null | #AnalysisAclRule @go(,*AnalysisAclRule)

	// The IPv4 address, in CIDR notation.
	Address?: null | string @go(,*string)

	// The IPv4 addresses, in CIDR notation.
	Addresses: [...null | string] @go(,[]*string)

	// The resource to which the component is attached.
	AttachedTo?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The Availability Zones.
	AvailabilityZones: [...null | string] @go(,[]*string)

	// The CIDR ranges.
	Cidrs: [...null | string] @go(,[]*string)

	// The listener for a Classic Load Balancer.
	ClassicLoadBalancerListener?: null | #AnalysisLoadBalancerListener @go(,*AnalysisLoadBalancerListener)

	// The component.
	Component?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The customer gateway.
	CustomerGateway?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The destination.
	Destination?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The destination VPC.
	DestinationVpc?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The direction. The following are possible values:
	//
	//    * egress
	//
	//    * ingress
	Direction?: null | string @go(,*string)

	// The load balancer listener.
	ElasticLoadBalancerListener?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The explanation code.
	ExplanationCode?: null | string @go(,*string)

	// The route table.
	IngressRouteTable?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The internet gateway.
	InternetGateway?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The Amazon Resource Name (ARN) of the load balancer.
	LoadBalancerArn?: null | string @go(,*string)

	// The listener port of the load balancer.
	LoadBalancerListenerPort?: null | int64 @go(,*int64)

	// The target.
	LoadBalancerTarget?: null | #AnalysisLoadBalancerTarget @go(,*AnalysisLoadBalancerTarget)

	// The target group.
	LoadBalancerTargetGroup?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The target groups.
	LoadBalancerTargetGroups: [...null | #AnalysisComponent] @go(,[]*AnalysisComponent)

	// The target port.
	LoadBalancerTargetPort?: null | int64 @go(,*int64)

	// The missing component.
	MissingComponent?: null | string @go(,*string)

	// The NAT gateway.
	NatGateway?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The network interface.
	NetworkInterface?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The packet field.
	PacketField?: null | string @go(,*string)

	// The port.
	Port?: null | int64 @go(,*int64)

	// The port ranges.
	PortRanges: [...null | #PortRange] @go(,[]*PortRange)

	// The prefix list.
	PrefixList?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The protocols.
	Protocols: [...null | string] @go(,[]*string)

	// The route table.
	RouteTable?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The route table route.
	RouteTableRoute?: null | #AnalysisRouteTableRoute @go(,*AnalysisRouteTableRoute)

	// The security group.
	SecurityGroup?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The security group rule.
	SecurityGroupRule?: null | #AnalysisSecurityGroupRule @go(,*AnalysisSecurityGroupRule)

	// The security groups.
	SecurityGroups: [...null | #AnalysisComponent] @go(,[]*AnalysisComponent)

	// The source VPC.
	SourceVpc?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The state.
	State?: null | string @go(,*string)

	// The subnet.
	Subnet?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The route table for the subnet.
	SubnetRouteTable?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The component VPC.
	Vpc?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The VPC endpoint.
	VpcEndpoint?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The VPC peering connection.
	VpcPeeringConnection?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The VPN connection.
	VpnConnection?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The VPN gateway.
	VpnGateway?: null | #AnalysisComponent @go(,*AnalysisComponent)
}

#ExportClientVpnClientCertificateRevocationListInput: {
	// The ID of the Client VPN endpoint.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#ExportClientVpnClientCertificateRevocationListOutput: {
	// Information about the client certificate revocation list.
	CertificateRevocationList?: null | string @go(,*string)

	// The current state of the client certificate revocation list.
	Status?: null | #ClientCertificateRevocationListStatus @go(,*ClientCertificateRevocationListStatus)
}

#ExportClientVpnClientConfigurationInput: {
	// The ID of the Client VPN endpoint.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#ExportClientVpnClientConfigurationOutput: {
	// The contents of the Client VPN endpoint configuration file.
	ClientConfiguration?: null | string @go(,*string)
}

#ExportImageInput: {
	// Token to enable idempotency for export image requests.
	ClientToken?: null | string @go(,*string)

	// A description of the image being exported. The maximum length is 255 characters.
	Description?: null | string @go(,*string)

	// The disk image format.
	//
	// DiskImageFormat is a required field
	DiskImageFormat?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the image.
	//
	// ImageId is a required field
	ImageId?: null | string @go(,*string)

	// The name of the role that grants VM Import/Export permission to export images
	// to your Amazon S3 bucket. If this parameter is not specified, the default
	// role is named 'vmimport'.
	RoleName?: null | string @go(,*string)

	// Information about the destination Amazon S3 bucket. The bucket must exist
	// and grant WRITE and READ_ACP permissions to the Amazon Web Services account
	// vm-import-export@amazon.com.
	//
	// S3ExportLocation is a required field
	S3ExportLocation?: null | #ExportTaskS3LocationRequest @go(,*ExportTaskS3LocationRequest)

	// The tags to apply to the export image task during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#ExportImageOutput: {
	// A description of the image being exported.
	Description?: null | string @go(,*string)

	// The disk image format for the exported image.
	DiskImageFormat?: null | string @go(,*string)

	// The ID of the export image task.
	ExportImageTaskId?: null | string @go(,*string)

	// The ID of the image.
	ImageId?: null | string @go(,*string)

	// The percent complete of the export image task.
	Progress?: null | string @go(,*string)

	// The name of the role that grants VM Import/Export permission to export images
	// to your Amazon S3 bucket.
	RoleName?: null | string @go(,*string)

	// Information about the destination Amazon S3 bucket.
	S3ExportLocation?: null | #ExportTaskS3Location @go(,*ExportTaskS3Location)

	// The status of the export image task. The possible values are active, completed,
	// deleting, and deleted.
	Status?: null | string @go(,*string)

	// The status message for the export image task.
	StatusMessage?: null | string @go(,*string)

	// Any tags assigned to the export image task.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes an export image task.
#ExportImageTask: {
	// A description of the image being exported.
	Description?: null | string @go(,*string)

	// The ID of the export image task.
	ExportImageTaskId?: null | string @go(,*string)

	// The ID of the image.
	ImageId?: null | string @go(,*string)

	// The percent complete of the export image task.
	Progress?: null | string @go(,*string)

	// Information about the destination Amazon S3 bucket.
	S3ExportLocation?: null | #ExportTaskS3Location @go(,*ExportTaskS3Location)

	// The status of the export image task. The possible values are active, completed,
	// deleting, and deleted.
	Status?: null | string @go(,*string)

	// The status message for the export image task.
	StatusMessage?: null | string @go(,*string)

	// Any tags assigned to the export image task.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes an export instance task.
#ExportTask: {
	// A description of the resource being exported.
	Description?: null | string @go(,*string)

	// The ID of the export task.
	ExportTaskId?: null | string @go(,*string)

	// Information about the export task.
	ExportToS3Task?: null | #ExportToS3Task @go(,*ExportToS3Task)

	// Information about the instance to export.
	InstanceExportDetails?: null | #InstanceExportDetails @go(,*InstanceExportDetails)

	// The state of the export task.
	State?: null | string @go(,*string)

	// The status message related to the export task.
	StatusMessage?: null | string @go(,*string)

	// The tags for the export task.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes the destination for an export image task.
#ExportTaskS3Location: {
	// The destination Amazon S3 bucket.
	S3Bucket?: null | string @go(,*string)

	// The prefix (logical hierarchy) in the bucket.
	S3Prefix?: null | string @go(,*string)
}

// Describes the destination for an export image task.
#ExportTaskS3LocationRequest: {
	// The destination Amazon S3 bucket.
	//
	// S3Bucket is a required field
	S3Bucket?: null | string @go(,*string)

	// The prefix (logical hierarchy) in the bucket.
	S3Prefix?: null | string @go(,*string)
}

// Describes the format and location for the export task.
#ExportToS3Task: {
	// The container format used to combine disk images with metadata (such as OVF).
	// If absent, only the disk image is exported.
	ContainerFormat?: null | string @go(,*string)

	// The format for the exported image.
	DiskImageFormat?: null | string @go(,*string)

	// The Amazon S3 bucket for the destination image. The destination bucket must
	// exist and grant WRITE and READ_ACP permissions to the Amazon Web Services
	// account vm-import-export@amazon.com.
	S3Bucket?: null | string @go(,*string)

	// The encryption key for your S3 bucket.
	S3Key?: null | string @go(,*string)
}

// Describes an export instance task.
#ExportToS3TaskSpecification: {
	// The container format used to combine disk images with metadata (such as OVF).
	// If absent, only the disk image is exported.
	ContainerFormat?: null | string @go(,*string)

	// The format for the exported image.
	DiskImageFormat?: null | string @go(,*string)

	// The Amazon S3 bucket for the destination image. The destination bucket must
	// exist and grant WRITE and READ_ACP permissions to the Amazon Web Services
	// account vm-import-export@amazon.com.
	S3Bucket?: null | string @go(,*string)

	// The image is written to a single object in the Amazon S3 bucket at the S3
	// key s3prefix + exportTaskId + '.' + diskImageFormat.
	S3Prefix?: null | string @go(,*string)
}

#ExportTransitGatewayRoutesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * attachment.transit-gateway-attachment-id - The id of the transit gateway
	//    attachment.
	//
	//    * attachment.resource-id - The resource id of the transit gateway attachment.
	//
	//    * route-search.exact-match - The exact match of the specified filter.
	//
	//    * route-search.longest-prefix-match - The longest prefix that matches
	//    the route.
	//
	//    * route-search.subnet-of-match - The routes with a subnet that match the
	//    specified CIDR filter.
	//
	//    * route-search.supernet-of-match - The routes with a CIDR that encompass
	//    the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31
	//    routes in your route table and you specify supernet-of-match as 10.0.1.0/30,
	//    then the result returns 10.0.1.0/29.
	//
	//    * state - The state of the route (active | blackhole).
	//
	//    * transit-gateway-route-destination-cidr-block - The CIDR range.
	//
	//    * type - The type of route (propagated | static).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The name of the S3 bucket.
	//
	// S3Bucket is a required field
	S3Bucket?: null | string @go(,*string)

	// The ID of the route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#ExportTransitGatewayRoutesOutput: {
	// The URL of the exported file in Amazon S3. For example, s3://bucket_name/VPCTransitGateway/TransitGatewayRouteTables/file_name.
	S3Location?: null | string @go(,*string)
}

// Describes a Reserved Instance whose queued purchase was not deleted.
#FailedQueuedPurchaseDeletion: {
	// The error.
	Error?: null | #DeleteQueuedReservedInstancesError @go(,*DeleteQueuedReservedInstancesError)

	// The ID of the Reserved Instance.
	ReservedInstancesId?: null | string @go(,*string)
}

// Describes the IAM SAML identity providers used for federated authentication.
#FederatedAuthentication: {
	// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
	SamlProviderArn?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the IAM SAML identity provider for the
	// self-service portal.
	SelfServiceSamlProviderArn?: null | string @go(,*string)
}

// The IAM SAML identity provider used for federated authentication.
#FederatedAuthenticationRequest: {
	// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
	SAMLProviderArn?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the IAM SAML identity provider for the
	// self-service portal.
	SelfServiceSAMLProviderArn?: null | string @go(,*string)
}

// A filter name and value pair that is used to return a more specific list
// of results from a describe operation. Filters can be used to match a set
// of resources by specific criteria, such as tags, attributes, or IDs.
#Filter: {
	// The name of the filter. Filter names are case-sensitive.
	Name?: null | string @go(,*string)

	// The filter values. Filter values are case-sensitive.
	Values: [...null | string] @go(,[]*string)
}

// Describes an EC2 Fleet.
#FleetData: {
	// The progress of the EC2 Fleet. If there is an error, the status is error.
	// After all requests are placed, the status is pending_fulfillment. If the
	// size of the EC2 Fleet is equal to or greater than its target capacity, the
	// status is fulfilled. If the size of the EC2 Fleet is decreased, the status
	// is pending_termination while instances are terminating.
	ActivityStatus?: null | string @go(,*string)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Constraints: Maximum 64 ASCII characters
	ClientToken?: null | string @go(,*string)

	// Reserved.
	Context?: null | string @go(,*string)

	// The creation date and time of the EC2 Fleet.
	CreateTime?: null | time.Time @go(,*time.Time)

	// Information about the instances that could not be launched by the fleet.
	// Valid only when Type is set to instant.
	Errors: [...null | #DescribeFleetError] @go(,[]*DescribeFleetError)

	// Indicates whether running instances should be terminated if the target capacity
	// of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
	ExcessCapacityTerminationPolicy?: null | string @go(,*string)

	// The ID of the EC2 Fleet.
	FleetId?: null | string @go(,*string)

	// The state of the EC2 Fleet.
	FleetState?: null | string @go(,*string)

	// The number of units fulfilled by this request compared to the set target
	// capacity.
	FulfilledCapacity?: null | float64 @go(,*float64)

	// The number of units fulfilled by this request compared to the set target
	// On-Demand capacity.
	FulfilledOnDemandCapacity?: null | float64 @go(,*float64)

	// Information about the instances that were launched by the fleet. Valid only
	// when Type is set to instant.
	Instances: [...null | #DescribeFleetsInstances] @go(,[]*DescribeFleetsInstances)

	// The launch template and overrides.
	LaunchTemplateConfigs: [...null | #FleetLaunchTemplateConfig] @go(,[]*FleetLaunchTemplateConfig)

	// The allocation strategy of On-Demand Instances in an EC2 Fleet.
	OnDemandOptions?: null | #OnDemandOptions @go(,*OnDemandOptions)

	// Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported
	// only for fleets of type maintain. For more information, see EC2 Fleet health
	// checks (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks)
	// in the Amazon EC2 User Guide.
	ReplaceUnhealthyInstances?: null | bool @go(,*bool)

	// The configuration of Spot Instances in an EC2 Fleet.
	SpotOptions?: null | #SpotOptions @go(,*SpotOptions)

	// The tags for an EC2 Fleet resource.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The number of units to request. You can choose to set the target capacity
	// in terms of instances or a performance characteristic that is important to
	// your application workload, such as vCPUs, memory, or I/O. If the request
	// type is maintain, you can specify a target capacity of 0 and add capacity
	// later.
	TargetCapacitySpecification?: null | #TargetCapacitySpecification @go(,*TargetCapacitySpecification)

	// Indicates whether running instances should be terminated when the EC2 Fleet
	// expires.
	TerminateInstancesWithExpiration?: null | bool @go(,*bool)

	// The type of request. Indicates whether the EC2 Fleet only requests the target
	// capacity, or also attempts to maintain it. If you request a certain target
	// capacity, EC2 Fleet only places the required requests; it does not attempt
	// to replenish instances if capacity is diminished, and it does not submit
	// requests in alternative capacity pools if capacity is unavailable. To maintain
	// a certain target capacity, EC2 Fleet places the required requests to meet
	// this target capacity. It also automatically replenishes any interrupted Spot
	// Instances. Default: maintain.
	Type?: null | string @go(,*string)

	// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	// The default is to start fulfilling the request immediately.
	ValidFrom?: null | time.Time @go(,*time.Time)

	// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	// At this point, no new instance requests are placed or able to fulfill the
	// request. The default end date is 7 days from the current date.
	ValidUntil?: null | time.Time @go(,*time.Time)
}

// Describes a launch template and overrides.
#FleetLaunchTemplateConfig: {
	// The launch template.
	LaunchTemplateSpecification?: null | #FleetLaunchTemplateSpecification @go(,*FleetLaunchTemplateSpecification)

	// Any parameters that you specify override the same parameters in the launch
	// template.
	Overrides: [...null | #FleetLaunchTemplateOverrides] @go(,[]*FleetLaunchTemplateOverrides)
}

// Describes a launch template and overrides.
#FleetLaunchTemplateConfigRequest: {
	// The launch template to use. You must specify either the launch template ID
	// or launch template name in the request.
	LaunchTemplateSpecification?: null | #FleetLaunchTemplateSpecificationRequest @go(,*FleetLaunchTemplateSpecificationRequest)

	// Any parameters that you specify override the same parameters in the launch
	// template.
	//
	// For fleets of type request and maintain, a maximum of 300 items is allowed
	// across all launch templates.
	Overrides: [...null | #FleetLaunchTemplateOverridesRequest] @go(,[]*FleetLaunchTemplateOverridesRequest)
}

// Describes overrides for a launch template.
#FleetLaunchTemplateOverrides: {
	// The Availability Zone in which to launch the instances.
	AvailabilityZone?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The maximum price per unit hour that you are willing to pay for a Spot Instance.
	MaxPrice?: null | string @go(,*string)

	// The location where the instance launched, if applicable.
	Placement?: null | #PlacementResponse @go(,*PlacementResponse)

	// The priority for the launch template override. The highest priority is launched
	// first.
	//
	// If the On-Demand AllocationStrategy is set to prioritized, EC2 Fleet uses
	// priority to determine which launch template override to use first in fulfilling
	// On-Demand capacity.
	//
	// If the Spot AllocationStrategy is set to capacity-optimized-prioritized,
	// EC2 Fleet uses priority on a best-effort basis to determine which launch
	// template override to use in fulfilling Spot capacity, but optimizes for capacity
	// first.
	//
	// Valid values are whole numbers starting at 0. The lower the number, the higher
	// the priority. If no number is set, the override has the lowest priority.
	// You can set the same priority for different launch template overrides.
	Priority?: null | float64 @go(,*float64)

	// The ID of the subnet in which to launch the instances.
	SubnetId?: null | string @go(,*string)

	// The number of units provided by the specified instance type.
	WeightedCapacity?: null | float64 @go(,*float64)
}

// Describes overrides for a launch template.
#FleetLaunchTemplateOverridesRequest: {
	// The Availability Zone in which to launch the instances.
	AvailabilityZone?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The maximum price per unit hour that you are willing to pay for a Spot Instance.
	MaxPrice?: null | string @go(,*string)

	// The location where the instance launched, if applicable.
	Placement?: null | #Placement @go(,*Placement)

	// The priority for the launch template override. The highest priority is launched
	// first.
	//
	// If the On-Demand AllocationStrategy is set to prioritized, EC2 Fleet uses
	// priority to determine which launch template override to use first in fulfilling
	// On-Demand capacity.
	//
	// If the Spot AllocationStrategy is set to capacity-optimized-prioritized,
	// EC2 Fleet uses priority on a best-effort basis to determine which launch
	// template override to use in fulfilling Spot capacity, but optimizes for capacity
	// first.
	//
	// Valid values are whole numbers starting at 0. The lower the number, the higher
	// the priority. If no number is set, the launch template override has the lowest
	// priority. You can set the same priority for different launch template overrides.
	Priority?: null | float64 @go(,*float64)

	// The IDs of the subnets in which to launch the instances. Separate multiple
	// subnet IDs using commas (for example, subnet-1234abcdeexample1, subnet-0987cdef6example2).
	// A request of type instant can have only one subnet ID.
	SubnetId?: null | string @go(,*string)

	// The number of units provided by the specified instance type.
	WeightedCapacity?: null | float64 @go(,*float64)
}

// Describes the Amazon EC2 launch template and the launch template version
// that can be used by a Spot Fleet request to configure Amazon EC2 instances.
// For information about launch templates, see Launching an instance from a
// launch template (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html)
// in the Amazon EC2 User Guide for Linux Instances.
#FleetLaunchTemplateSpecification: {
	// The ID of the launch template. If you specify the template ID, you can't
	// specify the template name.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template. If you specify the template name, you can't
	// specify the template ID.
	LaunchTemplateName?: null | string @go(,*string)

	// The launch template version number, $Latest, or $Default. You must specify
	// a value, otherwise the request fails.
	//
	// If the value is $Latest, Amazon EC2 uses the latest version of the launch
	// template.
	//
	// If the value is $Default, Amazon EC2 uses the default version of the launch
	// template.
	Version?: null | string @go(,*string)
}

// Describes the Amazon EC2 launch template and the launch template version
// that can be used by an EC2 Fleet to configure Amazon EC2 instances. For information
// about launch templates, see Launching an instance from a launch template
// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html)
// in the Amazon EC2 User Guide.
#FleetLaunchTemplateSpecificationRequest: {
	// The ID of the launch template. If you specify the template ID, you can't
	// specify the template name.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template. If you specify the template name, you can't
	// specify the template ID.
	LaunchTemplateName?: null | string @go(,*string)

	// The launch template version number, $Latest, or $Default. You must specify
	// a value, otherwise the request fails.
	//
	// If the value is $Latest, Amazon EC2 uses the latest version of the launch
	// template.
	//
	// If the value is $Default, Amazon EC2 uses the default version of the launch
	// template.
	Version?: null | string @go(,*string)
}

// The strategy to use when Amazon EC2 emits a signal that your Spot Instance
// is at an elevated risk of being interrupted.
#FleetSpotCapacityRebalance: {
	// To allow EC2 Fleet to launch a replacement Spot Instance when an instance
	// rebalance notification is emitted for an existing Spot Instance in the fleet,
	// specify launch. Only available for fleets of type maintain.
	//
	// When a replacement instance is launched, the instance marked for rebalance
	// is not automatically terminated. You can terminate it, or you can leave it
	// running. You are charged for both instances while they are running.
	ReplacementStrategy?: null | string @go(,*string)
}

// The Spot Instance replacement strategy to use when Amazon EC2 emits a signal
// that your Spot Instance is at an elevated risk of being interrupted. For
// more information, see Capacity rebalancing (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#ec2-fleet-capacity-rebalance)
// in the Amazon EC2 User Guide.
#FleetSpotCapacityRebalanceRequest: {
	// The replacement strategy to use. Only available for fleets of type maintain.
	//
	// To allow EC2 Fleet to launch a replacement Spot Instance when an instance
	// rebalance notification is emitted for an existing Spot Instance in the fleet,
	// specify launch. You must specify a value, otherwise you get an error.
	//
	// When a replacement instance is launched, the instance marked for rebalance
	// is not automatically terminated. You can terminate it, or you can leave it
	// running. You are charged for all instances while they are running.
	ReplacementStrategy?: null | string @go(,*string)
}

// The strategies for managing your Spot Instances that are at an elevated risk
// of being interrupted.
#FleetSpotMaintenanceStrategies: {
	// The strategy to use when Amazon EC2 emits a signal that your Spot Instance
	// is at an elevated risk of being interrupted.
	CapacityRebalance?: null | #FleetSpotCapacityRebalance @go(,*FleetSpotCapacityRebalance)
}

// The strategies for managing your Spot Instances that are at an elevated risk
// of being interrupted.
#FleetSpotMaintenanceStrategiesRequest: {
	// The strategy to use when Amazon EC2 emits a signal that your Spot Instance
	// is at an elevated risk of being interrupted.
	CapacityRebalance?: null | #FleetSpotCapacityRebalanceRequest @go(,*FleetSpotCapacityRebalanceRequest)
}

// Describes a flow log.
#FlowLog: {
	// The date and time the flow log was created.
	CreationTime?: null | time.Time @go(,*time.Time)

	// Information about the error that occurred. Rate limited indicates that CloudWatch
	// Logs throttling has been applied for one or more network interfaces, or that
	// you've reached the limit on the number of log groups that you can create.
	// Access error indicates that the IAM role associated with the flow log does
	// not have sufficient permissions to publish to CloudWatch Logs. Unknown error
	// indicates an internal error.
	DeliverLogsErrorMessage?: null | string @go(,*string)

	// The ARN of the IAM role that posts logs to CloudWatch Logs.
	DeliverLogsPermissionArn?: null | string @go(,*string)

	// The status of the logs delivery (SUCCESS | FAILED).
	DeliverLogsStatus?: null | string @go(,*string)

	// The flow log ID.
	FlowLogId?: null | string @go(,*string)

	// The status of the flow log (ACTIVE).
	FlowLogStatus?: null | string @go(,*string)

	// Specifies the destination to which the flow log data is published. Flow log
	// data can be published to an CloudWatch Logs log group or an Amazon S3 bucket.
	// If the flow log publishes to CloudWatch Logs, this element indicates the
	// Amazon Resource Name (ARN) of the CloudWatch Logs log group to which the
	// data is published. If the flow log publishes to Amazon S3, this element indicates
	// the ARN of the Amazon S3 bucket to which the data is published.
	LogDestination?: null | string @go(,*string)

	// Specifies the type of destination to which the flow log data is published.
	// Flow log data can be published to CloudWatch Logs or Amazon S3.
	LogDestinationType?: null | string @go(,*string)

	// The format of the flow log record.
	LogFormat?: null | string @go(,*string)

	// The name of the flow log group.
	LogGroupName?: null | string @go(,*string)

	// The maximum interval of time, in seconds, during which a flow of packets
	// is captured and aggregated into a flow log record.
	//
	// When a network interface is attached to a Nitro-based instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances),
	// the aggregation interval is always 60 seconds (1 minute) or less, regardless
	// of the specified value.
	//
	// Valid Values: 60 | 600
	MaxAggregationInterval?: null | int64 @go(,*int64)

	// The ID of the resource on which the flow log was created.
	ResourceId?: null | string @go(,*string)

	// The tags for the flow log.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The type of traffic captured for the flow log.
	TrafficType?: null | string @go(,*string)
}

// Describes the FPGA accelerator for the instance type.
#FpgaDeviceInfo: {
	// The count of FPGA accelerators for the instance type.
	Count?: null | int64 @go(,*int64)

	// The manufacturer of the FPGA accelerator.
	Manufacturer?: null | string @go(,*string)

	// Describes the memory for the FPGA accelerator for the instance type.
	MemoryInfo?: null | #FpgaDeviceMemoryInfo @go(,*FpgaDeviceMemoryInfo)

	// The name of the FPGA accelerator.
	Name?: null | string @go(,*string)
}

// Describes the memory for the FPGA accelerator for the instance type.
#FpgaDeviceMemoryInfo: {
	// The size of the memory available to the FPGA accelerator, in MiB.
	SizeInMiB?: null | int64 @go(,*int64)
}

// Describes an Amazon FPGA image (AFI).
#FpgaImage: {
	// The date and time the AFI was created.
	CreateTime?: null | time.Time @go(,*time.Time)

	// Indicates whether data retention support is enabled for the AFI.
	DataRetentionSupport?: null | bool @go(,*bool)

	// The description of the AFI.
	Description?: null | string @go(,*string)

	// The global FPGA image identifier (AGFI ID).
	FpgaImageGlobalId?: null | string @go(,*string)

	// The FPGA image identifier (AFI ID).
	FpgaImageId?: null | string @go(,*string)

	// The name of the AFI.
	Name?: null | string @go(,*string)

	// The alias of the AFI owner. Possible values include self, amazon, and aws-marketplace.
	OwnerAlias?: null | string @go(,*string)

	// The AWS account ID of the AFI owner.
	OwnerId?: null | string @go(,*string)

	// Information about the PCI bus.
	PciId?: null | #PciId @go(,*PciId)

	// The product codes for the AFI.
	ProductCodes: [...null | #ProductCode] @go(,[]*ProductCode)

	// Indicates whether the AFI is public.
	Public?: null | bool @go(,*bool)

	// The version of the AWS Shell that was used to create the bitstream.
	ShellVersion?: null | string @go(,*string)

	// Information about the state of the AFI.
	State?: null | #FpgaImageState @go(,*FpgaImageState)

	// Any tags assigned to the AFI.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The time of the most recent update to the AFI.
	UpdateTime?: null | time.Time @go(,*time.Time)
}

// Describes an Amazon FPGA image (AFI) attribute.
#FpgaImageAttribute: {
	// The description of the AFI.
	Description?: null | string @go(,*string)

	// The ID of the AFI.
	FpgaImageId?: null | string @go(,*string)

	// The load permissions.
	LoadPermissions: [...null | #LoadPermission] @go(,[]*LoadPermission)

	// The name of the AFI.
	Name?: null | string @go(,*string)

	// The product codes.
	ProductCodes: [...null | #ProductCode] @go(,[]*ProductCode)
}

// Describes the state of the bitstream generation process for an Amazon FPGA
// image (AFI).
#FpgaImageState: {
	// The state. The following are the possible values:
	//
	//    * pending - AFI bitstream generation is in progress.
	//
	//    * available - The AFI is available for use.
	//
	//    * failed - AFI bitstream generation failed.
	//
	//    * unavailable - The AFI is no longer available for use.
	Code?: null | string @go(,*string)

	// If the state is failed, this is the error message.
	Message?: null | string @go(,*string)
}

// Describes the FPGAs for the instance type.
#FpgaInfo: {
	// Describes the FPGAs for the instance type.
	Fpgas: [...null | #FpgaDeviceInfo] @go(,[]*FpgaDeviceInfo)

	// The total memory of all FPGA accelerators for the instance type.
	TotalFpgaMemoryInMiB?: null | int64 @go(,*int64)
}

#GetAssociatedEnclaveCertificateIamRolesInput: {
	// The ARN of the ACM certificate for which to view the associated IAM roles,
	// encryption keys, and Amazon S3 object information.
	CertificateArn?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#GetAssociatedEnclaveCertificateIamRolesOutput: {
	// Information about the associated IAM roles.
	AssociatedRoles: [...null | #AssociatedRole] @go(,[]*AssociatedRole)
}

#GetAssociatedIpv6PoolCidrsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the IPv6 address pool.
	//
	// PoolId is a required field
	PoolId?: null | string @go(,*string)
}

#GetAssociatedIpv6PoolCidrsOutput: {
	// Information about the IPv6 CIDR block associations.
	Ipv6CidrAssociations: [...null | #Ipv6CidrAssociation] @go(,[]*Ipv6CidrAssociation)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#GetCapacityReservationUsageInput: {
	// The ID of the Capacity Reservation.
	//
	// CapacityReservationId is a required field
	CapacityReservationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the returned
	// nextToken value. This value can be between 5 and 500. If maxResults is given
	// a larger value than 500, you receive an error.
	//
	// Valid range: Minimum value of 1. Maximum value of 1000.
	MaxResults?: null | int64 @go(,*int64)

	// The token to use to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#GetCapacityReservationUsageOutput: {
	// The remaining capacity. Indicates the number of instances that can be launched
	// in the Capacity Reservation.
	AvailableInstanceCount?: null | int64 @go(,*int64)

	// The ID of the Capacity Reservation.
	CapacityReservationId?: null | string @go(,*string)

	// The type of instance for which the Capacity Reservation reserves capacity.
	InstanceType?: null | string @go(,*string)

	// Information about the Capacity Reservation usage.
	InstanceUsages: [...null | #InstanceUsage] @go(,[]*InstanceUsage)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// The current state of the Capacity Reservation. A Capacity Reservation can
	// be in one of the following states:
	//
	//    * active - The Capacity Reservation is active and the capacity is available
	//    for your use.
	//
	//    * expired - The Capacity Reservation expired automatically at the date
	//    and time specified in your request. The reserved capacity is no longer
	//    available for your use.
	//
	//    * cancelled - The Capacity Reservation was cancelled. The reserved capacity
	//    is no longer available for your use.
	//
	//    * pending - The Capacity Reservation request was successful but the capacity
	//    provisioning is still pending.
	//
	//    * failed - The Capacity Reservation request has failed. A request might
	//    fail due to invalid request parameters, capacity constraints, or instance
	//    limit constraints. Failed requests are retained for 60 minutes.
	State?: null | string @go(,*string)

	// The number of instances for which the Capacity Reservation reserves capacity.
	TotalInstanceCount?: null | int64 @go(,*int64)
}

#GetCoipPoolUsageInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The filters. The following are the possible values:
	//
	//    * coip-address-usage.allocation-id
	//
	//    * coip-address-usage.aws-account-id
	//
	//    * coip-address-usage.aws-service
	//
	//    * coip-address-usage.co-ip
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the address pool.
	//
	// PoolId is a required field
	PoolId?: null | string @go(,*string)
}

#GetCoipPoolUsageOutput: {
	// Information about the address usage.
	CoipAddressUsages: [...null | #CoipAddressUsage] @go(,[]*CoipAddressUsage)

	// The ID of the customer-owned address pool.
	CoipPoolId?: null | string @go(,*string)

	// The ID of the local gateway route table.
	LocalGatewayRouteTableId?: null | string @go(,*string)
}

#GetConsoleOutputInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// When enabled, retrieves the latest console output for the instance.
	//
	// Default: disabled (false)
	Latest?: null | bool @go(,*bool)
}

#GetConsoleOutputOutput: {
	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The console output, base64-encoded. If you are using a command line tool,
	// the tool decodes the output for you.
	Output?: null | string @go(,*string)

	// The time at which the output was last updated.
	Timestamp?: null | time.Time @go(,*time.Time)
}

#GetConsoleScreenshotInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// When set to true, acts as keystroke input and wakes up an instance that's
	// in standby or "sleep" mode.
	WakeUp?: null | bool @go(,*bool)
}

#GetConsoleScreenshotOutput: {
	// The data that comprises the image.
	ImageData?: null | string @go(,*string)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)
}

#GetDefaultCreditSpecificationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The instance family.
	//
	// InstanceFamily is a required field
	InstanceFamily?: null | string @go(,*string)
}

#GetDefaultCreditSpecificationOutput: {
	// The default credit option for CPU usage of the instance family.
	InstanceFamilyCreditSpecification?: null | #InstanceFamilyCreditSpecification @go(,*InstanceFamilyCreditSpecification)
}

#GetEbsDefaultKmsKeyIdInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#GetEbsDefaultKmsKeyIdOutput: {
	// The Amazon Resource Name (ARN) of the default KMS key for encryption by default.
	KmsKeyId?: null | string @go(,*string)
}

#GetEbsEncryptionByDefaultInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#GetEbsEncryptionByDefaultOutput: {
	// Indicates whether encryption by default is enabled.
	EbsEncryptionByDefault?: null | bool @go(,*bool)
}

#GetFlowLogsIntegrationTemplateInput: {
	// To store the CloudFormation template in Amazon S3, specify the location in
	// Amazon S3.
	//
	// ConfigDeliveryS3DestinationArn is a required field
	ConfigDeliveryS3DestinationArn?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the flow log.
	//
	// FlowLogId is a required field
	FlowLogId?: null | string @go(,*string)

	// Information about the service integration.
	//
	// IntegrateServices is a required field
	IntegrateServices?: null | #IntegrateServices @go(,*IntegrateServices)
}

#GetFlowLogsIntegrationTemplateOutput: {
	// The generated CloudFormation template.
	Result?: null | string @go(,*string)
}

#GetGroupsForCapacityReservationInput: {
	// The ID of the Capacity Reservation.
	//
	// CapacityReservationId is a required field
	CapacityReservationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return for the request in a single page.
	// The remaining results can be seen by sending another request with the returned
	// nextToken value. This value can be between 5 and 500. If maxResults is given
	// a larger value than 500, you receive an error.
	MaxResults?: null | int64 @go(,*int64)

	// The token to use to retrieve the next page of results.
	NextToken?: null | string @go(,*string)
}

#GetGroupsForCapacityReservationOutput: {
	// Information about the resource groups to which the Capacity Reservation has
	// been added.
	CapacityReservationGroups: [...null | #CapacityReservationGroup] @go(,[]*CapacityReservationGroup)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#GetHostReservationPurchasePreviewInput: {
	// The IDs of the Dedicated Hosts with which the reservation is associated.
	//
	// HostIdSet is a required field
	HostIdSet: [...null | string] @go(,[]*string)

	// The offering ID of the reservation.
	//
	// OfferingId is a required field
	OfferingId?: null | string @go(,*string)
}

#GetHostReservationPurchasePreviewOutput: {
	// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts
	// are specified. At this time, the only supported currency is USD.
	CurrencyCode?: null | string @go(,*string)

	// The purchase information of the Dedicated Host reservation and the Dedicated
	// Hosts associated with it.
	Purchase: [...null | #Purchase] @go(,[]*Purchase)

	// The potential total hourly price of the reservation per hour.
	TotalHourlyPrice?: null | string @go(,*string)

	// The potential total upfront price. This is billed immediately.
	TotalUpfrontPrice?: null | string @go(,*string)
}

#GetLaunchTemplateDataInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)
}

#GetLaunchTemplateDataOutput: {
	// The instance data.
	LaunchTemplateData?: null | #ResponseLaunchTemplateData @go(,*ResponseLaunchTemplateData)
}

#GetManagedPrefixListAssociationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the prefix list.
	//
	// PrefixListId is a required field
	PrefixListId?: null | string @go(,*string)
}

#GetManagedPrefixListAssociationsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the associations.
	PrefixListAssociations: [...null | #PrefixListAssociation] @go(,[]*PrefixListAssociation)
}

#GetManagedPrefixListEntriesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the prefix list.
	//
	// PrefixListId is a required field
	PrefixListId?: null | string @go(,*string)

	// The version of the prefix list for which to return the entries. The default
	// is the current version.
	TargetVersion?: null | int64 @go(,*int64)
}

#GetManagedPrefixListEntriesOutput: {
	// Information about the prefix list entries.
	Entries: [...null | #PrefixListEntry] @go(,[]*PrefixListEntry)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#GetPasswordDataInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the Windows instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)
}

#GetPasswordDataOutput: {
	// The ID of the Windows instance.
	InstanceId?: null | string @go(,*string)

	// The password of the instance. Returns an empty string if the password is
	// not available.
	PasswordData?: null | string @go(,*string)

	// The time the data was last updated.
	Timestamp?: null | time.Time @go(,*time.Time)
}

// Contains the parameters for GetReservedInstanceExchangeQuote.
#GetReservedInstancesExchangeQuoteInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the Convertible Reserved Instances to exchange.
	//
	// ReservedInstanceIds is a required field
	ReservedInstanceIds: [...null | string] @go(,[]*string)

	// The configuration of the target Convertible Reserved Instance to exchange
	// for your current Convertible Reserved Instances.
	TargetConfigurations: [...null | #TargetConfigurationRequest] @go(,[]*TargetConfigurationRequest)
}

// Contains the output of GetReservedInstancesExchangeQuote.
#GetReservedInstancesExchangeQuoteOutput: {
	// The currency of the transaction.
	CurrencyCode?: null | string @go(,*string)

	// If true, the exchange is valid. If false, the exchange cannot be completed.
	IsValidExchange?: null | bool @go(,*bool)

	// The new end date of the reservation term.
	OutputReservedInstancesWillExpireAt?: null | time.Time @go(,*time.Time)

	// The total true upfront charge for the exchange.
	PaymentDue?: null | string @go(,*string)

	// The cost associated with the Reserved Instance.
	ReservedInstanceValueRollup?: null | #ReservationValue @go(,*ReservationValue)

	// The configuration of your Convertible Reserved Instances.
	ReservedInstanceValueSet: [...null | #ReservedInstanceReservationValue] @go(,[]*ReservedInstanceReservationValue)

	// The cost associated with the Reserved Instance.
	TargetConfigurationValueRollup?: null | #ReservationValue @go(,*ReservationValue)

	// The values of the target Convertible Reserved Instances.
	TargetConfigurationValueSet: [...null | #TargetReservationValue] @go(,[]*TargetReservationValue)

	// Describes the reason why the exchange cannot be completed.
	ValidationFailureReason?: null | string @go(,*string)
}

#GetSerialConsoleAccessStatusInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#GetSerialConsoleAccessStatusOutput: {
	// If true, access to the EC2 serial console of all instances is enabled for
	// your account. If false, access to the EC2 serial console of all instances
	// is disabled for your account.
	SerialConsoleAccessEnabled?: null | bool @go(,*bool)
}

#GetSubnetCidrReservationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	//    * reservationType - The type of reservation (prefix | explicit).
	//
	//    * subnet-id - The ID of the subnet.
	//
	//    * tag:<key> - The key/value combination of a tag assigned to the resource.
	//    Use the tag key in the filter name and the tag value as the filter value.
	//    For example, to find all resources that have a tag with the key Owner
	//    and the value TeamA, specify tag:Owner for the filter name and TeamA for
	//    the filter value.
	//
	//    * tag-key - The key of a tag assigned to the resource. Use this filter
	//    to find all resources assigned a tag with a specific key, regardless of
	//    the tag value.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the subnet.
	//
	// SubnetId is a required field
	SubnetId?: null | string @go(,*string)
}

#GetSubnetCidrReservationsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the IPv4 subnet CIDR reservations.
	SubnetIpv4CidrReservations: [...null | #SubnetCidrReservation] @go(,[]*SubnetCidrReservation)

	// Information about the IPv6 subnet CIDR reservations.
	SubnetIpv6CidrReservations: [...null | #SubnetCidrReservation] @go(,[]*SubnetCidrReservation)
}

#GetTransitGatewayAttachmentPropagationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * transit-gateway-route-table-id - The ID of the transit gateway route
	//    table.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#GetTransitGatewayAttachmentPropagationsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the propagation route tables.
	TransitGatewayAttachmentPropagations: [...null | #TransitGatewayAttachmentPropagation] @go(,[]*TransitGatewayAttachmentPropagation)
}

#GetTransitGatewayMulticastDomainAssociationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * resource-id - The ID of the resource.
	//
	//    * resource-type - The type of resource. The valid value is: vpc.
	//
	//    * state - The state of the subnet association. Valid values are associated
	//    | associating | disassociated | disassociating.
	//
	//    * subnet-id - The ID of the subnet.
	//
	//    * transit-gateway-attachment-id - The id of the transit gateway attachment.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#GetTransitGatewayMulticastDomainAssociationsOutput: {
	// Information about the multicast domain associations.
	MulticastDomainAssociations: [...null | #TransitGatewayMulticastDomainAssociation] @go(,[]*TransitGatewayMulticastDomainAssociation)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#GetTransitGatewayPrefixListReferencesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * attachment.resource-id - The ID of the resource for the attachment.
	//
	//    * attachment.resource-type - The type of resource for the attachment.
	//    Valid values are vpc | vpn | direct-connect-gateway | peering.
	//
	//    * attachment.transit-gateway-attachment-id - The ID of the attachment.
	//
	//    * is-blackhole - Whether traffic matching the route is blocked (true |
	//    false).
	//
	//    * prefix-list-id - The ID of the prefix list.
	//
	//    * prefix-list-owner-id - The ID of the owner of the prefix list.
	//
	//    * state - The state of the prefix list reference (pending | available
	//    | modifying | deleting).
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#GetTransitGatewayPrefixListReferencesOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the prefix list references.
	TransitGatewayPrefixListReferences: [...null | #TransitGatewayPrefixListReference] @go(,[]*TransitGatewayPrefixListReference)
}

#GetTransitGatewayRouteTableAssociationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * resource-id - The ID of the resource.
	//
	//    * resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway
	//    | peering | connect.
	//
	//    * transit-gateway-attachment-id - The ID of the attachment.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#GetTransitGatewayRouteTableAssociationsOutput: {
	// Information about the associations.
	Associations: [...null | #TransitGatewayRouteTableAssociation] @go(,[]*TransitGatewayRouteTableAssociation)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#GetTransitGatewayRouteTablePropagationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * resource-id - The ID of the resource.
	//
	//    * resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway
	//    | peering | connect.
	//
	//    * transit-gateway-attachment-id - The ID of the attachment.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#GetTransitGatewayRouteTablePropagationsOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the route table propagations.
	TransitGatewayRouteTablePropagations: [...null | #TransitGatewayRouteTablePropagation] @go(,[]*TransitGatewayRouteTablePropagation)
}

// Describes the GPU accelerators for the instance type.
#GpuDeviceInfo: {
	// The number of GPUs for the instance type.
	Count?: null | int64 @go(,*int64)

	// The manufacturer of the GPU accelerator.
	Manufacturer?: null | string @go(,*string)

	// Describes the memory available to the GPU accelerator.
	MemoryInfo?: null | #GpuDeviceMemoryInfo @go(,*GpuDeviceMemoryInfo)

	// The name of the GPU accelerator.
	Name?: null | string @go(,*string)
}

// Describes the memory available to the GPU accelerator.
#GpuDeviceMemoryInfo: {
	// The size of the memory available to the GPU accelerator, in MiB.
	SizeInMiB?: null | int64 @go(,*int64)
}

// Describes the GPU accelerators for the instance type.
#GpuInfo: {
	// Describes the GPU accelerators for the instance type.
	Gpus: [...null | #GpuDeviceInfo] @go(,[]*GpuDeviceInfo)

	// The total size of the memory for the GPU accelerators for the instance type,
	// in MiB.
	TotalGpuMemoryInMiB?: null | int64 @go(,*int64)
}

// Describes a security group.
#GroupIdentifier: {
	// The ID of the security group.
	GroupId?: null | string @go(,*string)

	// The name of the security group.
	GroupName?: null | string @go(,*string)
}

// Indicates whether your instance is configured for hibernation. This parameter
// is valid only if the instance meets the hibernation prerequisites (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites).
// For more information, see Hibernate your instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)
// in the Amazon EC2 User Guide.
#HibernationOptions: {
	// If this parameter is set to true, your instance is enabled for hibernation;
	// otherwise, it is not enabled for hibernation.
	Configured?: null | bool @go(,*bool)
}

// Indicates whether your instance is configured for hibernation. This parameter
// is valid only if the instance meets the hibernation prerequisites (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites).
// For more information, see Hibernate your instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)
// in the Amazon EC2 User Guide.
#HibernationOptionsRequest: {
	// If you set this parameter to true, your instance is enabled for hibernation.
	//
	// Default: false
	Configured?: null | bool @go(,*bool)
}

// Describes an event in the history of the Spot Fleet request.
#HistoryRecord: {
	// Information about the event.
	EventInformation?: null | #EventInformation @go(,*EventInformation)

	// The event type.
	//
	//    * error - An error with the Spot Fleet request.
	//
	//    * fleetRequestChange - A change in the status or configuration of the
	//    Spot Fleet request.
	//
	//    * instanceChange - An instance was launched or terminated.
	//
	//    * Information - An informational event.
	EventType?: null | string @go(,*string)

	// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	Timestamp?: null | time.Time @go(,*time.Time)
}

// Describes an event in the history of an EC2 Fleet.
#HistoryRecordEntry: {
	// Information about the event.
	EventInformation?: null | #EventInformation @go(,*EventInformation)

	// The event type.
	EventType?: null | string @go(,*string)

	// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	Timestamp?: null | time.Time @go(,*time.Time)
}

// Describes the properties of the Dedicated Host.
#Host: {
	// The time that the Dedicated Host was allocated.
	AllocationTime?: null | time.Time @go(,*time.Time)

	// Indicates whether the Dedicated Host supports multiple instance types of
	// the same instance family. If the value is on, the Dedicated Host supports
	// multiple instance types in the instance family. If the value is off, the
	// Dedicated Host supports a single instance type only.
	AllowsMultipleInstanceTypes?: null | string @go(,*string)

	// Whether auto-placement is on or off.
	AutoPlacement?: null | string @go(,*string)

	// The Availability Zone of the Dedicated Host.
	AvailabilityZone?: null | string @go(,*string)

	// The ID of the Availability Zone in which the Dedicated Host is allocated.
	AvailabilityZoneId?: null | string @go(,*string)

	// Information about the instances running on the Dedicated Host.
	AvailableCapacity?: null | #AvailableCapacity @go(,*AvailableCapacity)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The ID of the Dedicated Host.
	HostId?: null | string @go(,*string)

	// The hardware specifications of the Dedicated Host.
	HostProperties?: null | #HostProperties @go(,*HostProperties)

	// Indicates whether host recovery is enabled or disabled for the Dedicated
	// Host.
	HostRecovery?: null | string @go(,*string)

	// The reservation ID of the Dedicated Host. This returns a null response if
	// the Dedicated Host doesn't have an associated reservation.
	HostReservationId?: null | string @go(,*string)

	// The IDs and instance type that are currently running on the Dedicated Host.
	Instances: [...null | #HostInstance] @go(,[]*HostInstance)

	// Indicates whether the Dedicated Host is in a host resource group. If memberOfServiceLinkedResourceGroup
	// is true, the host is in a host resource group; otherwise, it is not.
	MemberOfServiceLinkedResourceGroup?: null | bool @go(,*bool)

	// The ID of the Amazon Web Services account that owns the Dedicated Host.
	OwnerId?: null | string @go(,*string)

	// The time that the Dedicated Host was released.
	ReleaseTime?: null | time.Time @go(,*time.Time)

	// The Dedicated Host's state.
	State?: null | string @go(,*string)

	// Any tags assigned to the Dedicated Host.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes an instance running on a Dedicated Host.
#HostInstance: {
	// The ID of instance that is running on the Dedicated Host.
	InstanceId?: null | string @go(,*string)

	// The instance type (for example, m3.medium) of the running instance.
	InstanceType?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the instance.
	OwnerId?: null | string @go(,*string)
}

// Details about the Dedicated Host Reservation offering.
#HostOffering: {
	// The currency of the offering.
	CurrencyCode?: null | string @go(,*string)

	// The duration of the offering (in seconds).
	Duration?: null | int64 @go(,*int64)

	// The hourly price of the offering.
	HourlyPrice?: null | string @go(,*string)

	// The instance family of the offering.
	InstanceFamily?: null | string @go(,*string)

	// The ID of the offering.
	OfferingId?: null | string @go(,*string)

	// The available payment option.
	PaymentOption?: null | string @go(,*string)

	// The upfront price of the offering. Does not apply to No Upfront offerings.
	UpfrontPrice?: null | string @go(,*string)
}

// Describes the properties of a Dedicated Host.
#HostProperties: {
	// The number of cores on the Dedicated Host.
	Cores?: null | int64 @go(,*int64)

	// The instance family supported by the Dedicated Host. For example, m5.
	InstanceFamily?: null | string @go(,*string)

	// The instance type supported by the Dedicated Host. For example, m5.large.
	// If the host supports multiple instance types, no instanceType is returned.
	InstanceType?: null | string @go(,*string)

	// The number of sockets on the Dedicated Host.
	Sockets?: null | int64 @go(,*int64)

	// The total number of vCPUs on the Dedicated Host.
	TotalVCpus?: null | int64 @go(,*int64)
}

// Details about the Dedicated Host Reservation and associated Dedicated Hosts.
#HostReservation: {
	// The number of Dedicated Hosts the reservation is associated with.
	Count?: null | int64 @go(,*int64)

	// The currency in which the upfrontPrice and hourlyPrice amounts are specified.
	// At this time, the only supported currency is USD.
	CurrencyCode?: null | string @go(,*string)

	// The length of the reservation's term, specified in seconds. Can be 31536000
	// (1 year) | 94608000 (3 years).
	Duration?: null | int64 @go(,*int64)

	// The date and time that the reservation ends.
	End?: null | time.Time @go(,*time.Time)

	// The IDs of the Dedicated Hosts associated with the reservation.
	HostIdSet: [...null | string] @go(,[]*string)

	// The ID of the reservation that specifies the associated Dedicated Hosts.
	HostReservationId?: null | string @go(,*string)

	// The hourly price of the reservation.
	HourlyPrice?: null | string @go(,*string)

	// The instance family of the Dedicated Host Reservation. The instance family
	// on the Dedicated Host must be the same in order for it to benefit from the
	// reservation.
	InstanceFamily?: null | string @go(,*string)

	// The ID of the reservation. This remains the same regardless of which Dedicated
	// Hosts are associated with it.
	OfferingId?: null | string @go(,*string)

	// The payment option selected for this reservation.
	PaymentOption?: null | string @go(,*string)

	// The date and time that the reservation started.
	Start?: null | time.Time @go(,*time.Time)

	// The state of the reservation.
	State?: null | string @go(,*string)

	// Any tags assigned to the Dedicated Host Reservation.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The upfront price of the reservation.
	UpfrontPrice?: null | string @go(,*string)
}

// The internet key exchange (IKE) version permitted for the VPN tunnel.
#IKEVersionsListValue: {
	// The IKE version.
	Value?: null | string @go(,*string)
}

// The IKE version that is permitted for the VPN tunnel.
#IKEVersionsRequestListValue: {
	// The IKE version.
	Value?: null | string @go(,*string)
}

// Describes an IAM instance profile.
#IamInstanceProfile: {
	// The Amazon Resource Name (ARN) of the instance profile.
	Arn?: null | string @go(,*string)

	// The ID of the instance profile.
	Id?: null | string @go(,*string)
}

// Describes an association between an IAM instance profile and an instance.
#IamInstanceProfileAssociation: {
	// The ID of the association.
	AssociationId?: null | string @go(,*string)

	// The IAM instance profile.
	IamInstanceProfile?: null | #IamInstanceProfile @go(,*IamInstanceProfile)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The state of the association.
	State?: null | string @go(,*string)

	// The time the IAM instance profile was associated with the instance.
	Timestamp?: null | time.Time @go(,*time.Time)
}

// Describes an IAM instance profile.
#IamInstanceProfileSpecification: {
	// The Amazon Resource Name (ARN) of the instance profile.
	Arn?: null | string @go(,*string)

	// The name of the instance profile.
	Name?: null | string @go(,*string)
}

// Describes the ICMP type and code.
#IcmpTypeCode: {
	// The ICMP code. A value of -1 means all codes for the specified ICMP type.
	Code?: null | int64 @go(,*int64)

	// The ICMP type. A value of -1 means all types.
	Type?: null | int64 @go(,*int64)
}

// Describes the ID format for a resource.
#IdFormat: {
	// The date in UTC at which you are permanently switched over to using longer
	// IDs. If a deadline is not yet available for this resource type, this field
	// is not returned.
	Deadline?: null | time.Time @go(,*time.Time)

	// The type of resource.
	Resource?: null | string @go(,*string)

	// Indicates whether longer IDs (17-character IDs) are enabled for the resource.
	UseLongIds?: null | bool @go(,*bool)
}

// Describes an image.
#Image: {
	// The architecture of the image.
	Architecture?: null | string @go(,*string)

	// Any block device mapping entries.
	BlockDeviceMappings: [...null | #BlockDeviceMapping] @go(,[]*BlockDeviceMapping)

	// The boot mode of the image. For more information, see Boot modes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	BootMode?: null | string @go(,*string)

	// The date and time the image was created.
	CreationDate?: null | string @go(,*string)

	// The date and time to deprecate the AMI, in UTC, in the following format:
	// YYYY-MM-DDTHH:MM:SSZ. If you specified a value for seconds, Amazon EC2 rounds
	// the seconds to the nearest minute.
	DeprecationTime?: null | string @go(,*string)

	// The description of the AMI that was provided during image creation.
	Description?: null | string @go(,*string)

	// Specifies whether enhanced networking with ENA is enabled.
	EnaSupport?: null | bool @go(,*bool)

	// The hypervisor type of the image.
	Hypervisor?: null | string @go(,*string)

	// The ID of the AMI.
	ImageId?: null | string @go(,*string)

	// The location of the AMI.
	ImageLocation?: null | string @go(,*string)

	// The AWS account alias (for example, amazon, self) or the AWS account ID of
	// the AMI owner.
	ImageOwnerAlias?: null | string @go(,*string)

	// The type of image.
	ImageType?: null | string @go(,*string)

	// The kernel associated with the image, if any. Only applicable for machine
	// images.
	KernelId?: null | string @go(,*string)

	// The name of the AMI that was provided during image creation.
	Name?: null | string @go(,*string)

	// The AWS account ID of the image owner.
	OwnerId?: null | string @go(,*string)

	// This value is set to windows for Windows AMIs; otherwise, it is blank.
	Platform?: null | string @go(,*string)

	// The platform details associated with the billing code of the AMI. For more
	// information, see Obtaining Billing Information (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	PlatformDetails?: null | string @go(,*string)

	// Any product codes associated with the AMI.
	ProductCodes: [...null | #ProductCode] @go(,[]*ProductCode)

	// Indicates whether the image has public launch permissions. The value is true
	// if this image has public launch permissions or false if it has only implicit
	// and explicit launch permissions.
	Public?: null | bool @go(,*bool)

	// The RAM disk associated with the image, if any. Only applicable for machine
	// images.
	RamdiskId?: null | string @go(,*string)

	// The device name of the root device volume (for example, /dev/sda1).
	RootDeviceName?: null | string @go(,*string)

	// The type of root device used by the AMI. The AMI can use an EBS volume or
	// an instance store volume.
	RootDeviceType?: null | string @go(,*string)

	// Specifies whether enhanced networking with the Intel 82599 Virtual Function
	// interface is enabled.
	SriovNetSupport?: null | string @go(,*string)

	// The current state of the AMI. If the state is available, the image is successfully
	// registered and can be used to launch an instance.
	State?: null | string @go(,*string)

	// The reason for the state change.
	StateReason?: null | #StateReason @go(,*StateReason)

	// Any tags assigned to the image.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The operation of the Amazon EC2 instance and the billing code that is associated
	// with the AMI. usageOperation corresponds to the lineitem/Operation (https://docs.aws.amazon.com/cur/latest/userguide/Lineitem-columns.html#Lineitem-details-O-Operation)
	// column on your AWS Cost and Usage Report and in the AWS Price List API (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html).
	// For the list of UsageOperation codes, see Platform Details and Usage Operation
	// Billing Codes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html#billing-info)
	// in the Amazon Elastic Compute Cloud User Guide.
	UsageOperation?: null | string @go(,*string)

	// The type of virtualization of the AMI.
	VirtualizationType?: null | string @go(,*string)
}

// Describes the disk container object for an import image task.
#ImageDiskContainer: {
	// The description of the disk image.
	Description?: null | string @go(,*string)

	// The block device mapping for the disk.
	DeviceName?: null | string @go(,*string)

	// The format of the disk image being imported.
	//
	// Valid values: OVA | VHD | VHDX | VMDK | RAW
	Format?: null | string @go(,*string)

	// The ID of the EBS snapshot to be used for importing the snapshot.
	SnapshotId?: null | string @go(,*string)

	// The URL to the Amazon S3-based disk image being imported. The URL can either
	// be a https URL (https://..) or an Amazon S3 URL (s3://..)
	Url?: null | string @go(,*string)

	// The S3 bucket for the disk image.
	UserBucket?: null | #UserBucket @go(,*UserBucket)
}

#ImportClientVpnClientCertificateRevocationListInput: {
	// The client certificate revocation list file. For more information, see Generate
	// a Client Certificate Revocation List (https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-working-certificates.html#cvpn-working-certificates-generate)
	// in the AWS Client VPN Administrator Guide.
	//
	// CertificateRevocationList is a required field
	CertificateRevocationList?: null | string @go(,*string)

	// The ID of the Client VPN endpoint to which the client certificate revocation
	// list applies.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#ImportClientVpnClientCertificateRevocationListOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#ImportImageInput: {
	// The architecture of the virtual machine.
	//
	// Valid values: i386 | x86_64 | arm64
	Architecture?: null | string @go(,*string)

	// The client-specific data.
	ClientData?: null | #ClientData @go(,*ClientData)

	// The token to enable idempotency for VM import requests.
	ClientToken?: null | string @go(,*string)

	// A description string for the import image task.
	Description?: null | string @go(,*string)

	// Information about the disk containers.
	DiskContainers: [...null | #ImageDiskContainer] @go(,[]*ImageDiskContainer)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Specifies whether the destination AMI of the imported image should be encrypted.
	// The default KMS key for EBS is used unless you specify a non-default KMS
	// key using KmsKeyId. For more information, see Amazon EBS Encryption (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	Encrypted?: null | bool @go(,*bool)

	// The target hypervisor platform.
	//
	// Valid values: xen
	Hypervisor?: null | string @go(,*string)

	// An identifier for the symmetric KMS key to use when creating the encrypted
	// AMI. This parameter is only required if you want to use a non-default KMS
	// key; if this parameter is not specified, the default KMS key for EBS is used.
	// If a KmsKeyId is specified, the Encrypted flag must also be set.
	//
	// The KMS key identifier may be provided in any of the following formats:
	//
	//    * Key ID
	//
	//    * Key alias. The alias ARN contains the arn:aws:kms namespace, followed
	//    by the Region of the key, the Amazon Web Services account ID of the key
	//    owner, the alias namespace, and then the key alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
	//
	//    * ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed
	//    by the Region of the key, the Amazon Web Services account ID of the key
	//    owner, the key namespace, and then the key ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.
	//
	//    * ARN using key alias. The alias ARN contains the arn:aws:kms namespace,
	//    followed by the Region of the key, the Amazon Web Services account ID
	//    of the key owner, the alias namespace, and then the key alias. For example,
	//    arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
	//
	// Amazon Web Services parses KmsKeyId asynchronously, meaning that the action
	// you call may appear to complete even though you provided an invalid identifier.
	// This action will eventually report failure.
	//
	// The specified KMS key must exist in the Region that the AMI is being copied
	// to.
	//
	// Amazon EBS does not support asymmetric KMS keys.
	KmsKeyId?: null | string @go(,*string)

	// The ARNs of the license configurations.
	LicenseSpecifications: [...null | #ImportImageLicenseConfigurationRequest] @go(,[]*ImportImageLicenseConfigurationRequest)

	// The license type to be used for the Amazon Machine Image (AMI) after importing.
	//
	// By default, we detect the source-system operating system (OS) and apply the
	// appropriate license. Specify AWS to replace the source-system license with
	// an Amazon Web Services license, if appropriate. Specify BYOL to retain the
	// source-system license, if appropriate.
	//
	// To use BYOL, you must have existing licenses with rights to use these licenses
	// in a third party cloud, such as Amazon Web Services. For more information,
	// see Prerequisites (https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image)
	// in the VM Import/Export User Guide.
	LicenseType?: null | string @go(,*string)

	// The operating system of the virtual machine.
	//
	// Valid values: Windows | Linux
	Platform?: null | string @go(,*string)

	// The name of the role to use when not using the default role, 'vmimport'.
	RoleName?: null | string @go(,*string)

	// The tags to apply to the import image task during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The usage operation value. For more information, see AMI billing information
	// fields (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/billing-info-fields.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	UsageOperation?: null | string @go(,*string)
}

// The request information of license configurations.
#ImportImageLicenseConfigurationRequest: {
	// The ARN of a license configuration.
	LicenseConfigurationArn?: null | string @go(,*string)
}

// The response information for license configurations.
#ImportImageLicenseConfigurationResponse: {
	// The ARN of a license configuration.
	LicenseConfigurationArn?: null | string @go(,*string)
}

#ImportImageOutput: {
	// The architecture of the virtual machine.
	Architecture?: null | string @go(,*string)

	// A description of the import task.
	Description?: null | string @go(,*string)

	// Indicates whether the AMI is encrypted.
	Encrypted?: null | bool @go(,*bool)

	// The target hypervisor of the import task.
	Hypervisor?: null | string @go(,*string)

	// The ID of the Amazon Machine Image (AMI) created by the import task.
	ImageId?: null | string @go(,*string)

	// The task ID of the import image task.
	ImportTaskId?: null | string @go(,*string)

	// The identifier for the symmetric KMS key that was used to create the encrypted
	// AMI.
	KmsKeyId?: null | string @go(,*string)

	// The ARNs of the license configurations.
	LicenseSpecifications: [...null | #ImportImageLicenseConfigurationResponse] @go(,[]*ImportImageLicenseConfigurationResponse)

	// The license type of the virtual machine.
	LicenseType?: null | string @go(,*string)

	// The operating system of the virtual machine.
	Platform?: null | string @go(,*string)

	// The progress of the task.
	Progress?: null | string @go(,*string)

	// Information about the snapshots.
	SnapshotDetails: [...null | #SnapshotDetail] @go(,[]*SnapshotDetail)

	// A brief status of the task.
	Status?: null | string @go(,*string)

	// A detailed status message of the import task.
	StatusMessage?: null | string @go(,*string)

	// Any tags assigned to the import image task.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The usage operation value.
	UsageOperation?: null | string @go(,*string)
}

// Describes an import image task.
#ImportImageTask: {
	// The architecture of the virtual machine.
	//
	// Valid values: i386 | x86_64 | arm64
	Architecture?: null | string @go(,*string)

	// A description of the import task.
	Description?: null | string @go(,*string)

	// Indicates whether the image is encrypted.
	Encrypted?: null | bool @go(,*bool)

	// The target hypervisor for the import task.
	//
	// Valid values: xen
	Hypervisor?: null | string @go(,*string)

	// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
	ImageId?: null | string @go(,*string)

	// The ID of the import image task.
	ImportTaskId?: null | string @go(,*string)

	// The identifier for the KMS key that was used to create the encrypted image.
	KmsKeyId?: null | string @go(,*string)

	// The ARNs of the license configurations that are associated with the import
	// image task.
	LicenseSpecifications: [...null | #ImportImageLicenseConfigurationResponse] @go(,[]*ImportImageLicenseConfigurationResponse)

	// The license type of the virtual machine.
	LicenseType?: null | string @go(,*string)

	// The description string for the import image task.
	Platform?: null | string @go(,*string)

	// The percentage of progress of the import image task.
	Progress?: null | string @go(,*string)

	// Information about the snapshots.
	SnapshotDetails: [...null | #SnapshotDetail] @go(,[]*SnapshotDetail)

	// A brief status for the import image task.
	Status?: null | string @go(,*string)

	// A descriptive status message for the import image task.
	StatusMessage?: null | string @go(,*string)

	// The tags for the import image task.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The usage operation value.
	UsageOperation?: null | string @go(,*string)
}

#ImportInstanceInput: {
	// A description for the instance being imported.
	Description?: null | string @go(,*string)

	// The disk image.
	DiskImages: [...null | #DiskImage] @go(,[]*DiskImage)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The launch specification.
	LaunchSpecification?: null | #ImportInstanceLaunchSpecification @go(,*ImportInstanceLaunchSpecification)

	// The instance operating system.
	//
	// Platform is a required field
	Platform?: null | string @go(,*string)
}

// Describes the launch specification for VM import.
#ImportInstanceLaunchSpecification: {
	// Reserved.
	AdditionalInfo?: null | string @go(,*string)

	// The architecture of the instance.
	Architecture?: null | string @go(,*string)

	// The security group IDs.
	GroupIds: [...null | string] @go(,[]*string)

	// The security group names.
	GroupNames: [...null | string] @go(,[]*string)

	// Indicates whether an instance stops or terminates when you initiate shutdown
	// from the instance (using the operating system command for system shutdown).
	InstanceInitiatedShutdownBehavior?: null | string @go(,*string)

	// The instance type. For more information about the instance types that you
	// can import, see Instance Types (https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types)
	// in the VM Import/Export User Guide.
	InstanceType?: null | string @go(,*string)

	// Indicates whether monitoring is enabled.
	Monitoring?: null | bool @go(,*bool)

	// The placement information for the instance.
	Placement?: null | #Placement @go(,*Placement)

	// [EC2-VPC] An available IP address from the IP address range of the subnet.
	PrivateIpAddress?: null | string @go(,*string)

	// [EC2-VPC] The ID of the subnet in which to launch the instance.
	SubnetId?: null | string @go(,*string)

	// The Base64-encoded user data to make available to the instance.
	UserData?: null | #UserData @go(,*UserData)
}

#ImportInstanceOutput: {
	// Information about the conversion task.
	ConversionTask?: null | #ConversionTask @go(,*ConversionTask)
}

// Describes an import instance task.
#ImportInstanceTaskDetails: {
	// A description of the task.
	Description?: null | string @go(,*string)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The instance operating system.
	Platform?: null | string @go(,*string)

	// The volumes.
	Volumes: [...null | #ImportInstanceVolumeDetailItem] @go(,[]*ImportInstanceVolumeDetailItem)
}

// Describes an import volume task.
#ImportInstanceVolumeDetailItem: {
	// The Availability Zone where the resulting instance will reside.
	AvailabilityZone?: null | string @go(,*string)

	// The number of bytes converted so far.
	BytesConverted?: null | int64 @go(,*int64)

	// A description of the task.
	Description?: null | string @go(,*string)

	// The image.
	Image?: null | #DiskImageDescription @go(,*DiskImageDescription)

	// The status of the import of this particular disk image.
	Status?: null | string @go(,*string)

	// The status information or errors related to the disk image.
	StatusMessage?: null | string @go(,*string)

	// The volume.
	Volume?: null | #DiskImageVolumeDescription @go(,*DiskImageVolumeDescription)
}

#ImportKeyPairInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// A unique name for the key pair.
	//
	// KeyName is a required field
	KeyName?: null | string @go(,*string)

	// The public key. For API calls, the text must be base64-encoded. For command
	// line tools, base64 encoding is performed for you.
	//
	// PublicKeyMaterial is automatically base64 encoded/decoded by the SDK.
	//
	// PublicKeyMaterial is a required field
	PublicKeyMaterial: bytes @go(,[]byte)

	// The tags to apply to the imported key pair.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#ImportKeyPairOutput: {
	// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
	KeyFingerprint?: null | string @go(,*string)

	// The key pair name that you provided.
	KeyName?: null | string @go(,*string)

	// The ID of the resulting key pair.
	KeyPairId?: null | string @go(,*string)

	// The tags applied to the imported key pair.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#ImportSnapshotInput: {
	// The client-specific data.
	ClientData?: null | #ClientData @go(,*ClientData)

	// Token to enable idempotency for VM import requests.
	ClientToken?: null | string @go(,*string)

	// The description string for the import snapshot task.
	Description?: null | string @go(,*string)

	// Information about the disk container.
	DiskContainer?: null | #SnapshotDiskContainer @go(,*SnapshotDiskContainer)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Specifies whether the destination snapshot of the imported image should be
	// encrypted. The default KMS key for EBS is used unless you specify a non-default
	// KMS key using KmsKeyId. For more information, see Amazon EBS Encryption (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	Encrypted?: null | bool @go(,*bool)

	// An identifier for the symmetric KMS key to use when creating the encrypted
	// snapshot. This parameter is only required if you want to use a non-default
	// KMS key; if this parameter is not specified, the default KMS key for EBS
	// is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
	//
	// The KMS key identifier may be provided in any of the following formats:
	//
	//    * Key ID
	//
	//    * Key alias. The alias ARN contains the arn:aws:kms namespace, followed
	//    by the Region of the key, the Amazon Web Services account ID of the key
	//    owner, the alias namespace, and then the key alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
	//
	//    * ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed
	//    by the Region of the key, the Amazon Web Services account ID of the key
	//    owner, the key namespace, and then the key ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.
	//
	//    * ARN using key alias. The alias ARN contains the arn:aws:kms namespace,
	//    followed by the Region of the key, the Amazon Web Services account ID
	//    of the key owner, the alias namespace, and then the key alias. For example,
	//    arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
	//
	// Amazon Web Services parses KmsKeyId asynchronously, meaning that the action
	// you call may appear to complete even though you provided an invalid identifier.
	// This action will eventually report failure.
	//
	// The specified KMS key must exist in the Region that the snapshot is being
	// copied to.
	//
	// Amazon EBS does not support asymmetric KMS keys.
	KmsKeyId?: null | string @go(,*string)

	// The name of the role to use when not using the default role, 'vmimport'.
	RoleName?: null | string @go(,*string)

	// The tags to apply to the import snapshot task during creation.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#ImportSnapshotOutput: {
	// A description of the import snapshot task.
	Description?: null | string @go(,*string)

	// The ID of the import snapshot task.
	ImportTaskId?: null | string @go(,*string)

	// Information about the import snapshot task.
	SnapshotTaskDetail?: null | #SnapshotTaskDetail @go(,*SnapshotTaskDetail)

	// Any tags assigned to the import snapshot task.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes an import snapshot task.
#ImportSnapshotTask: {
	// A description of the import snapshot task.
	Description?: null | string @go(,*string)

	// The ID of the import snapshot task.
	ImportTaskId?: null | string @go(,*string)

	// Describes an import snapshot task.
	SnapshotTaskDetail?: null | #SnapshotTaskDetail @go(,*SnapshotTaskDetail)

	// The tags for the import snapshot task.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

#ImportVolumeInput: {
	// The Availability Zone for the resulting EBS volume.
	//
	// AvailabilityZone is a required field
	AvailabilityZone?: null | string @go(,*string)

	// A description of the volume.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The disk image.
	//
	// Image is a required field
	Image?: null | #DiskImageDetail @go(,*DiskImageDetail)

	// The volume size.
	//
	// Volume is a required field
	Volume?: null | #VolumeDetail @go(,*VolumeDetail)
}

#ImportVolumeOutput: {
	// Information about the conversion task.
	ConversionTask?: null | #ConversionTask @go(,*ConversionTask)
}

// Describes an import volume task.
#ImportVolumeTaskDetails: {
	// The Availability Zone where the resulting volume will reside.
	AvailabilityZone?: null | string @go(,*string)

	// The number of bytes converted so far.
	BytesConverted?: null | int64 @go(,*int64)

	// The description you provided when starting the import volume task.
	Description?: null | string @go(,*string)

	// The image.
	Image?: null | #DiskImageDescription @go(,*DiskImageDescription)

	// The volume.
	Volume?: null | #DiskImageVolumeDescription @go(,*DiskImageVolumeDescription)
}

// Describes the Inference accelerators for the instance type.
#InferenceAcceleratorInfo: {
	// Describes the Inference accelerators for the instance type.
	Accelerators: [...null | #InferenceDeviceInfo] @go(,[]*InferenceDeviceInfo)
}

// Describes the Inference accelerators for the instance type.
#InferenceDeviceInfo: {
	// The number of Inference accelerators for the instance type.
	Count?: null | int64 @go(,*int64)

	// The manufacturer of the Inference accelerator.
	Manufacturer?: null | string @go(,*string)

	// The name of the Inference accelerator.
	Name?: null | string @go(,*string)
}

// Describes an instance.
#Instance: {
	// The AMI launch index, which can be used to find this instance in the launch
	// group.
	AmiLaunchIndex?: null | int64 @go(,*int64)

	// The architecture of the image.
	Architecture?: null | string @go(,*string)

	// Any block device mapping entries for the instance.
	BlockDeviceMappings: [...null | #InstanceBlockDeviceMapping] @go(,[]*InstanceBlockDeviceMapping)

	// The boot mode of the instance. For more information, see Boot modes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html)
	// in the Amazon EC2 User Guide.
	BootMode?: null | string @go(,*string)

	// The ID of the Capacity Reservation.
	CapacityReservationId?: null | string @go(,*string)

	// Information about the Capacity Reservation targeting option.
	CapacityReservationSpecification?: null | #CapacityReservationSpecificationResponse @go(,*CapacityReservationSpecificationResponse)

	// The idempotency token you provided when you launched the instance, if applicable.
	ClientToken?: null | string @go(,*string)

	// The CPU options for the instance.
	CpuOptions?: null | #CpuOptions @go(,*CpuOptions)

	// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization
	// provides dedicated throughput to Amazon EBS and an optimized configuration
	// stack to provide optimal I/O performance. This optimization isn't available
	// with all instance types. Additional usage charges apply when using an EBS
	// Optimized instance.
	EbsOptimized?: null | bool @go(,*bool)

	// The Elastic GPU associated with the instance.
	ElasticGpuAssociations: [...null | #ElasticGpuAssociation] @go(,[]*ElasticGpuAssociation)

	// The elastic inference accelerator associated with the instance.
	ElasticInferenceAcceleratorAssociations: [...null | #ElasticInferenceAcceleratorAssociation] @go(,[]*ElasticInferenceAcceleratorAssociation)

	// Specifies whether enhanced networking with ENA is enabled.
	EnaSupport?: null | bool @go(,*bool)

	// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
	EnclaveOptions?: null | #EnclaveOptions @go(,*EnclaveOptions)

	// Indicates whether the instance is enabled for hibernation.
	HibernationOptions?: null | #HibernationOptions @go(,*HibernationOptions)

	// The hypervisor type of the instance. The value xen is used for both Xen and
	// Nitro hypervisors.
	Hypervisor?: null | string @go(,*string)

	// The IAM instance profile associated with the instance, if applicable.
	IamInstanceProfile?: null | #IamInstanceProfile @go(,*IamInstanceProfile)

	// The ID of the AMI used to launch the instance.
	ImageId?: null | string @go(,*string)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// Indicates whether this is a Spot Instance or a Scheduled Instance.
	InstanceLifecycle?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The kernel associated with this instance, if applicable.
	KernelId?: null | string @go(,*string)

	// The name of the key pair, if this instance was launched with an associated
	// key pair.
	KeyName?: null | string @go(,*string)

	// The time the instance was launched.
	LaunchTime?: null | time.Time @go(,*time.Time)

	// The license configurations.
	Licenses: [...null | #LicenseConfiguration] @go(,[]*LicenseConfiguration)

	// The metadata options for the instance.
	MetadataOptions?: null | #InstanceMetadataOptionsResponse @go(,*InstanceMetadataOptionsResponse)

	// The monitoring for the instance.
	Monitoring?: null | #Monitoring @go(,*Monitoring)

	// [EC2-VPC] The network interfaces for the instance.
	NetworkInterfaces: [...null | #InstanceNetworkInterface] @go(,[]*InstanceNetworkInterface)

	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn?: null | string @go(,*string)

	// The location where the instance launched, if applicable.
	Placement?: null | #Placement @go(,*Placement)

	// The value is Windows for Windows instances; otherwise blank.
	Platform?: null | string @go(,*string)

	// (IPv4 only) The private DNS hostname name assigned to the instance. This
	// DNS hostname can only be used inside the Amazon EC2 network. This name is
	// not available until the instance enters the running state.
	//
	// [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private
	// DNS hostnames if you've enabled DNS resolution and DNS hostnames in your
	// VPC. If you are not using the Amazon-provided DNS server in your VPC, your
	// custom domain name servers must resolve the hostname as appropriate.
	PrivateDnsName?: null | string @go(,*string)

	// The private IPv4 address assigned to the instance.
	PrivateIpAddress?: null | string @go(,*string)

	// The product codes attached to this instance, if applicable.
	ProductCodes: [...null | #ProductCode] @go(,[]*ProductCode)

	// (IPv4 only) The public DNS name assigned to the instance. This name is not
	// available until the instance enters the running state. For EC2-VPC, this
	// name is only available if you've enabled DNS hostnames for your VPC.
	PublicDnsName?: null | string @go(,*string)

	// The public IPv4 address, or the Carrier IP address assigned to the instance,
	// if applicable.
	//
	// A Carrier IP address only applies to an instance launched in a subnet associated
	// with a Wavelength Zone.
	PublicIpAddress?: null | string @go(,*string)

	// The RAM disk associated with this instance, if applicable.
	RamdiskId?: null | string @go(,*string)

	// The device name of the root device volume (for example, /dev/sda1).
	RootDeviceName?: null | string @go(,*string)

	// The root device type used by the AMI. The AMI can use an EBS volume or an
	// instance store volume.
	RootDeviceType?: null | string @go(,*string)

	// The security groups for the instance.
	SecurityGroups: [...null | #GroupIdentifier] @go(,[]*GroupIdentifier)

	// Indicates whether source/destination checking is enabled.
	SourceDestCheck?: null | bool @go(,*bool)

	// If the request is a Spot Instance request, the ID of the request.
	SpotInstanceRequestId?: null | string @go(,*string)

	// Specifies whether enhanced networking with the Intel 82599 Virtual Function
	// interface is enabled.
	SriovNetSupport?: null | string @go(,*string)

	// The current state of the instance.
	State?: null | #InstanceState @go(,*InstanceState)

	// The reason for the most recent state transition.
	StateReason?: null | #StateReason @go(,*StateReason)

	// The reason for the most recent state transition. This might be an empty string.
	StateTransitionReason?: null | string @go(,*string)

	// [EC2-VPC] The ID of the subnet in which the instance is running.
	SubnetId?: null | string @go(,*string)

	// Any tags assigned to the instance.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The virtualization type of the instance.
	VirtualizationType?: null | string @go(,*string)

	// [EC2-VPC] The ID of the VPC in which the instance is running.
	VpcId?: null | string @go(,*string)
}

// Describes a block device mapping.
#InstanceBlockDeviceMapping: {
	// The device name (for example, /dev/sdh or xvdh).
	DeviceName?: null | string @go(,*string)

	// Parameters used to automatically set up EBS volumes when the instance is
	// launched.
	Ebs?: null | #EbsInstanceBlockDevice @go(,*EbsInstanceBlockDevice)
}

// Describes a block device mapping entry.
#InstanceBlockDeviceMappingSpecification: {
	// The device name (for example, /dev/sdh or xvdh).
	DeviceName?: null | string @go(,*string)

	// Parameters used to automatically set up EBS volumes when the instance is
	// launched.
	Ebs?: null | #EbsInstanceBlockDeviceSpecification @go(,*EbsInstanceBlockDeviceSpecification)

	// suppress the specified device included in the block device mapping.
	NoDevice?: null | string @go(,*string)

	// The virtual device name.
	VirtualName?: null | string @go(,*string)
}

// Information about the number of instances that can be launched onto the Dedicated
// Host.
#InstanceCapacity: {
	// The number of instances that can be launched onto the Dedicated Host based
	// on the host's available capacity.
	AvailableCapacity?: null | int64 @go(,*int64)

	// The instance type supported by the Dedicated Host.
	InstanceType?: null | string @go(,*string)

	// The total number of instances that can be launched onto the Dedicated Host
	// if there are no instances running on it.
	TotalCapacity?: null | int64 @go(,*int64)
}

// Describes a Reserved Instance listing state.
#InstanceCount: {
	// The number of listed Reserved Instances in the state specified by the state.
	InstanceCount?: null | int64 @go(,*int64)

	// The states of the listed Reserved Instances.
	State?: null | string @go(,*string)
}

// Describes the credit option for CPU usage of a burstable performance instance.
#InstanceCreditSpecification: {
	// The credit option for CPU usage of the instance. Valid values are standard
	// and unlimited.
	CpuCredits?: null | string @go(,*string)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)
}

// Describes the credit option for CPU usage of a burstable performance instance.
#InstanceCreditSpecificationRequest: {
	// The credit option for CPU usage of the instance. Valid values are standard
	// and unlimited.
	CpuCredits?: null | string @go(,*string)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)
}

// The event window.
#InstanceEventWindow: {
	// One or more targets associated with the event window.
	AssociationTarget?: null | #InstanceEventWindowAssociationTarget @go(,*InstanceEventWindowAssociationTarget)

	// The cron expression defined for the event window.
	CronExpression?: null | string @go(,*string)

	// The ID of the event window.
	InstanceEventWindowId?: null | string @go(,*string)

	// The name of the event window.
	Name?: null | string @go(,*string)

	// The current state of the event window.
	State?: null | string @go(,*string)

	// The instance tags associated with the event window.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// One or more time ranges defined for the event window.
	TimeRanges: [...null | #InstanceEventWindowTimeRange] @go(,[]*InstanceEventWindowTimeRange)
}

// One or more targets associated with the specified event window. Only one
// type of target (instance ID, instance tag, or Dedicated Host ID) can be associated
// with an event window.
#InstanceEventWindowAssociationRequest: {
	// The IDs of the Dedicated Hosts to associate with the event window.
	DedicatedHostIds: [...null | string] @go(,[]*string)

	// The IDs of the instances to associate with the event window. If the instance
	// is on a Dedicated Host, you can't specify the Instance ID parameter; you
	// must use the Dedicated Host ID parameter.
	InstanceIds: [...null | string] @go(,[]*string)

	// The instance tags to associate with the event window. Any instances associated
	// with the tags will be associated with the event window.
	InstanceTags: [...null | #Tag] @go(,[]*Tag)
}

// One or more targets associated with the event window.
#InstanceEventWindowAssociationTarget: {
	// The IDs of the Dedicated Hosts associated with the event window.
	DedicatedHostIds: [...null | string] @go(,[]*string)

	// The IDs of the instances associated with the event window.
	InstanceIds: [...null | string] @go(,[]*string)

	// The instance tags associated with the event window. Any instances associated
	// with the tags will be associated with the event window.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// The targets to disassociate from the specified event window.
#InstanceEventWindowDisassociationRequest: {
	// The IDs of the Dedicated Hosts to disassociate from the event window.
	DedicatedHostIds: [...null | string] @go(,[]*string)

	// The IDs of the instances to disassociate from the event window.
	InstanceIds: [...null | string] @go(,[]*string)

	// The instance tags to disassociate from the event window. Any instances associated
	// with the tags will be disassociated from the event window.
	InstanceTags: [...null | #Tag] @go(,[]*Tag)
}

// The state of the event window.
#InstanceEventWindowStateChange: {
	// The ID of the event window.
	InstanceEventWindowId?: null | string @go(,*string)

	// The current state of the event window.
	State?: null | string @go(,*string)
}

// The start day and time and the end day and time of the time range, in UTC.
#InstanceEventWindowTimeRange: {
	// The hour when the time range ends.
	EndHour?: null | int64 @go(,*int64)

	// The day on which the time range ends.
	EndWeekDay?: null | string @go(,*string)

	// The hour when the time range begins.
	StartHour?: null | int64 @go(,*int64)

	// The day on which the time range begins.
	StartWeekDay?: null | string @go(,*string)
}

// The start day and time and the end day and time of the time range, in UTC.
#InstanceEventWindowTimeRangeRequest: {
	// The hour when the time range ends.
	EndHour?: null | int64 @go(,*int64)

	// The day on which the time range ends.
	EndWeekDay?: null | string @go(,*string)

	// The hour when the time range begins.
	StartHour?: null | int64 @go(,*int64)

	// The day on which the time range begins.
	StartWeekDay?: null | string @go(,*string)
}

// Describes an instance to export.
#InstanceExportDetails: {
	// The ID of the resource being exported.
	InstanceId?: null | string @go(,*string)

	// The target virtualization environment.
	TargetEnvironment?: null | string @go(,*string)
}

// Describes the default credit option for CPU usage of a burstable performance
// instance family.
#InstanceFamilyCreditSpecification: {
	// The default credit option for CPU usage of the instance family. Valid values
	// are standard and unlimited.
	CpuCredits?: null | string @go(,*string)

	// The instance family.
	InstanceFamily?: null | string @go(,*string)
}

// Information about an IPv4 prefix.
#InstanceIpv4Prefix: {
	// One or more IPv4 prefixes assigned to the network interface.
	Ipv4Prefix?: null | string @go(,*string)
}

// Describes an IPv6 address.
#InstanceIpv6Address: {
	// The IPv6 address.
	Ipv6Address?: null | string @go(,*string)
}

// Describes an IPv6 address.
#InstanceIpv6AddressRequest: {
	// The IPv6 address.
	Ipv6Address?: null | string @go(,*string)
}

// Information about an IPv6 prefix.
#InstanceIpv6Prefix: {
	// One or more IPv6 prefixes assigned to the network interface.
	Ipv6Prefix?: null | string @go(,*string)
}

// Describes the market (purchasing) option for the instances.
#InstanceMarketOptionsRequest: {
	// The market type.
	MarketType?: null | string @go(,*string)

	// The options for Spot Instances.
	SpotOptions?: null | #SpotMarketOptions @go(,*SpotMarketOptions)
}

// The metadata options for the instance.
#InstanceMetadataOptionsRequest: {
	// This parameter enables or disables the HTTP metadata endpoint on your instances.
	// If the parameter is not specified, the default state is enabled.
	//
	// If you specify a value of disabled, you will not be able to access your instance
	// metadata.
	HttpEndpoint?: null | string @go(,*string)

	// The desired HTTP PUT response hop limit for instance metadata requests. The
	// larger the number, the further instance metadata requests can travel.
	//
	// Default: 1
	//
	// Possible values: Integers from 1 to 64
	HttpPutResponseHopLimit?: null | int64 @go(,*int64)

	// The state of token usage for your instance metadata requests. If the parameter
	// is not specified in the request, the default state is optional.
	//
	// If the state is optional, you can choose to retrieve instance metadata with
	// or without a signed token header on your request. If you retrieve the IAM
	// role credentials without a token, the version 1.0 role credentials are returned.
	// If you retrieve the IAM role credentials using a valid signed token, the
	// version 2.0 role credentials are returned.
	//
	// If the state is required, you must send a signed token header with any instance
	// metadata retrieval requests. In this state, retrieving the IAM role credentials
	// always returns the version 2.0 credentials; the version 1.0 credentials are
	// not available.
	HttpTokens?: null | string @go(,*string)
}

// The metadata options for the instance.
#InstanceMetadataOptionsResponse: {
	// This parameter enables or disables the HTTP metadata endpoint on your instances.
	// If the parameter is not specified, the default state is enabled.
	//
	// If you specify a value of disabled, you will not be able to access your instance
	// metadata.
	HttpEndpoint?: null | string @go(,*string)

	// The desired HTTP PUT response hop limit for instance metadata requests. The
	// larger the number, the further instance metadata requests can travel.
	//
	// Default: 1
	//
	// Possible values: Integers from 1 to 64
	HttpPutResponseHopLimit?: null | int64 @go(,*int64)

	// The state of token usage for your instance metadata requests. If the parameter
	// is not specified in the request, the default state is optional.
	//
	// If the state is optional, you can choose to retrieve instance metadata with
	// or without a signed token header on your request. If you retrieve the IAM
	// role credentials without a token, the version 1.0 role credentials are returned.
	// If you retrieve the IAM role credentials using a valid signed token, the
	// version 2.0 role credentials are returned.
	//
	// If the state is required, you must send a signed token header with any instance
	// metadata retrieval requests. In this state, retrieving the IAM role credential
	// always returns the version 2.0 credentials; the version 1.0 credentials are
	// not available.
	HttpTokens?: null | string @go(,*string)

	// The state of the metadata option changes.
	//
	// pending - The metadata options are being updated and the instance is not
	// ready to process metadata traffic with the new selection.
	//
	// applied - The metadata options have been successfully applied on the instance.
	State?: null | string @go(,*string)
}

// Describes the monitoring of an instance.
#InstanceMonitoring: {
	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The monitoring for the instance.
	Monitoring?: null | #Monitoring @go(,*Monitoring)
}

// Describes a network interface.
#InstanceNetworkInterface: {
	// The association information for an Elastic IPv4 associated with the network
	// interface.
	Association?: null | #InstanceNetworkInterfaceAssociation @go(,*InstanceNetworkInterfaceAssociation)

	// The network interface attachment.
	Attachment?: null | #InstanceNetworkInterfaceAttachment @go(,*InstanceNetworkInterfaceAttachment)

	// The description.
	Description?: null | string @go(,*string)

	// One or more security groups.
	Groups: [...null | #GroupIdentifier] @go(,[]*GroupIdentifier)

	// Describes the type of network interface.
	//
	// Valid values: interface | efa | trunk
	InterfaceType?: null | string @go(,*string)

	// The IPv4 delegated prefixes that are assigned to the network interface.
	Ipv4Prefixes: [...null | #InstanceIpv4Prefix] @go(,[]*InstanceIpv4Prefix)

	// One or more IPv6 addresses associated with the network interface.
	Ipv6Addresses: [...null | #InstanceIpv6Address] @go(,[]*InstanceIpv6Address)

	// The IPv6 delegated prefixes that are assigned to the network interface.
	Ipv6Prefixes: [...null | #InstanceIpv6Prefix] @go(,[]*InstanceIpv6Prefix)

	// The MAC address.
	MacAddress?: null | string @go(,*string)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that created the network interface.
	OwnerId?: null | string @go(,*string)

	// The private DNS name.
	PrivateDnsName?: null | string @go(,*string)

	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress?: null | string @go(,*string)

	// One or more private IPv4 addresses associated with the network interface.
	PrivateIpAddresses: [...null | #InstancePrivateIpAddress] @go(,[]*InstancePrivateIpAddress)

	// Indicates whether source/destination checking is enabled.
	SourceDestCheck?: null | bool @go(,*bool)

	// The status of the network interface.
	Status?: null | string @go(,*string)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes association information for an Elastic IP address (IPv4).
#InstanceNetworkInterfaceAssociation: {
	// The carrier IP address associated with the network interface.
	CarrierIp?: null | string @go(,*string)

	// The ID of the owner of the Elastic IP address.
	IpOwnerId?: null | string @go(,*string)

	// The public DNS name.
	PublicDnsName?: null | string @go(,*string)

	// The public IP address or Elastic IP address bound to the network interface.
	PublicIp?: null | string @go(,*string)
}

// Describes a network interface attachment.
#InstanceNetworkInterfaceAttachment: {
	// The time stamp when the attachment initiated.
	AttachTime?: null | time.Time @go(,*time.Time)

	// The ID of the network interface attachment.
	AttachmentId?: null | string @go(,*string)

	// Indicates whether the network interface is deleted when the instance is terminated.
	DeleteOnTermination?: null | bool @go(,*bool)

	// The index of the device on the instance for the network interface attachment.
	DeviceIndex?: null | int64 @go(,*int64)

	// The index of the network card.
	NetworkCardIndex?: null | int64 @go(,*int64)

	// The attachment state.
	Status?: null | string @go(,*string)
}

// Describes a network interface.
#InstanceNetworkInterfaceSpecification: {
	// Indicates whether to assign a carrier IP address to the network interface.
	//
	// You can only assign a carrier IP address to a network interface that is in
	// a subnet in a Wavelength Zone. For more information about carrier IP addresses,
	// see Carrier IP addresses in the Amazon Web Services Wavelength Developer
	// Guide.
	AssociateCarrierIpAddress?: null | bool @go(,*bool)

	// Indicates whether to assign a public IPv4 address to an instance you launch
	// in a VPC. The public IP address can only be assigned to a network interface
	// for eth0, and can only be assigned to a new network interface, not an existing
	// one. You cannot specify more than one network interface in the request. If
	// launching into a default subnet, the default value is true.
	AssociatePublicIpAddress?: null | bool @go(,*bool)

	// If set to true, the interface is deleted when the instance is terminated.
	// You can specify true only if creating a new network interface when launching
	// an instance.
	DeleteOnTermination?: null | bool @go(,*bool)

	// The description of the network interface. Applies only if creating a network
	// interface when launching an instance.
	Description?: null | string @go(,*string)

	// The position of the network interface in the attachment order. A primary
	// network interface has a device index of 0.
	//
	// If you specify a network interface when launching an instance, you must specify
	// the device index.
	DeviceIndex?: null | int64 @go(,*int64)

	// The IDs of the security groups for the network interface. Applies only if
	// creating a network interface when launching an instance.
	Groups: [...null | string] @go(,[]*string)

	// The type of network interface.
	//
	// To create an Elastic Fabric Adapter (EFA), specify efa. For more information,
	// see Elastic Fabric Adapter (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// Valid values: interface | efa
	InterfaceType?: null | string @go(,*string)

	// The number of IPv4 delegated prefixes to be automatically assigned to the
	// network interface. You cannot use this option if you use the Ipv4Prefix option.
	Ipv4PrefixCount?: null | int64 @go(,*int64)

	// One or more IPv4 delegated prefixes to be assigned to the network interface.
	// You cannot use this option if you use the Ipv4PrefixCount option.
	Ipv4Prefixes: [...null | #Ipv4PrefixSpecificationRequest] @go(,[]*Ipv4PrefixSpecificationRequest)

	// A number of IPv6 addresses to assign to the network interface. Amazon EC2
	// chooses the IPv6 addresses from the range of the subnet. You cannot specify
	// this option and the option to assign specific IPv6 addresses in the same
	// request. You can specify this option if you've specified a minimum number
	// of instances to launch.
	Ipv6AddressCount?: null | int64 @go(,*int64)

	// One or more IPv6 addresses to assign to the network interface. You cannot
	// specify this option and the option to assign a number of IPv6 addresses in
	// the same request. You cannot specify this option if you've specified a minimum
	// number of instances to launch.
	Ipv6Addresses: [...null | #InstanceIpv6Address] @go(,[]*InstanceIpv6Address)

	// The number of IPv6 delegated prefixes to be automatically assigned to the
	// network interface. You cannot use this option if you use the Ipv6Prefix option.
	Ipv6PrefixCount?: null | int64 @go(,*int64)

	// One or more IPv6 delegated prefixes to be assigned to the network interface.
	// You cannot use this option if you use the Ipv6PrefixCount option.
	Ipv6Prefixes: [...null | #Ipv6PrefixSpecificationRequest] @go(,[]*Ipv6PrefixSpecificationRequest)

	// The index of the network card. Some instance types support multiple network
	// cards. The primary network interface must be assigned to network card index
	// 0. The default is network card index 0.
	NetworkCardIndex?: null | int64 @go(,*int64)

	// The ID of the network interface.
	//
	// If you are creating a Spot Fleet, omit this parameter because you can’t
	// specify a network interface ID in a launch specification.
	NetworkInterfaceId?: null | string @go(,*string)

	// The private IPv4 address of the network interface. Applies only if creating
	// a network interface when launching an instance. You cannot specify this option
	// if you're launching more than one instance in a RunInstances (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)
	// request.
	PrivateIpAddress?: null | string @go(,*string)

	// One or more private IPv4 addresses to assign to the network interface. Only
	// one private IPv4 address can be designated as primary. You cannot specify
	// this option if you're launching more than one instance in a RunInstances
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)
	// request.
	PrivateIpAddresses: [...null | #PrivateIpAddressSpecification] @go(,[]*PrivateIpAddressSpecification)

	// The number of secondary private IPv4 addresses. You can't specify this option
	// and specify more than one private IP address using the private IP addresses
	// option. You cannot specify this option if you're launching more than one
	// instance in a RunInstances (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)
	// request.
	SecondaryPrivateIpAddressCount?: null | int64 @go(,*int64)

	// The ID of the subnet associated with the network interface. Applies only
	// if creating a network interface when launching an instance.
	SubnetId?: null | string @go(,*string)
}

// Describes a private IPv4 address.
#InstancePrivateIpAddress: {
	// The association information for an Elastic IP address for the network interface.
	Association?: null | #InstanceNetworkInterfaceAssociation @go(,*InstanceNetworkInterfaceAssociation)

	// Indicates whether this IPv4 address is the primary private IP address of
	// the network interface.
	Primary?: null | bool @go(,*bool)

	// The private IPv4 DNS name.
	PrivateDnsName?: null | string @go(,*string)

	// The private IPv4 address of the network interface.
	PrivateIpAddress?: null | string @go(,*string)
}

// The instance details to specify which volumes should be snapshotted.
#InstanceSpecification: {
	// Excludes the root volume from being snapshotted.
	ExcludeBootVolume?: null | bool @go(,*bool)

	// The instance to specify which volumes should be snapshotted.
	InstanceId?: null | string @go(,*string)
}

// Describes the current state of an instance.
#InstanceState: {
	// The state of the instance as a 16-bit unsigned integer.
	//
	// The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal
	// values between 256 and 65,535. These numerical values are used for internal
	// purposes and should be ignored.
	//
	// The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal
	// values between 0 and 255.
	//
	// The valid values for instance-state-code will all be in the range of the
	// low byte and they are:
	//
	//    * 0 : pending
	//
	//    * 16 : running
	//
	//    * 32 : shutting-down
	//
	//    * 48 : terminated
	//
	//    * 64 : stopping
	//
	//    * 80 : stopped
	//
	// You can ignore the high byte value by zeroing out all of the bits above 2^8
	// or 256 in decimal.
	Code?: null | int64 @go(,*int64)

	// The current state of the instance.
	Name?: null | string @go(,*string)
}

// Describes an instance state change.
#InstanceStateChange: {
	// The current state of the instance.
	CurrentState?: null | #InstanceState @go(,*InstanceState)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The previous state of the instance.
	PreviousState?: null | #InstanceState @go(,*InstanceState)
}

// Describes the status of an instance.
#InstanceStatus: {
	// The Availability Zone of the instance.
	AvailabilityZone?: null | string @go(,*string)

	// Any scheduled events associated with the instance.
	Events: [...null | #InstanceStatusEvent] @go(,[]*InstanceStatusEvent)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The intended state of the instance. DescribeInstanceStatus requires that
	// an instance be in the running state.
	InstanceState?: null | #InstanceState @go(,*InstanceState)

	// Reports impaired functionality that stems from issues internal to the instance,
	// such as impaired reachability.
	InstanceStatus?: null | #InstanceStatusSummary @go(,*InstanceStatusSummary)

	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn?: null | string @go(,*string)

	// Reports impaired functionality that stems from issues related to the systems
	// that support an instance, such as hardware failures and network connectivity
	// problems.
	SystemStatus?: null | #InstanceStatusSummary @go(,*InstanceStatusSummary)
}

// Describes the instance status.
#InstanceStatusDetails: {
	// The time when a status check failed. For an instance that was launched and
	// impaired, this is the time when the instance was launched.
	ImpairedSince?: null | time.Time @go(,*time.Time)

	// The type of instance status.
	Name?: null | string @go(,*string)

	// The status.
	Status?: null | string @go(,*string)
}

// Describes a scheduled event for an instance.
#InstanceStatusEvent: {
	// The event code.
	Code?: null | string @go(,*string)

	// A description of the event.
	//
	// After a scheduled event is completed, it can still be described for up to
	// a week. If the event has been completed, this description starts with the
	// following text: [Completed].
	Description?: null | string @go(,*string)

	// The ID of the event.
	InstanceEventId?: null | string @go(,*string)

	// The latest scheduled end time for the event.
	NotAfter?: null | time.Time @go(,*time.Time)

	// The earliest scheduled start time for the event.
	NotBefore?: null | time.Time @go(,*time.Time)

	// The deadline for starting the event.
	NotBeforeDeadline?: null | time.Time @go(,*time.Time)
}

// Describes the status of an instance.
#InstanceStatusSummary: {
	// The system instance health or application instance health.
	Details: [...null | #InstanceStatusDetails] @go(,[]*InstanceStatusDetails)

	// The status.
	Status?: null | string @go(,*string)
}

// Describes the disks that are available for the instance type.
#InstanceStorageInfo: {
	// Describes the disks that are available for the instance type.
	Disks: [...null | #DiskInfo] @go(,[]*DiskInfo)

	// Indicates whether non-volatile memory express (NVMe) is supported for instance
	// store.
	NvmeSupport?: null | string @go(,*string)

	// The total size of the disks, in GB.
	TotalSizeInGB?: null | int64 @go(,*int64)
}

// Describes the registered tag keys for the current Region.
#InstanceTagNotificationAttribute: {
	// Indicates wheter all tag keys in the current Region are registered to appear
	// in scheduled event notifications. true indicates that all tag keys in the
	// current Region are registered.
	IncludeAllTagsOfInstance?: null | bool @go(,*bool)

	// The registered tag keys.
	InstanceTagKeys: [...null | string] @go(,[]*string)
}

// Describes the instance type.
#InstanceTypeInfo: {
	// Indicates whether auto recovery is supported.
	AutoRecoverySupported?: null | bool @go(,*bool)

	// Indicates whether the instance is a bare metal instance type.
	BareMetal?: null | bool @go(,*bool)

	// Indicates whether the instance type is a burstable performance instance type.
	BurstablePerformanceSupported?: null | bool @go(,*bool)

	// Indicates whether the instance type is current generation.
	CurrentGeneration?: null | bool @go(,*bool)

	// Indicates whether Dedicated Hosts are supported on the instance type.
	DedicatedHostsSupported?: null | bool @go(,*bool)

	// Describes the Amazon EBS settings for the instance type.
	EbsInfo?: null | #EbsInfo @go(,*EbsInfo)

	// Describes the FPGA accelerator settings for the instance type.
	FpgaInfo?: null | #FpgaInfo @go(,*FpgaInfo)

	// Indicates whether the instance type is eligible for the free tier.
	FreeTierEligible?: null | bool @go(,*bool)

	// Describes the GPU accelerator settings for the instance type.
	GpuInfo?: null | #GpuInfo @go(,*GpuInfo)

	// Indicates whether On-Demand hibernation is supported.
	HibernationSupported?: null | bool @go(,*bool)

	// The hypervisor for the instance type.
	Hypervisor?: null | string @go(,*string)

	// Describes the Inference accelerator settings for the instance type.
	InferenceAcceleratorInfo?: null | #InferenceAcceleratorInfo @go(,*InferenceAcceleratorInfo)

	// Describes the instance storage for the instance type.
	InstanceStorageInfo?: null | #InstanceStorageInfo @go(,*InstanceStorageInfo)

	// Indicates whether instance storage is supported.
	InstanceStorageSupported?: null | bool @go(,*bool)

	// The instance type. For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide.
	InstanceType?: null | string @go(,*string)

	// Describes the memory for the instance type.
	MemoryInfo?: null | #MemoryInfo @go(,*MemoryInfo)

	// Describes the network settings for the instance type.
	NetworkInfo?: null | #NetworkInfo @go(,*NetworkInfo)

	// Describes the placement group settings for the instance type.
	PlacementGroupInfo?: null | #PlacementGroupInfo @go(,*PlacementGroupInfo)

	// Describes the processor.
	ProcessorInfo?: null | #ProcessorInfo @go(,*ProcessorInfo)

	// The supported boot modes. For more information, see Boot modes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html)
	// in the Amazon EC2 User Guide.
	SupportedBootModes: [...null | string] @go(,[]*string)

	// The supported root device types.
	SupportedRootDeviceTypes: [...null | string] @go(,[]*string)

	// Indicates whether the instance type is offered for spot or On-Demand.
	SupportedUsageClasses: [...null | string] @go(,[]*string)

	// The supported virtualization types.
	SupportedVirtualizationTypes: [...null | string] @go(,[]*string)

	// Describes the vCPU configurations for the instance type.
	VCpuInfo?: null | #VCpuInfo @go(,*VCpuInfo)
}

// The instance types offered.
#InstanceTypeOffering: {
	// The instance type. For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide.
	InstanceType?: null | string @go(,*string)

	// The identifier for the location. This depends on the location type. For example,
	// if the location type is region, the location is the Region code (for example,
	// us-east-2.)
	Location?: null | string @go(,*string)

	// The location type.
	LocationType?: null | string @go(,*string)
}

// Information about the Capacity Reservation usage.
#InstanceUsage: {
	// The ID of the Amazon Web Services account that is making use of the Capacity
	// Reservation.
	AccountId?: null | string @go(,*string)

	// The number of instances the Amazon Web Services account currently has in
	// the Capacity Reservation.
	UsedInstanceCount?: null | int64 @go(,*int64)
}

// Describes service integrations with VPC Flow logs.
#IntegrateServices: {
	// Information about the integration with Amazon Athena.
	AthenaIntegrations: [...null | #AthenaIntegration] @go(,[]*AthenaIntegration)
}

// Describes an internet gateway.
#InternetGateway: {
	// Any VPCs attached to the internet gateway.
	Attachments: [...null | #InternetGatewayAttachment] @go(,[]*InternetGatewayAttachment)

	// The ID of the internet gateway.
	InternetGatewayId?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the internet gateway.
	OwnerId?: null | string @go(,*string)

	// Any tags assigned to the internet gateway.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes the attachment of a VPC to an internet gateway or an egress-only
// internet gateway.
#InternetGatewayAttachment: {
	// The current state of the attachment. For an internet gateway, the state is
	// available when attached to a VPC; otherwise, this value is not returned.
	State?: null | string @go(,*string)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes a set of permissions for a security group rule.
#IpPermission: {
	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6
	// type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify
	// all ICMP/ICMPv6 types, you must specify all codes.
	FromPort?: null | int64 @go(,*int64)

	// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers
	// (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
	//
	// [VPC only] Use -1 to specify all protocols. When authorizing security group
	// rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6
	// allows traffic on all ports, regardless of any port range you specify. For
	// tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range
	// is optional; if you omit the port range, traffic for all types and codes
	// is allowed.
	IpProtocol?: null | string @go(,*string)

	// The IPv4 ranges.
	IpRanges: [...null | #IpRange] @go(,[]*IpRange)

	// [VPC only] The IPv6 ranges.
	Ipv6Ranges: [...null | #Ipv6Range] @go(,[]*Ipv6Range)

	// [VPC only] The prefix list IDs.
	PrefixListIds: [...null | #PrefixListId] @go(,[]*PrefixListId)

	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	// A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6
	// types, you must specify all codes.
	ToPort?: null | int64 @go(,*int64)

	// The security group and Amazon Web Services account ID pairs.
	UserIdGroupPairs: [...null | #UserIdGroupPair] @go(,[]*UserIdGroupPair)
}

// Describes an IPv4 range.
#IpRange: {
	// The IPv4 CIDR range. You can either specify a CIDR range or a source security
	// group, not both. To specify a single IPv4 address, use the /32 prefix length.
	CidrIp?: null | string @go(,*string)

	// A description for the security group rule that references this IPv4 address
	// range.
	//
	// Constraints: Up to 255 characters in length. Allowed characters are a-z,
	// A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
	Description?: null | string @go(,*string)
}

// Describes an IPv4 Prefix Delegation.
#Ipv4PrefixSpecification: {
	// The IPv4 Prefix Delegation prefix. For information, see Prefix Delegation
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-delegation)
	// in the Amazon Elastic Compute Cloud User Guide.
	Ipv4Prefix?: null | string @go(,*string)
}

// Describes the IPv4 Prefix Delegation option for a network interface.
#Ipv4PrefixSpecificationRequest: {
	// The IPv4 Prefix Delegation prefix. For information, see Prefix Delegation
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-delegation)
	// in the Amazon Elastic Compute Cloud User Guide.
	Ipv4Prefix?: null | string @go(,*string)
}

// Information about the IPv4 delegated prefixes assigned to a network interface.
#Ipv4PrefixSpecificationResponse: {
	// One or more IPv4 delegated prefixes assigned to the network interface.
	Ipv4Prefix?: null | string @go(,*string)
}

// Describes an IPv6 CIDR block association.
#Ipv6CidrAssociation: {
	// The resource that's associated with the IPv6 CIDR block.
	AssociatedResource?: null | string @go(,*string)

	// The IPv6 CIDR block.
	Ipv6Cidr?: null | string @go(,*string)
}

// Describes an IPv6 CIDR block.
#Ipv6CidrBlock: {
	// The IPv6 CIDR block.
	Ipv6CidrBlock?: null | string @go(,*string)
}

// Describes an IPv6 address pool.
#Ipv6Pool: {
	// The description for the address pool.
	Description?: null | string @go(,*string)

	// The CIDR blocks for the address pool.
	PoolCidrBlocks: [...null | #PoolCidrBlock] @go(,[]*PoolCidrBlock)

	// The ID of the address pool.
	PoolId?: null | string @go(,*string)

	// Any tags for the address pool.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes the IPv6 Prefix Delegation.
#Ipv6PrefixSpecification: {
	// The IPv6 Prefix Delegation prefix.
	Ipv6Prefix?: null | string @go(,*string)
}

// Describes the IPv4 Prefix Delegation option for a network interface.
#Ipv6PrefixSpecificationRequest: {
	// The IPv6 Prefix Delegation prefix.
	Ipv6Prefix?: null | string @go(,*string)
}

// Information about the IPv6 delegated prefixes assigned to a network interface.
#Ipv6PrefixSpecificationResponse: {
	// One or more IPv6 delegated prefixes assigned to the network interface.
	Ipv6Prefix?: null | string @go(,*string)
}

// [EC2-VPC only] Describes an IPv6 range.
#Ipv6Range: {
	// The IPv6 CIDR range. You can either specify a CIDR range or a source security
	// group, not both. To specify a single IPv6 address, use the /128 prefix length.
	CidrIpv6?: null | string @go(,*string)

	// A description for the security group rule that references this IPv6 address
	// range.
	//
	// Constraints: Up to 255 characters in length. Allowed characters are a-z,
	// A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
	Description?: null | string @go(,*string)
}

// Describes a key pair.
#KeyPairInfo: {
	// If you used CreateKeyPair to create the key pair:
	//
	//    * For RSA key pairs, the key fingerprint is the SHA-1 digest of the DER
	//    encoded private key.
	//
	//    * For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256
	//    digest, which is the default for OpenSSH, starting with OpenSSH 6.8 (http://www.openssh.com/txt/release-6.8).
	//
	// If you used ImportKeyPair to provide Amazon Web Services the public key:
	//
	//    * For RSA key pairs, the key fingerprint is the MD5 public key fingerprint
	//    as specified in section 4 of RFC4716.
	//
	//    * For ED25519 key pairs, the key fingerprint is the base64-encoded SHA-256
	//    digest, which is the default for OpenSSH, starting with OpenSSH 6.8 (http://www.openssh.com/txt/release-6.8).
	KeyFingerprint?: null | string @go(,*string)

	// The name of the key pair.
	KeyName?: null | string @go(,*string)

	// The ID of the key pair.
	KeyPairId?: null | string @go(,*string)

	// The type of key pair.
	KeyType?: null | string @go(,*string)

	// Any tags applied to the key pair.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// The last error that occurred for a VPC endpoint.
#LastError: {
	// The error code for the VPC endpoint error.
	Code?: null | string @go(,*string)

	// The error message for the VPC endpoint error.
	Message?: null | string @go(,*string)
}

// Describes a launch permission.
#LaunchPermission: {
	// The name of the group.
	Group?: null | string @go(,*string)

	// The AWS account ID.
	//
	// Constraints: Up to 10 000 account IDs can be specified in a single request.
	UserId?: null | string @go(,*string)
}

// Describes a launch permission modification.
#LaunchPermissionModifications: {
	// The AWS account ID to add to the list of launch permissions for the AMI.
	Add: [...null | #LaunchPermission] @go(,[]*LaunchPermission)

	// The AWS account ID to remove from the list of launch permissions for the
	// AMI.
	Remove: [...null | #LaunchPermission] @go(,[]*LaunchPermission)
}

// Describes the launch specification for an instance.
#LaunchSpecification: {
	// Deprecated.
	AddressingType?: null | string @go(,*string)

	// One or more block device mapping entries.
	BlockDeviceMappings: [...null | #BlockDeviceMapping] @go(,[]*BlockDeviceMapping)

	// Indicates whether the instance is optimized for EBS I/O. This optimization
	// provides dedicated throughput to Amazon EBS and an optimized configuration
	// stack to provide optimal EBS I/O performance. This optimization isn't available
	// with all instance types. Additional usage charges apply when using an EBS
	// Optimized instance.
	//
	// Default: false
	EbsOptimized?: null | bool @go(,*bool)

	// The IAM instance profile.
	IamInstanceProfile?: null | #IamInstanceProfileSpecification @go(,*IamInstanceProfileSpecification)

	// The ID of the AMI.
	ImageId?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The ID of the kernel.
	KernelId?: null | string @go(,*string)

	// The name of the key pair.
	KeyName?: null | string @go(,*string)

	// Describes the monitoring of an instance.
	Monitoring?: null | #RunInstancesMonitoringEnabled @go(,*RunInstancesMonitoringEnabled)

	// One or more network interfaces. If you specify a network interface, you must
	// specify subnet IDs and security group IDs using the network interface.
	NetworkInterfaces: [...null | #InstanceNetworkInterfaceSpecification] @go(,[]*InstanceNetworkInterfaceSpecification)

	// The placement information for the instance.
	Placement?: null | #SpotPlacement @go(,*SpotPlacement)

	// The ID of the RAM disk.
	RamdiskId?: null | string @go(,*string)

	// One or more security groups. When requesting instances in a VPC, you must
	// specify the IDs of the security groups. When requesting instances in EC2-Classic,
	// you can specify the names or the IDs of the security groups.
	SecurityGroups: [...null | #GroupIdentifier] @go(,[]*GroupIdentifier)

	// The ID of the subnet in which to launch the instance.
	SubnetId?: null | string @go(,*string)

	// The Base64-encoded user data for the instance.
	UserData?: null | string @go(,*string)
}

// Describes a launch template.
#LaunchTemplate: {
	// The time launch template was created.
	CreateTime?: null | time.Time @go(,*time.Time)

	// The principal that created the launch template.
	CreatedBy?: null | string @go(,*string)

	// The version number of the default version of the launch template.
	DefaultVersionNumber?: null | int64 @go(,*int64)

	// The version number of the latest version of the launch template.
	LatestVersionNumber?: null | int64 @go(,*int64)

	// The ID of the launch template.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template.
	LaunchTemplateName?: null | string @go(,*string)

	// The tags for the launch template.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes a launch template and overrides.
#LaunchTemplateAndOverridesResponse: {
	// The launch template.
	LaunchTemplateSpecification?: null | #FleetLaunchTemplateSpecification @go(,*FleetLaunchTemplateSpecification)

	// Any parameters that you specify override the same parameters in the launch
	// template.
	Overrides?: null | #FleetLaunchTemplateOverrides @go(,*FleetLaunchTemplateOverrides)
}

// Describes a block device mapping.
#LaunchTemplateBlockDeviceMapping: {
	// The device name.
	DeviceName?: null | string @go(,*string)

	// Information about the block device for an EBS volume.
	Ebs?: null | #LaunchTemplateEbsBlockDevice @go(,*LaunchTemplateEbsBlockDevice)

	// To omit the device from the block device mapping, specify an empty string.
	NoDevice?: null | string @go(,*string)

	// The virtual device name (ephemeralN).
	VirtualName?: null | string @go(,*string)
}

// Describes a block device mapping.
#LaunchTemplateBlockDeviceMappingRequest: {
	// The device name (for example, /dev/sdh or xvdh).
	DeviceName?: null | string @go(,*string)

	// Parameters used to automatically set up EBS volumes when the instance is
	// launched.
	Ebs?: null | #LaunchTemplateEbsBlockDeviceRequest @go(,*LaunchTemplateEbsBlockDeviceRequest)

	// To omit the device from the block device mapping, specify an empty string.
	NoDevice?: null | string @go(,*string)

	// The virtual device name (ephemeralN). Instance store volumes are numbered
	// starting from 0. An instance type with 2 available instance store volumes
	// can specify mappings for ephemeral0 and ephemeral1. The number of available
	// instance store volumes depends on the instance type. After you connect to
	// the instance, you must mount the volume.
	VirtualName?: null | string @go(,*string)
}

// Describes an instance's Capacity Reservation targeting option. You can specify
// only one option at a time. Use the CapacityReservationPreference parameter
// to configure the instance to run in On-Demand capacity or to run in any open
// Capacity Reservation that has matching attributes (instance type, platform,
// Availability Zone). Use the CapacityReservationTarget parameter to explicitly
// target a specific Capacity Reservation or a Capacity Reservation group.
#LaunchTemplateCapacityReservationSpecificationRequest: {
	// Indicates the instance's Capacity Reservation preferences. Possible preferences
	// include:
	//
	//    * open - The instance can run in any open Capacity Reservation that has
	//    matching attributes (instance type, platform, Availability Zone).
	//
	//    * none - The instance avoids running in a Capacity Reservation even if
	//    one is available. The instance runs in On-Demand capacity.
	CapacityReservationPreference?: null | string @go(,*string)

	// Information about the target Capacity Reservation or Capacity Reservation
	// group.
	CapacityReservationTarget?: null | #CapacityReservationTarget @go(,*CapacityReservationTarget)
}

// Information about the Capacity Reservation targeting option.
#LaunchTemplateCapacityReservationSpecificationResponse: {
	// Indicates the instance's Capacity Reservation preferences. Possible preferences
	// include:
	//
	//    * open - The instance can run in any open Capacity Reservation that has
	//    matching attributes (instance type, platform, Availability Zone).
	//
	//    * none - The instance avoids running in a Capacity Reservation even if
	//    one is available. The instance runs in On-Demand capacity.
	CapacityReservationPreference?: null | string @go(,*string)

	// Information about the target Capacity Reservation or Capacity Reservation
	// group.
	CapacityReservationTarget?: null | #CapacityReservationTargetResponse @go(,*CapacityReservationTargetResponse)
}

// Describes a launch template and overrides.
#LaunchTemplateConfig: {
	// The launch template.
	LaunchTemplateSpecification?: null | #FleetLaunchTemplateSpecification @go(,*FleetLaunchTemplateSpecification)

	// Any parameters that you specify override the same parameters in the launch
	// template.
	Overrides: [...null | #LaunchTemplateOverrides] @go(,[]*LaunchTemplateOverrides)
}

// The CPU options for the instance.
#LaunchTemplateCpuOptions: {
	// The number of CPU cores for the instance.
	CoreCount?: null | int64 @go(,*int64)

	// The number of threads per CPU core.
	ThreadsPerCore?: null | int64 @go(,*int64)
}

// The CPU options for the instance. Both the core count and threads per core
// must be specified in the request.
#LaunchTemplateCpuOptionsRequest: {
	// The number of CPU cores for the instance.
	CoreCount?: null | int64 @go(,*int64)

	// The number of threads per CPU core. To disable multithreading for the instance,
	// specify a value of 1. Otherwise, specify the default value of 2.
	ThreadsPerCore?: null | int64 @go(,*int64)
}

// Describes a block device for an EBS volume.
#LaunchTemplateEbsBlockDevice: {
	// Indicates whether the EBS volume is deleted on instance termination.
	DeleteOnTermination?: null | bool @go(,*bool)

	// Indicates whether the EBS volume is encrypted.
	Encrypted?: null | bool @go(,*bool)

	// The number of I/O operations per second (IOPS) that the volume supports.
	Iops?: null | int64 @go(,*int64)

	// The ARN of the Key Management Service (KMS) CMK used for encryption.
	KmsKeyId?: null | string @go(,*string)

	// The ID of the snapshot.
	SnapshotId?: null | string @go(,*string)

	// The throughput that the volume supports, in MiB/s.
	Throughput?: null | int64 @go(,*int64)

	// The size of the volume, in GiB.
	VolumeSize?: null | int64 @go(,*int64)

	// The volume type.
	VolumeType?: null | string @go(,*string)
}

// The parameters for a block device for an EBS volume.
#LaunchTemplateEbsBlockDeviceRequest: {
	// Indicates whether the EBS volume is deleted on instance termination.
	DeleteOnTermination?: null | bool @go(,*bool)

	// Indicates whether the EBS volume is encrypted. Encrypted volumes can only
	// be attached to instances that support Amazon EBS encryption. If you are creating
	// a volume from a snapshot, you can't specify an encryption value.
	Encrypted?: null | bool @go(,*bool)

	// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes,
	// this represents the number of IOPS that are provisioned for the volume. For
	// gp2 volumes, this represents the baseline performance of the volume and the
	// rate at which the volume accumulates I/O credits for bursting.
	//
	// The following are the supported values for each volume type:
	//
	//    * gp3: 3,000-16,000 IOPS
	//
	//    * io1: 100-64,000 IOPS
	//
	//    * io2: 100-64,000 IOPS
	//
	// For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built
	// on the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).
	// Other instance families guarantee performance up to 32,000 IOPS.
	//
	// This parameter is supported for io1, io2, and gp3 volumes only. This parameter
	// is not supported for gp2, st1, sc1, or standard volumes.
	Iops?: null | int64 @go(,*int64)

	// The ARN of the symmetric Key Management Service (KMS) CMK used for encryption.
	KmsKeyId?: null | string @go(,*string)

	// The ID of the snapshot.
	SnapshotId?: null | string @go(,*string)

	// The throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s.
	//
	// Valid Range: Minimum value of 125. Maximum value of 1000.
	Throughput?: null | int64 @go(,*int64)

	// The size of the volume, in GiBs. You must specify either a snapshot ID or
	// a volume size. The following are the supported volumes sizes for each volume
	// type:
	//
	//    * gp2 and gp3: 1-16,384
	//
	//    * io1 and io2: 4-16,384
	//
	//    * st1 and sc1: 125-16,384
	//
	//    * standard: 1-1,024
	VolumeSize?: null | int64 @go(,*int64)

	// The volume type. For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	VolumeType?: null | string @go(,*string)
}

// Describes an elastic inference accelerator.
#LaunchTemplateElasticInferenceAccelerator: {
	// The number of elastic inference accelerators to attach to the instance.
	//
	// Default: 1
	Count?: null | int64 @go(,*int64)

	// The type of elastic inference accelerator. The possible values are eia1.medium,
	// eia1.large, and eia1.xlarge.
	//
	// Type is a required field
	Type?: null | string @go(,*string)
}

// Describes an elastic inference accelerator.
#LaunchTemplateElasticInferenceAcceleratorResponse: {
	// The number of elastic inference accelerators to attach to the instance.
	//
	// Default: 1
	Count?: null | int64 @go(,*int64)

	// The type of elastic inference accelerator. The possible values are eia1.medium,
	// eia1.large, and eia1.xlarge.
	Type?: null | string @go(,*string)
}

// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
#LaunchTemplateEnclaveOptions: {
	// If this parameter is set to true, the instance is enabled for Amazon Web
	// Services Nitro Enclaves; otherwise, it is not enabled for Amazon Web Services
	// Nitro Enclaves.
	Enabled?: null | bool @go(,*bool)
}

// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
// For more information, see What is Amazon Web Services Nitro Enclaves? (https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html)
// in the Amazon Web Services Nitro Enclaves User Guide.
#LaunchTemplateEnclaveOptionsRequest: {
	// To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter
	// to true.
	Enabled?: null | bool @go(,*bool)
}

// Indicates whether an instance is configured for hibernation.
#LaunchTemplateHibernationOptions: {
	// If this parameter is set to true, the instance is enabled for hibernation;
	// otherwise, it is not enabled for hibernation.
	Configured?: null | bool @go(,*bool)
}

// Indicates whether the instance is configured for hibernation. This parameter
// is valid only if the instance meets the hibernation prerequisites (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites).
#LaunchTemplateHibernationOptionsRequest: {
	// If you set this parameter to true, the instance is enabled for hibernation.
	//
	// Default: false
	Configured?: null | bool @go(,*bool)
}

// Describes an IAM instance profile.
#LaunchTemplateIamInstanceProfileSpecification: {
	// The Amazon Resource Name (ARN) of the instance profile.
	Arn?: null | string @go(,*string)

	// The name of the instance profile.
	Name?: null | string @go(,*string)
}

// An IAM instance profile.
#LaunchTemplateIamInstanceProfileSpecificationRequest: {
	// The Amazon Resource Name (ARN) of the instance profile.
	Arn?: null | string @go(,*string)

	// The name of the instance profile.
	Name?: null | string @go(,*string)
}

// The market (purchasing) option for the instances.
#LaunchTemplateInstanceMarketOptions: {
	// The market type.
	MarketType?: null | string @go(,*string)

	// The options for Spot Instances.
	SpotOptions?: null | #LaunchTemplateSpotMarketOptions @go(,*LaunchTemplateSpotMarketOptions)
}

// The market (purchasing) option for the instances.
#LaunchTemplateInstanceMarketOptionsRequest: {
	// The market type.
	MarketType?: null | string @go(,*string)

	// The options for Spot Instances.
	SpotOptions?: null | #LaunchTemplateSpotMarketOptionsRequest @go(,*LaunchTemplateSpotMarketOptionsRequest)
}

// The metadata options for the instance. For more information, see Instance
// Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
// in the Amazon Elastic Compute Cloud User Guide.
#LaunchTemplateInstanceMetadataOptions: {
	// This parameter enables or disables the HTTP metadata endpoint on your instances.
	// If the parameter is not specified, the default state is enabled.
	//
	// If you specify a value of disabled, you will not be able to access your instance
	// metadata.
	HttpEndpoint?: null | string @go(,*string)

	// The desired HTTP PUT response hop limit for instance metadata requests. The
	// larger the number, the further instance metadata requests can travel.
	//
	// Default: 1
	//
	// Possible values: Integers from 1 to 64
	HttpPutResponseHopLimit?: null | int64 @go(,*int64)

	// The state of token usage for your instance metadata requests. If the parameter
	// is not specified in the request, the default state is optional.
	//
	// If the state is optional, you can choose to retrieve instance metadata with
	// or without a signed token header on your request. If you retrieve the IAM
	// role credentials without a token, the version 1.0 role credentials are returned.
	// If you retrieve the IAM role credentials using a valid signed token, the
	// version 2.0 role credentials are returned.
	//
	// If the state is required, you must send a signed token header with any instance
	// metadata retrieval requests. In this state, retrieving the IAM role credentials
	// always returns the version 2.0 credentials; the version 1.0 credentials are
	// not available.
	HttpTokens?: null | string @go(,*string)

	// The state of the metadata option changes.
	//
	// pending - The metadata options are being updated and the instance is not
	// ready to process metadata traffic with the new selection.
	//
	// applied - The metadata options have been successfully applied on the instance.
	State?: null | string @go(,*string)
}

// The metadata options for the instance. For more information, see Instance
// Metadata and User Data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
// in the Amazon Elastic Compute Cloud User Guide.
#LaunchTemplateInstanceMetadataOptionsRequest: {
	// This parameter enables or disables the HTTP metadata endpoint on your instances.
	// If the parameter is not specified, the default state is enabled.
	//
	// If you specify a value of disabled, you will not be able to access your instance
	// metadata.
	HttpEndpoint?: null | string @go(,*string)

	// The desired HTTP PUT response hop limit for instance metadata requests. The
	// larger the number, the further instance metadata requests can travel.
	//
	// Default: 1
	//
	// Possible values: Integers from 1 to 64
	HttpPutResponseHopLimit?: null | int64 @go(,*int64)

	// The state of token usage for your instance metadata requests. If the parameter
	// is not specified in the request, the default state is optional.
	//
	// If the state is optional, you can choose to retrieve instance metadata with
	// or without a signed token header on your request. If you retrieve the IAM
	// role credentials without a token, the version 1.0 role credentials are returned.
	// If you retrieve the IAM role credentials using a valid signed token, the
	// version 2.0 role credentials are returned.
	//
	// If the state is required, you must send a signed token header with any instance
	// metadata retrieval requests. In this state, retrieving the IAM role credentials
	// always returns the version 2.0 credentials; the version 1.0 credentials are
	// not available.
	HttpTokens?: null | string @go(,*string)
}

// Describes a network interface.
#LaunchTemplateInstanceNetworkInterfaceSpecification: {
	// Indicates whether to associate a Carrier IP address with eth0 for a new network
	// interface.
	//
	// Use this option when you launch an instance in a Wavelength Zone and want
	// to associate a Carrier IP address with the network interface. For more information
	// about Carrier IP addresses, see Carrier IP addresses (https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip)
	// in the Wavelength Developer Guide.
	AssociateCarrierIpAddress?: null | bool @go(,*bool)

	// Indicates whether to associate a public IPv4 address with eth0 for a new
	// network interface.
	AssociatePublicIpAddress?: null | bool @go(,*bool)

	// Indicates whether the network interface is deleted when the instance is terminated.
	DeleteOnTermination?: null | bool @go(,*bool)

	// A description for the network interface.
	Description?: null | string @go(,*string)

	// The device index for the network interface attachment.
	DeviceIndex?: null | int64 @go(,*int64)

	// The IDs of one or more security groups.
	Groups: [...null | string] @go(,[]*string)

	// The type of network interface.
	InterfaceType?: null | string @go(,*string)

	// The number of IPv4 delegated prefixes that AWS automatically assigned to
	// the network interface.
	Ipv4PrefixCount?: null | int64 @go(,*int64)

	// One or more IPv4 delegated prefixes assigned to the network interface.
	Ipv4Prefixes: [...null | #Ipv4PrefixSpecificationResponse] @go(,[]*Ipv4PrefixSpecificationResponse)

	// The number of IPv6 addresses for the network interface.
	Ipv6AddressCount?: null | int64 @go(,*int64)

	// The IPv6 addresses for the network interface.
	Ipv6Addresses: [...null | #InstanceIpv6Address] @go(,[]*InstanceIpv6Address)

	// The number of IPv6 delegated prefixes that AWS automatically assigned to
	// the network interface.
	Ipv6PrefixCount?: null | int64 @go(,*int64)

	// One or more IPv6 delegated prefixes assigned to the network interface.
	Ipv6Prefixes: [...null | #Ipv6PrefixSpecificationResponse] @go(,[]*Ipv6PrefixSpecificationResponse)

	// The index of the network card.
	NetworkCardIndex?: null | int64 @go(,*int64)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The primary private IPv4 address of the network interface.
	PrivateIpAddress?: null | string @go(,*string)

	// One or more private IPv4 addresses.
	PrivateIpAddresses: [...null | #PrivateIpAddressSpecification] @go(,[]*PrivateIpAddressSpecification)

	// The number of secondary private IPv4 addresses for the network interface.
	SecondaryPrivateIpAddressCount?: null | int64 @go(,*int64)

	// The ID of the subnet for the network interface.
	SubnetId?: null | string @go(,*string)
}

// The parameters for a network interface.
#LaunchTemplateInstanceNetworkInterfaceSpecificationRequest: {
	// Associates a Carrier IP address with eth0 for a new network interface.
	//
	// Use this option when you launch an instance in a Wavelength Zone and want
	// to associate a Carrier IP address with the network interface. For more information
	// about Carrier IP addresses, see Carrier IP addresses (https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip)
	// in the Wavelength Developer Guide.
	AssociateCarrierIpAddress?: null | bool @go(,*bool)

	// Associates a public IPv4 address with eth0 for a new network interface.
	AssociatePublicIpAddress?: null | bool @go(,*bool)

	// Indicates whether the network interface is deleted when the instance is terminated.
	DeleteOnTermination?: null | bool @go(,*bool)

	// A description for the network interface.
	Description?: null | string @go(,*string)

	// The device index for the network interface attachment.
	DeviceIndex?: null | int64 @go(,*int64)

	// The IDs of one or more security groups.
	Groups: [...null | string] @go(,[]*string)

	// The type of network interface. To create an Elastic Fabric Adapter (EFA),
	// specify efa. For more information, see Elastic Fabric Adapter (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// If you are not creating an EFA, specify interface or omit this parameter.
	//
	// Valid values: interface | efa
	InterfaceType?: null | string @go(,*string)

	// The number of IPv4 delegated prefixes to be automatically assigned to the
	// network interface. You cannot use this option if you use the Ipv4Prefix option.
	Ipv4PrefixCount?: null | int64 @go(,*int64)

	// One or more IPv4 delegated prefixes to be assigned to the network interface.
	// You cannot use this option if you use the Ipv4PrefixCount option.
	Ipv4Prefixes: [...null | #Ipv4PrefixSpecificationRequest] @go(,[]*Ipv4PrefixSpecificationRequest)

	// The number of IPv6 addresses to assign to a network interface. Amazon EC2
	// automatically selects the IPv6 addresses from the subnet range. You can't
	// use this option if specifying specific IPv6 addresses.
	Ipv6AddressCount?: null | int64 @go(,*int64)

	// One or more specific IPv6 addresses from the IPv6 CIDR block range of your
	// subnet. You can't use this option if you're specifying a number of IPv6 addresses.
	Ipv6Addresses: [...null | #InstanceIpv6AddressRequest] @go(,[]*InstanceIpv6AddressRequest)

	// The number of IPv6 delegated prefixes to be automatically assigned to the
	// network interface. You cannot use this option if you use the Ipv6Prefix option.
	Ipv6PrefixCount?: null | int64 @go(,*int64)

	// One or more IPv6 delegated prefixes to be assigned to the network interface.
	// You cannot use this option if you use the Ipv6PrefixCount option.
	Ipv6Prefixes: [...null | #Ipv6PrefixSpecificationRequest] @go(,[]*Ipv6PrefixSpecificationRequest)

	// The index of the network card. Some instance types support multiple network
	// cards. The primary network interface must be assigned to network card index
	// 0. The default is network card index 0.
	NetworkCardIndex?: null | int64 @go(,*int64)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The primary private IPv4 address of the network interface.
	PrivateIpAddress?: null | string @go(,*string)

	// One or more private IPv4 addresses.
	PrivateIpAddresses: [...null | #PrivateIpAddressSpecification] @go(,[]*PrivateIpAddressSpecification)

	// The number of secondary private IPv4 addresses to assign to a network interface.
	SecondaryPrivateIpAddressCount?: null | int64 @go(,*int64)

	// The ID of the subnet for the network interface.
	SubnetId?: null | string @go(,*string)
}

// Describes a license configuration.
#LaunchTemplateLicenseConfiguration: {
	// The Amazon Resource Name (ARN) of the license configuration.
	LicenseConfigurationArn?: null | string @go(,*string)
}

// Describes a license configuration.
#LaunchTemplateLicenseConfigurationRequest: {
	// The Amazon Resource Name (ARN) of the license configuration.
	LicenseConfigurationArn?: null | string @go(,*string)
}

// Describes overrides for a launch template.
#LaunchTemplateOverrides: {
	// The Availability Zone in which to launch the instances.
	AvailabilityZone?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The priority for the launch template override. The highest priority is launched
	// first.
	//
	// If OnDemandAllocationStrategy is set to prioritized, Spot Fleet uses priority
	// to determine which launch template override to use first in fulfilling On-Demand
	// capacity.
	//
	// If the Spot AllocationStrategy is set to capacityOptimizedPrioritized, Spot
	// Fleet uses priority on a best-effort basis to determine which launch template
	// override to use in fulfilling Spot capacity, but optimizes for capacity first.
	//
	// Valid values are whole numbers starting at 0. The lower the number, the higher
	// the priority. If no number is set, the launch template override has the lowest
	// priority. You can set the same priority for different launch template overrides.
	Priority?: null | float64 @go(,*float64)

	// The maximum price per unit hour that you are willing to pay for a Spot Instance.
	SpotPrice?: null | string @go(,*string)

	// The ID of the subnet in which to launch the instances.
	SubnetId?: null | string @go(,*string)

	// The number of units provided by the specified instance type.
	WeightedCapacity?: null | float64 @go(,*float64)
}

// Describes the placement of an instance.
#LaunchTemplatePlacement: {
	// The affinity setting for the instance on the Dedicated Host.
	Affinity?: null | string @go(,*string)

	// The Availability Zone of the instance.
	AvailabilityZone?: null | string @go(,*string)

	// The name of the placement group for the instance.
	GroupName?: null | string @go(,*string)

	// The ID of the Dedicated Host for the instance.
	HostId?: null | string @go(,*string)

	// The ARN of the host resource group in which to launch the instances.
	HostResourceGroupArn?: null | string @go(,*string)

	// The number of the partition the instance should launch in. Valid only if
	// the placement group strategy is set to partition.
	PartitionNumber?: null | int64 @go(,*int64)

	// Reserved for future use.
	SpreadDomain?: null | string @go(,*string)

	// The tenancy of the instance (if the instance is running in a VPC). An instance
	// with a tenancy of dedicated runs on single-tenant hardware.
	Tenancy?: null | string @go(,*string)
}

// Describes the placement of an instance.
#LaunchTemplatePlacementRequest: {
	// The affinity setting for an instance on a Dedicated Host.
	Affinity?: null | string @go(,*string)

	// The Availability Zone for the instance.
	AvailabilityZone?: null | string @go(,*string)

	// The name of the placement group for the instance.
	GroupName?: null | string @go(,*string)

	// The ID of the Dedicated Host for the instance.
	HostId?: null | string @go(,*string)

	// The ARN of the host resource group in which to launch the instances. If you
	// specify a host resource group ARN, omit the Tenancy parameter or set it to
	// host.
	HostResourceGroupArn?: null | string @go(,*string)

	// The number of the partition the instance should launch in. Valid only if
	// the placement group strategy is set to partition.
	PartitionNumber?: null | int64 @go(,*int64)

	// Reserved for future use.
	SpreadDomain?: null | string @go(,*string)

	// The tenancy of the instance (if the instance is running in a VPC). An instance
	// with a tenancy of dedicated runs on single-tenant hardware.
	Tenancy?: null | string @go(,*string)
}

// The launch template to use. You must specify either the launch template ID
// or launch template name in the request, but not both.
#LaunchTemplateSpecification: {
	// The ID of the launch template.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template.
	LaunchTemplateName?: null | string @go(,*string)

	// The version number of the launch template.
	//
	// Default: The default version for the launch template.
	Version?: null | string @go(,*string)
}

// The options for Spot Instances.
#LaunchTemplateSpotMarketOptions: {
	// The required duration for the Spot Instances (also known as Spot blocks),
	// in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300,
	// or 360).
	BlockDurationMinutes?: null | int64 @go(,*int64)

	// The behavior when a Spot Instance is interrupted.
	InstanceInterruptionBehavior?: null | string @go(,*string)

	// The maximum hourly price you're willing to pay for the Spot Instances.
	MaxPrice?: null | string @go(,*string)

	// The Spot Instance request type.
	SpotInstanceType?: null | string @go(,*string)

	// The end date of the request. For a one-time request, the request remains
	// active until all instances launch, the request is canceled, or this date
	// is reached. If the request is persistent, it remains active until it is canceled
	// or this date and time is reached.
	ValidUntil?: null | time.Time @go(,*time.Time)
}

// The options for Spot Instances.
#LaunchTemplateSpotMarketOptionsRequest: {
	// The required duration for the Spot Instances (also known as Spot blocks),
	// in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300,
	// or 360).
	BlockDurationMinutes?: null | int64 @go(,*int64)

	// The behavior when a Spot Instance is interrupted. The default is terminate.
	InstanceInterruptionBehavior?: null | string @go(,*string)

	// The maximum hourly price you're willing to pay for the Spot Instances.
	MaxPrice?: null | string @go(,*string)

	// The Spot Instance request type.
	SpotInstanceType?: null | string @go(,*string)

	// The end date of the request. For a one-time request, the request remains
	// active until all instances launch, the request is canceled, or this date
	// is reached. If the request is persistent, it remains active until it is canceled
	// or this date and time is reached. The default end date is 7 days from the
	// current date.
	ValidUntil?: null | time.Time @go(,*time.Time)
}

// The tag specification for the launch template.
#LaunchTemplateTagSpecification: {
	// The type of resource.
	ResourceType?: null | string @go(,*string)

	// The tags for the resource.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// The tags specification for the launch template.
#LaunchTemplateTagSpecificationRequest: {
	// The type of resource to tag. Currently, the resource types that support tagging
	// on creation are instance and volume. To tag a resource after it has been
	// created, see CreateTags (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
	ResourceType?: null | string @go(,*string)

	// The tags to apply to the resource.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes a launch template version.
#LaunchTemplateVersion: {
	// The time the version was created.
	CreateTime?: null | time.Time @go(,*time.Time)

	// The principal that created the version.
	CreatedBy?: null | string @go(,*string)

	// Indicates whether the version is the default version.
	DefaultVersion?: null | bool @go(,*bool)

	// Information about the launch template.
	LaunchTemplateData?: null | #ResponseLaunchTemplateData @go(,*ResponseLaunchTemplateData)

	// The ID of the launch template.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template.
	LaunchTemplateName?: null | string @go(,*string)

	// The description for the version.
	VersionDescription?: null | string @go(,*string)

	// The version number.
	VersionNumber?: null | int64 @go(,*int64)
}

// Describes the monitoring for the instance.
#LaunchTemplatesMonitoring: {
	// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring
	// is enabled.
	Enabled?: null | bool @go(,*bool)
}

// Describes the monitoring for the instance.
#LaunchTemplatesMonitoringRequest: {
	// Specify true to enable detailed monitoring. Otherwise, basic monitoring is
	// enabled.
	Enabled?: null | bool @go(,*bool)
}

// Describes a license configuration.
#LicenseConfiguration: {
	// The Amazon Resource Name (ARN) of the license configuration.
	LicenseConfigurationArn?: null | string @go(,*string)
}

// Describes a license configuration.
#LicenseConfigurationRequest: {
	// The Amazon Resource Name (ARN) of the license configuration.
	LicenseConfigurationArn?: null | string @go(,*string)
}

// Describes the Classic Load Balancers and target groups to attach to a Spot
// Fleet request.
#LoadBalancersConfig: {
	// The Classic Load Balancers.
	ClassicLoadBalancersConfig?: null | #ClassicLoadBalancersConfig @go(,*ClassicLoadBalancersConfig)

	// The target groups.
	TargetGroupsConfig?: null | #TargetGroupsConfig @go(,*TargetGroupsConfig)
}

// Describes a load permission.
#LoadPermission: {
	// The name of the group.
	Group?: null | string @go(,*string)

	// The AWS account ID.
	UserId?: null | string @go(,*string)
}

// Describes modifications to the load permissions of an Amazon FPGA image (AFI).
#LoadPermissionModifications: {
	// The load permissions to add.
	Add: [...null | #LoadPermissionRequest] @go(,[]*LoadPermissionRequest)

	// The load permissions to remove.
	Remove: [...null | #LoadPermissionRequest] @go(,[]*LoadPermissionRequest)
}

// Describes a load permission.
#LoadPermissionRequest: {
	// The name of the group.
	Group?: null | string @go(,*string)

	// The AWS account ID.
	UserId?: null | string @go(,*string)
}

// Describes a local gateway.
#LocalGateway: {
	// The ID of the local gateway.
	LocalGatewayId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn?: null | string @go(,*string)

	// The AWS account ID that owns the local gateway.
	OwnerId?: null | string @go(,*string)

	// The state of the local gateway.
	State?: null | string @go(,*string)

	// The tags assigned to the local gateway.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes a route for a local gateway route table.
#LocalGatewayRoute: {
	// The CIDR block used for destination matches.
	DestinationCidrBlock?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the local gateway route table.
	LocalGatewayRouteTableArn?: null | string @go(,*string)

	// The ID of the local gateway route table.
	LocalGatewayRouteTableId?: null | string @go(,*string)

	// The ID of the virtual interface group.
	LocalGatewayVirtualInterfaceGroupId?: null | string @go(,*string)

	// The AWS account ID that owns the local gateway route.
	OwnerId?: null | string @go(,*string)

	// The state of the route.
	State?: null | string @go(,*string)

	// The route type.
	Type?: null | string @go(,*string)
}

// Describes a local gateway route table.
#LocalGatewayRouteTable: {
	// The ID of the local gateway.
	LocalGatewayId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the local gateway route table.
	LocalGatewayRouteTableArn?: null | string @go(,*string)

	// The ID of the local gateway route table.
	LocalGatewayRouteTableId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn?: null | string @go(,*string)

	// The AWS account ID that owns the local gateway route table.
	OwnerId?: null | string @go(,*string)

	// The state of the local gateway route table.
	State?: null | string @go(,*string)

	// The tags assigned to the local gateway route table.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes an association between a local gateway route table and a virtual
// interface group.
#LocalGatewayRouteTableVirtualInterfaceGroupAssociation: {
	// The ID of the local gateway.
	LocalGatewayId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the local gateway route table for the virtual
	// interface group.
	LocalGatewayRouteTableArn?: null | string @go(,*string)

	// The ID of the local gateway route table.
	LocalGatewayRouteTableId?: null | string @go(,*string)

	// The ID of the association.
	LocalGatewayRouteTableVirtualInterfaceGroupAssociationId?: null | string @go(,*string)

	// The ID of the virtual interface group.
	LocalGatewayVirtualInterfaceGroupId?: null | string @go(,*string)

	// The AWS account ID that owns the local gateway virtual interface group association.
	OwnerId?: null | string @go(,*string)

	// The state of the association.
	State?: null | string @go(,*string)

	// The tags assigned to the association.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes an association between a local gateway route table and a VPC.
#LocalGatewayRouteTableVpcAssociation: {
	// The ID of the local gateway.
	LocalGatewayId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the local gateway route table for the association.
	LocalGatewayRouteTableArn?: null | string @go(,*string)

	// The ID of the local gateway route table.
	LocalGatewayRouteTableId?: null | string @go(,*string)

	// The ID of the association.
	LocalGatewayRouteTableVpcAssociationId?: null | string @go(,*string)

	// The AWS account ID that owns the local gateway route table for the association.
	OwnerId?: null | string @go(,*string)

	// The state of the association.
	State?: null | string @go(,*string)

	// The tags assigned to the association.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes a local gateway virtual interface.
#LocalGatewayVirtualInterface: {
	// The local address.
	LocalAddress?: null | string @go(,*string)

	// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of the local
	// gateway.
	LocalBgpAsn?: null | int64 @go(,*int64)

	// The ID of the local gateway.
	LocalGatewayId?: null | string @go(,*string)

	// The ID of the virtual interface.
	LocalGatewayVirtualInterfaceId?: null | string @go(,*string)

	// The AWS account ID that owns the local gateway virtual interface.
	OwnerId?: null | string @go(,*string)

	// The peer address.
	PeerAddress?: null | string @go(,*string)

	// The peer BGP ASN.
	PeerBgpAsn?: null | int64 @go(,*int64)

	// The tags assigned to the virtual interface.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VLAN.
	Vlan?: null | int64 @go(,*int64)
}

// Describes a local gateway virtual interface group.
#LocalGatewayVirtualInterfaceGroup: {
	// The ID of the local gateway.
	LocalGatewayId?: null | string @go(,*string)

	// The ID of the virtual interface group.
	LocalGatewayVirtualInterfaceGroupId?: null | string @go(,*string)

	// The IDs of the virtual interfaces.
	LocalGatewayVirtualInterfaceIds: [...null | string] @go(,[]*string)

	// The AWS account ID that owns the local gateway virtual interface group.
	OwnerId?: null | string @go(,*string)

	// The tags assigned to the virtual interface group.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes a managed prefix list.
#ManagedPrefixList: {
	// The IP address version.
	AddressFamily?: null | string @go(,*string)

	// The maximum number of entries for the prefix list.
	MaxEntries?: null | int64 @go(,*int64)

	// The ID of the owner of the prefix list.
	OwnerId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) for the prefix list.
	PrefixListArn?: null | string @go(,*string)

	// The ID of the prefix list.
	PrefixListId?: null | string @go(,*string)

	// The name of the prefix list.
	PrefixListName?: null | string @go(,*string)

	// The state of the prefix list.
	State?: null | string @go(,*string)

	// The state message.
	StateMessage?: null | string @go(,*string)

	// The tags for the prefix list.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The version of the prefix list.
	Version?: null | int64 @go(,*int64)
}

// Describes the memory for the instance type.
#MemoryInfo: {
	// The size of the memory, in MiB.
	SizeInMiB?: null | int64 @go(,*int64)
}

#ModifyAddressAttributeInput: {
	// [EC2-VPC] The allocation ID.
	//
	// AllocationId is a required field
	AllocationId?: null | string @go(,*string)

	// The domain name to modify for the IP address.
	DomainName?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#ModifyAddressAttributeOutput: {
	// Information about the Elastic IP address.
	Address?: null | #AddressAttribute @go(,*AddressAttribute)
}

#ModifyAvailabilityZoneGroupInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The name of the Availability Zone group, Local Zone group, or Wavelength
	// Zone group.
	//
	// GroupName is a required field
	GroupName?: null | string @go(,*string)

	// Indicates whether you are opted in to the Local Zone group or Wavelength
	// Zone group. The only valid value is opted-in. You must contact AWS Support
	// (https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services)
	// to opt out of a Local Zone group, or Wavelength Zone group.
	//
	// OptInStatus is a required field
	OptInStatus?: null | string @go(,*string)
}

#ModifyAvailabilityZoneGroupOutput: {
	// Is true if the request succeeds, and an error otherwise.
	Return?: null | bool @go(,*bool)
}

#ModifyCapacityReservationInput: {
	// Reserved. Capacity Reservations you have created are accepted by default.
	Accept?: null | bool @go(,*bool)

	// The ID of the Capacity Reservation.
	//
	// CapacityReservationId is a required field
	CapacityReservationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The date and time at which the Capacity Reservation expires. When a Capacity
	// Reservation expires, the reserved capacity is released and you can no longer
	// launch instances into it. The Capacity Reservation's state changes to expired
	// when it reaches its end date and time.
	//
	// The Capacity Reservation is cancelled within an hour from the specified time.
	// For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation
	// is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
	//
	// You must provide an EndDate value if EndDateType is limited. Omit EndDate
	// if EndDateType is unlimited.
	EndDate?: null | time.Time @go(,*time.Time)

	// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation
	// can have one of the following end types:
	//
	//    * unlimited - The Capacity Reservation remains active until you explicitly
	//    cancel it. Do not provide an EndDate value if EndDateType is unlimited.
	//
	//    * limited - The Capacity Reservation expires automatically at a specified
	//    date and time. You must provide an EndDate value if EndDateType is limited.
	EndDateType?: null | string @go(,*string)

	// The number of instances for which to reserve capacity.
	//
	// Valid range: 1 - 1000
	InstanceCount?: null | int64 @go(,*int64)
}

#ModifyCapacityReservationOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#ModifyClientVpnEndpointInput: {
	// The options for managing connection authorization for new client connections.
	ClientConnectOptions?: null | #ClientConnectOptions @go(,*ClientConnectOptions)

	// The ID of the Client VPN endpoint to modify.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Information about the client connection logging options.
	//
	// If you enable client connection logging, data about client connections is
	// sent to a Cloudwatch Logs log stream. The following information is logged:
	//
	//    * Client connection requests
	//
	//    * Client connection results (successful and unsuccessful)
	//
	//    * Reasons for unsuccessful client connection requests
	//
	//    * Client connection termination time
	ConnectionLogOptions?: null | #ConnectionLogOptions @go(,*ConnectionLogOptions)

	// A brief description of the Client VPN endpoint.
	Description?: null | string @go(,*string)

	// Information about the DNS servers to be used by Client VPN connections. A
	// Client VPN endpoint can have up to two DNS servers.
	DnsServers?: null | #DnsServersOptionsModifyStructure @go(,*DnsServersOptionsModifyStructure)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of one or more security groups to apply to the target network.
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// Specify whether to enable the self-service portal for the Client VPN endpoint.
	SelfServicePortal?: null | string @go(,*string)

	// The ARN of the server certificate to be used. The server certificate must
	// be provisioned in AWS Certificate Manager (ACM).
	ServerCertificateArn?: null | string @go(,*string)

	// Indicates whether the VPN is split-tunnel.
	//
	// For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client
	// VPN Endpoint (https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html)
	// in the AWS Client VPN Administrator Guide.
	SplitTunnel?: null | bool @go(,*bool)

	// The ID of the VPC to associate with the Client VPN endpoint.
	VpcId?: null | string @go(,*string)

	// The port number to assign to the Client VPN endpoint for TCP and UDP traffic.
	//
	// Valid Values: 443 | 1194
	//
	// Default Value: 443
	VpnPort?: null | int64 @go(,*int64)
}

#ModifyClientVpnEndpointOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#ModifyDefaultCreditSpecificationInput: {
	// The credit option for CPU usage of the instance family.
	//
	// Valid Values: standard | unlimited
	//
	// CpuCredits is a required field
	CpuCredits?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The instance family.
	//
	// InstanceFamily is a required field
	InstanceFamily?: null | string @go(,*string)
}

#ModifyDefaultCreditSpecificationOutput: {
	// The default credit option for CPU usage of the instance family.
	InstanceFamilyCreditSpecification?: null | #InstanceFamilyCreditSpecification @go(,*InstanceFamilyCreditSpecification)
}

#ModifyEbsDefaultKmsKeyIdInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The identifier of the Key Management Service (KMS) KMS key to use for Amazon
	// EBS encryption. If this parameter is not specified, your KMS key for Amazon
	// EBS is used. If KmsKeyId is specified, the encrypted state must be true.
	//
	// You can specify the KMS key using any of the following:
	//
	//    * Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * Key alias. For example, alias/ExampleAlias.
	//
	//    * Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
	//
	//    * Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
	//
	// Amazon Web Services authenticates the KMS key asynchronously. Therefore,
	// if you specify an ID, alias, or ARN that is not valid, the action can appear
	// to complete, but eventually fails.
	//
	// Amazon EBS does not support asymmetric KMS keys.
	//
	// KmsKeyId is a required field
	KmsKeyId?: null | string @go(,*string)
}

#ModifyEbsDefaultKmsKeyIdOutput: {
	// The Amazon Resource Name (ARN) of the default KMS key for encryption by default.
	KmsKeyId?: null | string @go(,*string)
}

#ModifyFleetInput: {
	// Reserved.
	Context?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Indicates whether running instances should be terminated if the total target
	// capacity of the EC2 Fleet is decreased below the current size of the EC2
	// Fleet.
	ExcessCapacityTerminationPolicy?: null | string @go(,*string)

	// The ID of the EC2 Fleet.
	//
	// FleetId is a required field
	FleetId?: null | string @go(,*string)

	// The launch template and overrides.
	LaunchTemplateConfigs: [...null | #FleetLaunchTemplateConfigRequest] @go(,[]*FleetLaunchTemplateConfigRequest)

	// The size of the EC2 Fleet.
	TargetCapacitySpecification?: null | #TargetCapacitySpecificationRequest @go(,*TargetCapacitySpecificationRequest)
}

#ModifyFleetOutput: {
	// Is true if the request succeeds, and an error otherwise.
	Return?: null | bool @go(,*bool)
}

#ModifyFpgaImageAttributeInput: {
	// The name of the attribute.
	Attribute?: null | string @go(,*string)

	// A description for the AFI.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AFI.
	//
	// FpgaImageId is a required field
	FpgaImageId?: null | string @go(,*string)

	// The load permission for the AFI.
	LoadPermission?: null | #LoadPermissionModifications @go(,*LoadPermissionModifications)

	// A name for the AFI.
	Name?: null | string @go(,*string)

	// The operation type.
	OperationType?: null | string @go(,*string)

	// The product codes. After you add a product code to an AFI, it can't be removed.
	// This parameter is valid only when modifying the productCodes attribute.
	ProductCodes: [...null | string] @go(,[]*string)

	// The user groups. This parameter is valid only when modifying the loadPermission
	// attribute.
	UserGroups: [...null | string] @go(,[]*string)

	// The AWS account IDs. This parameter is valid only when modifying the loadPermission
	// attribute.
	UserIds: [...null | string] @go(,[]*string)
}

#ModifyFpgaImageAttributeOutput: {
	// Information about the attribute.
	FpgaImageAttribute?: null | #FpgaImageAttribute @go(,*FpgaImageAttribute)
}

#ModifyHostsInput: {
	// Specify whether to enable or disable auto-placement.
	AutoPlacement?: null | string @go(,*string)

	// The IDs of the Dedicated Hosts to modify.
	//
	// HostIds is a required field
	HostIds: [...null | string] @go(,[]*string)

	// Indicates whether to enable or disable host recovery for the Dedicated Host.
	// For more information, see Host recovery (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html)
	// in the Amazon EC2 User Guide.
	HostRecovery?: null | string @go(,*string)

	// Specifies the instance family to be supported by the Dedicated Host. Specify
	// this parameter to modify a Dedicated Host to support multiple instance types
	// within its current instance family.
	//
	// If you want to modify a Dedicated Host to support a specific instance type
	// only, omit this parameter and specify InstanceType instead. You cannot specify
	// InstanceFamily and InstanceType in the same request.
	InstanceFamily?: null | string @go(,*string)

	// Specifies the instance type to be supported by the Dedicated Host. Specify
	// this parameter to modify a Dedicated Host to support only a specific instance
	// type.
	//
	// If you want to modify a Dedicated Host to support multiple instance types
	// in its current instance family, omit this parameter and specify InstanceFamily
	// instead. You cannot specify InstanceType and InstanceFamily in the same request.
	InstanceType?: null | string @go(,*string)
}

#ModifyHostsOutput: {
	// The IDs of the Dedicated Hosts that were successfully modified.
	Successful: [...null | string] @go(,[]*string)

	// The IDs of the Dedicated Hosts that could not be modified. Check whether
	// the setting you requested can be used.
	Unsuccessful: [...null | #UnsuccessfulItem] @go(,[]*UnsuccessfulItem)
}

#ModifyIdFormatInput: {
	// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options
	// | elastic-ip-allocation | elastic-ip-association | export-task | flow-log
	// | image | import-task | internet-gateway | network-acl | network-acl-association
	// | network-interface | network-interface-attachment | prefix-list | route-table
	// | route-table-association | security-group | subnet | subnet-cidr-block-association
	// | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection
	// | vpn-connection | vpn-gateway.
	//
	// Alternatively, use the all-current option to include all resource types that
	// are currently within their opt-in period for longer IDs.
	//
	// Resource is a required field
	Resource?: null | string @go(,*string)

	// Indicate whether the resource should use longer IDs (17-character IDs).
	//
	// UseLongIds is a required field
	UseLongIds?: null | bool @go(,*bool)
}

#ModifyIdentityIdFormatInput: {
	// The ARN of the principal, which can be an IAM user, IAM role, or the root
	// user. Specify all to modify the ID format for all IAM users, IAM roles, and
	// the root user of the account.
	//
	// PrincipalArn is a required field
	PrincipalArn?: null | string @go(,*string)

	// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options
	// | elastic-ip-allocation | elastic-ip-association | export-task | flow-log
	// | image | import-task | internet-gateway | network-acl | network-acl-association
	// | network-interface | network-interface-attachment | prefix-list | route-table
	// | route-table-association | security-group | subnet | subnet-cidr-block-association
	// | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection
	// | vpn-connection | vpn-gateway.
	//
	// Alternatively, use the all-current option to include all resource types that
	// are currently within their opt-in period for longer IDs.
	//
	// Resource is a required field
	Resource?: null | string @go(,*string)

	// Indicates whether the resource should use longer IDs (17-character IDs)
	//
	// UseLongIds is a required field
	UseLongIds?: null | bool @go(,*bool)
}

// Contains the parameters for ModifyImageAttribute.
#ModifyImageAttributeInput: {
	// The name of the attribute to modify. The valid values are description, launchPermission,
	// and productCodes.
	Attribute?: null | string @go(,*string)

	// A new description for the AMI.
	Description?: null | #AttributeValue @go(,*AttributeValue)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AMI.
	//
	// ImageId is a required field
	ImageId?: null | string @go(,*string)

	// A new launch permission for the AMI.
	LaunchPermission?: null | #LaunchPermissionModifications @go(,*LaunchPermissionModifications)

	// The operation type. This parameter can be used only when the Attribute parameter
	// is launchPermission.
	OperationType?: null | string @go(,*string)

	// The DevPay product codes. After you add a product code to an AMI, it can't
	// be removed.
	ProductCodes: [...null | string] @go(,[]*string)

	// The user groups. This parameter can be used only when the Attribute parameter
	// is launchPermission.
	UserGroups: [...null | string] @go(,[]*string)

	// The AWS account IDs. This parameter can be used only when the Attribute parameter
	// is launchPermission.
	UserIds: [...null | string] @go(,[]*string)

	// The value of the attribute being modified. This parameter can be used only
	// when the Attribute parameter is description or productCodes.
	Value?: null | string @go(,*string)
}

#ModifyInstanceAttributeInput: {
	// The name of the attribute.
	Attribute?: null | string @go(,*string)

	// Modifies the DeleteOnTermination attribute for volumes that are currently
	// attached. The volume must be owned by the caller. If no value is specified
	// for DeleteOnTermination, the default is true and the volume is deleted when
	// the instance is terminated.
	//
	// To add instance store volumes to an Amazon EBS-backed instance, you must
	// add them when you launch the instance. For more information, see Updating
	// the block device mapping when launching an instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM)
	// in the Amazon EC2 User Guide.
	BlockDeviceMappings: [...null | #InstanceBlockDeviceMappingSpecification] @go(,[]*InstanceBlockDeviceMappingSpecification)

	// If the value is true, you can't terminate the instance using the Amazon EC2
	// console, CLI, or API; otherwise, you can. You cannot use this parameter for
	// Spot Instances.
	DisableApiTermination?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Specifies whether the instance is optimized for Amazon EBS I/O. This optimization
	// provides dedicated throughput to Amazon EBS and an optimized configuration
	// stack to provide optimal EBS I/O performance. This optimization isn't available
	// with all instance types. Additional usage charges apply when using an EBS
	// Optimized instance.
	EbsOptimized?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Set to true to enable enhanced networking with ENA for the instance.
	//
	// This option is supported only for HVM instances. Specifying this option with
	// a PV instance can make it unreachable.
	EnaSupport?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// [EC2-VPC] Replaces the security groups of the instance with the specified
	// security groups. You must specify at least one security group, even if it's
	// just the default security group for the VPC. You must specify the security
	// group ID, not the security group name.
	Groups: [...null | string] @go(,[]*string)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// Specifies whether an instance stops or terminates when you initiate shutdown
	// from the instance (using the operating system command for system shutdown).
	InstanceInitiatedShutdownBehavior?: null | #AttributeValue @go(,*AttributeValue)

	// Changes the instance type to the specified value. For more information, see
	// Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide. If the instance type is not valid, the error
	// returned is InvalidInstanceAttributeValue.
	InstanceType?: null | #AttributeValue @go(,*AttributeValue)

	// Changes the instance's kernel to the specified value. We recommend that you
	// use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html).
	Kernel?: null | #AttributeValue @go(,*AttributeValue)

	// Changes the instance's RAM disk to the specified value. We recommend that
	// you use PV-GRUB instead of kernels and RAM disks. For more information, see
	// PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html).
	Ramdisk?: null | #AttributeValue @go(,*AttributeValue)

	// Enable or disable source/destination checks, which ensure that the instance
	// is either the source or the destination of any traffic that it receives.
	// If the value is true, source/destination checks are enabled; otherwise, they
	// are disabled. The default value is true. You must disable source/destination
	// checks if the instance runs services such as network address translation,
	// routing, or firewalls.
	SourceDestCheck?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Set to simple to enable enhanced networking with the Intel 82599 Virtual
	// Function interface for the instance.
	//
	// There is no way to disable enhanced networking with the Intel 82599 Virtual
	// Function interface at this time.
	//
	// This option is supported only for HVM instances. Specifying this option with
	// a PV instance can make it unreachable.
	SriovNetSupport?: null | #AttributeValue @go(,*AttributeValue)

	// Changes the instance's user data to the specified value. If you are using
	// an Amazon Web Services SDK or command line tool, base64-encoding is performed
	// for you, and you can load the text from a file. Otherwise, you must provide
	// base64-encoded text.
	UserData?: null | #BlobAttributeValue @go(,*BlobAttributeValue)

	// A new value for the attribute. Use only with the kernel, ramdisk, userData,
	// disableApiTermination, or instanceInitiatedShutdownBehavior attribute.
	Value?: null | string @go(,*string)
}

#ModifyInstanceCapacityReservationAttributesInput: {
	// Information about the Capacity Reservation targeting option.
	//
	// CapacityReservationSpecification is a required field
	CapacityReservationSpecification?: null | #CapacityReservationSpecification @go(,*CapacityReservationSpecification)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance to be modified.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)
}

#ModifyInstanceCapacityReservationAttributesOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#ModifyInstanceCreditSpecificationInput: {
	// A unique, case-sensitive token that you provide to ensure idempotency of
	// your modification request. For more information, see Ensuring Idempotency
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Information about the credit option for CPU usage.
	//
	// InstanceCreditSpecifications is a required field
	InstanceCreditSpecifications: [...null | #InstanceCreditSpecificationRequest] @go(,[]*InstanceCreditSpecificationRequest)
}

#ModifyInstanceCreditSpecificationOutput: {
	// Information about the instances whose credit option for CPU usage was successfully
	// modified.
	SuccessfulInstanceCreditSpecifications: [...null | #SuccessfulInstanceCreditSpecificationItem] @go(,[]*SuccessfulInstanceCreditSpecificationItem)

	// Information about the instances whose credit option for CPU usage was not
	// modified.
	UnsuccessfulInstanceCreditSpecifications: [...null | #UnsuccessfulInstanceCreditSpecificationItem] @go(,[]*UnsuccessfulInstanceCreditSpecificationItem)
}

#ModifyInstanceEventStartTimeInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the event whose date and time you are modifying.
	//
	// InstanceEventId is a required field
	InstanceEventId?: null | string @go(,*string)

	// The ID of the instance with the scheduled event.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// The new date and time when the event will take place.
	//
	// NotBefore is a required field
	NotBefore?: null | time.Time @go(,*time.Time)
}

#ModifyInstanceEventStartTimeOutput: {
	// Describes a scheduled event for an instance.
	Event?: null | #InstanceStatusEvent @go(,*InstanceStatusEvent)
}

#ModifyInstanceEventWindowInput: {
	// The cron expression of the event window, for example, * 0-4,20-23 * * 1,5.
	//
	// Constraints:
	//
	//    * Only hour and day of the week values are supported.
	//
	//    * For day of the week values, you can specify either integers 0 through
	//    6, or alternative single values SUN through SAT.
	//
	//    * The minute, month, and year must be specified by *.
	//
	//    * The hour value must be one or a multiple range, for example, 0-4 or
	//    0-4,20-23.
	//
	//    * Each hour range must be >= 2 hours, for example, 0-2 or 20-23.
	//
	//    * The event window must be >= 4 hours. The combined total time ranges
	//    in the event window must be >= 4 hours.
	//
	// For more information about cron expressions, see cron (https://en.wikipedia.org/wiki/Cron)
	// on the Wikipedia website.
	CronExpression?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the event window.
	//
	// InstanceEventWindowId is a required field
	InstanceEventWindowId?: null | string @go(,*string)

	// The name of the event window.
	Name?: null | string @go(,*string)

	// The time ranges of the event window.
	TimeRanges: [...null | #InstanceEventWindowTimeRangeRequest] @go(,[]*InstanceEventWindowTimeRangeRequest)
}

#ModifyInstanceEventWindowOutput: {
	// Information about the event window.
	InstanceEventWindow?: null | #InstanceEventWindow @go(,*InstanceEventWindow)
}

#ModifyInstanceMetadataOptionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// This parameter enables or disables the HTTP metadata endpoint on your instances.
	// If the parameter is not specified, the existing state is maintained.
	//
	// If you specify a value of disabled, you will not be able to access your instance
	// metadata.
	HttpEndpoint?: null | string @go(,*string)

	// The desired HTTP PUT response hop limit for instance metadata requests. The
	// larger the number, the further instance metadata requests can travel. If
	// no parameter is specified, the existing state is maintained.
	//
	// Possible values: Integers from 1 to 64
	HttpPutResponseHopLimit?: null | int64 @go(,*int64)

	// The state of token usage for your instance metadata requests. If the parameter
	// is not specified in the request, the default state is optional.
	//
	// If the state is optional, you can choose to retrieve instance metadata with
	// or without a signed token header on your request. If you retrieve the IAM
	// role credentials without a token, the version 1.0 role credentials are returned.
	// If you retrieve the IAM role credentials using a valid signed token, the
	// version 2.0 role credentials are returned.
	//
	// If the state is required, you must send a signed token header with any instance
	// metadata retrieval requests. In this state, retrieving the IAM role credential
	// always returns the version 2.0 credentials; the version 1.0 credentials are
	// not available.
	HttpTokens?: null | string @go(,*string)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)
}

#ModifyInstanceMetadataOptionsOutput: {
	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The metadata options for the instance.
	InstanceMetadataOptions?: null | #InstanceMetadataOptionsResponse @go(,*InstanceMetadataOptionsResponse)
}

#ModifyInstancePlacementInput: {
	// The affinity setting for the instance.
	Affinity?: null | string @go(,*string)

	// The name of the placement group in which to place the instance. For spread
	// placement groups, the instance must have a tenancy of default. For cluster
	// and partition placement groups, the instance must have a tenancy of default
	// or dedicated.
	//
	// To remove an instance from a placement group, specify an empty string ("").
	GroupName?: null | string @go(,*string)

	// The ID of the Dedicated Host with which to associate the instance.
	HostId?: null | string @go(,*string)

	// The ARN of the host resource group in which to place the instance.
	HostResourceGroupArn?: null | string @go(,*string)

	// The ID of the instance that you are modifying.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)

	// Reserved for future use.
	PartitionNumber?: null | int64 @go(,*int64)

	// The tenancy for the instance.
	Tenancy?: null | string @go(,*string)
}

#ModifyInstancePlacementOutput: {
	// Is true if the request succeeds, and an error otherwise.
	Return?: null | bool @go(,*bool)
}

#ModifyLaunchTemplateInput: {
	// Unique, case-sensitive identifier you provide to ensure the idempotency of
	// the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Constraint: Maximum 128 ASCII characters.
	ClientToken?: null | string @go(,*string)

	// The version number of the launch template to set as the default version.
	DefaultVersion?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateId?: null | string @go(,*string)

	// The name of the launch template. You must specify either the launch template
	// ID or launch template name in the request.
	LaunchTemplateName?: null | string @go(,*string)
}

#ModifyLaunchTemplateOutput: {
	// Information about the launch template.
	LaunchTemplate?: null | #LaunchTemplate @go(,*LaunchTemplate)
}

#ModifyManagedPrefixListInput: {
	// One or more entries to add to the prefix list.
	AddEntries: [...null | #AddPrefixListEntry] @go(,[]*AddPrefixListEntry)

	// The current version of the prefix list.
	CurrentVersion?: null | int64 @go(,*int64)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the prefix list.
	//
	// PrefixListId is a required field
	PrefixListId?: null | string @go(,*string)

	// A name for the prefix list.
	PrefixListName?: null | string @go(,*string)

	// One or more entries to remove from the prefix list.
	RemoveEntries: [...null | #RemovePrefixListEntry] @go(,[]*RemovePrefixListEntry)
}

#ModifyManagedPrefixListOutput: {
	// Information about the prefix list.
	PrefixList?: null | #ManagedPrefixList @go(,*ManagedPrefixList)
}

// Contains the parameters for ModifyNetworkInterfaceAttribute.
#ModifyNetworkInterfaceAttributeInput: {
	// Information about the interface attachment. If modifying the 'delete on termination'
	// attribute, you must specify the ID of the interface attachment.
	Attachment?: null | #NetworkInterfaceAttachmentChanges @go(,*NetworkInterfaceAttachmentChanges)

	// A description for the network interface.
	Description?: null | #AttributeValue @go(,*AttributeValue)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Changes the security groups for the network interface. The new set of groups
	// you specify replaces the current set. You must specify at least one group,
	// even if it's just the default security group in the VPC. You must specify
	// the ID of the security group, not the name.
	Groups: [...null | string] @go(,[]*string)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)

	// Enable or disable source/destination checks, which ensure that the instance
	// is either the source or the destination of any traffic that it receives.
	// If the value is true, source/destination checks are enabled; otherwise, they
	// are disabled. The default value is true. You must disable source/destination
	// checks if the instance runs services such as network address translation,
	// routing, or firewalls.
	SourceDestCheck?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)
}

// Contains the parameters for ModifyReservedInstances.
#ModifyReservedInstancesInput: {
	// A unique, case-sensitive token you provide to ensure idempotency of your
	// modification request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The IDs of the Reserved Instances to modify.
	//
	// ReservedInstancesIds is a required field
	ReservedInstancesIds: [...null | string] @go(,[]*string)

	// The configuration settings for the Reserved Instances to modify.
	//
	// TargetConfigurations is a required field
	TargetConfigurations: [...null | #ReservedInstancesConfiguration] @go(,[]*ReservedInstancesConfiguration)
}

// Contains the output of ModifyReservedInstances.
#ModifyReservedInstancesOutput: {
	// The ID for the modification.
	ReservedInstancesModificationId?: null | string @go(,*string)
}

#ModifySecurityGroupRulesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the security group.
	//
	// GroupId is a required field
	GroupId?: null | string @go(,*string)

	// Information about the security group properties to update.
	//
	// SecurityGroupRules is a required field
	SecurityGroupRules: [...null | #SecurityGroupRuleUpdate] @go(,[]*SecurityGroupRuleUpdate)
}

#ModifySecurityGroupRulesOutput: {
	// Returns true if the request succeeds; otherwise, returns an error.
	Return?: null | bool @go(,*bool)
}

#ModifySnapshotAttributeInput: {
	// The snapshot attribute to modify. Only volume creation permissions can be
	// modified.
	Attribute?: null | string @go(,*string)

	// A JSON representation of the snapshot attribute modification.
	CreateVolumePermission?: null | #CreateVolumePermissionModifications @go(,*CreateVolumePermissionModifications)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The group to modify for the snapshot.
	GroupNames: [...null | string] @go(,[]*string)

	// The type of operation to perform to the attribute.
	OperationType?: null | string @go(,*string)

	// The ID of the snapshot.
	//
	// SnapshotId is a required field
	SnapshotId?: null | string @go(,*string)

	// The account ID to modify for the snapshot.
	UserIds: [...null | string] @go(,[]*string)
}

// Contains the parameters for ModifySpotFleetRequest.
#ModifySpotFleetRequestInput: {
	// Reserved.
	Context?: null | string @go(,*string)

	// Indicates whether running Spot Instances should be terminated if the target
	// capacity of the Spot Fleet request is decreased below the current size of
	// the Spot Fleet.
	ExcessCapacityTerminationPolicy?: null | string @go(,*string)

	// The launch template and overrides. You can only use this parameter if you
	// specified a launch template (LaunchTemplateConfigs) in your Spot Fleet request.
	// If you specified LaunchSpecifications in your Spot Fleet request, then omit
	// this parameter.
	LaunchTemplateConfigs: [...null | #LaunchTemplateConfig] @go(,[]*LaunchTemplateConfig)

	// The number of On-Demand Instances in the fleet.
	OnDemandTargetCapacity?: null | int64 @go(,*int64)

	// The ID of the Spot Fleet request.
	//
	// SpotFleetRequestId is a required field
	SpotFleetRequestId?: null | string @go(,*string)

	// The size of the fleet.
	TargetCapacity?: null | int64 @go(,*int64)
}

// Contains the output of ModifySpotFleetRequest.
#ModifySpotFleetRequestOutput: {
	// Is true if the request succeeds, and an error otherwise.
	Return?: null | bool @go(,*bool)
}

#ModifySubnetAttributeInput: {
	// Specify true to indicate that network interfaces created in the specified
	// subnet should be assigned an IPv6 address. This includes a network interface
	// that's created when launching an instance into the subnet (the instance therefore
	// receives an IPv6 address).
	//
	// If you enable the IPv6 addressing feature for your subnet, your network interface
	// or instance only receives an IPv6 address if it's created using version 2016-11-15
	// or later of the Amazon EC2 API.
	AssignIpv6AddressOnCreation?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// The customer-owned IPv4 address pool associated with the subnet.
	//
	// You must set this value when you specify true for MapCustomerOwnedIpOnLaunch.
	CustomerOwnedIpv4Pool?: null | string @go(,*string)

	// Specify true to indicate that network interfaces attached to instances created
	// in the specified subnet should be assigned a customer-owned IPv4 address.
	//
	// When this value is true, you must specify the customer-owned IP pool using
	// CustomerOwnedIpv4Pool.
	MapCustomerOwnedIpOnLaunch?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Specify true to indicate that network interfaces attached to instances created
	// in the specified subnet should be assigned a public IPv4 address.
	MapPublicIpOnLaunch?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// The ID of the subnet.
	//
	// SubnetId is a required field
	SubnetId?: null | string @go(,*string)
}

#ModifyTrafficMirrorFilterNetworkServicesInput: {
	// The network service, for example Amazon DNS, that you want to mirror.
	AddNetworkServices: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The network service, for example Amazon DNS, that you no longer want to mirror.
	RemoveNetworkServices: [...null | string] @go(,[]*string)

	// The ID of the Traffic Mirror filter.
	//
	// TrafficMirrorFilterId is a required field
	TrafficMirrorFilterId?: null | string @go(,*string)
}

#ModifyTrafficMirrorFilterNetworkServicesOutput: {
	// The Traffic Mirror filter that the network service is associated with.
	TrafficMirrorFilter?: null | #TrafficMirrorFilter @go(,*TrafficMirrorFilter)
}

#ModifyTrafficMirrorFilterRuleInput: {
	// The description to assign to the Traffic Mirror rule.
	Description?: null | string @go(,*string)

	// The destination CIDR block to assign to the Traffic Mirror rule.
	DestinationCidrBlock?: null | string @go(,*string)

	// The destination ports that are associated with the Traffic Mirror rule.
	DestinationPortRange?: null | #TrafficMirrorPortRangeRequest @go(,*TrafficMirrorPortRangeRequest)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The protocol, for example TCP, to assign to the Traffic Mirror rule.
	Protocol?: null | int64 @go(,*int64)

	// The properties that you want to remove from the Traffic Mirror filter rule.
	//
	// When you remove a property from a Traffic Mirror filter rule, the property
	// is set to the default.
	RemoveFields: [...null | string] @go(,[]*string)

	// The action to assign to the rule.
	RuleAction?: null | string @go(,*string)

	// The number of the Traffic Mirror rule. This number must be unique for each
	// Traffic Mirror rule in a given direction. The rules are processed in ascending
	// order by rule number.
	RuleNumber?: null | int64 @go(,*int64)

	// The source CIDR block to assign to the Traffic Mirror rule.
	SourceCidrBlock?: null | string @go(,*string)

	// The port range to assign to the Traffic Mirror rule.
	SourcePortRange?: null | #TrafficMirrorPortRangeRequest @go(,*TrafficMirrorPortRangeRequest)

	// The type of traffic (ingress | egress) to assign to the rule.
	TrafficDirection?: null | string @go(,*string)

	// The ID of the Traffic Mirror rule.
	//
	// TrafficMirrorFilterRuleId is a required field
	TrafficMirrorFilterRuleId?: null | string @go(,*string)
}

#ModifyTrafficMirrorFilterRuleOutput: {
	// Modifies a Traffic Mirror rule.
	TrafficMirrorFilterRule?: null | #TrafficMirrorFilterRule @go(,*TrafficMirrorFilterRule)
}

#ModifyTrafficMirrorSessionInput: {
	// The description to assign to the Traffic Mirror session.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The number of bytes in each packet to mirror. These are bytes after the VXLAN
	// header. To mirror a subset, set this to the length (in bytes) to mirror.
	// For example, if you set this value to 100, then the first 100 bytes that
	// meet the filter criteria are copied to the target. Do not specify this parameter
	// when you want to mirror the entire packet.
	PacketLength?: null | int64 @go(,*int64)

	// The properties that you want to remove from the Traffic Mirror session.
	//
	// When you remove a property from a Traffic Mirror session, the property is
	// set to the default.
	RemoveFields: [...null | string] @go(,[]*string)

	// The session number determines the order in which sessions are evaluated when
	// an interface is used by multiple sessions. The first session with a matching
	// filter is the one that mirrors the packets.
	//
	// Valid values are 1-32766.
	SessionNumber?: null | int64 @go(,*int64)

	// The ID of the Traffic Mirror filter.
	TrafficMirrorFilterId?: null | string @go(,*string)

	// The ID of the Traffic Mirror session.
	//
	// TrafficMirrorSessionId is a required field
	TrafficMirrorSessionId?: null | string @go(,*string)

	// The Traffic Mirror target. The target must be in the same VPC as the source,
	// or have a VPC peering connection with the source.
	TrafficMirrorTargetId?: null | string @go(,*string)

	// The virtual network ID of the Traffic Mirror session.
	VirtualNetworkId?: null | int64 @go(,*int64)
}

#ModifyTrafficMirrorSessionOutput: {
	// Information about the Traffic Mirror session.
	TrafficMirrorSession?: null | #TrafficMirrorSession @go(,*TrafficMirrorSession)
}

#ModifyTransitGatewayInput: {
	// The description for the transit gateway.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The options to modify.
	Options?: null | #ModifyTransitGatewayOptions @go(,*ModifyTransitGatewayOptions)

	// The ID of the transit gateway.
	//
	// TransitGatewayId is a required field
	TransitGatewayId?: null | string @go(,*string)
}

// The transit gateway options.
#ModifyTransitGatewayOptions: {
	// Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24
	// CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
	AddTransitGatewayCidrBlocks: [...null | string] @go(,[]*string)

	// The ID of the default association route table.
	AssociationDefaultRouteTableId?: null | string @go(,*string)

	// Enable or disable automatic acceptance of attachment requests.
	AutoAcceptSharedAttachments?: null | string @go(,*string)

	// Enable or disable automatic association with the default association route
	// table.
	DefaultRouteTableAssociation?: null | string @go(,*string)

	// Enable or disable automatic propagation of routes to the default propagation
	// route table.
	DefaultRouteTablePropagation?: null | string @go(,*string)

	// Enable or disable DNS support.
	DnsSupport?: null | string @go(,*string)

	// The ID of the default propagation route table.
	PropagationDefaultRouteTableId?: null | string @go(,*string)

	// Removes CIDR blocks for the transit gateway.
	RemoveTransitGatewayCidrBlocks: [...null | string] @go(,[]*string)

	// Enable or disable Equal Cost Multipath Protocol support.
	VpnEcmpSupport?: null | string @go(,*string)
}

#ModifyTransitGatewayOutput: {
	// Describes a transit gateway.
	TransitGateway?: null | #TransitGateway @go(,*TransitGateway)
}

#ModifyTransitGatewayPrefixListReferenceInput: {
	// Indicates whether to drop traffic that matches this route.
	Blackhole?: null | bool @go(,*bool)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the prefix list.
	//
	// PrefixListId is a required field
	PrefixListId?: null | string @go(,*string)

	// The ID of the attachment to which traffic is routed.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#ModifyTransitGatewayPrefixListReferenceOutput: {
	// Information about the prefix list reference.
	TransitGatewayPrefixListReference?: null | #TransitGatewayPrefixListReference @go(,*TransitGatewayPrefixListReference)
}

#ModifyTransitGatewayVpcAttachmentInput: {
	// The IDs of one or more subnets to add. You can specify at most one subnet
	// per Availability Zone.
	AddSubnetIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The new VPC attachment options.
	//
	// You cannot modify the IPv6 options.
	Options?: null | #ModifyTransitGatewayVpcAttachmentRequestOptions @go(,*ModifyTransitGatewayVpcAttachmentRequestOptions)

	// The IDs of one or more subnets to remove.
	RemoveSubnetIds: [...null | string] @go(,[]*string)

	// The ID of the attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#ModifyTransitGatewayVpcAttachmentOutput: {
	// Information about the modified attachment.
	TransitGatewayVpcAttachment?: null | #TransitGatewayVpcAttachment @go(,*TransitGatewayVpcAttachment)
}

// Describes the options for a VPC attachment.
#ModifyTransitGatewayVpcAttachmentRequestOptions: {
	// Enable or disable support for appliance mode. If enabled, a traffic flow
	// between a source and destination uses the same Availability Zone for the
	// VPC attachment for the lifetime of that flow. The default is disable.
	ApplianceModeSupport?: null | string @go(,*string)

	// Enable or disable DNS support. The default is enable.
	DnsSupport?: null | string @go(,*string)

	// Enable or disable IPv6 support. The default is enable.
	Ipv6Support?: null | string @go(,*string)
}

#ModifyVolumeAttributeInput: {
	// Indicates whether the volume should be auto-enabled for I/O operations.
	AutoEnableIO?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the volume.
	//
	// VolumeId is a required field
	VolumeId?: null | string @go(,*string)
}

#ModifyVolumeInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The target IOPS rate of the volume. This parameter is valid only for gp3,
	// io1, and io2 volumes.
	//
	// The following are the supported values for each volume type:
	//
	//    * gp3: 3,000-16,000 IOPS
	//
	//    * io1: 100-64,000 IOPS
	//
	//    * io2: 100-64,000 IOPS
	//
	// Default: The existing value is retained if you keep the same volume type.
	// If you change the volume type to io1, io2, or gp3, the default is 3,000.
	Iops?: null | int64 @go(,*int64)

	// Specifies whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach,
	// you can attach the volume to up to 16 Nitro-based instances (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances)
	// in the same Availability Zone. This parameter is supported with io1 and io2
	// volumes only. For more information, see Amazon EBS Multi-Attach (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	MultiAttachEnabled?: null | bool @go(,*bool)

	// The target size of the volume, in GiB. The target volume size must be greater
	// than or equal to the existing size of the volume.
	//
	// The following are the supported volumes sizes for each volume type:
	//
	//    * gp2 and gp3: 1-16,384
	//
	//    * io1 and io2: 4-16,384
	//
	//    * st1 and sc1: 125-16,384
	//
	//    * standard: 1-1,024
	//
	// Default: The existing size is retained.
	Size?: null | int64 @go(,*int64)

	// The target throughput of the volume, in MiB/s. This parameter is valid only
	// for gp3 volumes. The maximum value is 1,000.
	//
	// Default: The existing value is retained if the source and target volume type
	// is gp3. Otherwise, the default value is 125.
	//
	// Valid Range: Minimum value of 125. Maximum value of 1000.
	Throughput?: null | int64 @go(,*int64)

	// The ID of the volume.
	//
	// VolumeId is a required field
	VolumeId?: null | string @go(,*string)

	// The target EBS volume type of the volume. For more information, see Amazon
	// EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// Default: The existing type is retained.
	VolumeType?: null | string @go(,*string)
}

#ModifyVolumeOutput: {
	// Information about the volume modification.
	VolumeModification?: null | #VolumeModification @go(,*VolumeModification)
}

#ModifyVpcAttributeInput: {
	// Indicates whether the instances launched in the VPC get DNS hostnames. If
	// enabled, instances in the VPC get DNS hostnames; otherwise, they do not.
	//
	// You cannot modify the DNS resolution and DNS hostnames attributes in the
	// same request. Use separate requests for each attribute. You can only enable
	// DNS hostnames if you've enabled DNS support.
	EnableDnsHostnames?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// Indicates whether the DNS resolution is supported for the VPC. If enabled,
	// queries to the Amazon provided DNS server at the 169.254.169.253 IP address,
	// or the reserved IP address at the base of the VPC network range "plus two"
	// succeed. If disabled, the Amazon provided DNS service in the VPC that resolves
	// public DNS hostnames to IP addresses is not enabled.
	//
	// You cannot modify the DNS resolution and DNS hostnames attributes in the
	// same request. Use separate requests for each attribute.
	EnableDnsSupport?: null | #AttributeBooleanValue @go(,*AttributeBooleanValue)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#ModifyVpcEndpointConnectionNotificationInput: {
	// One or more events for the endpoint. Valid values are Accept, Connect, Delete,
	// and Reject.
	ConnectionEvents: [...null | string] @go(,[]*string)

	// The ARN for the SNS topic for the notification.
	ConnectionNotificationArn?: null | string @go(,*string)

	// The ID of the notification.
	//
	// ConnectionNotificationId is a required field
	ConnectionNotificationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#ModifyVpcEndpointConnectionNotificationOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	ReturnValue?: null | bool @go(,*bool)
}

// Contains the parameters for ModifyVpcEndpoint.
#ModifyVpcEndpointInput: {
	// (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
	AddRouteTableIds: [...null | string] @go(,[]*string)

	// (Interface endpoint) One or more security group IDs to associate with the
	// network interface.
	AddSecurityGroupIds: [...null | string] @go(,[]*string)

	// (Interface and Gateway Load Balancer endpoints) One or more subnet IDs in
	// which to serve the endpoint. For a Gateway Load Balancer endpoint, you can
	// specify only one subnet.
	AddSubnetIds: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// (Interface and gateway endpoints) A policy to attach to the endpoint that
	// controls access to the service. The policy must be in valid JSON format.
	PolicyDocument?: null | string @go(,*string)

	// (Interface endpoint) Indicates whether a private hosted zone is associated
	// with the VPC.
	PrivateDnsEnabled?: null | bool @go(,*bool)

	// (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
	RemoveRouteTableIds: [...null | string] @go(,[]*string)

	// (Interface endpoint) One or more security group IDs to disassociate from
	// the network interface.
	RemoveSecurityGroupIds: [...null | string] @go(,[]*string)

	// (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
	RemoveSubnetIds: [...null | string] @go(,[]*string)

	// (Gateway endpoint) Specify true to reset the policy document to the default
	// policy. The default policy allows full access to the service.
	ResetPolicy?: null | bool @go(,*bool)

	// The ID of the endpoint.
	//
	// VpcEndpointId is a required field
	VpcEndpointId?: null | string @go(,*string)
}

#ModifyVpcEndpointOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#ModifyVpcEndpointServiceConfigurationInput: {
	// Indicates whether requests to create an endpoint to your service must be
	// accepted.
	AcceptanceRequired?: null | bool @go(,*bool)

	// The Amazon Resource Names (ARNs) of Gateway Load Balancers to add to your
	// service configuration.
	AddGatewayLoadBalancerArns: [...null | string] @go(,[]*string)

	// The Amazon Resource Names (ARNs) of Network Load Balancers to add to your
	// service configuration.
	AddNetworkLoadBalancerArns: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// (Interface endpoint configuration) The private DNS name to assign to the
	// endpoint service.
	PrivateDnsName?: null | string @go(,*string)

	// The Amazon Resource Names (ARNs) of Gateway Load Balancers to remove from
	// your service configuration.
	RemoveGatewayLoadBalancerArns: [...null | string] @go(,[]*string)

	// The Amazon Resource Names (ARNs) of Network Load Balancers to remove from
	// your service configuration.
	RemoveNetworkLoadBalancerArns: [...null | string] @go(,[]*string)

	// (Interface endpoint configuration) Removes the private DNS name of the endpoint
	// service.
	RemovePrivateDnsName?: null | bool @go(,*bool)

	// The ID of the service.
	//
	// ServiceId is a required field
	ServiceId?: null | string @go(,*string)
}

#ModifyVpcEndpointServiceConfigurationOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#ModifyVpcEndpointServicePermissionsInput: {
	// The Amazon Resource Names (ARN) of one or more principals. Permissions are
	// granted to the principals in this list. To grant permissions to all principals,
	// specify an asterisk (*).
	AddAllowedPrincipals: [...null | string] @go(,[]*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Amazon Resource Names (ARN) of one or more principals. Permissions are
	// revoked for principals in this list.
	RemoveAllowedPrincipals: [...null | string] @go(,[]*string)

	// The ID of the service.
	//
	// ServiceId is a required field
	ServiceId?: null | string @go(,*string)
}

#ModifyVpcEndpointServicePermissionsOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	ReturnValue?: null | bool @go(,*bool)
}

#ModifyVpcPeeringConnectionOptionsInput: {
	// The VPC peering connection options for the accepter VPC.
	AccepterPeeringConnectionOptions?: null | #PeeringConnectionOptionsRequest @go(,*PeeringConnectionOptionsRequest)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The VPC peering connection options for the requester VPC.
	RequesterPeeringConnectionOptions?: null | #PeeringConnectionOptionsRequest @go(,*PeeringConnectionOptionsRequest)

	// The ID of the VPC peering connection.
	//
	// VpcPeeringConnectionId is a required field
	VpcPeeringConnectionId?: null | string @go(,*string)
}

#ModifyVpcPeeringConnectionOptionsOutput: {
	// Information about the VPC peering connection options for the accepter VPC.
	AccepterPeeringConnectionOptions?: null | #PeeringConnectionOptions @go(,*PeeringConnectionOptions)

	// Information about the VPC peering connection options for the requester VPC.
	RequesterPeeringConnectionOptions?: null | #PeeringConnectionOptions @go(,*PeeringConnectionOptions)
}

#ModifyVpcTenancyInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The instance tenancy attribute for the VPC.
	//
	// InstanceTenancy is a required field
	InstanceTenancy?: null | string @go(,*string)

	// The ID of the VPC.
	//
	// VpcId is a required field
	VpcId?: null | string @go(,*string)
}

#ModifyVpcTenancyOutput: {
	// Returns true if the request succeeds; otherwise, returns an error.
	ReturnValue?: null | bool @go(,*bool)
}

#ModifyVpnConnectionInput: {
	// The ID of the customer gateway at your end of the VPN connection.
	CustomerGatewayId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The ID of the VPN connection.
	//
	// VpnConnectionId is a required field
	VpnConnectionId?: null | string @go(,*string)

	// The ID of the virtual private gateway at the AWS side of the VPN connection.
	VpnGatewayId?: null | string @go(,*string)
}

#ModifyVpnConnectionOptionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//
	// Default: 0.0.0.0/0
	LocalIpv4NetworkCidr?: null | string @go(,*string)

	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//
	// Default: ::/0
	LocalIpv6NetworkCidr?: null | string @go(,*string)

	// The IPv4 CIDR on the AWS side of the VPN connection.
	//
	// Default: 0.0.0.0/0
	RemoteIpv4NetworkCidr?: null | string @go(,*string)

	// The IPv6 CIDR on the AWS side of the VPN connection.
	//
	// Default: ::/0
	RemoteIpv6NetworkCidr?: null | string @go(,*string)

	// The ID of the Site-to-Site VPN connection.
	//
	// VpnConnectionId is a required field
	VpnConnectionId?: null | string @go(,*string)
}

#ModifyVpnConnectionOptionsOutput: {
	// Describes a VPN connection.
	VpnConnection?: null | #VpnConnection @go(,*VpnConnection)
}

#ModifyVpnConnectionOutput: {
	// Describes a VPN connection.
	VpnConnection?: null | #VpnConnection @go(,*VpnConnection)
}

#ModifyVpnTunnelCertificateInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AWS Site-to-Site VPN connection.
	//
	// VpnConnectionId is a required field
	VpnConnectionId?: null | string @go(,*string)

	// The external IP address of the VPN tunnel.
	//
	// VpnTunnelOutsideIpAddress is a required field
	VpnTunnelOutsideIpAddress?: null | string @go(,*string)
}

#ModifyVpnTunnelCertificateOutput: {
	// Describes a VPN connection.
	VpnConnection?: null | #VpnConnection @go(,*VpnConnection)
}

#ModifyVpnTunnelOptionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The tunnel options to modify.
	//
	// TunnelOptions is a required field
	TunnelOptions?: null | #ModifyVpnTunnelOptionsSpecification @go(,*ModifyVpnTunnelOptionsSpecification)

	// The ID of the AWS Site-to-Site VPN connection.
	//
	// VpnConnectionId is a required field
	VpnConnectionId?: null | string @go(,*string)

	// The external IP address of the VPN tunnel.
	//
	// VpnTunnelOutsideIpAddress is a required field
	VpnTunnelOutsideIpAddress?: null | string @go(,*string)
}

#ModifyVpnTunnelOptionsOutput: {
	// Describes a VPN connection.
	VpnConnection?: null | #VpnConnection @go(,*VpnConnection)
}

// The AWS Site-to-Site VPN tunnel options to modify.
#ModifyVpnTunnelOptionsSpecification: {
	// The action to take after DPD timeout occurs. Specify restart to restart the
	// IKE initiation. Specify clear to end the IKE session.
	//
	// Valid Values: clear | none | restart
	//
	// Default: clear
	DPDTimeoutAction?: null | string @go(,*string)

	// The number of seconds after which a DPD timeout occurs.
	//
	// Constraints: A value between 0 and 30.
	//
	// Default: 30
	DPDTimeoutSeconds?: null | int64 @go(,*int64)

	// The IKE versions that are permitted for the VPN tunnel.
	//
	// Valid values: ikev1 | ikev2
	IKEVersions: [...null | #IKEVersionsRequestListValue] @go(,[]*IKEVersionsRequestListValue)

	// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel
	// for phase 1 IKE negotiations.
	//
	// Valid values: 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
	Phase1DHGroupNumbers: [...null | #Phase1DHGroupNumbersRequestListValue] @go(,[]*Phase1DHGroupNumbersRequestListValue)

	// One or more encryption algorithms that are permitted for the VPN tunnel for
	// phase 1 IKE negotiations.
	//
	// Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
	Phase1EncryptionAlgorithms: [...null | #Phase1EncryptionAlgorithmsRequestListValue] @go(,[]*Phase1EncryptionAlgorithmsRequestListValue)

	// One or more integrity algorithms that are permitted for the VPN tunnel for
	// phase 1 IKE negotiations.
	//
	// Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
	Phase1IntegrityAlgorithms: [...null | #Phase1IntegrityAlgorithmsRequestListValue] @go(,[]*Phase1IntegrityAlgorithmsRequestListValue)

	// The lifetime for phase 1 of the IKE negotiation, in seconds.
	//
	// Constraints: A value between 900 and 28,800.
	//
	// Default: 28800
	Phase1LifetimeSeconds?: null | int64 @go(,*int64)

	// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel
	// for phase 2 IKE negotiations.
	//
	// Valid values: 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
	Phase2DHGroupNumbers: [...null | #Phase2DHGroupNumbersRequestListValue] @go(,[]*Phase2DHGroupNumbersRequestListValue)

	// One or more encryption algorithms that are permitted for the VPN tunnel for
	// phase 2 IKE negotiations.
	//
	// Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
	Phase2EncryptionAlgorithms: [...null | #Phase2EncryptionAlgorithmsRequestListValue] @go(,[]*Phase2EncryptionAlgorithmsRequestListValue)

	// One or more integrity algorithms that are permitted for the VPN tunnel for
	// phase 2 IKE negotiations.
	//
	// Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
	Phase2IntegrityAlgorithms: [...null | #Phase2IntegrityAlgorithmsRequestListValue] @go(,[]*Phase2IntegrityAlgorithmsRequestListValue)

	// The lifetime for phase 2 of the IKE negotiation, in seconds.
	//
	// Constraints: A value between 900 and 3,600. The value must be less than the
	// value for Phase1LifetimeSeconds.
	//
	// Default: 3600
	Phase2LifetimeSeconds?: null | int64 @go(,*int64)

	// The pre-shared key (PSK) to establish initial authentication between the
	// virtual private gateway and the customer gateway.
	//
	// Constraints: Allowed characters are alphanumeric characters, periods (.),
	// and underscores (_). Must be between 8 and 64 characters in length and cannot
	// start with zero (0).
	PreSharedKey?: null | string @go(,*string)

	// The percentage of the rekey window (determined by RekeyMarginTimeSeconds)
	// during which the rekey time is randomly selected.
	//
	// Constraints: A value between 0 and 100.
	//
	// Default: 100
	RekeyFuzzPercentage?: null | int64 @go(,*int64)

	// The margin time, in seconds, before the phase 2 lifetime expires, during
	// which the AWS side of the VPN connection performs an IKE rekey. The exact
	// time of the rekey is randomly selected based on the value for RekeyFuzzPercentage.
	//
	// Constraints: A value between 60 and half of Phase2LifetimeSeconds.
	//
	// Default: 540
	RekeyMarginTimeSeconds?: null | int64 @go(,*int64)

	// The number of packets in an IKE replay window.
	//
	// Constraints: A value between 64 and 2048.
	//
	// Default: 1024
	ReplayWindowSize?: null | int64 @go(,*int64)

	// The action to take when the establishing the tunnel for the VPN connection.
	// By default, your customer gateway device must initiate the IKE negotiation
	// and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation.
	//
	// Valid Values: add | start
	//
	// Default: add
	StartupAction?: null | string @go(,*string)

	// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks
	// must be unique across all VPN connections that use the same virtual private
	// gateway.
	//
	// Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following
	// CIDR blocks are reserved and cannot be used:
	//
	//    * 169.254.0.0/30
	//
	//    * 169.254.1.0/30
	//
	//    * 169.254.2.0/30
	//
	//    * 169.254.3.0/30
	//
	//    * 169.254.4.0/30
	//
	//    * 169.254.5.0/30
	//
	//    * 169.254.169.252/30
	TunnelInsideCidr?: null | string @go(,*string)

	// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks
	// must be unique across all VPN connections that use the same transit gateway.
	//
	// Constraints: A size /126 CIDR block from the local fd00::/8 range.
	TunnelInsideIpv6Cidr?: null | string @go(,*string)
}

#MonitorInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the instances.
	//
	// InstanceIds is a required field
	InstanceIds: [...null | string] @go(,[]*string)
}

#MonitorInstancesOutput: {
	// The monitoring information.
	InstanceMonitorings: [...null | #InstanceMonitoring] @go(,[]*InstanceMonitoring)
}

// Describes the monitoring of an instance.
#Monitoring: {
	// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring
	// is enabled.
	State?: null | string @go(,*string)
}

#MoveAddressToVpcInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Elastic IP address.
	//
	// PublicIp is a required field
	PublicIp?: null | string @go(,*string)
}

#MoveAddressToVpcOutput: {
	// The allocation ID for the Elastic IP address.
	AllocationId?: null | string @go(,*string)

	// The status of the move of the IP address.
	Status?: null | string @go(,*string)
}

// Describes the status of a moving Elastic IP address.
#MovingAddressStatus: {
	// The status of the Elastic IP address that's being moved to the EC2-VPC platform,
	// or restored to the EC2-Classic platform.
	MoveStatus?: null | string @go(,*string)

	// The Elastic IP address.
	PublicIp?: null | string @go(,*string)
}

// Describes a NAT gateway.
#NatGateway: {
	// Indicates whether the NAT gateway supports public or private connectivity.
	ConnectivityType?: null | string @go(,*string)

	// The date and time the NAT gateway was created.
	CreateTime?: null | time.Time @go(,*time.Time)

	// The date and time the NAT gateway was deleted, if applicable.
	DeleteTime?: null | time.Time @go(,*time.Time)

	// If the NAT gateway could not be created, specifies the error code for the
	// failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound
	// | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)
	FailureCode?: null | string @go(,*string)

	// If the NAT gateway could not be created, specifies the error message for
	// the failure, that corresponds to the error code.
	//
	//    * For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free
	//    addresses to create this NAT gateway"
	//
	//    * For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway
	//    attached"
	//
	//    * For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx
	//    could not be associated with this NAT gateway"
	//
	//    * For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx
	//    is already associated"
	//
	//    * For InternalError: "Network interface eni-xxxxxxxx, created and used
	//    internally by this NAT gateway is in an invalid state. Please try again."
	//
	//    * For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx
	//    does not exist or could not be found."
	FailureMessage?: null | string @go(,*string)

	// Information about the IP addresses and network interface associated with
	// the NAT gateway.
	NatGatewayAddresses: [...null | #NatGatewayAddress] @go(,[]*NatGatewayAddress)

	// The ID of the NAT gateway.
	NatGatewayId?: null | string @go(,*string)

	// Reserved. If you need to sustain traffic greater than the documented limits
	// (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html),
	// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
	ProvisionedBandwidth?: null | #ProvisionedBandwidth @go(,*ProvisionedBandwidth)

	// The state of the NAT gateway.
	//
	//    * pending: The NAT gateway is being created and is not ready to process
	//    traffic.
	//
	//    * failed: The NAT gateway could not be created. Check the failureCode
	//    and failureMessage fields for the reason.
	//
	//    * available: The NAT gateway is able to process traffic. This status remains
	//    until you delete the NAT gateway, and does not indicate the health of
	//    the NAT gateway.
	//
	//    * deleting: The NAT gateway is in the process of being terminated and
	//    may still be processing traffic.
	//
	//    * deleted: The NAT gateway has been terminated and is no longer processing
	//    traffic.
	State?: null | string @go(,*string)

	// The ID of the subnet in which the NAT gateway is located.
	SubnetId?: null | string @go(,*string)

	// The tags for the NAT gateway.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC in which the NAT gateway is located.
	VpcId?: null | string @go(,*string)
}

// Describes the IP addresses and network interface associated with a NAT gateway.
#NatGatewayAddress: {
	// [Public NAT gateway only] The allocation ID of the Elastic IP address that's
	// associated with the NAT gateway.
	AllocationId?: null | string @go(,*string)

	// The ID of the network interface associated with the NAT gateway.
	NetworkInterfaceId?: null | string @go(,*string)

	// The private IP address associated with the NAT gateway.
	PrivateIp?: null | string @go(,*string)

	// [Public NAT gateway only] The Elastic IP address associated with the NAT
	// gateway.
	PublicIp?: null | string @go(,*string)
}

// Describes a network ACL.
#NetworkAcl: {
	// Any associations between the network ACL and one or more subnets
	Associations: [...null | #NetworkAclAssociation] @go(,[]*NetworkAclAssociation)

	// One or more entries (rules) in the network ACL.
	Entries: [...null | #NetworkAclEntry] @go(,[]*NetworkAclEntry)

	// Indicates whether this is the default network ACL for the VPC.
	IsDefault?: null | bool @go(,*bool)

	// The ID of the network ACL.
	NetworkAclId?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the network ACL.
	OwnerId?: null | string @go(,*string)

	// Any tags assigned to the network ACL.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC for the network ACL.
	VpcId?: null | string @go(,*string)
}

// Describes an association between a network ACL and a subnet.
#NetworkAclAssociation: {
	// The ID of the association between a network ACL and a subnet.
	NetworkAclAssociationId?: null | string @go(,*string)

	// The ID of the network ACL.
	NetworkAclId?: null | string @go(,*string)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)
}

// Describes an entry in a network ACL.
#NetworkAclEntry: {
	// The IPv4 network range to allow or deny, in CIDR notation.
	CidrBlock?: null | string @go(,*string)

	// Indicates whether the rule is an egress rule (applied to traffic leaving
	// the subnet).
	Egress?: null | bool @go(,*bool)

	// ICMP protocol: The ICMP type and code.
	IcmpTypeCode?: null | #IcmpTypeCode @go(,*IcmpTypeCode)

	// The IPv6 network range to allow or deny, in CIDR notation.
	Ipv6CidrBlock?: null | string @go(,*string)

	// TCP or UDP protocols: The range of ports the rule applies to.
	PortRange?: null | #PortRange @go(,*PortRange)

	// The protocol number. A value of "-1" means all protocols.
	Protocol?: null | string @go(,*string)

	// Indicates whether to allow or deny the traffic that matches the rule.
	RuleAction?: null | string @go(,*string)

	// The rule number for the entry. ACL entries are processed in ascending order
	// by rule number.
	RuleNumber?: null | int64 @go(,*int64)
}

// Describes the network card support of the instance type.
#NetworkCardInfo: {
	// The maximum number of network interfaces for the network card.
	MaximumNetworkInterfaces?: null | int64 @go(,*int64)

	// The index of the network card.
	NetworkCardIndex?: null | int64 @go(,*int64)

	// The network performance of the network card.
	NetworkPerformance?: null | string @go(,*string)
}

// Describes the networking features of the instance type.
#NetworkInfo: {
	// The index of the default network card, starting at 0.
	DefaultNetworkCardIndex?: null | int64 @go(,*int64)

	// Describes the Elastic Fabric Adapters for the instance type.
	EfaInfo?: null | #EfaInfo @go(,*EfaInfo)

	// Indicates whether Elastic Fabric Adapter (EFA) is supported.
	EfaSupported?: null | bool @go(,*bool)

	// Indicates whether Elastic Network Adapter (ENA) is supported.
	EnaSupport?: null | string @go(,*string)

	// Indicates whether the instance type automatically encrypts in-transit traffic
	// between instances.
	EncryptionInTransitSupported?: null | bool @go(,*bool)

	// The maximum number of IPv4 addresses per network interface.
	Ipv4AddressesPerInterface?: null | int64 @go(,*int64)

	// The maximum number of IPv6 addresses per network interface.
	Ipv6AddressesPerInterface?: null | int64 @go(,*int64)

	// Indicates whether IPv6 is supported.
	Ipv6Supported?: null | bool @go(,*bool)

	// The maximum number of physical network cards that can be allocated to the
	// instance.
	MaximumNetworkCards?: null | int64 @go(,*int64)

	// The maximum number of network interfaces for the instance type.
	MaximumNetworkInterfaces?: null | int64 @go(,*int64)

	// Describes the network cards for the instance type.
	NetworkCards: [...null | #NetworkCardInfo] @go(,[]*NetworkCardInfo)

	// The network performance.
	NetworkPerformance?: null | string @go(,*string)
}

// Describes a network insights analysis.
#NetworkInsightsAnalysis: {
	// Potential intermediate components.
	AlternatePathHints: [...null | #AlternatePathHint] @go(,[]*AlternatePathHint)

	// The explanations. For more information, see Reachability Analyzer explanation
	// codes (https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html).
	Explanations: [...null | #Explanation] @go(,[]*Explanation)

	// The Amazon Resource Names (ARN) of the Amazon Web Services resources that
	// the path must traverse.
	FilterInArns: [...null | string] @go(,[]*string)

	// The components in the path from source to destination.
	ForwardPathComponents: [...null | #PathComponent] @go(,[]*PathComponent)

	// The Amazon Resource Name (ARN) of the network insights analysis.
	NetworkInsightsAnalysisArn?: null | string @go(,*string)

	// The ID of the network insights analysis.
	NetworkInsightsAnalysisId?: null | string @go(,*string)

	// The ID of the path.
	NetworkInsightsPathId?: null | string @go(,*string)

	// Indicates whether the destination is reachable from the source.
	NetworkPathFound?: null | bool @go(,*bool)

	// The components in the path from destination to source.
	ReturnPathComponents: [...null | #PathComponent] @go(,[]*PathComponent)

	// The time the analysis started.
	StartDate?: null | time.Time @go(,*time.Time)

	// The status of the network insights analysis.
	Status?: null | string @go(,*string)

	// The status message, if the status is failed.
	StatusMessage?: null | string @go(,*string)

	// The tags.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes a path.
#NetworkInsightsPath: {
	// The time stamp when the path was created.
	CreatedDate?: null | time.Time @go(,*time.Time)

	// The Amazon Web Services resource that is the destination of the path.
	Destination?: null | string @go(,*string)

	// The IP address of the Amazon Web Services resource that is the destination
	// of the path.
	DestinationIp?: null | string @go(,*string)

	// The destination port.
	DestinationPort?: null | int64 @go(,*int64)

	// The Amazon Resource Name (ARN) of the path.
	NetworkInsightsPathArn?: null | string @go(,*string)

	// The ID of the path.
	NetworkInsightsPathId?: null | string @go(,*string)

	// The protocol.
	Protocol?: null | string @go(,*string)

	// The Amazon Web Services resource that is the source of the path.
	Source?: null | string @go(,*string)

	// The IP address of the Amazon Web Services resource that is the source of
	// the path.
	SourceIp?: null | string @go(,*string)

	// The tags associated with the path.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes a network interface.
#NetworkInterface: {
	// The association information for an Elastic IP address (IPv4) associated with
	// the network interface.
	Association?: null | #NetworkInterfaceAssociation @go(,*NetworkInterfaceAssociation)

	// The network interface attachment.
	Attachment?: null | #NetworkInterfaceAttachment @go(,*NetworkInterfaceAttachment)

	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// A description.
	Description?: null | string @go(,*string)

	// Any security groups for the network interface.
	Groups: [...null | #GroupIdentifier] @go(,[]*GroupIdentifier)

	// The type of network interface.
	InterfaceType?: null | string @go(,*string)

	// The IPv4 Prefix Delegation prefixes that are assigned to the network interface.
	Ipv4Prefixes: [...null | #Ipv4PrefixSpecification] @go(,[]*Ipv4PrefixSpecification)

	// The IPv6 addresses associated with the network interface.
	Ipv6Addresses: [...null | #NetworkInterfaceIpv6Address] @go(,[]*NetworkInterfaceIpv6Address)

	// The IPv6 Prefix Delegation prefixes that are assigned to the network interface.
	Ipv6Prefixes: [...null | #Ipv6PrefixSpecification] @go(,[]*Ipv6PrefixSpecification)

	// The MAC address.
	MacAddress?: null | string @go(,*string)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn?: null | string @go(,*string)

	// The Amazon Web Services account ID of the owner of the network interface.
	OwnerId?: null | string @go(,*string)

	// The private DNS name.
	PrivateDnsName?: null | string @go(,*string)

	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress?: null | string @go(,*string)

	// The private IPv4 addresses associated with the network interface.
	PrivateIpAddresses: [...null | #NetworkInterfacePrivateIpAddress] @go(,[]*NetworkInterfacePrivateIpAddress)

	// The alias or Amazon Web Services account ID of the principal or service that
	// created the network interface.
	RequesterId?: null | string @go(,*string)

	// Indicates whether the network interface is being managed by Amazon Web Services.
	RequesterManaged?: null | bool @go(,*bool)

	// Indicates whether source/destination checking is enabled.
	SourceDestCheck?: null | bool @go(,*bool)

	// The status of the network interface.
	Status?: null | string @go(,*string)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)

	// Any tags assigned to the network interface.
	TagSet: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes association information for an Elastic IP address (IPv4 only),
// or a Carrier IP address (for a network interface which resides in a subnet
// in a Wavelength Zone).
#NetworkInterfaceAssociation: {
	// The allocation ID.
	AllocationId?: null | string @go(,*string)

	// The association ID.
	AssociationId?: null | string @go(,*string)

	// The carrier IP address associated with the network interface.
	//
	// This option is only available when the network interface is in a subnet which
	// is associated with a Wavelength Zone.
	CarrierIp?: null | string @go(,*string)

	// The customer-owned IP address associated with the network interface.
	CustomerOwnedIp?: null | string @go(,*string)

	// The ID of the Elastic IP address owner.
	IpOwnerId?: null | string @go(,*string)

	// The public DNS name.
	PublicDnsName?: null | string @go(,*string)

	// The address of the Elastic IP address bound to the network interface.
	PublicIp?: null | string @go(,*string)
}

// Describes a network interface attachment.
#NetworkInterfaceAttachment: {
	// The timestamp indicating when the attachment initiated.
	AttachTime?: null | time.Time @go(,*time.Time)

	// The ID of the network interface attachment.
	AttachmentId?: null | string @go(,*string)

	// Indicates whether the network interface is deleted when the instance is terminated.
	DeleteOnTermination?: null | bool @go(,*bool)

	// The device index of the network interface attachment on the instance.
	DeviceIndex?: null | int64 @go(,*int64)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The Amazon Web Services account ID of the owner of the instance.
	InstanceOwnerId?: null | string @go(,*string)

	// The index of the network card.
	NetworkCardIndex?: null | int64 @go(,*int64)

	// The attachment state.
	Status?: null | string @go(,*string)
}

// Describes an attachment change.
#NetworkInterfaceAttachmentChanges: {
	// The ID of the network interface attachment.
	AttachmentId?: null | string @go(,*string)

	// Indicates whether the network interface is deleted when the instance is terminated.
	DeleteOnTermination?: null | bool @go(,*bool)
}

// Describes an IPv6 address associated with a network interface.
#NetworkInterfaceIpv6Address: {
	// The IPv6 address.
	Ipv6Address?: null | string @go(,*string)
}

// Describes a permission for a network interface.
#NetworkInterfacePermission: {
	// The Amazon Web Services account ID.
	AwsAccountId?: null | string @go(,*string)

	// The Amazon Web Service.
	AwsService?: null | string @go(,*string)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The ID of the network interface permission.
	NetworkInterfacePermissionId?: null | string @go(,*string)

	// The type of permission.
	Permission?: null | string @go(,*string)

	// Information about the state of the permission.
	PermissionState?: null | #NetworkInterfacePermissionState @go(,*NetworkInterfacePermissionState)
}

// Describes the state of a network interface permission.
#NetworkInterfacePermissionState: {
	// The state of the permission.
	State?: null | string @go(,*string)

	// A status message, if applicable.
	StatusMessage?: null | string @go(,*string)
}

// Describes the private IPv4 address of a network interface.
#NetworkInterfacePrivateIpAddress: {
	// The association information for an Elastic IP address (IPv4) associated with
	// the network interface.
	Association?: null | #NetworkInterfaceAssociation @go(,*NetworkInterfaceAssociation)

	// Indicates whether this IPv4 address is the primary private IPv4 address of
	// the network interface.
	Primary?: null | bool @go(,*bool)

	// The private DNS name.
	PrivateDnsName?: null | string @go(,*string)

	// The private IPv4 address.
	PrivateIpAddress?: null | string @go(,*string)
}

#NewDhcpConfiguration: {
	Key?: null | string @go(,*string)
	Values: [...null | string] @go(,[]*string)
}

// Describes the configuration of On-Demand Instances in an EC2 Fleet.
#OnDemandOptions: {
	// The order of the launch template overrides to use in fulfilling On-Demand
	// capacity. If you specify lowest-price, EC2 Fleet uses price to determine
	// the order, launching the lowest price first. If you specify prioritized,
	// EC2 Fleet uses the priority that you assigned to each launch template override,
	// launching the highest priority first. If you do not specify a value, EC2
	// Fleet defaults to lowest-price.
	AllocationStrategy?: null | string @go(,*string)

	// The strategy for using unused Capacity Reservations for fulfilling On-Demand
	// capacity. Supported only for fleets of type instant.
	CapacityReservationOptions?: null | #CapacityReservationOptions @go(,*CapacityReservationOptions)

	// The maximum amount per hour for On-Demand Instances that you're willing to
	// pay.
	MaxTotalPrice?: null | string @go(,*string)

	// The minimum target capacity for On-Demand Instances in the fleet. If the
	// minimum target capacity is not reached, the fleet launches no instances.
	MinTargetCapacity?: null | int64 @go(,*int64)

	// Indicates that the fleet launches all On-Demand Instances into a single Availability
	// Zone. Supported only for fleets of type instant.
	SingleAvailabilityZone?: null | bool @go(,*bool)

	// Indicates that the fleet uses a single instance type to launch all On-Demand
	// Instances in the fleet. Supported only for fleets of type instant.
	SingleInstanceType?: null | bool @go(,*bool)
}

// Describes the configuration of On-Demand Instances in an EC2 Fleet.
#OnDemandOptionsRequest: {
	// The order of the launch template overrides to use in fulfilling On-Demand
	// capacity. If you specify lowest-price, EC2 Fleet uses price to determine
	// the order, launching the lowest price first. If you specify prioritized,
	// EC2 Fleet uses the priority that you assigned to each launch template override,
	// launching the highest priority first. If you do not specify a value, EC2
	// Fleet defaults to lowest-price.
	AllocationStrategy?: null | string @go(,*string)

	// The strategy for using unused Capacity Reservations for fulfilling On-Demand
	// capacity. Supported only for fleets of type instant.
	CapacityReservationOptions?: null | #CapacityReservationOptionsRequest @go(,*CapacityReservationOptionsRequest)

	// The maximum amount per hour for On-Demand Instances that you're willing to
	// pay.
	MaxTotalPrice?: null | string @go(,*string)

	// The minimum target capacity for On-Demand Instances in the fleet. If the
	// minimum target capacity is not reached, the fleet launches no instances.
	MinTargetCapacity?: null | int64 @go(,*int64)

	// Indicates that the fleet launches all On-Demand Instances into a single Availability
	// Zone. Supported only for fleets of type instant.
	SingleAvailabilityZone?: null | bool @go(,*bool)

	// Indicates that the fleet uses a single instance type to launch all On-Demand
	// Instances in the fleet. Supported only for fleets of type instant.
	SingleInstanceType?: null | bool @go(,*bool)
}

// Describes a path component.
#PathComponent: {
	// The network ACL rule.
	AclRule?: null | #AnalysisAclRule @go(,*AnalysisAclRule)

	// The component.
	Component?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The destination VPC.
	DestinationVpc?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The inbound header.
	InboundHeader?: null | #AnalysisPacketHeader @go(,*AnalysisPacketHeader)

	// The outbound header.
	OutboundHeader?: null | #AnalysisPacketHeader @go(,*AnalysisPacketHeader)

	// The route table route.
	RouteTableRoute?: null | #AnalysisRouteTableRoute @go(,*AnalysisRouteTableRoute)

	// The security group rule.
	SecurityGroupRule?: null | #AnalysisSecurityGroupRule @go(,*AnalysisSecurityGroupRule)

	// The sequence number.
	SequenceNumber?: null | int64 @go(,*int64)

	// The source VPC.
	SourceVpc?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The subnet.
	Subnet?: null | #AnalysisComponent @go(,*AnalysisComponent)

	// The component VPC.
	Vpc?: null | #AnalysisComponent @go(,*AnalysisComponent)
}

// Describes the data that identifies an Amazon FPGA image (AFI) on the PCI
// bus.
#PciId: {
	// The ID of the device.
	DeviceId?: null | string @go(,*string)

	// The ID of the subsystem.
	SubsystemId?: null | string @go(,*string)

	// The ID of the vendor for the subsystem.
	SubsystemVendorId?: null | string @go(,*string)

	// The ID of the vendor.
	VendorId?: null | string @go(,*string)
}

// The status of the transit gateway peering attachment.
#PeeringAttachmentStatus: {
	// The status code.
	Code?: null | string @go(,*string)

	// The status message, if applicable.
	Message?: null | string @go(,*string)
}

// Describes the VPC peering connection options.
#PeeringConnectionOptions: {
	// If true, the public DNS hostnames of instances in the specified VPC resolve
	// to private IP addresses when queried from instances in the peer VPC.
	AllowDnsResolutionFromRemoteVpc?: null | bool @go(,*bool)

	// If true, enables outbound communication from an EC2-Classic instance that's
	// linked to a local VPC using ClassicLink to instances in a peer VPC.
	AllowEgressFromLocalClassicLinkToRemoteVpc?: null | bool @go(,*bool)

	// If true, enables outbound communication from instances in a local VPC to
	// an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
	AllowEgressFromLocalVpcToRemoteClassicLink?: null | bool @go(,*bool)
}

// The VPC peering connection options.
#PeeringConnectionOptionsRequest: {
	// If true, enables a local VPC to resolve public DNS hostnames to private IP
	// addresses when queried from instances in the peer VPC.
	AllowDnsResolutionFromRemoteVpc?: null | bool @go(,*bool)

	// If true, enables outbound communication from an EC2-Classic instance that's
	// linked to a local VPC using ClassicLink to instances in a peer VPC.
	AllowEgressFromLocalClassicLinkToRemoteVpc?: null | bool @go(,*bool)

	// If true, enables outbound communication from instances in a local VPC to
	// an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
	AllowEgressFromLocalVpcToRemoteClassicLink?: null | bool @go(,*bool)
}

// Information about the transit gateway in the peering attachment.
#PeeringTgwInfo: {
	// The AWS account ID of the owner of the transit gateway.
	OwnerId?: null | string @go(,*string)

	// The Region of the transit gateway.
	Region?: null | string @go(,*string)

	// The ID of the transit gateway.
	TransitGatewayId?: null | string @go(,*string)
}

// The Diffie-Hellmann group number for phase 1 IKE negotiations.
#Phase1DHGroupNumbersListValue: {
	// The Diffie-Hellmann group number.
	Value?: null | int64 @go(,*int64)
}

// Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE
// negotiations.
#Phase1DHGroupNumbersRequestListValue: {
	// The Diffie-Hellmann group number.
	Value?: null | int64 @go(,*int64)
}

// The encryption algorithm for phase 1 IKE negotiations.
#Phase1EncryptionAlgorithmsListValue: {
	// The value for the encryption algorithm.
	Value?: null | string @go(,*string)
}

// Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE negotiations.
#Phase1EncryptionAlgorithmsRequestListValue: {
	// The value for the encryption algorithm.
	Value?: null | string @go(,*string)
}

// The integrity algorithm for phase 1 IKE negotiations.
#Phase1IntegrityAlgorithmsListValue: {
	// The value for the integrity algorithm.
	Value?: null | string @go(,*string)
}

// Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE negotiations.
#Phase1IntegrityAlgorithmsRequestListValue: {
	// The value for the integrity algorithm.
	Value?: null | string @go(,*string)
}

// The Diffie-Hellmann group number for phase 2 IKE negotiations.
#Phase2DHGroupNumbersListValue: {
	// The Diffie-Hellmann group number.
	Value?: null | int64 @go(,*int64)
}

// Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE
// negotiations.
#Phase2DHGroupNumbersRequestListValue: {
	// The Diffie-Hellmann group number.
	Value?: null | int64 @go(,*int64)
}

// The encryption algorithm for phase 2 IKE negotiations.
#Phase2EncryptionAlgorithmsListValue: {
	// The encryption algorithm.
	Value?: null | string @go(,*string)
}

// Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE negotiations.
#Phase2EncryptionAlgorithmsRequestListValue: {
	// The encryption algorithm.
	Value?: null | string @go(,*string)
}

// The integrity algorithm for phase 2 IKE negotiations.
#Phase2IntegrityAlgorithmsListValue: {
	// The integrity algorithm.
	Value?: null | string @go(,*string)
}

// Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE negotiations.
#Phase2IntegrityAlgorithmsRequestListValue: {
	// The integrity algorithm.
	Value?: null | string @go(,*string)
}

// Describes the placement of an instance.
#Placement: {
	// The affinity setting for the instance on the Dedicated Host. This parameter
	// is not supported for the ImportInstance (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html)
	// command.
	//
	// This parameter is not supported by CreateFleet (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet).
	Affinity?: null | string @go(,*string)

	// The Availability Zone of the instance.
	//
	// If not specified, an Availability Zone will be automatically chosen for you
	// based on the load balancing criteria for the Region.
	//
	// This parameter is not supported by CreateFleet (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet).
	AvailabilityZone?: null | string @go(,*string)

	// The name of the placement group the instance is in.
	GroupName?: null | string @go(,*string)

	// The ID of the Dedicated Host on which the instance resides. This parameter
	// is not supported for the ImportInstance (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html)
	// command.
	//
	// This parameter is not supported by CreateFleet (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet).
	HostId?: null | string @go(,*string)

	// The ARN of the host resource group in which to launch the instances. If you
	// specify a host resource group ARN, omit the Tenancy parameter or set it to
	// host.
	//
	// This parameter is not supported by CreateFleet (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet).
	HostResourceGroupArn?: null | string @go(,*string)

	// The number of the partition the instance is in. Valid only if the placement
	// group strategy is set to partition.
	//
	// This parameter is not supported by CreateFleet (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet).
	PartitionNumber?: null | int64 @go(,*int64)

	// Reserved for future use.
	//
	// This parameter is not supported by CreateFleet (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet).
	SpreadDomain?: null | string @go(,*string)

	// The tenancy of the instance (if the instance is running in a VPC). An instance
	// with a tenancy of dedicated runs on single-tenant hardware. The host tenancy
	// is not supported for the ImportInstance (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html)
	// command.
	//
	// This parameter is not supported by CreateFleet (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet).
	Tenancy?: null | string @go(,*string)
}

// Describes a placement group.
#PlacementGroup: {
	// The ID of the placement group.
	GroupId?: null | string @go(,*string)

	// The name of the placement group.
	GroupName?: null | string @go(,*string)

	// The number of partitions. Valid only if strategy is set to partition.
	PartitionCount?: null | int64 @go(,*int64)

	// The state of the placement group.
	State?: null | string @go(,*string)

	// The placement strategy.
	Strategy?: null | string @go(,*string)

	// Any tags applied to the placement group.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes the placement group support of the instance type.
#PlacementGroupInfo: {
	// The supported placement group types.
	SupportedStrategies: [...null | string] @go(,[]*string)
}

// Describes the placement of an instance.
#PlacementResponse: {
	// The name of the placement group that the instance is in.
	GroupName?: null | string @go(,*string)
}

// Describes a CIDR block for an address pool.
#PoolCidrBlock: {
	// The CIDR block.
	Cidr?: null | string @go(,*string)
}

// Describes a range of ports.
#PortRange: {
	// The first port in the range.
	From?: null | int64 @go(,*int64)

	// The last port in the range.
	To?: null | int64 @go(,*int64)
}

// Describes prefixes for Amazon Web Services services.
#PrefixList: {
	// The IP address range of the Amazon Web Service.
	Cidrs: [...null | string] @go(,[]*string)

	// The ID of the prefix.
	PrefixListId?: null | string @go(,*string)

	// The name of the prefix.
	PrefixListName?: null | string @go(,*string)
}

// Describes the resource with which a prefix list is associated.
#PrefixListAssociation: {
	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The owner of the resource.
	ResourceOwner?: null | string @go(,*string)
}

// Describes a prefix list entry.
#PrefixListEntry: {
	// The CIDR block.
	Cidr?: null | string @go(,*string)

	// The description.
	Description?: null | string @go(,*string)
}

// Describes a prefix list ID.
#PrefixListId: {
	// A description for the security group rule that references this prefix list
	// ID.
	//
	// Constraints: Up to 255 characters in length. Allowed characters are a-z,
	// A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
	Description?: null | string @go(,*string)

	// The ID of the prefix.
	PrefixListId?: null | string @go(,*string)
}

// Describes the price for a Reserved Instance.
#PriceSchedule: {
	// The current price schedule, as determined by the term remaining for the Reserved
	// Instance in the listing.
	//
	// A specific price schedule is always in effect, but only one price schedule
	// can be active at any time. Take, for example, a Reserved Instance listing
	// that has five months remaining in its term. When you specify price schedules
	// for five months and two months, this means that schedule 1, covering the
	// first three months of the remaining term, will be active during months 5,
	// 4, and 3. Then schedule 2, covering the last two months of the term, will
	// be active for months 2 and 1.
	Active?: null | bool @go(,*bool)

	// The currency for transacting the Reserved Instance resale. At this time,
	// the only supported currency is USD.
	CurrencyCode?: null | string @go(,*string)

	// The fixed price for the term.
	Price?: null | float64 @go(,*float64)

	// The number of months remaining in the reservation. For example, 2 is the
	// second to the last month before the capacity reservation expires.
	Term?: null | int64 @go(,*int64)
}

// Describes the price for a Reserved Instance.
#PriceScheduleSpecification: {
	// The currency for transacting the Reserved Instance resale. At this time,
	// the only supported currency is USD.
	CurrencyCode?: null | string @go(,*string)

	// The fixed price for the term.
	Price?: null | float64 @go(,*float64)

	// The number of months remaining in the reservation. For example, 2 is the
	// second to the last month before the capacity reservation expires.
	Term?: null | int64 @go(,*int64)
}

// Describes a Reserved Instance offering.
#PricingDetail: {
	// The number of reservations available for the price.
	Count?: null | int64 @go(,*int64)

	// The price per instance.
	Price?: null | float64 @go(,*float64)
}

// PrincipalIdFormat description
#PrincipalIdFormat: {
	// PrincipalIdFormatARN description
	Arn?: null | string @go(,*string)

	// PrincipalIdFormatStatuses description
	Statuses: [...null | #IdFormat] @go(,[]*IdFormat)
}

// Information about the Private DNS name for interface endpoints.
#PrivateDnsDetails: {
	// The private DNS name assigned to the VPC endpoint service.
	PrivateDnsName?: null | string @go(,*string)
}

// Information about the private DNS name for the service endpoint. For more
// information about these parameters, see VPC Endpoint Service Private DNS
// Name Verification (https://docs.aws.amazon.com/vpc/latest/userguide/ndpoint-services-dns-validation.html)
// in the Amazon Virtual Private Cloud User Guide.
#PrivateDnsNameConfiguration: {
	// The name of the record subdomain the service provider needs to create. The
	// service provider adds the value text to the name.
	Name?: null | string @go(,*string)

	// The verification state of the VPC endpoint service.
	//
	// >Consumers of the endpoint service can use the private name only when the
	// state is verified.
	State?: null | string @go(,*string)

	// The endpoint service verification type, for example TXT.
	Type?: null | string @go(,*string)

	// The value the service provider adds to the private DNS name domain record
	// before verification.
	Value?: null | string @go(,*string)
}

// Describes a secondary private IPv4 address for a network interface.
#PrivateIpAddressSpecification: {
	// Indicates whether the private IPv4 address is the primary private IPv4 address.
	// Only one IPv4 address can be designated as primary.
	Primary?: null | bool @go(,*bool)

	// The private IPv4 addresses.
	PrivateIpAddress?: null | string @go(,*string)
}

// Describes the processor used by the instance type.
#ProcessorInfo: {
	// The architectures supported by the instance type.
	SupportedArchitectures: [...null | string] @go(,[]*string)

	// The speed of the processor, in GHz.
	SustainedClockSpeedInGhz?: null | float64 @go(,*float64)
}

// Describes a product code.
#ProductCode: {
	// The product code.
	ProductCodeId?: null | string @go(,*string)

	// The type of product code.
	ProductCodeType?: null | string @go(,*string)
}

// Describes a virtual private gateway propagating route.
#PropagatingVgw: {
	// The ID of the virtual private gateway.
	GatewayId?: null | string @go(,*string)
}

#ProvisionByoipCidrInput: {
	// The public IPv4 or IPv6 address range, in CIDR notation. The most specific
	// IPv4 prefix that you can specify is /24. The most specific IPv6 prefix you
	// can specify is /56. The address range cannot overlap with another address
	// range that you've brought to this or another Region.
	//
	// Cidr is a required field
	Cidr?: null | string @go(,*string)

	// A signed document that proves that you are authorized to bring the specified
	// IP address range to Amazon using BYOIP.
	CidrAuthorizationContext?: null | #CidrAuthorizationContext @go(,*CidrAuthorizationContext)

	// A description for the address range and the address pool.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Reserved.
	MultiRegion?: null | bool @go(,*bool)

	// The tags to apply to the address pool.
	PoolTagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// (IPv6 only) Indicate whether the address range will be publicly advertised
	// to the internet.
	//
	// Default: true
	PubliclyAdvertisable?: null | bool @go(,*bool)
}

#ProvisionByoipCidrOutput: {
	// Information about the address range.
	ByoipCidr?: null | #ByoipCidr @go(,*ByoipCidr)
}

// Reserved. If you need to sustain traffic greater than the documented limits
// (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html),
// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
#ProvisionedBandwidth: {
	// Reserved. If you need to sustain traffic greater than the documented limits
	// (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html),
	// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
	ProvisionTime?: null | time.Time @go(,*time.Time)

	// Reserved. If you need to sustain traffic greater than the documented limits
	// (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html),
	// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
	Provisioned?: null | string @go(,*string)

	// Reserved. If you need to sustain traffic greater than the documented limits
	// (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html),
	// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
	RequestTime?: null | time.Time @go(,*time.Time)

	// Reserved. If you need to sustain traffic greater than the documented limits
	// (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html),
	// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
	Requested?: null | string @go(,*string)

	// Reserved. If you need to sustain traffic greater than the documented limits
	// (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html),
	// contact us through the Support Center (https://console.aws.amazon.com/support/home?).
	Status?: null | string @go(,*string)
}

// The status of an updated pointer (PTR) record for an Elastic IP address.
#PtrUpdateStatus: {
	// The reason for the PTR record update.
	Reason?: null | string @go(,*string)

	// The status of the PTR record update.
	Status?: null | string @go(,*string)

	// The value for the PTR record update.
	Value?: null | string @go(,*string)
}

// Describes an IPv4 address pool.
#PublicIpv4Pool: {
	// A description of the address pool.
	Description?: null | string @go(,*string)

	// The name of the location from which the address pool is advertised. A network
	// border group is a unique set of Availability Zones or Local Zones from where
	// Amazon Web Services advertises public IP addresses.
	NetworkBorderGroup?: null | string @go(,*string)

	// The address ranges.
	PoolAddressRanges: [...null | #PublicIpv4PoolRange] @go(,[]*PublicIpv4PoolRange)

	// The ID of the address pool.
	PoolId?: null | string @go(,*string)

	// Any tags for the address pool.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The total number of addresses.
	TotalAddressCount?: null | int64 @go(,*int64)

	// The total number of available addresses.
	TotalAvailableAddressCount?: null | int64 @go(,*int64)
}

// Describes an address range of an IPv4 address pool.
#PublicIpv4PoolRange: {
	// The number of addresses in the range.
	AddressCount?: null | int64 @go(,*int64)

	// The number of available addresses in the range.
	AvailableAddressCount?: null | int64 @go(,*int64)

	// The first IP address in the range.
	FirstAddress?: null | string @go(,*string)

	// The last IP address in the range.
	LastAddress?: null | string @go(,*string)
}

// Describes the result of the purchase.
#Purchase: {
	// The currency in which the UpfrontPrice and HourlyPrice amounts are specified.
	// At this time, the only supported currency is USD.
	CurrencyCode?: null | string @go(,*string)

	// The duration of the reservation's term in seconds.
	Duration?: null | int64 @go(,*int64)

	// The IDs of the Dedicated Hosts associated with the reservation.
	HostIdSet: [...null | string] @go(,[]*string)

	// The ID of the reservation.
	HostReservationId?: null | string @go(,*string)

	// The hourly price of the reservation per hour.
	HourlyPrice?: null | string @go(,*string)

	// The instance family on the Dedicated Host that the reservation can be associated
	// with.
	InstanceFamily?: null | string @go(,*string)

	// The payment option for the reservation.
	PaymentOption?: null | string @go(,*string)

	// The upfront price of the reservation.
	UpfrontPrice?: null | string @go(,*string)
}

#PurchaseHostReservationInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice
	// amounts are specified. At this time, the only supported currency is USD.
	CurrencyCode?: null | string @go(,*string)

	// The IDs of the Dedicated Hosts with which the reservation will be associated.
	//
	// HostIdSet is a required field
	HostIdSet: [...null | string] @go(,[]*string)

	// The specified limit is checked against the total upfront cost of the reservation
	// (calculated as the offering's upfront cost multiplied by the host count).
	// If the total upfront cost is greater than the specified price limit, the
	// request fails. This is used to ensure that the purchase does not exceed the
	// expected upfront cost of the purchase. At this time, the only supported currency
	// is USD. For example, to indicate a limit price of USD 100, specify 100.00.
	LimitPrice?: null | string @go(,*string)

	// The ID of the offering.
	//
	// OfferingId is a required field
	OfferingId?: null | string @go(,*string)

	// The tags to apply to the Dedicated Host Reservation during purchase.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#PurchaseHostReservationOutput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts
	// are specified. At this time, the only supported currency is USD.
	CurrencyCode?: null | string @go(,*string)

	// Describes the details of the purchase.
	Purchase: [...null | #Purchase] @go(,[]*Purchase)

	// The total hourly price of the reservation calculated per hour.
	TotalHourlyPrice?: null | string @go(,*string)

	// The total amount charged to your account when you purchase the reservation.
	TotalUpfrontPrice?: null | string @go(,*string)
}

// Describes a request to purchase Scheduled Instances.
#PurchaseRequest: {
	// The number of instances.
	//
	// InstanceCount is a required field
	InstanceCount?: null | int64 @go(,*int64)

	// The purchase token.
	//
	// PurchaseToken is a required field
	PurchaseToken?: null | string @go(,*string)
}

// Contains the parameters for PurchaseReservedInstancesOffering.
#PurchaseReservedInstancesOfferingInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The number of Reserved Instances to purchase.
	//
	// InstanceCount is a required field
	InstanceCount?: null | int64 @go(,*int64)

	// Specified for Reserved Instance Marketplace offerings to limit the total
	// order and ensure that the Reserved Instances are not purchased at unexpected
	// prices.
	LimitPrice?: null | #ReservedInstanceLimitPrice @go(,*ReservedInstanceLimitPrice)

	// The time at which to purchase the Reserved Instance, in UTC format (for example,
	// YYYY-MM-DDTHH:MM:SSZ).
	PurchaseTime?: null | time.Time @go(,*time.Time)

	// The ID of the Reserved Instance offering to purchase.
	//
	// ReservedInstancesOfferingId is a required field
	ReservedInstancesOfferingId?: null | string @go(,*string)
}

// Contains the output of PurchaseReservedInstancesOffering.
#PurchaseReservedInstancesOfferingOutput: {
	// The IDs of the purchased Reserved Instances. If your purchase crosses into
	// a discounted pricing tier, the final Reserved Instances IDs might change.
	// For more information, see Crossing pricing tiers (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-reserved-instances-application.html#crossing-pricing-tiers)
	// in the Amazon Elastic Compute Cloud User Guide.
	ReservedInstancesId?: null | string @go(,*string)
}

// Contains the parameters for PurchaseScheduledInstances.
#PurchaseScheduledInstancesInput: {
	// Unique, case-sensitive identifier that ensures the idempotency of the request.
	// For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The purchase requests.
	//
	// PurchaseRequests is a required field
	PurchaseRequests: [...null | #PurchaseRequest] @go(,[]*PurchaseRequest)
}

// Contains the output of PurchaseScheduledInstances.
#PurchaseScheduledInstancesOutput: {
	// Information about the Scheduled Instances.
	ScheduledInstanceSet: [...null | #ScheduledInstance] @go(,[]*ScheduledInstance)
}

#RebootInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The instance IDs.
	//
	// InstanceIds is a required field
	InstanceIds: [...null | string] @go(,[]*string)
}

// Describes a recurring charge.
#RecurringCharge: {
	// The amount of the recurring charge.
	Amount?: null | float64 @go(,*float64)

	// The frequency of the recurring charge.
	Frequency?: null | string @go(,*string)
}

// Describes the security group that is referenced in the security group rule.
#ReferencedSecurityGroup: {
	// The ID of the security group.
	GroupId?: null | string @go(,*string)

	// The status of a VPC peering connection, if applicable.
	PeeringStatus?: null | string @go(,*string)

	// The Amazon Web Services account ID.
	UserId?: null | string @go(,*string)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)

	// The ID of the VPC peering connection.
	VpcPeeringConnectionId?: null | string @go(,*string)
}

// Describes a Region.
#Region: {
	// The Region service endpoint.
	Endpoint?: null | string @go(,*string)

	// The Region opt-in status. The possible values are opt-in-not-required, opted-in,
	// and not-opted-in.
	OptInStatus?: null | string @go(,*string)

	// The name of the Region.
	RegionName?: null | string @go(,*string)
}

// Contains the parameters for RegisterImage.
#RegisterImageInput: {
	// The architecture of the AMI.
	//
	// Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs,
	// the architecture specified in the manifest file.
	Architecture?: null | string @go(,*string)

	// The billing product codes. Your account must be authorized to specify billing
	// product codes. Otherwise, you can use the AWS Marketplace to bill for the
	// use of an AMI.
	BillingProducts: [...null | string] @go(,[]*string)

	// The block device mapping entries.
	//
	// If you specify an EBS volume using the ID of an EBS snapshot, you can't specify
	// the encryption state of the volume.
	//
	// If you create an AMI on an Outpost, then all backing snapshots must be on
	// the same Outpost or in the Region of that Outpost. AMIs on an Outpost that
	// include local snapshots can be used to launch instances on the same Outpost
	// only. For more information, Amazon EBS local snapshots on Outposts (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html#ami)
	// in the Amazon Elastic Compute Cloud User Guide.
	BlockDeviceMappings: [...null | #BlockDeviceMapping] @go(,[]*BlockDeviceMapping)

	// The boot mode of the AMI. For more information, see Boot modes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	BootMode?: null | string @go(,*string)

	// A description for your AMI.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Set to true to enable enhanced networking with ENA for the AMI and any instances
	// that you launch from the AMI.
	//
	// This option is supported only for HVM AMIs. Specifying this option with a
	// PV AMI can make instances launched from the AMI unreachable.
	EnaSupport?: null | bool @go(,*bool)

	// The full path to your AMI manifest in Amazon S3 storage. The specified bucket
	// must have the aws-exec-read canned access control list (ACL) to ensure that
	// it can be accessed by Amazon EC2. For more information, see Canned ACLs (https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl)
	// in the Amazon S3 Service Developer Guide.
	ImageLocation?: null | string @go(,*string)

	// The ID of the kernel.
	KernelId?: null | string @go(,*string)

	// A name for your AMI.
	//
	// Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets
	// ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('),
	// at-signs (@), or underscores(_)
	//
	// Name is a required field
	Name?: null | string @go(,*string)

	// The ID of the RAM disk.
	RamdiskId?: null | string @go(,*string)

	// The device name of the root device volume (for example, /dev/sda1).
	RootDeviceName?: null | string @go(,*string)

	// Set to simple to enable enhanced networking with the Intel 82599 Virtual
	// Function interface for the AMI and any instances that you launch from the
	// AMI.
	//
	// There is no way to disable sriovNetSupport at this time.
	//
	// This option is supported only for HVM AMIs. Specifying this option with a
	// PV AMI can make instances launched from the AMI unreachable.
	SriovNetSupport?: null | string @go(,*string)

	// The type of virtualization (hvm | paravirtual).
	//
	// Default: paravirtual
	VirtualizationType?: null | string @go(,*string)
}

// Contains the output of RegisterImage.
#RegisterImageOutput: {
	// The ID of the newly registered AMI.
	ImageId?: null | string @go(,*string)
}

#RegisterInstanceEventNotificationAttributesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Information about the tag keys to register.
	InstanceTagAttribute?: null | #RegisterInstanceTagAttributeRequest @go(,*RegisterInstanceTagAttributeRequest)
}

#RegisterInstanceEventNotificationAttributesOutput: {
	// The resulting set of tag keys.
	InstanceTagAttribute?: null | #InstanceTagNotificationAttribute @go(,*InstanceTagNotificationAttribute)
}

// Information about the tag keys to register for the current Region. You can
// either specify individual tag keys or register all tag keys in the current
// Region. You must specify either IncludeAllTagsOfInstance or InstanceTagKeys
// in the request
#RegisterInstanceTagAttributeRequest: {
	// Indicates whether to register all tag keys in the current Region. Specify
	// true to register all tag keys.
	IncludeAllTagsOfInstance?: null | bool @go(,*bool)

	// The tag keys to register.
	InstanceTagKeys: [...null | string] @go(,[]*string)
}

#RegisterTransitGatewayMulticastGroupMembersInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress?: null | string @go(,*string)

	// The group members' network interface IDs to register with the transit gateway
	// multicast group.
	NetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#RegisterTransitGatewayMulticastGroupMembersOutput: {
	// Information about the registered transit gateway multicast group members.
	RegisteredMulticastGroupMembers?: null | #TransitGatewayMulticastRegisteredGroupMembers @go(,*TransitGatewayMulticastRegisteredGroupMembers)
}

#RegisterTransitGatewayMulticastGroupSourcesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress?: null | string @go(,*string)

	// The group sources' network interface IDs to register with the transit gateway
	// multicast group.
	NetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#RegisterTransitGatewayMulticastGroupSourcesOutput: {
	// Information about the transit gateway multicast group sources.
	RegisteredMulticastGroupSources?: null | #TransitGatewayMulticastRegisteredGroupSources @go(,*TransitGatewayMulticastRegisteredGroupSources)
}

#RejectTransitGatewayMulticastDomainAssociationsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the subnets to associate with the transit gateway multicast domain.
	SubnetIds: [...null | string] @go(,[]*string)

	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#RejectTransitGatewayMulticastDomainAssociationsOutput: {
	// Describes the multicast domain associations.
	Associations?: null | #TransitGatewayMulticastDomainAssociations @go(,*TransitGatewayMulticastDomainAssociations)
}

#RejectTransitGatewayPeeringAttachmentInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the transit gateway peering attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#RejectTransitGatewayPeeringAttachmentOutput: {
	// The transit gateway peering attachment.
	TransitGatewayPeeringAttachment?: null | #TransitGatewayPeeringAttachment @go(,*TransitGatewayPeeringAttachment)
}

#RejectTransitGatewayVpcAttachmentInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the attachment.
	//
	// TransitGatewayAttachmentId is a required field
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

#RejectTransitGatewayVpcAttachmentOutput: {
	// Information about the attachment.
	TransitGatewayVpcAttachment?: null | #TransitGatewayVpcAttachment @go(,*TransitGatewayVpcAttachment)
}

#RejectVpcEndpointConnectionsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the service.
	//
	// ServiceId is a required field
	ServiceId?: null | string @go(,*string)

	// The IDs of one or more VPC endpoints.
	//
	// VpcEndpointIds is a required field
	VpcEndpointIds: [...null | string] @go(,[]*string)
}

#RejectVpcEndpointConnectionsOutput: {
	// Information about the endpoints that were not rejected, if applicable.
	Unsuccessful: [...null | #UnsuccessfulItem] @go(,[]*UnsuccessfulItem)
}

#RejectVpcPeeringConnectionInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the VPC peering connection.
	//
	// VpcPeeringConnectionId is a required field
	VpcPeeringConnectionId?: null | string @go(,*string)
}

#RejectVpcPeeringConnectionOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	Return?: null | bool @go(,*bool)
}

#ReleaseAddressInput: {
	// [EC2-VPC] The allocation ID. Required for EC2-VPC.
	AllocationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The set of Availability Zones, Local Zones, or Wavelength Zones from which
	// AWS advertises IP addresses.
	//
	// If you provide an incorrect network border group, you will receive an InvalidAddress.NotFound
	// error. For more information, see Error Codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html).
	//
	// You cannot use a network border group with EC2 Classic. If you attempt this
	// operation on EC2 classic, you will receive an InvalidParameterCombination
	// error. For more information, see Error Codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html).
	NetworkBorderGroup?: null | string @go(,*string)

	// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
	PublicIp?: null | string @go(,*string)
}

#ReleaseHostsInput: {
	// The IDs of the Dedicated Hosts to release.
	//
	// HostIds is a required field
	HostIds: [...null | string] @go(,[]*string)
}

#ReleaseHostsOutput: {
	// The IDs of the Dedicated Hosts that were successfully released.
	Successful: [...null | string] @go(,[]*string)

	// The IDs of the Dedicated Hosts that could not be released, including an error
	// message.
	Unsuccessful: [...null | #UnsuccessfulItem] @go(,[]*UnsuccessfulItem)
}

// An entry for a prefix list.
#RemovePrefixListEntry: {
	// The CIDR block.
	//
	// Cidr is a required field
	Cidr?: null | string @go(,*string)
}

#ReplaceIamInstanceProfileAssociationInput: {
	// The ID of the existing IAM instance profile association.
	//
	// AssociationId is a required field
	AssociationId?: null | string @go(,*string)

	// The IAM instance profile.
	//
	// IamInstanceProfile is a required field
	IamInstanceProfile?: null | #IamInstanceProfileSpecification @go(,*IamInstanceProfileSpecification)
}

#ReplaceIamInstanceProfileAssociationOutput: {
	// Information about the IAM instance profile association.
	IamInstanceProfileAssociation?: null | #IamInstanceProfileAssociation @go(,*IamInstanceProfileAssociation)
}

#ReplaceNetworkAclAssociationInput: {
	// The ID of the current association between the original network ACL and the
	// subnet.
	//
	// AssociationId is a required field
	AssociationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the new network ACL to associate with the subnet.
	//
	// NetworkAclId is a required field
	NetworkAclId?: null | string @go(,*string)
}

#ReplaceNetworkAclAssociationOutput: {
	// The ID of the new association.
	NewAssociationId?: null | string @go(,*string)
}

#ReplaceNetworkAclEntryInput: {
	// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
	CidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Indicates whether to replace the egress rule.
	//
	// Default: If no value is specified, we replace the ingress rule.
	//
	// Egress is a required field
	Egress?: null | bool @go(,*bool)

	// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
	// 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
	IcmpTypeCode?: null | #IcmpTypeCode @go(,*IcmpTypeCode)

	// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64).
	Ipv6CidrBlock?: null | string @go(,*string)

	// The ID of the ACL.
	//
	// NetworkAclId is a required field
	NetworkAclId?: null | string @go(,*string)

	// TCP or UDP protocols: The range of ports the rule applies to. Required if
	// specifying protocol 6 (TCP) or 17 (UDP).
	PortRange?: null | #PortRange @go(,*PortRange)

	// The protocol number. A value of "-1" means all protocols. If you specify
	// "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP),
	// traffic on all ports is allowed, regardless of any ports or ICMP types or
	// codes that you specify. If you specify protocol "58" (ICMPv6) and specify
	// an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless
	// of any that you specify. If you specify protocol "58" (ICMPv6) and specify
	// an IPv6 CIDR block, you must specify an ICMP type and code.
	//
	// Protocol is a required field
	Protocol?: null | string @go(,*string)

	// Indicates whether to allow or deny the traffic that matches the rule.
	//
	// RuleAction is a required field
	RuleAction?: null | string @go(,*string)

	// The rule number of the entry to replace.
	//
	// RuleNumber is a required field
	RuleNumber?: null | int64 @go(,*int64)
}

// Information about a root volume replacement task.
#ReplaceRootVolumeTask: {
	// The time the task completed.
	CompleteTime?: null | string @go(,*string)

	// The ID of the instance for which the root volume replacement task was created.
	InstanceId?: null | string @go(,*string)

	// The ID of the root volume replacement task.
	ReplaceRootVolumeTaskId?: null | string @go(,*string)

	// The time the task was started.
	StartTime?: null | string @go(,*string)

	// The tags assigned to the task.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The state of the task. The task can be in one of the following states:
	//
	//    * pending - the replacement volume is being created.
	//
	//    * in-progress - the original volume is being detached and the replacement
	//    volume is being attached.
	//
	//    * succeeded - the replacement volume has been successfully attached to
	//    the instance and the instance is available.
	//
	//    * failing - the replacement task is in the process of failing.
	//
	//    * failed - the replacement task has failed but the original root volume
	//    is still attached.
	//
	//    * failing-detached - the replacement task is in the process of failing.
	//    The instance might have no root volume attached.
	//
	//    * failed-detached - the replacement task has failed and the instance has
	//    no root volume attached.
	TaskState?: null | string @go(,*string)
}

#ReplaceRouteInput: {
	// [IPv4 traffic only] The ID of a carrier gateway.
	CarrierGatewayId?: null | string @go(,*string)

	// The IPv4 CIDR address block used for the destination match. The value that
	// you provide must match the CIDR of an existing route in the table.
	DestinationCidrBlock?: null | string @go(,*string)

	// The IPv6 CIDR address block used for the destination match. The value that
	// you provide must match the CIDR of an existing route in the table.
	DestinationIpv6CidrBlock?: null | string @go(,*string)

	// The ID of the prefix list for the route.
	DestinationPrefixListId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// [IPv6 traffic only] The ID of an egress-only internet gateway.
	EgressOnlyInternetGatewayId?: null | string @go(,*string)

	// The ID of an internet gateway or virtual private gateway.
	GatewayId?: null | string @go(,*string)

	// The ID of a NAT instance in your VPC.
	InstanceId?: null | string @go(,*string)

	// The ID of the local gateway.
	LocalGatewayId?: null | string @go(,*string)

	// Specifies whether to reset the local route to its default target (local).
	LocalTarget?: null | bool @go(,*bool)

	// [IPv4 traffic only] The ID of a NAT gateway.
	NatGatewayId?: null | string @go(,*string)

	// The ID of a network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The ID of the route table.
	//
	// RouteTableId is a required field
	RouteTableId?: null | string @go(,*string)

	// The ID of a transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
	VpcEndpointId?: null | string @go(,*string)

	// The ID of a VPC peering connection.
	VpcPeeringConnectionId?: null | string @go(,*string)
}

#ReplaceRouteTableAssociationInput: {
	// The association ID.
	//
	// AssociationId is a required field
	AssociationId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the new route table to associate with the subnet.
	//
	// RouteTableId is a required field
	RouteTableId?: null | string @go(,*string)
}

#ReplaceRouteTableAssociationOutput: {
	// The state of the association.
	AssociationState?: null | #RouteTableAssociationState @go(,*RouteTableAssociationState)

	// The ID of the new association.
	NewAssociationId?: null | string @go(,*string)
}

#ReplaceTransitGatewayRouteInput: {
	// Indicates whether traffic matching this route is to be dropped.
	Blackhole?: null | bool @go(,*bool)

	// The CIDR range used for the destination match. Routing decisions are based
	// on the most specific match.
	//
	// DestinationCidrBlock is a required field
	DestinationCidrBlock?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#ReplaceTransitGatewayRouteOutput: {
	// Information about the modified route.
	Route?: null | #TransitGatewayRoute @go(,*TransitGatewayRoute)
}

#ReportInstanceStatusInput: {
	// Descriptive text about the health state of your instance.
	Description?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The time at which the reported instance health state ended.
	EndTime?: null | time.Time @go(,*time.Time)

	// The instances.
	//
	// Instances is a required field
	Instances: [...null | string] @go(,[]*string)

	// The reason codes that describe the health state of your instance.
	//
	//    * instance-stuck-in-state: My instance is stuck in a state.
	//
	//    * unresponsive: My instance is unresponsive.
	//
	//    * not-accepting-credentials: My instance is not accepting my credentials.
	//
	//    * password-not-available: A password is not available for my instance.
	//
	//    * performance-network: My instance is experiencing performance problems
	//    that I believe are network related.
	//
	//    * performance-instance-store: My instance is experiencing performance
	//    problems that I believe are related to the instance stores.
	//
	//    * performance-ebs-volume: My instance is experiencing performance problems
	//    that I believe are related to an EBS volume.
	//
	//    * performance-other: My instance is experiencing performance problems.
	//
	//    * other: [explain using the description parameter]
	//
	// ReasonCodes is a required field
	ReasonCodes: [...null | string] @go(,[]*string)

	// The time at which the reported instance health state began.
	StartTime?: null | time.Time @go(,*time.Time)

	// The status of all instances listed.
	//
	// Status is a required field
	Status?: null | string @go(,*string)
}

// The information to include in the launch template.
#RequestLaunchTemplateData: {
	// The block device mapping.
	BlockDeviceMappings: [...null | #LaunchTemplateBlockDeviceMappingRequest] @go(,[]*LaunchTemplateBlockDeviceMappingRequest)

	// The Capacity Reservation targeting option. If you do not specify this parameter,
	// the instance's Capacity Reservation preference defaults to open, which enables
	// it to run in any open Capacity Reservation that has matching attributes (instance
	// type, platform, Availability Zone).
	CapacityReservationSpecification?: null | #LaunchTemplateCapacityReservationSpecificationRequest @go(,*LaunchTemplateCapacityReservationSpecificationRequest)

	// The CPU options for the instance. For more information, see Optimizing CPU
	// Options (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	CpuOptions?: null | #LaunchTemplateCpuOptionsRequest @go(,*LaunchTemplateCpuOptionsRequest)

	// The credit option for CPU usage of the instance. Valid for T2, T3, or T3a
	// instances only.
	CreditSpecification?: null | #CreditSpecificationRequest @go(,*CreditSpecificationRequest)

	// If you set this parameter to true, you can't terminate the instance using
	// the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute
	// after launch, use ModifyInstanceAttribute (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html).
	// Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate,
	// you can terminate the instance by running the shutdown command from the instance.
	DisableApiTermination?: null | bool @go(,*bool)

	// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization
	// provides dedicated throughput to Amazon EBS and an optimized configuration
	// stack to provide optimal Amazon EBS I/O performance. This optimization isn't
	// available with all instance types. Additional usage charges apply when using
	// an EBS-optimized instance.
	EbsOptimized?: null | bool @go(,*bool)

	// An elastic GPU to associate with the instance.
	ElasticGpuSpecifications: [...null | #ElasticGpuSpecification] @go(,[]*ElasticGpuSpecification)

	// The elastic inference accelerator for the instance.
	ElasticInferenceAccelerators: [...null | #LaunchTemplateElasticInferenceAccelerator] @go(,[]*LaunchTemplateElasticInferenceAccelerator)

	// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
	// For more information, see What is Amazon Web Services Nitro Enclaves? (https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html)
	// in the Amazon Web Services Nitro Enclaves User Guide.
	//
	// You can't enable Amazon Web Services Nitro Enclaves and hibernation on the
	// same instance.
	EnclaveOptions?: null | #LaunchTemplateEnclaveOptionsRequest @go(,*LaunchTemplateEnclaveOptionsRequest)

	// Indicates whether an instance is enabled for hibernation. This parameter
	// is valid only if the instance meets the hibernation prerequisites (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites).
	// For more information, see Hibernate your instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	HibernationOptions?: null | #LaunchTemplateHibernationOptionsRequest @go(,*LaunchTemplateHibernationOptionsRequest)

	// The name or Amazon Resource Name (ARN) of an IAM instance profile.
	IamInstanceProfile?: null | #LaunchTemplateIamInstanceProfileSpecificationRequest @go(,*LaunchTemplateIamInstanceProfileSpecificationRequest)

	// The ID of the AMI.
	ImageId?: null | string @go(,*string)

	// Indicates whether an instance stops or terminates when you initiate shutdown
	// from the instance (using the operating system command for system shutdown).
	//
	// Default: stop
	InstanceInitiatedShutdownBehavior?: null | string @go(,*string)

	// The market (purchasing) option for the instances.
	InstanceMarketOptions?: null | #LaunchTemplateInstanceMarketOptionsRequest @go(,*LaunchTemplateInstanceMarketOptionsRequest)

	// The instance type. For more information, see Instance Types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	InstanceType?: null | string @go(,*string)

	// The ID of the kernel.
	//
	// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
	// information, see User Provided Kernels (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	KernelId?: null | string @go(,*string)

	// The name of the key pair. You can create a key pair using CreateKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html)
	// or ImportKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html).
	//
	// If you do not specify a key pair, you can't connect to the instance unless
	// you choose an AMI that is configured to allow users another way to log in.
	KeyName?: null | string @go(,*string)

	// The license configurations.
	LicenseSpecifications: [...null | #LaunchTemplateLicenseConfigurationRequest] @go(,[]*LaunchTemplateLicenseConfigurationRequest)

	// The metadata options for the instance. For more information, see Instance
	// metadata and user data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	MetadataOptions?: null | #LaunchTemplateInstanceMetadataOptionsRequest @go(,*LaunchTemplateInstanceMetadataOptionsRequest)

	// The monitoring for the instance.
	Monitoring?: null | #LaunchTemplatesMonitoringRequest @go(,*LaunchTemplatesMonitoringRequest)

	// One or more network interfaces. If you specify a network interface, you must
	// specify any security groups and subnets as part of the network interface.
	NetworkInterfaces: [...null | #LaunchTemplateInstanceNetworkInterfaceSpecificationRequest] @go(,[]*LaunchTemplateInstanceNetworkInterfaceSpecificationRequest)

	// The placement for the instance.
	Placement?: null | #LaunchTemplatePlacementRequest @go(,*LaunchTemplatePlacementRequest)

	// The ID of the RAM disk.
	//
	// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
	// information, see User Provided Kernels (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	RamDiskId?: null | string @go(,*string)

	// One or more security group IDs. You can create a security group using CreateSecurityGroup
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html).
	// You cannot specify both a security group ID and security name in the same
	// request.
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// [EC2-Classic, default VPC] One or more security group names. For a nondefault
	// VPC, you must use security group IDs instead. You cannot specify both a security
	// group ID and security name in the same request.
	SecurityGroups: [...null | string] @go(,[]*string)

	// The tags to apply to the resources during launch. You can only tag instances
	// and volumes on launch. The specified tags are applied to all instances or
	// volumes that are created during launch. To tag a resource after it has been
	// created, see CreateTags (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
	TagSpecifications: [...null | #LaunchTemplateTagSpecificationRequest] @go(,[]*LaunchTemplateTagSpecificationRequest)

	// The Base64-encoded user data to make available to the instance. For more
	// information, see Running Commands on Your Linux Instance at Launch (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html)
	// (Linux) and Adding User Data (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data)
	// (Windows).
	UserData?: null | string @go(,*string)
}

// Contains the parameters for RequestSpotFleet.
#RequestSpotFleetInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The configuration for the Spot Fleet request.
	//
	// SpotFleetRequestConfig is a required field
	SpotFleetRequestConfig?: null | #SpotFleetRequestConfigData @go(,*SpotFleetRequestConfigData)
}

// Contains the output of RequestSpotFleet.
#RequestSpotFleetOutput: {
	// The ID of the Spot Fleet request.
	SpotFleetRequestId?: null | string @go(,*string)
}

// Contains the parameters for RequestSpotInstances.
#RequestSpotInstancesInput: {
	// The user-specified name for a logical grouping of requests.
	//
	// When you specify an Availability Zone group in a Spot Instance request, all
	// Spot Instances in the request are launched in the same Availability Zone.
	// Instance proximity is maintained with this parameter, but the choice of Availability
	// Zone is not. The group applies only to requests for Spot Instances of the
	// same instance type. Any additional Spot Instance requests that are specified
	// with the same Availability Zone group name are launched in that same Availability
	// Zone, as long as at least one instance from the group is still active.
	//
	// If there is no active instance running in the Availability Zone group that
	// you specify for a new Spot Instance request (all instances are terminated,
	// the request is expired, or the maximum price you specified falls below current
	// Spot price), then Amazon EC2 launches the instance in any Availability Zone
	// where the constraint can be met. Consequently, the subsequent set of Spot
	// Instances could be placed in a different zone from the original request,
	// even if you specified the same Availability Zone group.
	//
	// Default: Instances are launched in any available Availability Zone.
	AvailabilityZoneGroup?: null | string @go(,*string)

	// Deprecated.
	BlockDurationMinutes?: null | int64 @go(,*int64)

	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html)
	// in the Amazon EC2 User Guide for Linux Instances.
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The maximum number of Spot Instances to launch.
	//
	// Default: 1
	InstanceCount?: null | int64 @go(,*int64)

	// The behavior when a Spot Instance is interrupted. The default is terminate.
	InstanceInterruptionBehavior?: null | string @go(,*string)

	// The instance launch group. Launch groups are Spot Instances that launch together
	// and terminate together.
	//
	// Default: Instances are launched and terminated individually
	LaunchGroup?: null | string @go(,*string)

	// The launch specification.
	LaunchSpecification?: null | #RequestSpotLaunchSpecification @go(,*RequestSpotLaunchSpecification)

	// The maximum price per hour that you are willing to pay for a Spot Instance.
	// The default is the On-Demand price.
	SpotPrice?: null | string @go(,*string)

	// The key-value pair for tagging the Spot Instance request on creation. The
	// value for ResourceType must be spot-instances-request, otherwise the Spot
	// Instance request fails. To tag the Spot Instance request after it has been
	// created, see CreateTags (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The Spot Instance request type.
	//
	// Default: one-time
	Type?: null | string @go(,*string)

	// The start date of the request. If this is a one-time request, the request
	// becomes active at this date and time and remains active until all instances
	// launch, the request expires, or the request is canceled. If the request is
	// persistent, the request becomes active at this date and time and remains
	// active until it expires or is canceled.
	//
	// The specified start date and time cannot be equal to the current date and
	// time. You must specify a start date and time that occurs after the current
	// date and time.
	ValidFrom?: null | time.Time @go(,*time.Time)

	// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ).
	//
	//    * For a persistent request, the request remains active until the ValidUntil
	//    date and time is reached. Otherwise, the request remains active until
	//    you cancel it.
	//
	//    * For a one-time request, the request remains active until all instances
	//    launch, the request is canceled, or the ValidUntil date and time is reached.
	//    By default, the request is valid for 7 days from the date the request
	//    was created.
	ValidUntil?: null | time.Time @go(,*time.Time)
}

// Contains the output of RequestSpotInstances.
#RequestSpotInstancesOutput: {
	// One or more Spot Instance requests.
	SpotInstanceRequests: [...null | #SpotInstanceRequest] @go(,[]*SpotInstanceRequest)
}

// Describes the launch specification for an instance.
#RequestSpotLaunchSpecification: {
	// Deprecated.
	AddressingType?: null | string @go(,*string)

	// One or more block device mapping entries. You can't specify both a snapshot
	// ID and an encryption value. This is because only blank volumes can be encrypted
	// on creation. If a snapshot is the basis for a volume, it is not blank and
	// its encryption status is used for the volume encryption status.
	BlockDeviceMappings: [...null | #BlockDeviceMapping] @go(,[]*BlockDeviceMapping)

	// Indicates whether the instance is optimized for EBS I/O. This optimization
	// provides dedicated throughput to Amazon EBS and an optimized configuration
	// stack to provide optimal EBS I/O performance. This optimization isn't available
	// with all instance types. Additional usage charges apply when using an EBS
	// Optimized instance.
	//
	// Default: false
	EbsOptimized?: null | bool @go(,*bool)

	// The IAM instance profile.
	IamInstanceProfile?: null | #IamInstanceProfileSpecification @go(,*IamInstanceProfileSpecification)

	// The ID of the AMI.
	ImageId?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The ID of the kernel.
	KernelId?: null | string @go(,*string)

	// The name of the key pair.
	KeyName?: null | string @go(,*string)

	// Indicates whether basic or detailed monitoring is enabled for the instance.
	//
	// Default: Disabled
	Monitoring?: null | #RunInstancesMonitoringEnabled @go(,*RunInstancesMonitoringEnabled)

	// One or more network interfaces. If you specify a network interface, you must
	// specify subnet IDs and security group IDs using the network interface.
	NetworkInterfaces: [...null | #InstanceNetworkInterfaceSpecification] @go(,[]*InstanceNetworkInterfaceSpecification)

	// The placement information for the instance.
	Placement?: null | #SpotPlacement @go(,*SpotPlacement)

	// The ID of the RAM disk.
	RamdiskId?: null | string @go(,*string)

	// One or more security group IDs.
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// One or more security groups. When requesting instances in a VPC, you must
	// specify the IDs of the security groups. When requesting instances in EC2-Classic,
	// you can specify the names or the IDs of the security groups.
	SecurityGroups: [...null | string] @go(,[]*string)

	// The ID of the subnet in which to launch the instance.
	SubnetId?: null | string @go(,*string)

	// The Base64-encoded user data for the instance. User data is limited to 16
	// KB.
	UserData?: null | string @go(,*string)
}

// Describes a launch request for one or more instances, and includes owner,
// requester, and security group information that applies to all instances in
// the launch request.
#Reservation: {
	// [EC2-Classic only] The security groups.
	Groups: [...null | #GroupIdentifier] @go(,[]*GroupIdentifier)

	// The instances.
	Instances: [...null | #Instance] @go(,[]*Instance)

	// The ID of the Amazon Web Services account that owns the reservation.
	OwnerId?: null | string @go(,*string)

	// The ID of the requester that launched the instances on your behalf (for example,
	// Amazon Web Services Management Console or Auto Scaling).
	RequesterId?: null | string @go(,*string)

	// The ID of the reservation.
	ReservationId?: null | string @go(,*string)
}

// The cost associated with the Reserved Instance.
#ReservationValue: {
	// The hourly rate of the reservation.
	HourlyPrice?: null | string @go(,*string)

	// The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice
	// * number of hours remaining).
	RemainingTotalValue?: null | string @go(,*string)

	// The remaining upfront cost of the reservation.
	RemainingUpfrontValue?: null | string @go(,*string)
}

// Describes the limit price of a Reserved Instance offering.
#ReservedInstanceLimitPrice: {
	// Used for Reserved Instance Marketplace offerings. Specifies the limit price
	// on the total order (instanceCount * price).
	Amount?: null | float64 @go(,*float64)

	// The currency in which the limitPrice amount is specified. At this time, the
	// only supported currency is USD.
	CurrencyCode?: null | string @go(,*string)
}

// The total value of the Convertible Reserved Instance.
#ReservedInstanceReservationValue: {
	// The total value of the Convertible Reserved Instance that you are exchanging.
	ReservationValue?: null | #ReservationValue @go(,*ReservationValue)

	// The ID of the Convertible Reserved Instance that you are exchanging.
	ReservedInstanceId?: null | string @go(,*string)
}

// Describes a Reserved Instance.
#ReservedInstances: {
	// The Availability Zone in which the Reserved Instance can be used.
	AvailabilityZone?: null | string @go(,*string)

	// The currency of the Reserved Instance. It's specified using ISO 4217 standard
	// currency codes. At this time, the only supported currency is USD.
	CurrencyCode?: null | string @go(,*string)

	// The duration of the Reserved Instance, in seconds.
	Duration?: null | int64 @go(,*int64)

	// The time when the Reserved Instance expires.
	End?: null | time.Time @go(,*time.Time)

	// The purchase price of the Reserved Instance.
	FixedPrice?: null | float64 @go(,*float64)

	// The number of reservations purchased.
	InstanceCount?: null | int64 @go(,*int64)

	// The tenancy of the instance.
	InstanceTenancy?: null | string @go(,*string)

	// The instance type on which the Reserved Instance can be used.
	InstanceType?: null | string @go(,*string)

	// The offering class of the Reserved Instance.
	OfferingClass?: null | string @go(,*string)

	// The Reserved Instance offering type.
	OfferingType?: null | string @go(,*string)

	// The Reserved Instance product platform description.
	ProductDescription?: null | string @go(,*string)

	// The recurring charge tag assigned to the resource.
	RecurringCharges: [...null | #RecurringCharge] @go(,[]*RecurringCharge)

	// The ID of the Reserved Instance.
	ReservedInstancesId?: null | string @go(,*string)

	// The scope of the Reserved Instance.
	Scope?: null | string @go(,*string)

	// The date and time the Reserved Instance started.
	Start?: null | time.Time @go(,*time.Time)

	// The state of the Reserved Instance purchase.
	State?: null | string @go(,*string)

	// Any tags assigned to the resource.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The usage price of the Reserved Instance, per hour.
	UsagePrice?: null | float64 @go(,*float64)
}

// Describes the configuration settings for the modified Reserved Instances.
#ReservedInstancesConfiguration: {
	// The Availability Zone for the modified Reserved Instances.
	AvailabilityZone?: null | string @go(,*string)

	// The number of modified Reserved Instances.
	//
	// This is a required field for a request.
	InstanceCount?: null | int64 @go(,*int64)

	// The instance type for the modified Reserved Instances.
	InstanceType?: null | string @go(,*string)

	// The network platform of the modified Reserved Instances, which is either
	// EC2-Classic or EC2-VPC.
	Platform?: null | string @go(,*string)

	// Whether the Reserved Instance is applied to instances in a Region or instances
	// in a specific Availability Zone.
	Scope?: null | string @go(,*string)
}

// Describes the ID of a Reserved Instance.
#ReservedInstancesId: {
	// The ID of the Reserved Instance.
	ReservedInstancesId?: null | string @go(,*string)
}

// Describes a Reserved Instance listing.
#ReservedInstancesListing: {
	// A unique, case-sensitive key supplied by the client to ensure that the request
	// is idempotent. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The time the listing was created.
	CreateDate?: null | time.Time @go(,*time.Time)

	// The number of instances in this state.
	InstanceCounts: [...null | #InstanceCount] @go(,[]*InstanceCount)

	// The price of the Reserved Instance listing.
	PriceSchedules: [...null | #PriceSchedule] @go(,[]*PriceSchedule)

	// The ID of the Reserved Instance.
	ReservedInstancesId?: null | string @go(,*string)

	// The ID of the Reserved Instance listing.
	ReservedInstancesListingId?: null | string @go(,*string)

	// The status of the Reserved Instance listing.
	Status?: null | string @go(,*string)

	// The reason for the current status of the Reserved Instance listing. The response
	// can be blank.
	StatusMessage?: null | string @go(,*string)

	// Any tags assigned to the resource.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The last modified timestamp of the listing.
	UpdateDate?: null | time.Time @go(,*time.Time)
}

// Describes a Reserved Instance modification.
#ReservedInstancesModification: {
	// A unique, case-sensitive key supplied by the client to ensure that the request
	// is idempotent. For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// The time when the modification request was created.
	CreateDate?: null | time.Time @go(,*time.Time)

	// The time for the modification to become effective.
	EffectiveDate?: null | time.Time @go(,*time.Time)

	// Contains target configurations along with their corresponding new Reserved
	// Instance IDs.
	ModificationResults: [...null | #ReservedInstancesModificationResult] @go(,[]*ReservedInstancesModificationResult)

	// The IDs of one or more Reserved Instances.
	ReservedInstancesIds: [...null | #ReservedInstancesId] @go(,[]*ReservedInstancesId)

	// A unique ID for the Reserved Instance modification.
	ReservedInstancesModificationId?: null | string @go(,*string)

	// The status of the Reserved Instances modification request.
	Status?: null | string @go(,*string)

	// The reason for the status.
	StatusMessage?: null | string @go(,*string)

	// The time when the modification request was last updated.
	UpdateDate?: null | time.Time @go(,*time.Time)
}

// Describes the modification request/s.
#ReservedInstancesModificationResult: {
	// The ID for the Reserved Instances that were created as part of the modification
	// request. This field is only available when the modification is fulfilled.
	ReservedInstancesId?: null | string @go(,*string)

	// The target Reserved Instances configurations supplied as part of the modification
	// request.
	TargetConfiguration?: null | #ReservedInstancesConfiguration @go(,*ReservedInstancesConfiguration)
}

// Describes a Reserved Instance offering.
#ReservedInstancesOffering: {
	// The Availability Zone in which the Reserved Instance can be used.
	AvailabilityZone?: null | string @go(,*string)

	// The currency of the Reserved Instance offering you are purchasing. It's specified
	// using ISO 4217 standard currency codes. At this time, the only supported
	// currency is USD.
	CurrencyCode?: null | string @go(,*string)

	// The duration of the Reserved Instance, in seconds.
	Duration?: null | int64 @go(,*int64)

	// The purchase price of the Reserved Instance.
	FixedPrice?: null | float64 @go(,*float64)

	// The tenancy of the instance.
	InstanceTenancy?: null | string @go(,*string)

	// The instance type on which the Reserved Instance can be used.
	InstanceType?: null | string @go(,*string)

	// Indicates whether the offering is available through the Reserved Instance
	// Marketplace (resale) or Amazon Web Services. If it's a Reserved Instance
	// Marketplace offering, this is true.
	Marketplace?: null | bool @go(,*bool)

	// If convertible it can be exchanged for Reserved Instances of the same or
	// higher monetary value, with different configurations. If standard, it is
	// not possible to perform an exchange.
	OfferingClass?: null | string @go(,*string)

	// The Reserved Instance offering type.
	OfferingType?: null | string @go(,*string)

	// The pricing details of the Reserved Instance offering.
	PricingDetails: [...null | #PricingDetail] @go(,[]*PricingDetail)

	// The Reserved Instance product platform description.
	ProductDescription?: null | string @go(,*string)

	// The recurring charge tag assigned to the resource.
	RecurringCharges: [...null | #RecurringCharge] @go(,[]*RecurringCharge)

	// The ID of the Reserved Instance offering. This is the offering ID used in
	// GetReservedInstancesExchangeQuote to confirm that an exchange can be made.
	ReservedInstancesOfferingId?: null | string @go(,*string)

	// Whether the Reserved Instance is applied to instances in a Region or an Availability
	// Zone.
	Scope?: null | string @go(,*string)

	// The usage price of the Reserved Instance, per hour.
	UsagePrice?: null | float64 @go(,*float64)
}

#ResetAddressAttributeInput: {
	// [EC2-VPC] The allocation ID.
	//
	// AllocationId is a required field
	AllocationId?: null | string @go(,*string)

	// The attribute of the IP address.
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#ResetAddressAttributeOutput: {
	// Information about the IP address.
	Address?: null | #AddressAttribute @go(,*AddressAttribute)
}

#ResetEbsDefaultKmsKeyIdInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#ResetEbsDefaultKmsKeyIdOutput: {
	// The Amazon Resource Name (ARN) of the default KMS key for EBS encryption
	// by default.
	KmsKeyId?: null | string @go(,*string)
}

#ResetFpgaImageAttributeInput: {
	// The attribute.
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AFI.
	//
	// FpgaImageId is a required field
	FpgaImageId?: null | string @go(,*string)
}

#ResetFpgaImageAttributeOutput: {
	// Is true if the request succeeds, and an error otherwise.
	Return?: null | bool @go(,*bool)
}

// Contains the parameters for ResetImageAttribute.
#ResetImageAttributeInput: {
	// The attribute to reset (currently you can only reset the launch permission
	// attribute).
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the AMI.
	//
	// ImageId is a required field
	ImageId?: null | string @go(,*string)
}

#ResetInstanceAttributeInput: {
	// The attribute to reset.
	//
	// You can only reset the following attributes: kernel | ramdisk | sourceDestCheck.
	// To change an instance attribute, use ModifyInstanceAttribute.
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)
}

// Contains the parameters for ResetNetworkInterfaceAttribute.
#ResetNetworkInterfaceAttributeInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)

	// The source/destination checking attribute. Resets the value to true.
	SourceDestCheck?: null | string @go(,*string)
}

#ResetSnapshotAttributeInput: {
	// The attribute to reset. Currently, only the attribute for permission to create
	// volumes can be reset.
	//
	// Attribute is a required field
	Attribute?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the snapshot.
	//
	// SnapshotId is a required field
	SnapshotId?: null | string @go(,*string)
}

// Describes the error that's returned when you cannot delete a launch template
// version.
#ResponseError: {
	// The error code.
	Code?: null | string @go(,*string)

	// The error message, if applicable.
	Message?: null | string @go(,*string)
}

// The information for a launch template.
#ResponseLaunchTemplateData: {
	// The block device mappings.
	BlockDeviceMappings: [...null | #LaunchTemplateBlockDeviceMapping] @go(,[]*LaunchTemplateBlockDeviceMapping)

	// Information about the Capacity Reservation targeting option.
	CapacityReservationSpecification?: null | #LaunchTemplateCapacityReservationSpecificationResponse @go(,*LaunchTemplateCapacityReservationSpecificationResponse)

	// The CPU options for the instance. For more information, see Optimizing CPU
	// options (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	CpuOptions?: null | #LaunchTemplateCpuOptions @go(,*LaunchTemplateCpuOptions)

	// The credit option for CPU usage of the instance.
	CreditSpecification?: null | #CreditSpecification @go(,*CreditSpecification)

	// If set to true, indicates that the instance cannot be terminated using the
	// Amazon EC2 console, command line tool, or API.
	DisableApiTermination?: null | bool @go(,*bool)

	// Indicates whether the instance is optimized for Amazon EBS I/O.
	EbsOptimized?: null | bool @go(,*bool)

	// The elastic GPU specification.
	ElasticGpuSpecifications: [...null | #ElasticGpuSpecificationResponse] @go(,[]*ElasticGpuSpecificationResponse)

	// The elastic inference accelerator for the instance.
	ElasticInferenceAccelerators: [...null | #LaunchTemplateElasticInferenceAcceleratorResponse] @go(,[]*LaunchTemplateElasticInferenceAcceleratorResponse)

	// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
	EnclaveOptions?: null | #LaunchTemplateEnclaveOptions @go(,*LaunchTemplateEnclaveOptions)

	// Indicates whether an instance is configured for hibernation. For more information,
	// see Hibernate your instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	HibernationOptions?: null | #LaunchTemplateHibernationOptions @go(,*LaunchTemplateHibernationOptions)

	// The IAM instance profile.
	IamInstanceProfile?: null | #LaunchTemplateIamInstanceProfileSpecification @go(,*LaunchTemplateIamInstanceProfileSpecification)

	// The ID of the AMI that was used to launch the instance.
	ImageId?: null | string @go(,*string)

	// Indicates whether an instance stops or terminates when you initiate shutdown
	// from the instance (using the operating system command for system shutdown).
	InstanceInitiatedShutdownBehavior?: null | string @go(,*string)

	// The market (purchasing) option for the instances.
	InstanceMarketOptions?: null | #LaunchTemplateInstanceMarketOptions @go(,*LaunchTemplateInstanceMarketOptions)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The ID of the kernel, if applicable.
	KernelId?: null | string @go(,*string)

	// The name of the key pair.
	KeyName?: null | string @go(,*string)

	// The license configurations.
	LicenseSpecifications: [...null | #LaunchTemplateLicenseConfiguration] @go(,[]*LaunchTemplateLicenseConfiguration)

	// The metadata options for the instance. For more information, see Instance
	// metadata and user data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	MetadataOptions?: null | #LaunchTemplateInstanceMetadataOptions @go(,*LaunchTemplateInstanceMetadataOptions)

	// The monitoring for the instance.
	Monitoring?: null | #LaunchTemplatesMonitoring @go(,*LaunchTemplatesMonitoring)

	// The network interfaces.
	NetworkInterfaces: [...null | #LaunchTemplateInstanceNetworkInterfaceSpecification] @go(,[]*LaunchTemplateInstanceNetworkInterfaceSpecification)

	// The placement of the instance.
	Placement?: null | #LaunchTemplatePlacement @go(,*LaunchTemplatePlacement)

	// The ID of the RAM disk, if applicable.
	RamDiskId?: null | string @go(,*string)

	// The security group IDs.
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// The security group names.
	SecurityGroups: [...null | string] @go(,[]*string)

	// The tags.
	TagSpecifications: [...null | #LaunchTemplateTagSpecification] @go(,[]*LaunchTemplateTagSpecification)

	// The user data for the instance.
	UserData?: null | string @go(,*string)
}

#RestoreAddressToClassicInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Elastic IP address.
	//
	// PublicIp is a required field
	PublicIp?: null | string @go(,*string)
}

#RestoreAddressToClassicOutput: {
	// The Elastic IP address.
	PublicIp?: null | string @go(,*string)

	// The move status for the IP address.
	Status?: null | string @go(,*string)
}

#RestoreManagedPrefixListVersionInput: {
	// The current version number for the prefix list.
	//
	// CurrentVersion is a required field
	CurrentVersion?: null | int64 @go(,*int64)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the prefix list.
	//
	// PrefixListId is a required field
	PrefixListId?: null | string @go(,*string)

	// The version to restore.
	//
	// PreviousVersion is a required field
	PreviousVersion?: null | int64 @go(,*int64)
}

#RestoreManagedPrefixListVersionOutput: {
	// Information about the prefix list.
	PrefixList?: null | #ManagedPrefixList @go(,*ManagedPrefixList)
}

#RevokeClientVpnIngressInput: {
	// The ID of the Active Directory group for which to revoke access.
	AccessGroupId?: null | string @go(,*string)

	// The ID of the Client VPN endpoint with which the authorization rule is associated.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Indicates whether access should be revoked for all clients.
	RevokeAllGroups?: null | bool @go(,*bool)

	// The IPv4 address range, in CIDR notation, of the network for which access
	// is being removed.
	//
	// TargetNetworkCidr is a required field
	TargetNetworkCidr?: null | string @go(,*string)
}

#RevokeClientVpnIngressOutput: {
	// The current state of the authorization rule.
	Status?: null | #ClientVpnAuthorizationRuleStatus @go(,*ClientVpnAuthorizationRuleStatus)
}

#RevokeSecurityGroupEgressInput: {
	// Not supported. Use a set of IP permissions to specify the CIDR.
	CidrIp?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Not supported. Use a set of IP permissions to specify the port.
	FromPort?: null | int64 @go(,*int64)

	// The ID of the security group.
	//
	// GroupId is a required field
	GroupId?: null | string @go(,*string)

	// The sets of IP permissions. You can't specify a destination security group
	// and a CIDR IP address range in the same set of permissions.
	IpPermissions: [...null | #IpPermission] @go(,[]*IpPermission)

	// Not supported. Use a set of IP permissions to specify the protocol name or
	// number.
	IpProtocol?: null | string @go(,*string)

	// The IDs of the security group rules.
	SecurityGroupRuleIds: [...null | string] @go(,[]*string)

	// Not supported. Use a set of IP permissions to specify a destination security
	// group.
	SourceSecurityGroupName?: null | string @go(,*string)

	// Not supported. Use a set of IP permissions to specify a destination security
	// group.
	SourceSecurityGroupOwnerId?: null | string @go(,*string)

	// Not supported. Use a set of IP permissions to specify the port.
	ToPort?: null | int64 @go(,*int64)
}

#RevokeSecurityGroupEgressOutput: {
	// Returns true if the request succeeds; otherwise, returns an error.
	Return?: null | bool @go(,*bool)

	// The outbound rules that were unknown to the service. In some cases, unknownIpPermissionSet
	// might be in a different format from the request parameter.
	UnknownIpPermissions: [...null | #IpPermission] @go(,[]*IpPermission)
}

#RevokeSecurityGroupIngressInput: {
	// The CIDR IP address range. You can't specify this parameter when specifying
	// a source security group.
	CidrIp?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The start of port range for the TCP and UDP protocols, or an ICMP type number.
	// For the ICMP type number, use -1 to specify all ICMP types.
	FromPort?: null | int64 @go(,*int64)

	// The ID of the security group. You must specify either the security group
	// ID or the security group name in the request. For security groups in a nondefault
	// VPC, you must specify the security group ID.
	GroupId?: null | string @go(,*string)

	// [EC2-Classic, default VPC] The name of the security group. You must specify
	// either the security group ID or the security group name in the request.
	GroupName?: null | string @go(,*string)

	// The sets of IP permissions. You can't specify a source security group and
	// a CIDR IP address range in the same set of permissions.
	IpPermissions: [...null | #IpPermission] @go(,[]*IpPermission)

	// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
	// Use -1 to specify all.
	IpProtocol?: null | string @go(,*string)

	// The IDs of the security group rules.
	SecurityGroupRuleIds: [...null | string] @go(,[]*string)

	// [EC2-Classic, default VPC] The name of the source security group. You can't
	// specify this parameter in combination with the following parameters: the
	// CIDR IP address range, the start of the port range, the IP protocol, and
	// the end of the port range. For EC2-VPC, the source security group must be
	// in the same VPC. To revoke a specific rule for an IP protocol and port range,
	// use a set of IP permissions instead.
	SourceSecurityGroupName?: null | string @go(,*string)

	// [EC2-Classic] The Amazon Web Services account ID of the source security group,
	// if the source security group is in a different account. You can't specify
	// this parameter in combination with the following parameters: the CIDR IP
	// address range, the IP protocol, the start of the port range, and the end
	// of the port range. To revoke a specific rule for an IP protocol and port
	// range, use a set of IP permissions instead.
	SourceSecurityGroupOwnerId?: null | string @go(,*string)

	// The end of port range for the TCP and UDP protocols, or an ICMP code number.
	// For the ICMP code number, use -1 to specify all ICMP codes for the ICMP type.
	ToPort?: null | int64 @go(,*int64)
}

#RevokeSecurityGroupIngressOutput: {
	// Returns true if the request succeeds; otherwise, returns an error.
	Return?: null | bool @go(,*bool)

	// The inbound rules that were unknown to the service. In some cases, unknownIpPermissionSet
	// might be in a different format from the request parameter.
	UnknownIpPermissions: [...null | #IpPermission] @go(,[]*IpPermission)
}

// Describes a route in a route table.
#Route: {
	// The ID of the carrier gateway.
	CarrierGatewayId?: null | string @go(,*string)

	// The IPv4 CIDR block used for the destination match.
	DestinationCidrBlock?: null | string @go(,*string)

	// The IPv6 CIDR block used for the destination match.
	DestinationIpv6CidrBlock?: null | string @go(,*string)

	// The prefix of the Amazon Web Service.
	DestinationPrefixListId?: null | string @go(,*string)

	// The ID of the egress-only internet gateway.
	EgressOnlyInternetGatewayId?: null | string @go(,*string)

	// The ID of a gateway attached to your VPC.
	GatewayId?: null | string @go(,*string)

	// The ID of a NAT instance in your VPC.
	InstanceId?: null | string @go(,*string)

	// The ID of Amazon Web Services account that owns the instance.
	InstanceOwnerId?: null | string @go(,*string)

	// The ID of the local gateway.
	LocalGatewayId?: null | string @go(,*string)

	// The ID of a NAT gateway.
	NatGatewayId?: null | string @go(,*string)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// Describes how the route was created.
	//
	//    * CreateRouteTable - The route was automatically created when the route
	//    table was created.
	//
	//    * CreateRoute - The route was manually added to the route table.
	//
	//    * EnableVgwRoutePropagation - The route was propagated by route propagation.
	Origin?: null | string @go(,*string)

	// The state of the route. The blackhole state indicates that the route's target
	// isn't available (for example, the specified gateway isn't attached to the
	// VPC, or the specified NAT instance has been terminated).
	State?: null | string @go(,*string)

	// The ID of a transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The ID of a VPC peering connection.
	VpcPeeringConnectionId?: null | string @go(,*string)
}

// Describes a route table.
#RouteTable: {
	// The associations between the route table and one or more subnets or a gateway.
	Associations: [...null | #RouteTableAssociation] @go(,[]*RouteTableAssociation)

	// The ID of the Amazon Web Services account that owns the route table.
	OwnerId?: null | string @go(,*string)

	// Any virtual private gateway (VGW) propagating routes.
	PropagatingVgws: [...null | #PropagatingVgw] @go(,[]*PropagatingVgw)

	// The ID of the route table.
	RouteTableId?: null | string @go(,*string)

	// The routes in the route table.
	Routes: [...null | #Route] @go(,[]*Route)

	// Any tags assigned to the route table.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes an association between a route table and a subnet or gateway.
#RouteTableAssociation: {
	// The state of the association.
	AssociationState?: null | #RouteTableAssociationState @go(,*RouteTableAssociationState)

	// The ID of the internet gateway or virtual private gateway.
	GatewayId?: null | string @go(,*string)

	// Indicates whether this is the main route table.
	Main?: null | bool @go(,*bool)

	// The ID of the association.
	RouteTableAssociationId?: null | string @go(,*string)

	// The ID of the route table.
	RouteTableId?: null | string @go(,*string)

	// The ID of the subnet. A subnet ID is not returned for an implicit association.
	SubnetId?: null | string @go(,*string)
}

// Describes the state of an association between a route table and a subnet
// or gateway.
#RouteTableAssociationState: {
	// The state of the association.
	State?: null | string @go(,*string)

	// The status message, if applicable.
	StatusMessage?: null | string @go(,*string)
}

#RunInstancesInput: {
	// Reserved.
	AdditionalInfo?: null | string @go(,*string)

	// The block device mapping, which defines the EBS volumes and instance store
	// volumes to attach to the instance at launch. For more information, see Block
	// device mappings (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)
	// in the Amazon EC2 User Guide.
	BlockDeviceMappings: [...null | #BlockDeviceMapping] @go(,[]*BlockDeviceMapping)

	// Information about the Capacity Reservation targeting option. If you do not
	// specify this parameter, the instance's Capacity Reservation preference defaults
	// to open, which enables it to run in any open Capacity Reservation that has
	// matching attributes (instance type, platform, Availability Zone).
	CapacityReservationSpecification?: null | #CapacityReservationSpecification @go(,*CapacityReservationSpecification)

	// Unique, case-sensitive identifier you provide to ensure the idempotency of
	// the request. If you do not specify a client token, a randomly generated token
	// is used for the request to ensure idempotency.
	//
	// For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	//
	// Constraints: Maximum 64 ASCII characters
	ClientToken?: null | string @go(,*string)

	// The CPU options for the instance. For more information, see Optimizing CPU
	// options (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html)
	// in the Amazon EC2 User Guide.
	CpuOptions?: null | #CpuOptionsRequest @go(,*CpuOptionsRequest)

	// The credit option for CPU usage of the burstable performance instance. Valid
	// values are standard and unlimited. To change this attribute after launch,
	// use ModifyInstanceCreditSpecification (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html).
	// For more information, see Burstable performance instances (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html)
	// in the Amazon EC2 User Guide.
	//
	// Default: standard (T2 instances) or unlimited (T3/T3a instances)
	CreditSpecification?: null | #CreditSpecificationRequest @go(,*CreditSpecificationRequest)

	// If you set this parameter to true, you can't terminate the instance using
	// the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute
	// after launch, use ModifyInstanceAttribute (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html).
	// Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate,
	// you can terminate the instance by running the shutdown command from the instance.
	//
	// Default: false
	DisableApiTermination?: null | bool @go(,*bool)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization
	// provides dedicated throughput to Amazon EBS and an optimized configuration
	// stack to provide optimal Amazon EBS I/O performance. This optimization isn't
	// available with all instance types. Additional usage charges apply when using
	// an EBS-optimized instance.
	//
	// Default: false
	EbsOptimized?: null | bool @go(,*bool)

	// An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource
	// that you can attach to your Windows instance to accelerate the graphics performance
	// of your applications. For more information, see Amazon EC2 Elastic GPUs (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html)
	// in the Amazon EC2 User Guide.
	ElasticGpuSpecification: [...null | #ElasticGpuSpecification] @go(,[]*ElasticGpuSpecification)

	// An elastic inference accelerator to associate with the instance. Elastic
	// inference accelerators are a resource you can attach to your Amazon EC2 instances
	// to accelerate your Deep Learning (DL) inference workloads.
	//
	// You cannot specify accelerators from different generations in the same request.
	ElasticInferenceAccelerators: [...null | #ElasticInferenceAccelerator] @go(,[]*ElasticInferenceAccelerator)

	// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
	// For more information, see What is Amazon Web Services Nitro Enclaves? (https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html)
	// in the Amazon Web Services Nitro Enclaves User Guide.
	//
	// You can't enable Amazon Web Services Nitro Enclaves and hibernation on the
	// same instance.
	EnclaveOptions?: null | #EnclaveOptionsRequest @go(,*EnclaveOptionsRequest)

	// Indicates whether an instance is enabled for hibernation. For more information,
	// see Hibernate your instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)
	// in the Amazon EC2 User Guide.
	//
	// You can't enable hibernation and Amazon Web Services Nitro Enclaves on the
	// same instance.
	HibernationOptions?: null | #HibernationOptionsRequest @go(,*HibernationOptionsRequest)

	// The name or Amazon Resource Name (ARN) of an IAM instance profile.
	IamInstanceProfile?: null | #IamInstanceProfileSpecification @go(,*IamInstanceProfileSpecification)

	// The ID of the AMI. An AMI ID is required to launch an instance and must be
	// specified here or in a launch template.
	ImageId?: null | string @go(,*string)

	// Indicates whether an instance stops or terminates when you initiate shutdown
	// from the instance (using the operating system command for system shutdown).
	//
	// Default: stop
	InstanceInitiatedShutdownBehavior?: null | string @go(,*string)

	// The market (purchasing) option for the instances.
	//
	// For RunInstances, persistent Spot Instance requests are only supported when
	// InstanceInterruptionBehavior is set to either hibernate or stop.
	InstanceMarketOptions?: null | #InstanceMarketOptionsRequest @go(,*InstanceMarketOptionsRequest)

	// The instance type. For more information, see Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide.
	//
	// Default: m1.small
	InstanceType?: null | string @go(,*string)

	// [EC2-VPC] The number of IPv6 addresses to associate with the primary network
	// interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
	// You cannot specify this option and the option to assign specific IPv6 addresses
	// in the same request. You can specify this option if you've specified a minimum
	// number of instances to launch.
	//
	// You cannot specify this option and the network interfaces option in the same
	// request.
	Ipv6AddressCount?: null | int64 @go(,*int64)

	// [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with
	// the primary network interface. You cannot specify this option and the option
	// to assign a number of IPv6 addresses in the same request. You cannot specify
	// this option if you've specified a minimum number of instances to launch.
	//
	// You cannot specify this option and the network interfaces option in the same
	// request.
	Ipv6Addresses: [...null | #InstanceIpv6Address] @go(,[]*InstanceIpv6Address)

	// The ID of the kernel.
	//
	// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
	// information, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
	// in the Amazon EC2 User Guide.
	KernelId?: null | string @go(,*string)

	// The name of the key pair. You can create a key pair using CreateKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html)
	// or ImportKeyPair (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html).
	//
	// If you do not specify a key pair, you can't connect to the instance unless
	// you choose an AMI that is configured to allow users another way to log in.
	KeyName?: null | string @go(,*string)

	// The launch template to use to launch the instances. Any parameters that you
	// specify in RunInstances override the same parameters in the launch template.
	// You can specify either the name or ID of a launch template, but not both.
	LaunchTemplate?: null | #LaunchTemplateSpecification @go(,*LaunchTemplateSpecification)

	// The license configurations.
	LicenseSpecifications: [...null | #LicenseConfigurationRequest] @go(,[]*LicenseConfigurationRequest)

	// The maximum number of instances to launch. If you specify more instances
	// than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches
	// the largest possible number of instances above MinCount.
	//
	// Constraints: Between 1 and the maximum number you're allowed for the specified
	// instance type. For more information about the default limits, and how to
	// request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2)
	// in the Amazon EC2 FAQ.
	//
	// MaxCount is a required field
	MaxCount?: null | int64 @go(,*int64)

	// The metadata options for the instance. For more information, see Instance
	// metadata and user data (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html).
	MetadataOptions?: null | #InstanceMetadataOptionsRequest @go(,*InstanceMetadataOptionsRequest)

	// The minimum number of instances to launch. If you specify a minimum that
	// is more instances than Amazon EC2 can launch in the target Availability Zone,
	// Amazon EC2 launches no instances.
	//
	// Constraints: Between 1 and the maximum number you're allowed for the specified
	// instance type. For more information about the default limits, and how to
	// request an increase, see How many instances can I run in Amazon EC2 (http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2)
	// in the Amazon EC2 General FAQ.
	//
	// MinCount is a required field
	MinCount?: null | int64 @go(,*int64)

	// Specifies whether detailed monitoring is enabled for the instance.
	Monitoring?: null | #RunInstancesMonitoringEnabled @go(,*RunInstancesMonitoringEnabled)

	// The network interfaces to associate with the instance. If you specify a network
	// interface, you must specify any security groups and subnets as part of the
	// network interface.
	NetworkInterfaces: [...null | #InstanceNetworkInterfaceSpecification] @go(,[]*InstanceNetworkInterfaceSpecification)

	// The placement for the instance.
	Placement?: null | #Placement @go(,*Placement)

	// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4
	// address range of the subnet.
	//
	// Only one private IP address can be designated as primary. You can't specify
	// this option if you've specified the option to designate a private IP address
	// as the primary IP address in a network interface specification. You cannot
	// specify this option if you're launching more than one instance in the request.
	//
	// You cannot specify this option and the network interfaces option in the same
	// request.
	PrivateIpAddress?: null | string @go(,*string)

	// The ID of the RAM disk to select. Some kernels require additional drivers
	// at launch. Check the kernel requirements for information about whether you
	// need to specify a RAM disk. To find kernel requirements, go to the Amazon
	// Web Services Resource Center and search for the kernel ID.
	//
	// We recommend that you use PV-GRUB instead of kernels and RAM disks. For more
	// information, see PV-GRUB (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html)
	// in the Amazon EC2 User Guide.
	RamdiskId?: null | string @go(,*string)

	// The IDs of the security groups. You can create a security group using CreateSecurityGroup
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html).
	//
	// If you specify a network interface, you must specify any security groups
	// as part of the network interface.
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// [EC2-Classic, default VPC] The names of the security groups. For a nondefault
	// VPC, you must use security group IDs instead.
	//
	// If you specify a network interface, you must specify any security groups
	// as part of the network interface.
	//
	// Default: Amazon EC2 uses the default security group.
	SecurityGroups: [...null | string] @go(,[]*string)

	// [EC2-VPC] The ID of the subnet to launch the instance into.
	//
	// If you specify a network interface, you must specify any subnets as part
	// of the network interface.
	SubnetId?: null | string @go(,*string)

	// The tags to apply to the resources during launch. You can only tag instances
	// and volumes on launch. The specified tags are applied to all instances or
	// volumes that are created during launch. To tag a resource after it has been
	// created, see CreateTags (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The user data to make available to the instance. For more information, see
	// Running commands on your Linux instance at launch (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html)
	// (Linux) and Adding User Data (https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data)
	// (Windows). If you are using a command line tool, base64-encoding is performed
	// for you, and you can load the text from a file. Otherwise, you must provide
	// base64-encoded text. User data is limited to 16 KB.
	UserData?: null | string @go(,*string)
}

// Describes the monitoring of an instance.
#RunInstancesMonitoringEnabled: {
	// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring
	// is enabled.
	//
	// Enabled is a required field
	Enabled?: null | bool @go(,*bool)
}

// Contains the parameters for RunScheduledInstances.
#RunScheduledInstancesInput: {
	// Unique, case-sensitive identifier that ensures the idempotency of the request.
	// For more information, see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The number of instances.
	//
	// Default: 1
	InstanceCount?: null | int64 @go(,*int64)

	// The launch specification. You must match the instance type, Availability
	// Zone, network, and platform of the schedule that you purchased.
	//
	// LaunchSpecification is a required field
	LaunchSpecification?: null | #ScheduledInstancesLaunchSpecification @go(,*ScheduledInstancesLaunchSpecification)

	// The Scheduled Instance ID.
	//
	// ScheduledInstanceId is a required field
	ScheduledInstanceId?: null | string @go(,*string)
}

// Contains the output of RunScheduledInstances.
#RunScheduledInstancesOutput: {
	// The IDs of the newly launched instances.
	InstanceIdSet: [...null | string] @go(,[]*string)
}

// The tags to apply to the AMI object that will be stored in the S3 bucket.
// For more information, see Categorizing your storage using tags (https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-tagging.html)
// in the Amazon Simple Storage Service User Guide.
#S3ObjectTag: {
	// The key of the tag.
	//
	// Constraints: Tag keys are case-sensitive and can be up to 128 Unicode characters
	// in length. May not begin with aws:.
	Key?: null | string @go(,*string)

	// The value of the tag.
	//
	// Constraints: Tag values are case-sensitive and can be up to 256 Unicode characters
	// in length.
	Value?: null | string @go(,*string)
}

// Describes the storage parameters for S3 and S3 buckets for an instance store-backed
// AMI.
#S3Storage: {
	// The access key ID of the owner of the bucket. Before you specify a value
	// for your access key ID, review and follow the guidance in Best Practices
	// for Managing AWS Access Keys (https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html).
	AWSAccessKeyId?: null | string @go(,*string)

	// The bucket in which to store the AMI. You can specify a bucket that you already
	// own or a new bucket that Amazon EC2 creates on your behalf. If you specify
	// a bucket that belongs to someone else, Amazon EC2 returns an error.
	Bucket?: null | string @go(,*string)

	// The beginning of the file name of the AMI.
	Prefix?: null | string @go(,*string)

	// An Amazon S3 upload policy that gives Amazon EC2 permission to upload items
	// into Amazon S3 on your behalf.
	//
	// UploadPolicy is automatically base64 encoded/decoded by the SDK.
	UploadPolicy: bytes @go(,[]byte)

	// The signature of the JSON document.
	UploadPolicySignature?: null | string @go(,*string)
}

// Describes a Scheduled Instance.
#ScheduledInstance: {
	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// The date when the Scheduled Instance was purchased.
	CreateDate?: null | time.Time @go(,*time.Time)

	// The hourly price for a single instance.
	HourlyPrice?: null | string @go(,*string)

	// The number of instances.
	InstanceCount?: null | int64 @go(,*int64)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The network platform (EC2-Classic or EC2-VPC).
	NetworkPlatform?: null | string @go(,*string)

	// The time for the next schedule to start.
	NextSlotStartTime?: null | time.Time @go(,*time.Time)

	// The platform (Linux/UNIX or Windows).
	Platform?: null | string @go(,*string)

	// The time that the previous schedule ended or will end.
	PreviousSlotEndTime?: null | time.Time @go(,*time.Time)

	// The schedule recurrence.
	Recurrence?: null | #ScheduledInstanceRecurrence @go(,*ScheduledInstanceRecurrence)

	// The Scheduled Instance ID.
	ScheduledInstanceId?: null | string @go(,*string)

	// The number of hours in the schedule.
	SlotDurationInHours?: null | int64 @go(,*int64)

	// The end date for the Scheduled Instance.
	TermEndDate?: null | time.Time @go(,*time.Time)

	// The start date for the Scheduled Instance.
	TermStartDate?: null | time.Time @go(,*time.Time)

	// The total number of hours for a single instance for the entire term.
	TotalScheduledInstanceHours?: null | int64 @go(,*int64)
}

// Describes a schedule that is available for your Scheduled Instances.
#ScheduledInstanceAvailability: {
	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// The number of available instances.
	AvailableInstanceCount?: null | int64 @go(,*int64)

	// The time period for the first schedule to start.
	FirstSlotStartTime?: null | time.Time @go(,*time.Time)

	// The hourly price for a single instance.
	HourlyPrice?: null | string @go(,*string)

	// The instance type. You can specify one of the C3, C4, M4, or R3 instance
	// types.
	InstanceType?: null | string @go(,*string)

	// The maximum term. The only possible value is 365 days.
	MaxTermDurationInDays?: null | int64 @go(,*int64)

	// The minimum term. The only possible value is 365 days.
	MinTermDurationInDays?: null | int64 @go(,*int64)

	// The network platform (EC2-Classic or EC2-VPC).
	NetworkPlatform?: null | string @go(,*string)

	// The platform (Linux/UNIX or Windows).
	Platform?: null | string @go(,*string)

	// The purchase token. This token expires in two hours.
	PurchaseToken?: null | string @go(,*string)

	// The schedule recurrence.
	Recurrence?: null | #ScheduledInstanceRecurrence @go(,*ScheduledInstanceRecurrence)

	// The number of hours in the schedule.
	SlotDurationInHours?: null | int64 @go(,*int64)

	// The total number of hours for a single instance for the entire term.
	TotalScheduledInstanceHours?: null | int64 @go(,*int64)
}

// Describes the recurring schedule for a Scheduled Instance.
#ScheduledInstanceRecurrence: {
	// The frequency (Daily, Weekly, or Monthly).
	Frequency?: null | string @go(,*string)

	// The interval quantity. The interval unit depends on the value of frequency.
	// For example, every 2 weeks or every 2 months.
	Interval?: null | int64 @go(,*int64)

	// The days. For a monthly schedule, this is one or more days of the month (1-31).
	// For a weekly schedule, this is one or more days of the week (1-7, where 1
	// is Sunday).
	OccurrenceDaySet: [...null | int64] @go(,[]*int64)

	// Indicates whether the occurrence is relative to the end of the specified
	// week or month.
	OccurrenceRelativeToEnd?: null | bool @go(,*bool)

	// The unit for occurrenceDaySet (DayOfWeek or DayOfMonth).
	OccurrenceUnit?: null | string @go(,*string)
}

// Describes the recurring schedule for a Scheduled Instance.
#ScheduledInstanceRecurrenceRequest: {
	// The frequency (Daily, Weekly, or Monthly).
	Frequency?: null | string @go(,*string)

	// The interval quantity. The interval unit depends on the value of Frequency.
	// For example, every 2 weeks or every 2 months.
	Interval?: null | int64 @go(,*int64)

	// The days. For a monthly schedule, this is one or more days of the month (1-31).
	// For a weekly schedule, this is one or more days of the week (1-7, where 1
	// is Sunday). You can't specify this value with a daily schedule. If the occurrence
	// is relative to the end of the month, you can specify only a single day.
	OccurrenceDays: [...null | int64] @go(,[]*int64)

	// Indicates whether the occurrence is relative to the end of the specified
	// week or month. You can't specify this value with a daily schedule.
	OccurrenceRelativeToEnd?: null | bool @go(,*bool)

	// The unit for OccurrenceDays (DayOfWeek or DayOfMonth). This value is required
	// for a monthly schedule. You can't specify DayOfWeek with a weekly schedule.
	// You can't specify this value with a daily schedule.
	OccurrenceUnit?: null | string @go(,*string)
}

// Describes a block device mapping for a Scheduled Instance.
#ScheduledInstancesBlockDeviceMapping: {
	// The device name (for example, /dev/sdh or xvdh).
	DeviceName?: null | string @go(,*string)

	// Parameters used to set up EBS volumes automatically when the instance is
	// launched.
	Ebs?: null | #ScheduledInstancesEbs @go(,*ScheduledInstancesEbs)

	// To omit the device from the block device mapping, specify an empty string.
	NoDevice?: null | string @go(,*string)

	// The virtual device name (ephemeralN). Instance store volumes are numbered
	// starting from 0. An instance type with two available instance store volumes
	// can specify mappings for ephemeral0 and ephemeral1. The number of available
	// instance store volumes depends on the instance type. After you connect to
	// the instance, you must mount the volume.
	//
	// Constraints: For M3 instances, you must specify instance store volumes in
	// the block device mapping for the instance. When you launch an M3 instance,
	// we ignore any instance store volumes specified in the block device mapping
	// for the AMI.
	VirtualName?: null | string @go(,*string)
}

// Describes an EBS volume for a Scheduled Instance.
#ScheduledInstancesEbs: {
	// Indicates whether the volume is deleted on instance termination.
	DeleteOnTermination?: null | bool @go(,*bool)

	// Indicates whether the volume is encrypted. You can attached encrypted volumes
	// only to instances that support them.
	Encrypted?: null | bool @go(,*bool)

	// The number of I/O operations per second (IOPS) to provision for an io1 or
	// io2 volume, with a maximum ratio of 50 IOPS/GiB for io1, and 500 IOPS/GiB
	// for io2. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum
	// IOPS of 64,000 is guaranteed only on instances built on the Nitro System
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).
	// Other instance families guarantee performance up to 32,000 IOPS. For more
	// information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
	// in the Amazon EC2 User Guide.
	//
	// This parameter is valid only for Provisioned IOPS SSD (io1 and io2) volumes.
	Iops?: null | int64 @go(,*int64)

	// The ID of the snapshot.
	SnapshotId?: null | string @go(,*string)

	// The size of the volume, in GiB.
	//
	// Default: If you're creating the volume from a snapshot and don't specify
	// a volume size, the default is the snapshot size.
	VolumeSize?: null | int64 @go(,*int64)

	// The volume type. gp2 for General Purpose SSD, io1 or io2 for Provisioned
	// IOPS SSD, Throughput Optimized HDD for st1, Cold HDD for sc1, or standard
	// for Magnetic.
	//
	// Default: gp2
	VolumeType?: null | string @go(,*string)
}

// Describes an IAM instance profile for a Scheduled Instance.
#ScheduledInstancesIamInstanceProfile: {
	// The Amazon Resource Name (ARN).
	Arn?: null | string @go(,*string)

	// The name.
	Name?: null | string @go(,*string)
}

// Describes an IPv6 address.
#ScheduledInstancesIpv6Address: {
	// The IPv6 address.
	Ipv6Address?: null | string @go(,*string)
}

// Describes the launch specification for a Scheduled Instance.
//
// If you are launching the Scheduled Instance in EC2-VPC, you must specify
// the ID of the subnet. You can specify the subnet using either SubnetId or
// NetworkInterface.
#ScheduledInstancesLaunchSpecification: {
	// The block device mapping entries.
	BlockDeviceMappings: [...null | #ScheduledInstancesBlockDeviceMapping] @go(,[]*ScheduledInstancesBlockDeviceMapping)

	// Indicates whether the instances are optimized for EBS I/O. This optimization
	// provides dedicated throughput to Amazon EBS and an optimized configuration
	// stack to provide optimal EBS I/O performance. This optimization isn't available
	// with all instance types. Additional usage charges apply when using an EBS-optimized
	// instance.
	//
	// Default: false
	EbsOptimized?: null | bool @go(,*bool)

	// The IAM instance profile.
	IamInstanceProfile?: null | #ScheduledInstancesIamInstanceProfile @go(,*ScheduledInstancesIamInstanceProfile)

	// The ID of the Amazon Machine Image (AMI).
	//
	// ImageId is a required field
	ImageId?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The ID of the kernel.
	KernelId?: null | string @go(,*string)

	// The name of the key pair.
	KeyName?: null | string @go(,*string)

	// Enable or disable monitoring for the instances.
	Monitoring?: null | #ScheduledInstancesMonitoring @go(,*ScheduledInstancesMonitoring)

	// The network interfaces.
	NetworkInterfaces: [...null | #ScheduledInstancesNetworkInterface] @go(,[]*ScheduledInstancesNetworkInterface)

	// The placement information.
	Placement?: null | #ScheduledInstancesPlacement @go(,*ScheduledInstancesPlacement)

	// The ID of the RAM disk.
	RamdiskId?: null | string @go(,*string)

	// The IDs of the security groups.
	SecurityGroupIds: [...null | string] @go(,[]*string)

	// The ID of the subnet in which to launch the instances.
	SubnetId?: null | string @go(,*string)

	// The base64-encoded MIME user data.
	UserData?: null | string @go(,*string)
}

// Describes whether monitoring is enabled for a Scheduled Instance.
#ScheduledInstancesMonitoring: {
	// Indicates whether monitoring is enabled.
	Enabled?: null | bool @go(,*bool)
}

// Describes a network interface for a Scheduled Instance.
#ScheduledInstancesNetworkInterface: {
	// Indicates whether to assign a public IPv4 address to instances launched in
	// a VPC. The public IPv4 address can only be assigned to a network interface
	// for eth0, and can only be assigned to a new network interface, not an existing
	// one. You cannot specify more than one network interface in the request. If
	// launching into a default subnet, the default value is true.
	AssociatePublicIpAddress?: null | bool @go(,*bool)

	// Indicates whether to delete the interface when the instance is terminated.
	DeleteOnTermination?: null | bool @go(,*bool)

	// The description.
	Description?: null | string @go(,*string)

	// The index of the device for the network interface attachment.
	DeviceIndex?: null | int64 @go(,*int64)

	// The IDs of the security groups.
	Groups: [...null | string] @go(,[]*string)

	// The number of IPv6 addresses to assign to the network interface. The IPv6
	// addresses are automatically selected from the subnet range.
	Ipv6AddressCount?: null | int64 @go(,*int64)

	// The specific IPv6 addresses from the subnet range.
	Ipv6Addresses: [...null | #ScheduledInstancesIpv6Address] @go(,[]*ScheduledInstancesIpv6Address)

	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The IPv4 address of the network interface within the subnet.
	PrivateIpAddress?: null | string @go(,*string)

	// The private IPv4 addresses.
	PrivateIpAddressConfigs: [...null | #ScheduledInstancesPrivateIpAddressConfig] @go(,[]*ScheduledInstancesPrivateIpAddressConfig)

	// The number of secondary private IPv4 addresses.
	SecondaryPrivateIpAddressCount?: null | int64 @go(,*int64)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)
}

// Describes the placement for a Scheduled Instance.
#ScheduledInstancesPlacement: {
	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// The name of the placement group.
	GroupName?: null | string @go(,*string)
}

// Describes a private IPv4 address for a Scheduled Instance.
#ScheduledInstancesPrivateIpAddressConfig: {
	// Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary
	// IPv4 address.
	Primary?: null | bool @go(,*bool)

	// The IPv4 address.
	PrivateIpAddress?: null | string @go(,*string)
}

#SearchLocalGatewayRoutesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters.
	//
	// Filters is a required field
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The ID of the local gateway route table.
	//
	// LocalGatewayRouteTableId is a required field
	LocalGatewayRouteTableId?: null | string @go(,*string)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)
}

#SearchLocalGatewayRoutesOutput: {
	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)

	// Information about the routes.
	Routes: [...null | #LocalGatewayRoute] @go(,[]*LocalGatewayRoute)
}

#SearchTransitGatewayMulticastGroupsInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * group-ip-address - The IP address of the transit gateway multicast group.
	//
	//    * is-group-member - The resource is a group member. Valid values are true
	//    | false.
	//
	//    * is-group-source - The resource is a group source. Valid values are true
	//    | false.
	//
	//    * member-type - The member type. Valid values are igmp | static.
	//
	//    * resource-id - The ID of the resource.
	//
	//    * resource-type - The type of resource. Valid values are vpc | vpn | direct-connect-gateway
	//    | tgw-peering.
	//
	//    * source-type - The source type. Valid values are igmp | static.
	//
	//    * state - The state of the subnet association. Valid values are associated
	//    | associated | disassociated | disassociating.
	//
	//    * subnet-id - The ID of the subnet.
	//
	//    * transit-gateway-attachment-id - The id of the transit gateway attachment.
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of results to return with a single call. To retrieve the
	// remaining results, make another call with the returned nextToken value.
	MaxResults?: null | int64 @go(,*int64)

	// The token for the next page of results.
	NextToken?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

#SearchTransitGatewayMulticastGroupsOutput: {
	// Information about the transit gateway multicast group.
	MulticastGroups: [...null | #TransitGatewayMulticastGroup] @go(,[]*TransitGatewayMulticastGroup)

	// The token to use to retrieve the next page of results. This value is null
	// when there are no more results to return.
	NextToken?: null | string @go(,*string)
}

#SearchTransitGatewayRoutesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// One or more filters. The possible values are:
	//
	//    * attachment.transit-gateway-attachment-id- The id of the transit gateway
	//    attachment.
	//
	//    * attachment.resource-id - The resource id of the transit gateway attachment.
	//
	//    * attachment.resource-type - The attachment resource type. Valid values
	//    are vpc | vpn | direct-connect-gateway | peering | connect.
	//
	//    * prefix-list-id - The ID of the prefix list.
	//
	//    * route-search.exact-match - The exact match of the specified filter.
	//
	//    * route-search.longest-prefix-match - The longest prefix that matches
	//    the route.
	//
	//    * route-search.subnet-of-match - The routes with a subnet that match the
	//    specified CIDR filter.
	//
	//    * route-search.supernet-of-match - The routes with a CIDR that encompass
	//    the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31
	//    routes in your route table and you specify supernet-of-match as 10.0.1.0/30,
	//    then the result returns 10.0.1.0/29.
	//
	//    * state - The state of the route (active | blackhole).
	//
	//    * type - The type of route (propagated | static).
	//
	// Filters is a required field
	Filters: [...null | #Filter] @go(,[]*Filter)

	// The maximum number of routes to return.
	MaxResults?: null | int64 @go(,*int64)

	// The ID of the transit gateway route table.
	//
	// TransitGatewayRouteTableId is a required field
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

#SearchTransitGatewayRoutesOutput: {
	// Indicates whether there are additional routes available.
	AdditionalRoutesAvailable?: null | bool @go(,*bool)

	// Information about the routes.
	Routes: [...null | #TransitGatewayRoute] @go(,[]*TransitGatewayRoute)
}

// Describes a security group.
#SecurityGroup: {
	// A description of the security group.
	Description?: null | string @go(,*string)

	// The ID of the security group.
	GroupId?: null | string @go(,*string)

	// The name of the security group.
	GroupName?: null | string @go(,*string)

	// The inbound rules associated with the security group.
	IpPermissions: [...null | #IpPermission] @go(,[]*IpPermission)

	// [VPC only] The outbound rules associated with the security group.
	IpPermissionsEgress: [...null | #IpPermission] @go(,[]*IpPermission)

	// The Amazon Web Services account ID of the owner of the security group.
	OwnerId?: null | string @go(,*string)

	// Any tags assigned to the security group.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// [VPC only] The ID of the VPC for the security group.
	VpcId?: null | string @go(,*string)
}

// Describes a security group.
#SecurityGroupIdentifier: {
	// The ID of the security group.
	GroupId?: null | string @go(,*string)

	// The name of the security group.
	GroupName?: null | string @go(,*string)
}

// Describes a VPC with a security group that references your security group.
#SecurityGroupReference: {
	// The ID of your security group.
	GroupId?: null | string @go(,*string)

	// The ID of the VPC with the referencing security group.
	ReferencingVpcId?: null | string @go(,*string)

	// The ID of the VPC peering connection.
	VpcPeeringConnectionId?: null | string @go(,*string)
}

// Describes a security group rule.
#SecurityGroupRule: {
	// The IPv4 CIDR range.
	CidrIpv4?: null | string @go(,*string)

	// The IPv6 CIDR range.
	CidrIpv6?: null | string @go(,*string)

	// The security group rule description.
	Description?: null | string @go(,*string)

	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6
	// type. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6
	// types, you must specify all codes.
	FromPort?: null | int64 @go(,*int64)

	// The ID of the security group.
	GroupId?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the security group.
	GroupOwnerId?: null | string @go(,*string)

	// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers
	// (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
	//
	// Use -1 to specify all protocols.
	IpProtocol?: null | string @go(,*string)

	// Indicates whether the security group rule is an outbound rule.
	IsEgress?: null | bool @go(,*bool)

	// The ID of the prefix list.
	PrefixListId?: null | string @go(,*string)

	// Describes the security group that is referenced in the rule.
	ReferencedGroupInfo?: null | #ReferencedSecurityGroup @go(,*ReferencedSecurityGroup)

	// The ID of the security group rule.
	SecurityGroupRuleId?: null | string @go(,*string)

	// The tags applied to the security group rule.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	// A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6
	// types, you must specify all codes.
	ToPort?: null | int64 @go(,*int64)
}

// Describes the description of a security group rule.
//
// You can use this when you want to update the security group rule description
// for either an inbound or outbound rule.
#SecurityGroupRuleDescription: {
	// The description of the security group rule.
	Description?: null | string @go(,*string)

	// The ID of the security group rule.
	SecurityGroupRuleId?: null | string @go(,*string)
}

// Describes a security group rule.
//
// You must specify exactly one of the following parameters, based on the rule
// type:
//
//    * CidrIpv4
//
//    * CidrIpv6
//
//    * PrefixListId
//
//    * ReferencedGroupId
//
// When you modify a rule, you cannot change the rule type. For example, if
// the rule uses an IPv4 address range, you must use CidrIpv4 to specify a new
// IPv4 address range.
#SecurityGroupRuleRequest: {
	// The IPv4 CIDR range. To specify a single IPv4 address, use the /32 prefix
	// length.
	CidrIpv4?: null | string @go(,*string)

	// The IPv6 CIDR range. To specify a single IPv6 address, use the /128 prefix
	// length.
	CidrIpv6?: null | string @go(,*string)

	// The description of the security group rule.
	Description?: null | string @go(,*string)

	// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6
	// type. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6
	// types, you must specify all codes.
	FromPort?: null | int64 @go(,*int64)

	// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers
	// (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
	//
	// Use -1 to specify all protocols.
	IpProtocol?: null | string @go(,*string)

	// The ID of the prefix list.
	PrefixListId?: null | string @go(,*string)

	// The ID of the security group that is referenced in the security group rule.
	ReferencedGroupId?: null | string @go(,*string)

	// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.
	// A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6
	// types, you must specify all codes.
	ToPort?: null | int64 @go(,*int64)
}

// Describes an update to a security group rule.
#SecurityGroupRuleUpdate: {
	// Information about the security group rule.
	SecurityGroupRule?: null | #SecurityGroupRuleRequest @go(,*SecurityGroupRuleRequest)

	// The ID of the security group rule.
	SecurityGroupRuleId?: null | string @go(,*string)
}

#SendDiagnosticInterruptInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the instance.
	//
	// InstanceId is a required field
	InstanceId?: null | string @go(,*string)
}

// Describes a service configuration for a VPC endpoint service.
#ServiceConfiguration: {
	// Indicates whether requests from other AWS accounts to create an endpoint
	// to the service must first be accepted.
	AcceptanceRequired?: null | bool @go(,*bool)

	// The Availability Zones in which the service is available.
	AvailabilityZones: [...null | string] @go(,[]*string)

	// The DNS names for the service.
	BaseEndpointDnsNames: [...null | string] @go(,[]*string)

	// The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
	GatewayLoadBalancerArns: [...null | string] @go(,[]*string)

	// Indicates whether the service manages its VPC endpoints. Management of the
	// service VPC endpoints using the VPC endpoint API is restricted.
	ManagesVpcEndpoints?: null | bool @go(,*bool)

	// The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.
	NetworkLoadBalancerArns: [...null | string] @go(,[]*string)

	// The private DNS name for the service.
	PrivateDnsName?: null | string @go(,*string)

	// Information about the endpoint service private DNS name configuration.
	PrivateDnsNameConfiguration?: null | #PrivateDnsNameConfiguration @go(,*PrivateDnsNameConfiguration)

	// The ID of the service.
	ServiceId?: null | string @go(,*string)

	// The name of the service.
	ServiceName?: null | string @go(,*string)

	// The service state.
	ServiceState?: null | string @go(,*string)

	// The type of service.
	ServiceType: [...null | #ServiceTypeDetail] @go(,[]*ServiceTypeDetail)

	// Any tags assigned to the service.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes a VPC endpoint service.
#ServiceDetail: {
	// Indicates whether VPC endpoint connection requests to the service must be
	// accepted by the service owner.
	AcceptanceRequired?: null | bool @go(,*bool)

	// The Availability Zones in which the service is available.
	AvailabilityZones: [...null | string] @go(,[]*string)

	// The DNS names for the service.
	BaseEndpointDnsNames: [...null | string] @go(,[]*string)

	// Indicates whether the service manages its VPC endpoints. Management of the
	// service VPC endpoints using the VPC endpoint API is restricted.
	ManagesVpcEndpoints?: null | bool @go(,*bool)

	// The AWS account ID of the service owner.
	Owner?: null | string @go(,*string)

	// The private DNS name for the service.
	PrivateDnsName?: null | string @go(,*string)

	// The verification state of the VPC endpoint service.
	//
	// Consumers of the endpoint service cannot use the private name when the state
	// is not verified.
	PrivateDnsNameVerificationState?: null | string @go(,*string)

	// The private DNS names assigned to the VPC endpoint service.
	PrivateDnsNames: [...null | #PrivateDnsDetails] @go(,[]*PrivateDnsDetails)

	// The ID of the endpoint service.
	ServiceId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the service.
	ServiceName?: null | string @go(,*string)

	// The type of service.
	ServiceType: [...null | #ServiceTypeDetail] @go(,[]*ServiceTypeDetail)

	// Any tags assigned to the service.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// Indicates whether the service supports endpoint policies.
	VpcEndpointPolicySupported?: null | bool @go(,*bool)
}

// Describes the type of service for a VPC endpoint.
#ServiceTypeDetail: {
	// The type of service.
	ServiceType?: null | string @go(,*string)
}

// Describes the time period for a Scheduled Instance to start its first schedule.
// The time period must span less than one day.
#SlotDateTimeRangeRequest: {
	// The earliest date and time, in UTC, for the Scheduled Instance to start.
	//
	// EarliestTime is a required field
	EarliestTime?: null | time.Time @go(,*time.Time)

	// The latest date and time, in UTC, for the Scheduled Instance to start. This
	// value must be later than or equal to the earliest date and at most three
	// months in the future.
	//
	// LatestTime is a required field
	LatestTime?: null | time.Time @go(,*time.Time)
}

// Describes the time period for a Scheduled Instance to start its first schedule.
#SlotStartTimeRangeRequest: {
	// The earliest date and time, in UTC, for the Scheduled Instance to start.
	EarliestTime?: null | time.Time @go(,*time.Time)

	// The latest date and time, in UTC, for the Scheduled Instance to start.
	LatestTime?: null | time.Time @go(,*time.Time)
}

// Describes a snapshot.
#Snapshot: {
	// The data encryption key identifier for the snapshot. This value is a unique
	// identifier that corresponds to the data encryption key that was used to encrypt
	// the original volume or snapshot copy. Because data encryption keys are inherited
	// by volumes created from snapshots, and vice versa, if snapshots share the
	// same data encryption key identifier, then they belong to the same volume/snapshot
	// lineage. This parameter is only returned by DescribeSnapshots.
	DataEncryptionKeyId?: null | string @go(,*string)

	// The description for the snapshot.
	Description?: null | string @go(,*string)

	// Indicates whether the snapshot is encrypted.
	Encrypted?: null | bool @go(,*bool)

	// The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key
	// that was used to protect the volume encryption key for the parent volume.
	KmsKeyId?: null | string @go(,*string)

	// The ARN of the Outpost on which the snapshot is stored. For more information,
	// see Amazon EBS local snapshots on Outposts (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	OutpostArn?: null | string @go(,*string)

	// The Amazon Web Services owner alias, from an Amazon-maintained list (amazon).
	// This is not the user-configured Amazon Web Services account alias set using
	// the IAM console.
	OwnerAlias?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the EBS snapshot.
	OwnerId?: null | string @go(,*string)

	// The progress of the snapshot, as a percentage.
	Progress?: null | string @go(,*string)

	// The ID of the snapshot. Each snapshot receives a unique identifier when it
	// is created.
	SnapshotId?: null | string @go(,*string)

	// The time stamp when the snapshot was initiated.
	StartTime?: null | time.Time @go(,*time.Time)

	// The snapshot state.
	State?: null | string @go(,*string)

	// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy
	// operation fails (for example, if the proper Key Management Service (KMS)
	// permissions are not obtained) this field displays error state details to
	// help you diagnose why the error occurred. This parameter is only returned
	// by DescribeSnapshots.
	StateMessage?: null | string @go(,*string)

	// Any tags assigned to the snapshot.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the volume that was used to create the snapshot. Snapshots created
	// by the CopySnapshot action have an arbitrary volume ID that should not be
	// used for any purpose.
	VolumeId?: null | string @go(,*string)

	// The size of the volume, in GiB.
	VolumeSize?: null | int64 @go(,*int64)
}

// Describes the snapshot created from the imported disk.
#SnapshotDetail: {
	// A description for the snapshot.
	Description?: null | string @go(,*string)

	// The block device mapping for the snapshot.
	DeviceName?: null | string @go(,*string)

	// The size of the disk in the snapshot, in GiB.
	DiskImageSize?: null | float64 @go(,*float64)

	// The format of the disk image from which the snapshot is created.
	Format?: null | string @go(,*string)

	// The percentage of progress for the task.
	Progress?: null | string @go(,*string)

	// The snapshot ID of the disk being imported.
	SnapshotId?: null | string @go(,*string)

	// A brief status of the snapshot creation.
	Status?: null | string @go(,*string)

	// A detailed status message for the snapshot creation.
	StatusMessage?: null | string @go(,*string)

	// The URL used to access the disk image.
	Url?: null | string @go(,*string)

	// The Amazon S3 bucket for the disk image.
	UserBucket?: null | #UserBucketDetails @go(,*UserBucketDetails)
}

// The disk container object for the import snapshot request.
#SnapshotDiskContainer: {
	// The description of the disk image being imported.
	Description?: null | string @go(,*string)

	// The format of the disk image being imported.
	//
	// Valid values: VHD | VMDK | RAW
	Format?: null | string @go(,*string)

	// The URL to the Amazon S3-based disk image being imported. It can either be
	// a https URL (https://..) or an Amazon S3 URL (s3://..).
	Url?: null | string @go(,*string)

	// The Amazon S3 bucket for the disk image.
	UserBucket?: null | #UserBucket @go(,*UserBucket)
}

// Information about a snapshot.
#SnapshotInfo: {
	// Description specified by the CreateSnapshotRequest that has been applied
	// to all snapshots.
	Description?: null | string @go(,*string)

	// Indicates whether the snapshot is encrypted.
	Encrypted?: null | bool @go(,*bool)

	// The ARN of the Outpost on which the snapshot is stored. For more information,
	// see Amazon EBS local snapshots on Outposts (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	OutpostArn?: null | string @go(,*string)

	// Account id used when creating this snapshot.
	OwnerId?: null | string @go(,*string)

	// Progress this snapshot has made towards completing.
	Progress?: null | string @go(,*string)

	// Snapshot id that can be used to describe this snapshot.
	SnapshotId?: null | string @go(,*string)

	// Time this snapshot was started. This is the same for all snapshots initiated
	// by the same request.
	StartTime?: null | time.Time @go(,*time.Time)

	// Current state of the snapshot.
	State?: null | string @go(,*string)

	// Tags associated with this snapshot.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// Source volume from which this snapshot was created.
	VolumeId?: null | string @go(,*string)

	// Size of the volume from which this snapshot was created.
	VolumeSize?: null | int64 @go(,*int64)
}

// Details about the import snapshot task.
#SnapshotTaskDetail: {
	// The description of the snapshot.
	Description?: null | string @go(,*string)

	// The size of the disk in the snapshot, in GiB.
	DiskImageSize?: null | float64 @go(,*float64)

	// Indicates whether the snapshot is encrypted.
	Encrypted?: null | bool @go(,*bool)

	// The format of the disk image from which the snapshot is created.
	Format?: null | string @go(,*string)

	// The identifier for the KMS key that was used to create the encrypted snapshot.
	KmsKeyId?: null | string @go(,*string)

	// The percentage of completion for the import snapshot task.
	Progress?: null | string @go(,*string)

	// The snapshot ID of the disk being imported.
	SnapshotId?: null | string @go(,*string)

	// A brief status for the import snapshot task.
	Status?: null | string @go(,*string)

	// A detailed status message for the import snapshot task.
	StatusMessage?: null | string @go(,*string)

	// The URL of the disk image from which the snapshot is created.
	Url?: null | string @go(,*string)

	// The Amazon S3 bucket for the disk image.
	UserBucket?: null | #UserBucketDetails @go(,*UserBucketDetails)
}

// The Spot Instance replacement strategy to use when Amazon EC2 emits a signal
// that your Spot Instance is at an elevated risk of being interrupted. For
// more information, see Capacity rebalancing (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#spot-fleet-capacity-rebalance)
// in the Amazon EC2 User Guide for Linux Instances.
#SpotCapacityRebalance: {
	// The replacement strategy to use. Only available for fleets of type maintain.
	// You must specify a value, otherwise you get an error.
	//
	// To allow Spot Fleet to launch a replacement Spot Instance when an instance
	// rebalance notification is emitted for a Spot Instance in the fleet, specify
	// launch.
	//
	// When a replacement instance is launched, the instance marked for rebalance
	// is not automatically terminated. You can terminate it, or you can leave it
	// running. You are charged for all instances while they are running.
	ReplacementStrategy?: null | string @go(,*string)
}

// Describes the data feed for a Spot Instance.
#SpotDatafeedSubscription: {
	// The name of the Amazon S3 bucket where the Spot Instance data feed is located.
	Bucket?: null | string @go(,*string)

	// The fault codes for the Spot Instance request, if any.
	Fault?: null | #SpotInstanceStateFault @go(,*SpotInstanceStateFault)

	// The Amazon Web Services account ID of the account.
	OwnerId?: null | string @go(,*string)

	// The prefix for the data feed files.
	Prefix?: null | string @go(,*string)

	// The state of the Spot Instance data feed subscription.
	State?: null | string @go(,*string)
}

// Describes the launch specification for one or more Spot Instances. If you
// include On-Demand capacity in your fleet request or want to specify an EFA
// network device, you can't use SpotFleetLaunchSpecification; you must use
// LaunchTemplateConfig (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html).
#SpotFleetLaunchSpecification: {
	// Deprecated.
	AddressingType?: null | string @go(,*string)

	// One or more block devices that are mapped to the Spot Instances. You can't
	// specify both a snapshot ID and an encryption value. This is because only
	// blank volumes can be encrypted on creation. If a snapshot is the basis for
	// a volume, it is not blank and its encryption status is used for the volume
	// encryption status.
	BlockDeviceMappings: [...null | #BlockDeviceMapping] @go(,[]*BlockDeviceMapping)

	// Indicates whether the instances are optimized for EBS I/O. This optimization
	// provides dedicated throughput to Amazon EBS and an optimized configuration
	// stack to provide optimal EBS I/O performance. This optimization isn't available
	// with all instance types. Additional usage charges apply when using an EBS
	// Optimized instance.
	//
	// Default: false
	EbsOptimized?: null | bool @go(,*bool)

	// The IAM instance profile.
	IamInstanceProfile?: null | #IamInstanceProfileSpecification @go(,*IamInstanceProfileSpecification)

	// The ID of the AMI.
	ImageId?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// The ID of the kernel.
	KernelId?: null | string @go(,*string)

	// The name of the key pair.
	KeyName?: null | string @go(,*string)

	// Enable or disable monitoring for the instances.
	Monitoring?: null | #SpotFleetMonitoring @go(,*SpotFleetMonitoring)

	// One or more network interfaces. If you specify a network interface, you must
	// specify subnet IDs and security group IDs using the network interface.
	//
	// SpotFleetLaunchSpecification currently does not support Elastic Fabric Adapter
	// (EFA). To specify an EFA, you must use LaunchTemplateConfig (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html).
	NetworkInterfaces: [...null | #InstanceNetworkInterfaceSpecification] @go(,[]*InstanceNetworkInterfaceSpecification)

	// The placement information.
	Placement?: null | #SpotPlacement @go(,*SpotPlacement)

	// The ID of the RAM disk. Some kernels require additional drivers at launch.
	// Check the kernel requirements for information about whether you need to specify
	// a RAM disk. To find kernel requirements, refer to the Amazon Web Services
	// Resource Center and search for the kernel ID.
	RamdiskId?: null | string @go(,*string)

	// One or more security groups. When requesting instances in a VPC, you must
	// specify the IDs of the security groups. When requesting instances in EC2-Classic,
	// you can specify the names or the IDs of the security groups.
	SecurityGroups: [...null | #GroupIdentifier] @go(,[]*GroupIdentifier)

	// The maximum price per unit hour that you are willing to pay for a Spot Instance.
	// If this value is not specified, the default is the Spot price specified for
	// the fleet. To determine the Spot price per unit hour, divide the Spot price
	// by the value of WeightedCapacity.
	SpotPrice?: null | string @go(,*string)

	// The IDs of the subnets in which to launch the instances. To specify multiple
	// subnets, separate them using commas; for example, "subnet-1234abcdeexample1,
	// subnet-0987cdef6example2".
	SubnetId?: null | string @go(,*string)

	// The tags to apply during creation.
	TagSpecifications: [...null | #SpotFleetTagSpecification] @go(,[]*SpotFleetTagSpecification)

	// The Base64-encoded user data that instances use when starting up.
	UserData?: null | string @go(,*string)

	// The number of units provided by the specified instance type. These are the
	// same units that you chose to set the target capacity in terms of instances,
	// or a performance characteristic such as vCPUs, memory, or I/O.
	//
	// If the target capacity divided by this value is not a whole number, Amazon
	// EC2 rounds the number of instances to the next whole number. If this value
	// is not specified, the default is 1.
	WeightedCapacity?: null | float64 @go(,*float64)
}

// Describes whether monitoring is enabled.
#SpotFleetMonitoring: {
	// Enables monitoring for the instance.
	//
	// Default: false
	Enabled?: null | bool @go(,*bool)
}

// Describes a Spot Fleet request.
#SpotFleetRequestConfig: {
	// The progress of the Spot Fleet request. If there is an error, the status
	// is error. After all requests are placed, the status is pending_fulfillment.
	// If the size of the fleet is equal to or greater than its target capacity,
	// the status is fulfilled. If the size of the fleet is decreased, the status
	// is pending_termination while Spot Instances are terminating.
	ActivityStatus?: null | string @go(,*string)

	// The creation date and time of the request.
	CreateTime?: null | time.Time @go(,*time.Time)

	// The configuration of the Spot Fleet request.
	SpotFleetRequestConfig?: null | #SpotFleetRequestConfigData @go(,*SpotFleetRequestConfigData)

	// The ID of the Spot Fleet request.
	SpotFleetRequestId?: null | string @go(,*string)

	// The state of the Spot Fleet request.
	SpotFleetRequestState?: null | string @go(,*string)

	// The tags for a Spot Fleet resource.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes the configuration of a Spot Fleet request.
#SpotFleetRequestConfigData: {
	// Indicates how to allocate the target Spot Instance capacity across the Spot
	// Instance pools specified by the Spot Fleet request.
	//
	// If the allocation strategy is lowestPrice, Spot Fleet launches instances
	// from the Spot Instance pools with the lowest price. This is the default allocation
	// strategy.
	//
	// If the allocation strategy is diversified, Spot Fleet launches instances
	// from all the Spot Instance pools that you specify.
	//
	// If the allocation strategy is capacityOptimized (recommended), Spot Fleet
	// launches instances from Spot Instance pools with optimal capacity for the
	// number of instances that are launching. To give certain instance types a
	// higher chance of launching first, use capacityOptimizedPrioritized. Set a
	// priority for each instance type by using the Priority parameter for LaunchTemplateOverrides.
	// You can assign the same priority to different LaunchTemplateOverrides. EC2
	// implements the priorities on a best-effort basis, but optimizes for capacity
	// first. capacityOptimizedPrioritized is supported only if your Spot Fleet
	// uses a launch template. Note that if the OnDemandAllocationStrategy is set
	// to prioritized, the same priority is applied when fulfilling On-Demand capacity.
	AllocationStrategy?: null | string @go(,*string)

	// A unique, case-sensitive identifier that you provide to ensure the idempotency
	// of your listings. This helps to avoid duplicate listings. For more information,
	// see Ensuring Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Reserved.
	Context?: null | string @go(,*string)

	// Indicates whether running Spot Instances should be terminated if you decrease
	// the target capacity of the Spot Fleet request below the current size of the
	// Spot Fleet.
	ExcessCapacityTerminationPolicy?: null | string @go(,*string)

	// The number of units fulfilled by this request compared to the set target
	// capacity. You cannot set this value.
	FulfilledCapacity?: null | float64 @go(,*float64)

	// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM)
	// role that grants the Spot Fleet the permission to request, launch, terminate,
	// and tag instances on your behalf. For more information, see Spot Fleet prerequisites
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites)
	// in the Amazon EC2 User Guide for Linux Instances. Spot Fleet can terminate
	// Spot Instances on your behalf when you cancel its Spot Fleet request using
	// CancelSpotFleetRequests (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CancelSpotFleetRequests)
	// or when the Spot Fleet request expires, if you set TerminateInstancesWithExpiration.
	//
	// IamFleetRole is a required field
	IamFleetRole?: null | string @go(,*string)

	// The behavior when a Spot Instance is interrupted. The default is terminate.
	InstanceInterruptionBehavior?: null | string @go(,*string)

	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when Spot AllocationStrategy is set to lowest-price. Spot Fleet
	// selects the cheapest Spot pools and evenly allocates your target Spot capacity
	// across the number of Spot pools that you specify.
	//
	// Note that Spot Fleet attempts to draw Spot Instances from the number of pools
	// that you specify on a best effort basis. If a pool runs out of Spot capacity
	// before fulfilling your target capacity, Spot Fleet will continue to fulfill
	// your request by drawing from the next cheapest pool. To ensure that your
	// target capacity is met, you might receive Spot Instances from more than the
	// number of pools that you specified. Similarly, if most of the pools have
	// no Spot capacity, you might receive your full target capacity from fewer
	// than the number of pools that you specified.
	InstancePoolsToUseCount?: null | int64 @go(,*int64)

	// The launch specifications for the Spot Fleet request. If you specify LaunchSpecifications,
	// you can't specify LaunchTemplateConfigs. If you include On-Demand capacity
	// in your request, you must use LaunchTemplateConfigs.
	LaunchSpecifications: [...null | #SpotFleetLaunchSpecification] @go(,[]*SpotFleetLaunchSpecification)

	// The launch template and overrides. If you specify LaunchTemplateConfigs,
	// you can't specify LaunchSpecifications. If you include On-Demand capacity
	// in your request, you must use LaunchTemplateConfigs.
	LaunchTemplateConfigs: [...null | #LaunchTemplateConfig] @go(,[]*LaunchTemplateConfig)

	// One or more Classic Load Balancers and target groups to attach to the Spot
	// Fleet request. Spot Fleet registers the running Spot Instances with the specified
	// Classic Load Balancers and target groups.
	//
	// With Network Load Balancers, Spot Fleet cannot register instances that have
	// the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1,
	// HS1, M1, M2, M3, and T1.
	LoadBalancersConfig?: null | #LoadBalancersConfig @go(,*LoadBalancersConfig)

	// The order of the launch template overrides to use in fulfilling On-Demand
	// capacity. If you specify lowestPrice, Spot Fleet uses price to determine
	// the order, launching the lowest price first. If you specify prioritized,
	// Spot Fleet uses the priority that you assign to each Spot Fleet launch template
	// override, launching the highest priority first. If you do not specify a value,
	// Spot Fleet defaults to lowestPrice.
	OnDemandAllocationStrategy?: null | string @go(,*string)

	// The number of On-Demand units fulfilled by this request compared to the set
	// target On-Demand capacity.
	OnDemandFulfilledCapacity?: null | float64 @go(,*float64)

	// The maximum amount per hour for On-Demand Instances that you're willing to
	// pay. You can use the onDemandMaxTotalPrice parameter, the spotMaxTotalPrice
	// parameter, or both parameters to ensure that your fleet cost does not exceed
	// your budget. If you set a maximum price per hour for the On-Demand Instances
	// and Spot Instances in your request, Spot Fleet will launch instances until
	// it reaches the maximum amount you're willing to pay. When the maximum amount
	// you're willing to pay is reached, the fleet stops launching instances even
	// if it hasn’t met the target capacity.
	OnDemandMaxTotalPrice?: null | string @go(,*string)

	// The number of On-Demand units to request. You can choose to set the target
	// capacity in terms of instances or a performance characteristic that is important
	// to your application workload, such as vCPUs, memory, or I/O. If the request
	// type is maintain, you can specify a target capacity of 0 and add capacity
	// later.
	OnDemandTargetCapacity?: null | int64 @go(,*int64)

	// Indicates whether Spot Fleet should replace unhealthy instances.
	ReplaceUnhealthyInstances?: null | bool @go(,*bool)

	// The strategies for managing your Spot Instances that are at an elevated risk
	// of being interrupted.
	SpotMaintenanceStrategies?: null | #SpotMaintenanceStrategies @go(,*SpotMaintenanceStrategies)

	// The maximum amount per hour for Spot Instances that you're willing to pay.
	// You can use the spotdMaxTotalPrice parameter, the onDemandMaxTotalPrice parameter,
	// or both parameters to ensure that your fleet cost does not exceed your budget.
	// If you set a maximum price per hour for the On-Demand Instances and Spot
	// Instances in your request, Spot Fleet will launch instances until it reaches
	// the maximum amount you're willing to pay. When the maximum amount you're
	// willing to pay is reached, the fleet stops launching instances even if it
	// hasn’t met the target capacity.
	SpotMaxTotalPrice?: null | string @go(,*string)

	// The maximum price per unit hour that you are willing to pay for a Spot Instance.
	// The default is the On-Demand price.
	SpotPrice?: null | string @go(,*string)

	// The key-value pair for tagging the Spot Fleet request on creation. The value
	// for ResourceType must be spot-fleet-request, otherwise the Spot Fleet request
	// fails. To tag instances at launch, specify the tags in the launch template
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template)
	// (valid only if you use LaunchTemplateConfigs) or in the SpotFleetTagSpecification
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html)
	// (valid only if you use LaunchSpecifications). For information about tagging
	// after launch, see Tagging Your Resources (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources).
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)

	// The number of units to request for the Spot Fleet. You can choose to set
	// the target capacity in terms of instances or a performance characteristic
	// that is important to your application workload, such as vCPUs, memory, or
	// I/O. If the request type is maintain, you can specify a target capacity of
	// 0 and add capacity later.
	//
	// TargetCapacity is a required field
	TargetCapacity?: null | int64 @go(,*int64)

	// Indicates whether running Spot Instances are terminated when the Spot Fleet
	// request expires.
	TerminateInstancesWithExpiration?: null | bool @go(,*bool)

	// The type of request. Indicates whether the Spot Fleet only requests the target
	// capacity or also attempts to maintain it. When this value is request, the
	// Spot Fleet only places the required requests. It does not attempt to replenish
	// Spot Instances if capacity is diminished, nor does it submit requests in
	// alternative Spot pools if capacity is not available. When this value is maintain,
	// the Spot Fleet maintains the target capacity. The Spot Fleet places the required
	// requests to meet capacity and automatically replenishes any interrupted instances.
	// Default: maintain. instant is listed but is not used by Spot Fleet.
	Type?: null | string @go(,*string)

	// The start date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ).
	// By default, Amazon EC2 starts fulfilling the request immediately.
	ValidFrom?: null | time.Time @go(,*time.Time)

	// The end date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ).
	// After the end date and time, no new Spot Instance requests are placed or
	// able to fulfill the request. If no value is specified, the Spot Fleet request
	// remains until you cancel it.
	ValidUntil?: null | time.Time @go(,*time.Time)
}

// The tags for a Spot Fleet resource.
#SpotFleetTagSpecification: {
	// The type of resource. Currently, the only resource type that is supported
	// is instance. To tag the Spot Fleet request on creation, use the TagSpecifications
	// parameter in SpotFleetRequestConfigData (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetRequestConfigData.html).
	ResourceType?: null | string @go(,*string)

	// The tags.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes a Spot Instance request.
#SpotInstanceRequest: {
	// Deprecated.
	ActualBlockHourlyPrice?: null | string @go(,*string)

	// The Availability Zone group. If you specify the same Availability Zone group
	// for all Spot Instance requests, all Spot Instances are launched in the same
	// Availability Zone.
	AvailabilityZoneGroup?: null | string @go(,*string)

	// Deprecated.
	BlockDurationMinutes?: null | int64 @go(,*int64)

	// The date and time when the Spot Instance request was created, in UTC format
	// (for example, YYYY-MM-DDTHH:MM:SSZ).
	CreateTime?: null | time.Time @go(,*time.Time)

	// The fault codes for the Spot Instance request, if any.
	Fault?: null | #SpotInstanceStateFault @go(,*SpotInstanceStateFault)

	// The instance ID, if an instance has been launched to fulfill the Spot Instance
	// request.
	InstanceId?: null | string @go(,*string)

	// The behavior when a Spot Instance is interrupted.
	InstanceInterruptionBehavior?: null | string @go(,*string)

	// The instance launch group. Launch groups are Spot Instances that launch together
	// and terminate together.
	LaunchGroup?: null | string @go(,*string)

	// Additional information for launching instances.
	LaunchSpecification?: null | #LaunchSpecification @go(,*LaunchSpecification)

	// The Availability Zone in which the request is launched.
	LaunchedAvailabilityZone?: null | string @go(,*string)

	// The product description associated with the Spot Instance.
	ProductDescription?: null | string @go(,*string)

	// The ID of the Spot Instance request.
	SpotInstanceRequestId?: null | string @go(,*string)

	// The maximum price per hour that you are willing to pay for a Spot Instance.
	SpotPrice?: null | string @go(,*string)

	// The state of the Spot Instance request. Spot status information helps track
	// your Spot Instance requests. For more information, see Spot status (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html)
	// in the Amazon EC2 User Guide for Linux Instances.
	State?: null | string @go(,*string)

	// The status code and status message describing the Spot Instance request.
	Status?: null | #SpotInstanceStatus @go(,*SpotInstanceStatus)

	// Any tags assigned to the resource.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The Spot Instance request type.
	Type?: null | string @go(,*string)

	// The start date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	// The request becomes active at this date and time.
	ValidFrom?: null | time.Time @go(,*time.Time)

	// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ).
	//
	//    * For a persistent request, the request remains active until the validUntil
	//    date and time is reached. Otherwise, the request remains active until
	//    you cancel it.
	//
	//    * For a one-time request, the request remains active until all instances
	//    launch, the request is canceled, or the validUntil date and time is reached.
	//    By default, the request is valid for 7 days from the date the request
	//    was created.
	ValidUntil?: null | time.Time @go(,*time.Time)
}

// Describes a Spot Instance state change.
#SpotInstanceStateFault: {
	// The reason code for the Spot Instance state change.
	Code?: null | string @go(,*string)

	// The message for the Spot Instance state change.
	Message?: null | string @go(,*string)
}

// Describes the status of a Spot Instance request.
#SpotInstanceStatus: {
	// The status code. For a list of status codes, see Spot status codes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand)
	// in the Amazon EC2 User Guide for Linux Instances.
	Code?: null | string @go(,*string)

	// The description for the status code.
	Message?: null | string @go(,*string)

	// The date and time of the most recent status update, in UTC format (for example,
	// YYYY-MM-DDTHH:MM:SSZ).
	UpdateTime?: null | time.Time @go(,*time.Time)
}

// The strategies for managing your Spot Instances that are at an elevated risk
// of being interrupted.
#SpotMaintenanceStrategies: {
	// The strategy to use when Amazon EC2 emits a signal that your Spot Instance
	// is at an elevated risk of being interrupted.
	CapacityRebalance?: null | #SpotCapacityRebalance @go(,*SpotCapacityRebalance)
}

// The options for Spot Instances.
#SpotMarketOptions: {
	// Deprecated.
	BlockDurationMinutes?: null | int64 @go(,*int64)

	// The behavior when a Spot Instance is interrupted. The default is terminate.
	InstanceInterruptionBehavior?: null | string @go(,*string)

	// The maximum hourly price you're willing to pay for the Spot Instances. The
	// default is the On-Demand price.
	MaxPrice?: null | string @go(,*string)

	// The Spot Instance request type. For RunInstances (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances),
	// persistent Spot Instance requests are only supported when the instance interruption
	// behavior is either hibernate or stop.
	SpotInstanceType?: null | string @go(,*string)

	// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported
	// only for persistent requests.
	//
	//    * For a persistent request, the request remains active until the ValidUntil
	//    date and time is reached. Otherwise, the request remains active until
	//    you cancel it.
	//
	//    * For a one-time request, ValidUntil is not supported. The request remains
	//    active until all instances launch or you cancel the request.
	ValidUntil?: null | time.Time @go(,*time.Time)
}

// Describes the configuration of Spot Instances in an EC2 Fleet.
#SpotOptions: {
	// Indicates how to allocate the target Spot Instance capacity across the Spot
	// Instance pools specified by the EC2 Fleet.
	//
	// If the allocation strategy is lowest-price, EC2 Fleet launches instances
	// from the Spot Instance pools with the lowest price. This is the default allocation
	// strategy.
	//
	// If the allocation strategy is diversified, EC2 Fleet launches instances from
	// all of the Spot Instance pools that you specify.
	//
	// If the allocation strategy is capacity-optimized (recommended), EC2 Fleet
	// launches instances from Spot Instance pools with optimal capacity for the
	// number of instances that are launching. To give certain instance types a
	// higher chance of launching first, use capacity-optimized-prioritized. Set
	// a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides.
	// You can assign the same priority to different LaunchTemplateOverrides. EC2
	// implements the priorities on a best-effort basis, but optimizes for capacity
	// first. capacity-optimized-prioritized is supported only if your fleet uses
	// a launch template. Note that if the On-Demand AllocationStrategy is set to
	// prioritized, the same priority is applied when fulfilling On-Demand capacity.
	AllocationStrategy?: null | string @go(,*string)

	// The behavior when a Spot Instance is interrupted. The default is terminate.
	InstanceInterruptionBehavior?: null | string @go(,*string)

	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when AllocationStrategy is set to lowest-price. EC2 Fleet selects
	// the cheapest Spot pools and evenly allocates your target Spot capacity across
	// the number of Spot pools that you specify.
	//
	// Note that EC2 Fleet attempts to draw Spot Instances from the number of pools
	// that you specify on a best effort basis. If a pool runs out of Spot capacity
	// before fulfilling your target capacity, EC2 Fleet will continue to fulfill
	// your request by drawing from the next cheapest pool. To ensure that your
	// target capacity is met, you might receive Spot Instances from more than the
	// number of pools that you specified. Similarly, if most of the pools have
	// no Spot capacity, you might receive your full target capacity from fewer
	// than the number of pools that you specified.
	InstancePoolsToUseCount?: null | int64 @go(,*int64)

	// The strategies for managing your workloads on your Spot Instances that will
	// be interrupted. Currently only the capacity rebalance strategy is available.
	MaintenanceStrategies?: null | #FleetSpotMaintenanceStrategies @go(,*FleetSpotMaintenanceStrategies)

	// The maximum amount per hour for Spot Instances that you're willing to pay.
	MaxTotalPrice?: null | string @go(,*string)

	// The minimum target capacity for Spot Instances in the fleet. If the minimum
	// target capacity is not reached, the fleet launches no instances.
	MinTargetCapacity?: null | int64 @go(,*int64)

	// Indicates that the fleet launches all Spot Instances into a single Availability
	// Zone. Supported only for fleets of type instant.
	SingleAvailabilityZone?: null | bool @go(,*bool)

	// Indicates that the fleet uses a single instance type to launch all Spot Instances
	// in the fleet. Supported only for fleets of type instant.
	SingleInstanceType?: null | bool @go(,*bool)
}

// Describes the configuration of Spot Instances in an EC2 Fleet request.
#SpotOptionsRequest: {
	// Indicates how to allocate the target Spot Instance capacity across the Spot
	// Instance pools specified by the EC2 Fleet.
	//
	// If the allocation strategy is lowest-price, EC2 Fleet launches instances
	// from the Spot Instance pools with the lowest price. This is the default allocation
	// strategy.
	//
	// If the allocation strategy is diversified, EC2 Fleet launches instances from
	// all of the Spot Instance pools that you specify.
	//
	// If the allocation strategy is capacity-optimized (recommended), EC2 Fleet
	// launches instances from Spot Instance pools with optimal capacity for the
	// number of instances that are launching. To give certain instance types a
	// higher chance of launching first, use capacity-optimized-prioritized. Set
	// a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides.
	// You can assign the same priority to different LaunchTemplateOverrides. EC2
	// implements the priorities on a best-effort basis, but optimizes for capacity
	// first. capacity-optimized-prioritized is supported only if your fleet uses
	// a launch template. Note that if the On-Demand AllocationStrategy is set to
	// prioritized, the same priority is applied when fulfilling On-Demand capacity.
	AllocationStrategy?: null | string @go(,*string)

	// The behavior when a Spot Instance is interrupted. The default is terminate.
	InstanceInterruptionBehavior?: null | string @go(,*string)

	// The number of Spot pools across which to allocate your target Spot capacity.
	// Valid only when Spot AllocationStrategy is set to lowest-price. EC2 Fleet
	// selects the cheapest Spot pools and evenly allocates your target Spot capacity
	// across the number of Spot pools that you specify.
	//
	// Note that EC2 Fleet attempts to draw Spot Instances from the number of pools
	// that you specify on a best effort basis. If a pool runs out of Spot capacity
	// before fulfilling your target capacity, EC2 Fleet will continue to fulfill
	// your request by drawing from the next cheapest pool. To ensure that your
	// target capacity is met, you might receive Spot Instances from more than the
	// number of pools that you specified. Similarly, if most of the pools have
	// no Spot capacity, you might receive your full target capacity from fewer
	// than the number of pools that you specified.
	InstancePoolsToUseCount?: null | int64 @go(,*int64)

	// The strategies for managing your Spot Instances that are at an elevated risk
	// of being interrupted.
	MaintenanceStrategies?: null | #FleetSpotMaintenanceStrategiesRequest @go(,*FleetSpotMaintenanceStrategiesRequest)

	// The maximum amount per hour for Spot Instances that you're willing to pay.
	MaxTotalPrice?: null | string @go(,*string)

	// The minimum target capacity for Spot Instances in the fleet. If the minimum
	// target capacity is not reached, the fleet launches no instances.
	MinTargetCapacity?: null | int64 @go(,*int64)

	// Indicates that the fleet launches all Spot Instances into a single Availability
	// Zone. Supported only for fleets of type instant.
	SingleAvailabilityZone?: null | bool @go(,*bool)

	// Indicates that the fleet uses a single instance type to launch all Spot Instances
	// in the fleet. Supported only for fleets of type instant.
	SingleInstanceType?: null | bool @go(,*bool)
}

// Describes Spot Instance placement.
#SpotPlacement: {
	// The Availability Zone.
	//
	// [Spot Fleet only] To specify multiple Availability Zones, separate them using
	// commas; for example, "us-west-2a, us-west-2b".
	AvailabilityZone?: null | string @go(,*string)

	// The name of the placement group.
	GroupName?: null | string @go(,*string)

	// The tenancy of the instance (if the instance is running in a VPC). An instance
	// with a tenancy of dedicated runs on single-tenant hardware. The host tenancy
	// is not supported for Spot Instances.
	Tenancy?: null | string @go(,*string)
}

// Describes the maximum price per hour that you are willing to pay for a Spot
// Instance.
#SpotPrice: {
	// The Availability Zone.
	AvailabilityZone?: null | string @go(,*string)

	// The instance type.
	InstanceType?: null | string @go(,*string)

	// A general description of the AMI.
	ProductDescription?: null | string @go(,*string)

	// The maximum price per hour that you are willing to pay for a Spot Instance.
	SpotPrice?: null | string @go(,*string)

	// The date and time the request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
	Timestamp?: null | time.Time @go(,*time.Time)
}

// Describes a stale rule in a security group.
#StaleIpPermission: {
	// The start of the port range for the TCP and UDP protocols, or an ICMP type
	// number. A value of -1 indicates all ICMP types.
	FromPort?: null | int64 @go(,*int64)

	// The IP protocol name (for tcp, udp, and icmp) or number (see Protocol Numbers)
	// (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
	IpProtocol?: null | string @go(,*string)

	// The IP ranges. Not applicable for stale security group rules.
	IpRanges: [...null | string] @go(,[]*string)

	// The prefix list IDs. Not applicable for stale security group rules.
	PrefixListIds: [...null | string] @go(,[]*string)

	// The end of the port range for the TCP and UDP protocols, or an ICMP type
	// number. A value of -1 indicates all ICMP types.
	ToPort?: null | int64 @go(,*int64)

	// The security group pairs. Returns the ID of the referenced security group
	// and VPC, and the ID and status of the VPC peering connection.
	UserIdGroupPairs: [...null | #UserIdGroupPair] @go(,[]*UserIdGroupPair)
}

// Describes a stale security group (a security group that contains stale rules).
#StaleSecurityGroup: {
	// The description of the security group.
	Description?: null | string @go(,*string)

	// The ID of the security group.
	GroupId?: null | string @go(,*string)

	// The name of the security group.
	GroupName?: null | string @go(,*string)

	// Information about the stale inbound rules in the security group.
	StaleIpPermissions: [...null | #StaleIpPermission] @go(,[]*StaleIpPermission)

	// Information about the stale outbound rules in the security group.
	StaleIpPermissionsEgress: [...null | #StaleIpPermission] @go(,[]*StaleIpPermission)

	// The ID of the VPC for the security group.
	VpcId?: null | string @go(,*string)
}

#StartInstancesInput: {
	// Reserved.
	AdditionalInfo?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the instances.
	//
	// InstanceIds is a required field
	InstanceIds: [...null | string] @go(,[]*string)
}

#StartInstancesOutput: {
	// Information about the started instances.
	StartingInstances: [...null | #InstanceStateChange] @go(,[]*InstanceStateChange)
}

#StartNetworkInsightsAnalysisInput: {
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see How to ensure idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The Amazon Resource Names (ARN) of the resources that the path must traverse.
	FilterInArns: [...null | string] @go(,[]*string)

	// The ID of the path.
	//
	// NetworkInsightsPathId is a required field
	NetworkInsightsPathId?: null | string @go(,*string)

	// The tags to apply.
	TagSpecifications: [...null | #TagSpecification] @go(,[]*TagSpecification)
}

#StartNetworkInsightsAnalysisOutput: {
	// Information about the network insights analysis.
	NetworkInsightsAnalysis?: null | #NetworkInsightsAnalysis @go(,*NetworkInsightsAnalysis)
}

#StartVpcEndpointServicePrivateDnsVerificationInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the endpoint service.
	//
	// ServiceId is a required field
	ServiceId?: null | string @go(,*string)
}

#StartVpcEndpointServicePrivateDnsVerificationOutput: {
	// Returns true if the request succeeds; otherwise, it returns an error.
	ReturnValue?: null | bool @go(,*bool)
}

// Describes a state change.
#StateReason: {
	// The reason code for the state change.
	Code?: null | string @go(,*string)

	// The message for the state change.
	//
	//    * Server.InsufficientInstanceCapacity: There was insufficient capacity
	//    available to satisfy the launch request.
	//
	//    * Server.InternalError: An internal error caused the instance to terminate
	//    during launch.
	//
	//    * Server.ScheduledStop: The instance was stopped due to a scheduled retirement.
	//
	//    * Server.SpotInstanceShutdown: The instance was stopped because the number
	//    of Spot requests with a maximum price equal to or higher than the Spot
	//    price exceeded available capacity or because of an increase in the Spot
	//    price.
	//
	//    * Server.SpotInstanceTermination: The instance was terminated because
	//    the number of Spot requests with a maximum price equal to or higher than
	//    the Spot price exceeded available capacity or because of an increase in
	//    the Spot price.
	//
	//    * Client.InstanceInitiatedShutdown: The instance was shut down using the
	//    shutdown -h command from the instance.
	//
	//    * Client.InstanceTerminated: The instance was terminated or rebooted during
	//    AMI creation.
	//
	//    * Client.InternalError: A client error caused the instance to terminate
	//    during launch.
	//
	//    * Client.InvalidSnapshot.NotFound: The specified snapshot was not found.
	//
	//    * Client.UserInitiatedHibernate: Hibernation was initiated on the instance.
	//
	//    * Client.UserInitiatedShutdown: The instance was shut down using the Amazon
	//    EC2 API.
	//
	//    * Client.VolumeLimitExceeded: The limit on the number of EBS volumes or
	//    total storage was exceeded. Decrease usage or request an increase in your
	//    account limits.
	Message?: null | string @go(,*string)
}

#StopInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// Forces the instances to stop. The instances do not have an opportunity to
	// flush file system caches or file system metadata. If you use this option,
	// you must perform file system check and repair procedures. This option is
	// not recommended for Windows instances.
	//
	// Default: false
	Force?: null | bool @go(,*bool)

	// Hibernates the instance if the instance was enabled for hibernation at launch.
	// If the instance cannot hibernate successfully, a normal shutdown occurs.
	// For more information, see Hibernate your instance (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html)
	// in the Amazon EC2 User Guide.
	//
	// Default: false
	Hibernate?: null | bool @go(,*bool)

	// The IDs of the instances.
	//
	// InstanceIds is a required field
	InstanceIds: [...null | string] @go(,[]*string)
}

#StopInstancesOutput: {
	// Information about the stopped instances.
	StoppingInstances: [...null | #InstanceStateChange] @go(,[]*InstanceStateChange)
}

// Describes the storage location for an instance store-backed AMI.
#Storage: {
	// An Amazon S3 storage location.
	S3?: null | #S3Storage @go(,*S3Storage)
}

// Describes a storage location in Amazon S3.
#StorageLocation: {
	// The name of the S3 bucket.
	Bucket?: null | string @go(,*string)

	// The key.
	Key?: null | string @go(,*string)
}

// The information about the AMI store task, including the progress of the task.
#StoreImageTaskResult: {
	// The ID of the AMI that is being stored.
	AmiId?: null | string @go(,*string)

	// The name of the S3 bucket that contains the stored AMI object.
	Bucket?: null | string @go(,*string)

	// The progress of the task as a percentage.
	ProgressPercentage?: null | int64 @go(,*int64)

	// The name of the stored AMI object in the bucket.
	S3objectKey?: null | string @go(,*string)

	// If the tasks fails, the reason for the failure is returned. If the task succeeds,
	// null is returned.
	StoreTaskFailureReason?: null | string @go(,*string)

	// The state of the store task (InProgress, Completed, or Failed).
	StoreTaskState?: null | string @go(,*string)

	// The time the task started.
	TaskStartTime?: null | time.Time @go(,*time.Time)
}

// Describes a subnet.
#Subnet: {
	// Indicates whether a network interface created in this subnet (including a
	// network interface created by RunInstances) receives an IPv6 address.
	AssignIpv6AddressOnCreation?: null | bool @go(,*bool)

	// The Availability Zone of the subnet.
	AvailabilityZone?: null | string @go(,*string)

	// The AZ ID of the subnet.
	AvailabilityZoneId?: null | string @go(,*string)

	// The number of unused private IPv4 addresses in the subnet. The IPv4 addresses
	// for any stopped instances are considered unavailable.
	AvailableIpAddressCount?: null | int64 @go(,*int64)

	// The IPv4 CIDR block assigned to the subnet.
	CidrBlock?: null | string @go(,*string)

	// The customer-owned IPv4 address pool associated with the subnet.
	CustomerOwnedIpv4Pool?: null | string @go(,*string)

	// Indicates whether this is the default subnet for the Availability Zone.
	DefaultForAz?: null | bool @go(,*bool)

	// Information about the IPv6 CIDR blocks associated with the subnet.
	Ipv6CidrBlockAssociationSet: [...null | #SubnetIpv6CidrBlockAssociation] @go(,[]*SubnetIpv6CidrBlockAssociation)

	// Indicates whether a network interface created in this subnet (including a
	// network interface created by RunInstances) receives a customer-owned IPv4
	// address.
	MapCustomerOwnedIpOnLaunch?: null | bool @go(,*bool)

	// Indicates whether instances launched in this subnet receive a public IPv4
	// address.
	MapPublicIpOnLaunch?: null | bool @go(,*bool)

	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn?: null | string @go(,*string)

	// The ID of the Amazon Web Services account that owns the subnet.
	OwnerId?: null | string @go(,*string)

	// The current state of the subnet.
	State?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the subnet.
	SubnetArn?: null | string @go(,*string)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)

	// Any tags assigned to the subnet.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC the subnet is in.
	VpcId?: null | string @go(,*string)
}

// Describes the subnet association with the transit gateway multicast domain.
#SubnetAssociation: {
	// The state of the subnet association.
	State?: null | string @go(,*string)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)
}

// Describes the state of a CIDR block.
#SubnetCidrBlockState: {
	// The state of a CIDR block.
	State?: null | string @go(,*string)

	// A message about the status of the CIDR block, if applicable.
	StatusMessage?: null | string @go(,*string)
}

// Describes a subnet CIDR reservation.
#SubnetCidrReservation: {
	// The CIDR that has been reserved.
	Cidr?: null | string @go(,*string)

	// The description assigned to the subnet CIDR reservation.
	Description?: null | string @go(,*string)

	// The ID of the account that owns the subnet CIDR reservation.
	OwnerId?: null | string @go(,*string)

	// The type of reservation.
	ReservationType?: null | string @go(,*string)

	// The ID of the subnet CIDR reservation.
	SubnetCidrReservationId?: null | string @go(,*string)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)

	// The tags assigned to the subnet CIDR reservation.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// Describes an IPv6 CIDR block associated with a subnet.
#SubnetIpv6CidrBlockAssociation: {
	// The association ID for the CIDR block.
	AssociationId?: null | string @go(,*string)

	// The IPv6 CIDR block.
	Ipv6CidrBlock?: null | string @go(,*string)

	// Information about the state of the CIDR block.
	Ipv6CidrBlockState?: null | #SubnetCidrBlockState @go(,*SubnetCidrBlockState)
}

// Describes the burstable performance instance whose credit option for CPU
// usage was successfully modified.
#SuccessfulInstanceCreditSpecificationItem: {
	// The ID of the instance.
	InstanceId?: null | string @go(,*string)
}

// Describes a Reserved Instance whose queued purchase was successfully deleted.
#SuccessfulQueuedPurchaseDeletion: {
	// The ID of the Reserved Instance.
	ReservedInstancesId?: null | string @go(,*string)
}

// Describes a tag.
#Tag: {
	// The key of the tag.
	//
	// Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode
	// characters. May not begin with aws:.
	Key?: null | string @go(,*string)

	// The value of the tag.
	//
	// Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode
	// characters.
	Value?: null | string @go(,*string)
}

// Describes a tag.
#TagDescription: {
	// The tag key.
	Key?: null | string @go(,*string)

	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The resource type.
	ResourceType?: null | string @go(,*string)

	// The tag value.
	Value?: null | string @go(,*string)
}

// The tags to apply to a resource when the resource is being created.
#TagSpecification: {
	// The type of resource to tag. Currently, the resource types that support tagging
	// on creation are: capacity-reservation | carrier-gateway | client-vpn-endpoint
	// | customer-gateway | dedicated-host | dhcp-options | egress-only-internet-gateway
	// | elastic-ip | elastic-gpu | export-image-task | export-instance-task | fleet
	// | fpga-image | host-reservation | image| import-image-task | import-snapshot-task
	// | instance | instance-event-window | internet-gateway | ipv4pool-ec2 | ipv6pool-ec2
	// | key-pair | launch-template | local-gateway-route-table-vpc-association
	// | placement-group | prefix-list | natgateway | network-acl | network-interface
	// | reserved-instances |route-table | security-group| snapshot | spot-fleet-request
	// | spot-instances-request | snapshot | subnet | traffic-mirror-filter | traffic-mirror-session
	// | traffic-mirror-target | transit-gateway | transit-gateway-attachment |
	// transit-gateway-multicast-domain | transit-gateway-route-table | volume |vpc
	// | vpc-peering-connection | vpc-endpoint (for interface and gateway endpoints)
	// | vpc-endpoint-service (for Amazon Web Services PrivateLink) | vpc-flow-log
	// | vpn-connection | vpn-gateway.
	//
	// To tag a resource after it has been created, see CreateTags (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
	ResourceType?: null | string @go(,*string)

	// The tags to apply to the resource.
	Tags: [...null | #Tag] @go(,[]*Tag)
}

// The number of units to request. You can choose to set the target capacity
// in terms of instances or a performance characteristic that is important to
// your application workload, such as vCPUs, memory, or I/O. If the request
// type is maintain, you can specify a target capacity of 0 and add capacity
// later.
//
// You can use the On-Demand Instance MaxTotalPrice parameter, the Spot Instance
// MaxTotalPrice, or both to ensure that your fleet cost does not exceed your
// budget. If you set a maximum price per hour for the On-Demand Instances and
// Spot Instances in your request, EC2 Fleet will launch instances until it
// reaches the maximum amount that you're willing to pay. When the maximum amount
// you're willing to pay is reached, the fleet stops launching instances even
// if it hasn’t met the target capacity. The MaxTotalPrice parameters are
// located in OnDemandOptions (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptions.html)
// and SpotOptions (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptions).
#TargetCapacitySpecification: {
	// The default TotalTargetCapacity, which is either Spot or On-Demand.
	DefaultTargetCapacityType?: null | string @go(,*string)

	// The number of On-Demand units to request. If you specify a target capacity
	// for Spot units, you cannot specify a target capacity for On-Demand units.
	OnDemandTargetCapacity?: null | int64 @go(,*int64)

	// The maximum number of Spot units to launch. If you specify a target capacity
	// for On-Demand units, you cannot specify a target capacity for Spot units.
	SpotTargetCapacity?: null | int64 @go(,*int64)

	// The number of units to request, filled using DefaultTargetCapacityType.
	TotalTargetCapacity?: null | int64 @go(,*int64)
}

// The number of units to request. You can choose to set the target capacity
// as the number of instances. Or you can set the target capacity to a performance
// characteristic that is important to your application workload, such as vCPUs,
// memory, or I/O. If the request type is maintain, you can specify a target
// capacity of 0 and add capacity later.
//
// You can use the On-Demand Instance MaxTotalPrice parameter, the Spot Instance
// MaxTotalPrice parameter, or both parameters to ensure that your fleet cost
// does not exceed your budget. If you set a maximum price per hour for the
// On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch
// instances until it reaches the maximum amount that you're willing to pay.
// When the maximum amount you're willing to pay is reached, the fleet stops
// launching instances even if it hasn’t met the target capacity. The MaxTotalPrice
// parameters are located in OnDemandOptionsRequest (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptionsRequest)
// and SpotOptionsRequest (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptionsRequest).
#TargetCapacitySpecificationRequest: {
	// The default TotalTargetCapacity, which is either Spot or On-Demand.
	DefaultTargetCapacityType?: null | string @go(,*string)

	// The number of On-Demand units to request.
	OnDemandTargetCapacity?: null | int64 @go(,*int64)

	// The number of Spot units to request.
	SpotTargetCapacity?: null | int64 @go(,*int64)

	// The number of units to request, filled using DefaultTargetCapacityType.
	//
	// TotalTargetCapacity is a required field
	TotalTargetCapacity?: null | int64 @go(,*int64)
}

// Information about the Convertible Reserved Instance offering.
#TargetConfiguration: {
	// The number of instances the Convertible Reserved Instance offering can be
	// applied to. This parameter is reserved and cannot be specified in a request
	InstanceCount?: null | int64 @go(,*int64)

	// The ID of the Convertible Reserved Instance offering.
	OfferingId?: null | string @go(,*string)
}

// Details about the target configuration.
#TargetConfigurationRequest: {
	// The number of instances the Covertible Reserved Instance offering can be
	// applied to. This parameter is reserved and cannot be specified in a request
	InstanceCount?: null | int64 @go(,*int64)

	// The Convertible Reserved Instance offering ID.
	//
	// OfferingId is a required field
	OfferingId?: null | string @go(,*string)
}

// Describes a load balancer target group.
#TargetGroup: {
	// The Amazon Resource Name (ARN) of the target group.
	Arn?: null | string @go(,*string)
}

// Describes the target groups to attach to a Spot Fleet. Spot Fleet registers
// the running Spot Instances with these target groups.
#TargetGroupsConfig: {
	// One or more target groups.
	TargetGroups: [...null | #TargetGroup] @go(,[]*TargetGroup)
}

// Describes a target network associated with a Client VPN endpoint.
#TargetNetwork: {
	// The ID of the association.
	AssociationId?: null | string @go(,*string)

	// The ID of the Client VPN endpoint with which the target network is associated.
	ClientVpnEndpointId?: null | string @go(,*string)

	// The IDs of the security groups applied to the target network association.
	SecurityGroups: [...null | string] @go(,[]*string)

	// The current state of the target network association.
	Status?: null | #AssociationStatus @go(,*AssociationStatus)

	// The ID of the subnet specified as the target network.
	TargetNetworkId?: null | string @go(,*string)

	// The ID of the VPC in which the target network (subnet) is located.
	VpcId?: null | string @go(,*string)
}

// The total value of the new Convertible Reserved Instances.
#TargetReservationValue: {
	// The total value of the Convertible Reserved Instances that make up the exchange.
	// This is the sum of the list value, remaining upfront price, and additional
	// upfront cost of the exchange.
	ReservationValue?: null | #ReservationValue @go(,*ReservationValue)

	// The configuration of the Convertible Reserved Instances that make up the
	// exchange.
	TargetConfiguration?: null | #TargetConfiguration @go(,*TargetConfiguration)
}

#TerminateClientVpnConnectionsInput: {
	// The ID of the Client VPN endpoint to which the client is connected.
	//
	// ClientVpnEndpointId is a required field
	ClientVpnEndpointId?: null | string @go(,*string)

	// The ID of the client connection to be terminated.
	ConnectionId?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The name of the user who initiated the connection. Use this option to terminate
	// all active connections for the specified user. This option can only be used
	// if the user has established up to five connections.
	Username?: null | string @go(,*string)
}

#TerminateClientVpnConnectionsOutput: {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId?: null | string @go(,*string)

	// The current state of the client connections.
	ConnectionStatuses: [...null | #TerminateConnectionStatus] @go(,[]*TerminateConnectionStatus)

	// The user who established the terminated client connections.
	Username?: null | string @go(,*string)
}

// Information about a terminated Client VPN endpoint client connection.
#TerminateConnectionStatus: {
	// The ID of the client connection.
	ConnectionId?: null | string @go(,*string)

	// A message about the status of the client connection, if applicable.
	CurrentStatus?: null | #ClientVpnConnectionStatus @go(,*ClientVpnConnectionStatus)

	// The state of the client connection.
	PreviousStatus?: null | #ClientVpnConnectionStatus @go(,*ClientVpnConnectionStatus)
}

#TerminateInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the instances.
	//
	// Constraints: Up to 1000 instance IDs. We recommend breaking up this request
	// into smaller batches.
	//
	// InstanceIds is a required field
	InstanceIds: [...null | string] @go(,[]*string)
}

#TerminateInstancesOutput: {
	// Information about the terminated instances.
	TerminatingInstances: [...null | #InstanceStateChange] @go(,[]*InstanceStateChange)
}

// Describes the Traffic Mirror filter.
#TrafficMirrorFilter: {
	// The description of the Traffic Mirror filter.
	Description?: null | string @go(,*string)

	// Information about the egress rules that are associated with the Traffic Mirror
	// filter.
	EgressFilterRules: [...null | #TrafficMirrorFilterRule] @go(,[]*TrafficMirrorFilterRule)

	// Information about the ingress rules that are associated with the Traffic
	// Mirror filter.
	IngressFilterRules: [...null | #TrafficMirrorFilterRule] @go(,[]*TrafficMirrorFilterRule)

	// The network service traffic that is associated with the Traffic Mirror filter.
	NetworkServices: [...null | string] @go(,[]*string)

	// The tags assigned to the Traffic Mirror filter.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the Traffic Mirror filter.
	TrafficMirrorFilterId?: null | string @go(,*string)
}

// Describes the Traffic Mirror rule.
#TrafficMirrorFilterRule: {
	// The description of the Traffic Mirror rule.
	Description?: null | string @go(,*string)

	// The destination CIDR block assigned to the Traffic Mirror rule.
	DestinationCidrBlock?: null | string @go(,*string)

	// The destination port range assigned to the Traffic Mirror rule.
	DestinationPortRange?: null | #TrafficMirrorPortRange @go(,*TrafficMirrorPortRange)

	// The protocol assigned to the Traffic Mirror rule.
	Protocol?: null | int64 @go(,*int64)

	// The action assigned to the Traffic Mirror rule.
	RuleAction?: null | string @go(,*string)

	// The rule number of the Traffic Mirror rule.
	RuleNumber?: null | int64 @go(,*int64)

	// The source CIDR block assigned to the Traffic Mirror rule.
	SourceCidrBlock?: null | string @go(,*string)

	// The source port range assigned to the Traffic Mirror rule.
	SourcePortRange?: null | #TrafficMirrorPortRange @go(,*TrafficMirrorPortRange)

	// The traffic direction assigned to the Traffic Mirror rule.
	TrafficDirection?: null | string @go(,*string)

	// The ID of the Traffic Mirror filter that the rule is associated with.
	TrafficMirrorFilterId?: null | string @go(,*string)

	// The ID of the Traffic Mirror rule.
	TrafficMirrorFilterRuleId?: null | string @go(,*string)
}

// Describes the Traffic Mirror port range.
#TrafficMirrorPortRange: {
	// The start of the Traffic Mirror port range. This applies to the TCP and UDP
	// protocols.
	FromPort?: null | int64 @go(,*int64)

	// The end of the Traffic Mirror port range. This applies to the TCP and UDP
	// protocols.
	ToPort?: null | int64 @go(,*int64)
}

// Information about the Traffic Mirror filter rule port range.
#TrafficMirrorPortRangeRequest: {
	// The first port in the Traffic Mirror port range. This applies to the TCP
	// and UDP protocols.
	FromPort?: null | int64 @go(,*int64)

	// The last port in the Traffic Mirror port range. This applies to the TCP and
	// UDP protocols.
	ToPort?: null | int64 @go(,*int64)
}

// Describes a Traffic Mirror session.
#TrafficMirrorSession: {
	// The description of the Traffic Mirror session.
	Description?: null | string @go(,*string)

	// The ID of the Traffic Mirror session's network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The ID of the account that owns the Traffic Mirror session.
	OwnerId?: null | string @go(,*string)

	// The number of bytes in each packet to mirror. These are the bytes after the
	// VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror.
	// For example, if you set this value to 100, then the first 100 bytes that
	// meet the filter criteria are copied to the target. Do not specify this parameter
	// when you want to mirror the entire packet
	PacketLength?: null | int64 @go(,*int64)

	// The session number determines the order in which sessions are evaluated when
	// an interface is used by multiple sessions. The first session with a matching
	// filter is the one that mirrors the packets.
	//
	// Valid values are 1-32766.
	SessionNumber?: null | int64 @go(,*int64)

	// The tags assigned to the Traffic Mirror session.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the Traffic Mirror filter.
	TrafficMirrorFilterId?: null | string @go(,*string)

	// The ID for the Traffic Mirror session.
	TrafficMirrorSessionId?: null | string @go(,*string)

	// The ID of the Traffic Mirror target.
	TrafficMirrorTargetId?: null | string @go(,*string)

	// The virtual network ID associated with the Traffic Mirror session.
	VirtualNetworkId?: null | int64 @go(,*int64)
}

// Describes a Traffic Mirror target.
#TrafficMirrorTarget: {
	// Information about the Traffic Mirror target.
	Description?: null | string @go(,*string)

	// The network interface ID that is attached to the target.
	NetworkInterfaceId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the Network Load Balancer.
	NetworkLoadBalancerArn?: null | string @go(,*string)

	// The ID of the account that owns the Traffic Mirror target.
	OwnerId?: null | string @go(,*string)

	// The tags assigned to the Traffic Mirror target.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the Traffic Mirror target.
	TrafficMirrorTargetId?: null | string @go(,*string)

	// The type of Traffic Mirror target.
	Type?: null | string @go(,*string)
}

// Describes a transit gateway.
#TransitGateway: {
	// The creation time.
	CreationTime?: null | time.Time @go(,*time.Time)

	// The description of the transit gateway.
	Description?: null | string @go(,*string)

	// The transit gateway options.
	Options?: null | #TransitGatewayOptions @go(,*TransitGatewayOptions)

	// The ID of the AWS account ID that owns the transit gateway.
	OwnerId?: null | string @go(,*string)

	// The state of the transit gateway.
	State?: null | string @go(,*string)

	// The tags for the transit gateway.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The Amazon Resource Name (ARN) of the transit gateway.
	TransitGatewayArn?: null | string @go(,*string)

	// The ID of the transit gateway.
	TransitGatewayId?: null | string @go(,*string)
}

// Describes an association between a resource attachment and a transit gateway
// route table.
#TransitGatewayAssociation: {
	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The resource type. Note that the tgw-peering resource type has been deprecated.
	ResourceType?: null | string @go(,*string)

	// The state of the association.
	State?: null | string @go(,*string)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

// Describes an attachment between a resource and a transit gateway.
#TransitGatewayAttachment: {
	// The association.
	Association?: null | #TransitGatewayAttachmentAssociation @go(,*TransitGatewayAttachmentAssociation)

	// The creation time.
	CreationTime?: null | time.Time @go(,*time.Time)

	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The ID of the AWS account that owns the resource.
	ResourceOwnerId?: null | string @go(,*string)

	// The resource type. Note that the tgw-peering resource type has been deprecated.
	ResourceType?: null | string @go(,*string)

	// The attachment state. Note that the initiating state has been deprecated.
	State?: null | string @go(,*string)

	// The tags for the attachment.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The ID of the AWS account that owns the transit gateway.
	TransitGatewayOwnerId?: null | string @go(,*string)
}

// Describes an association.
#TransitGatewayAttachmentAssociation: {
	// The state of the association.
	State?: null | string @go(,*string)

	// The ID of the route table for the transit gateway.
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

// The BGP configuration information.
#TransitGatewayAttachmentBgpConfiguration: {
	// The BGP status.
	BgpStatus?: null | string @go(,*string)

	// The interior BGP peer IP address for the appliance.
	PeerAddress?: null | string @go(,*string)

	// The peer Autonomous System Number (ASN).
	PeerAsn?: null | int64 @go(,*int64)

	// The interior BGP peer IP address for the transit gateway.
	TransitGatewayAddress?: null | string @go(,*string)

	// The transit gateway Autonomous System Number (ASN).
	TransitGatewayAsn?: null | int64 @go(,*int64)
}

// Describes a propagation route table.
#TransitGatewayAttachmentPropagation: {
	// The state of the propagation route table.
	State?: null | string @go(,*string)

	// The ID of the propagation route table.
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

// Describes a transit gateway Connect attachment.
#TransitGatewayConnect: {
	// The creation time.
	CreationTime?: null | time.Time @go(,*time.Time)

	// The Connect attachment options.
	Options?: null | #TransitGatewayConnectOptions @go(,*TransitGatewayConnectOptions)

	// The state of the attachment.
	State?: null | string @go(,*string)

	// The tags for the attachment.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the Connect attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The ID of the attachment from which the Connect attachment was created.
	TransportTransitGatewayAttachmentId?: null | string @go(,*string)
}

// Describes the Connect attachment options.
#TransitGatewayConnectOptions: {
	// The tunnel protocol.
	Protocol?: null | string @go(,*string)
}

// Describes a transit gateway Connect peer.
#TransitGatewayConnectPeer: {
	// The Connect peer details.
	ConnectPeerConfiguration?: null | #TransitGatewayConnectPeerConfiguration @go(,*TransitGatewayConnectPeerConfiguration)

	// The creation time.
	CreationTime?: null | time.Time @go(,*time.Time)

	// The state of the Connect peer.
	State?: null | string @go(,*string)

	// The tags for the Connect peer.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the Connect attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the Connect peer.
	TransitGatewayConnectPeerId?: null | string @go(,*string)
}

// Describes the Connect peer details.
#TransitGatewayConnectPeerConfiguration: {
	// The BGP configuration details.
	BgpConfigurations: [...null | #TransitGatewayAttachmentBgpConfiguration] @go(,[]*TransitGatewayAttachmentBgpConfiguration)

	// The range of interior BGP peer IP addresses.
	InsideCidrBlocks: [...null | string] @go(,[]*string)

	// The Connect peer IP address on the appliance side of the tunnel.
	PeerAddress?: null | string @go(,*string)

	// The tunnel protocol.
	Protocol?: null | string @go(,*string)

	// The Connect peer IP address on the transit gateway side of the tunnel.
	TransitGatewayAddress?: null | string @go(,*string)
}

// The BGP options for the Connect attachment.
#TransitGatewayConnectRequestBgpOptions: {
	// The peer Autonomous System Number (ASN).
	PeerAsn?: null | int64 @go(,*int64)
}

// Describes the deregistered transit gateway multicast group members.
#TransitGatewayMulticastDeregisteredGroupMembers: {
	// The network interface IDs of the deregistered members.
	DeregisteredNetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

// Describes the deregistered transit gateway multicast group sources.
#TransitGatewayMulticastDeregisteredGroupSources: {
	// The network interface IDs of the non-registered members.
	DeregisteredNetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

// Describes the transit gateway multicast domain.
#TransitGatewayMulticastDomain: {
	// The time the transit gateway multicast domain was created.
	CreationTime?: null | time.Time @go(,*time.Time)

	// The options for the transit gateway multicast domain.
	Options?: null | #TransitGatewayMulticastDomainOptions @go(,*TransitGatewayMulticastDomainOptions)

	// The ID of the AWS account that owns the transit gateway multiicast domain.
	OwnerId?: null | string @go(,*string)

	// The state of the transit gateway multicast domain.
	State?: null | string @go(,*string)

	// The tags for the transit gateway multicast domain.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The Amazon Resource Name (ARN) of the transit gateway multicast domain.
	TransitGatewayMulticastDomainArn?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

// Describes the resources associated with the transit gateway multicast domain.
#TransitGatewayMulticastDomainAssociation: {
	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The ID of the AWS account that owns the transit gateway multicast domain
	// association resource.
	ResourceOwnerId?: null | string @go(,*string)

	// The type of resource, for example a VPC attachment.
	ResourceType?: null | string @go(,*string)

	// The subnet associated with the transit gateway multicast domain.
	Subnet?: null | #SubnetAssociation @go(,*SubnetAssociation)

	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

// Describes the multicast domain associations.
#TransitGatewayMulticastDomainAssociations: {
	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The ID of the AWS account that owns the resource.
	ResourceOwnerId?: null | string @go(,*string)

	// The type of resource, for example a VPC attachment.
	ResourceType?: null | string @go(,*string)

	// The subnets associated with the multicast domain.
	Subnets: [...null | #SubnetAssociation] @go(,[]*SubnetAssociation)

	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

// Describes the options for a transit gateway multicast domain.
#TransitGatewayMulticastDomainOptions: {
	// Indicates whether to automatically cross-account subnet associations that
	// are associated with the transit gateway multicast domain.
	AutoAcceptSharedAssociations?: null | string @go(,*string)

	// Indicates whether Internet Group Management Protocol (IGMP) version 2 is
	// turned on for the transit gateway multicast domain.
	Igmpv2Support?: null | string @go(,*string)

	// Indicates whether support for statically configuring transit gateway multicast
	// group sources is turned on.
	StaticSourcesSupport?: null | string @go(,*string)
}

// Describes the transit gateway multicast group resources.
#TransitGatewayMulticastGroup: {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress?: null | string @go(,*string)

	// Indicates that the resource is a transit gateway multicast group member.
	GroupMember?: null | bool @go(,*bool)

	// Indicates that the resource is a transit gateway multicast group member.
	GroupSource?: null | bool @go(,*bool)

	// The member type (for example, static).
	MemberType?: null | string @go(,*string)

	// The ID of the transit gateway attachment.
	NetworkInterfaceId?: null | string @go(,*string)

	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The ID of the AWS account that owns the transit gateway multicast domain
	// group resource.
	ResourceOwnerId?: null | string @go(,*string)

	// The type of resource, for example a VPC attachment.
	ResourceType?: null | string @go(,*string)

	// The source type.
	SourceType?: null | string @go(,*string)

	// The ID of the subnet.
	SubnetId?: null | string @go(,*string)

	// The ID of the transit gateway attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

// Describes the registered transit gateway multicast group members.
#TransitGatewayMulticastRegisteredGroupMembers: {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress?: null | string @go(,*string)

	// The ID of the registered network interfaces.
	RegisteredNetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

// Describes the members registered with the transit gateway multicast group.
#TransitGatewayMulticastRegisteredGroupSources: {
	// The IP address assigned to the transit gateway multicast group.
	GroupIpAddress?: null | string @go(,*string)

	// The IDs of the network interfaces members registered with the transit gateway
	// multicast group.
	RegisteredNetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The ID of the transit gateway multicast domain.
	TransitGatewayMulticastDomainId?: null | string @go(,*string)
}

// Describes the options for a transit gateway.
#TransitGatewayOptions: {
	// A private Autonomous System Number (ASN) for the Amazon side of a BGP session.
	// The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294
	// for 32-bit ASNs.
	AmazonSideAsn?: null | int64 @go(,*int64)

	// The ID of the default association route table.
	AssociationDefaultRouteTableId?: null | string @go(,*string)

	// Indicates whether attachment requests are automatically accepted.
	AutoAcceptSharedAttachments?: null | string @go(,*string)

	// Indicates whether resource attachments are automatically associated with
	// the default association route table.
	DefaultRouteTableAssociation?: null | string @go(,*string)

	// Indicates whether resource attachments automatically propagate routes to
	// the default propagation route table.
	DefaultRouteTablePropagation?: null | string @go(,*string)

	// Indicates whether DNS support is enabled.
	DnsSupport?: null | string @go(,*string)

	// Indicates whether multicast is enabled on the transit gateway
	MulticastSupport?: null | string @go(,*string)

	// The ID of the default propagation route table.
	PropagationDefaultRouteTableId?: null | string @go(,*string)

	// The transit gateway CIDR blocks.
	TransitGatewayCidrBlocks: [...null | string] @go(,[]*string)

	// Indicates whether Equal Cost Multipath Protocol support is enabled.
	VpnEcmpSupport?: null | string @go(,*string)
}

// Describes the transit gateway peering attachment.
#TransitGatewayPeeringAttachment: {
	// Information about the accepter transit gateway.
	AccepterTgwInfo?: null | #PeeringTgwInfo @go(,*PeeringTgwInfo)

	// The time the transit gateway peering attachment was created.
	CreationTime?: null | time.Time @go(,*time.Time)

	// Information about the requester transit gateway.
	RequesterTgwInfo?: null | #PeeringTgwInfo @go(,*PeeringTgwInfo)

	// The state of the transit gateway peering attachment. Note that the initiating
	// state has been deprecated.
	State?: null | string @go(,*string)

	// The status of the transit gateway peering attachment.
	Status?: null | #PeeringAttachmentStatus @go(,*PeeringAttachmentStatus)

	// The tags for the transit gateway peering attachment.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the transit gateway peering attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

// Describes a transit gateway prefix list attachment.
#TransitGatewayPrefixListAttachment: {
	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The resource type. Note that the tgw-peering resource type has been deprecated.
	ResourceType?: null | string @go(,*string)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

// Describes a prefix list reference.
#TransitGatewayPrefixListReference: {
	// Indicates whether traffic that matches this route is dropped.
	Blackhole?: null | bool @go(,*bool)

	// The ID of the prefix list.
	PrefixListId?: null | string @go(,*string)

	// The ID of the prefix list owner.
	PrefixListOwnerId?: null | string @go(,*string)

	// The state of the prefix list reference.
	State?: null | string @go(,*string)

	// Information about the transit gateway attachment.
	TransitGatewayAttachment?: null | #TransitGatewayPrefixListAttachment @go(,*TransitGatewayPrefixListAttachment)

	// The ID of the transit gateway route table.
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

// Describes route propagation.
#TransitGatewayPropagation: {
	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The resource type. Note that the tgw-peering resource type has been deprecated.
	ResourceType?: null | string @go(,*string)

	// The state.
	State?: null | string @go(,*string)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

// Describes the options for a transit gateway.
#TransitGatewayRequestOptions: {
	// A private Autonomous System Number (ASN) for the Amazon side of a BGP session.
	// The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294
	// for 32-bit ASNs. The default is 64512.
	AmazonSideAsn?: null | int64 @go(,*int64)

	// Enable or disable automatic acceptance of attachment requests. Disabled by
	// default.
	AutoAcceptSharedAttachments?: null | string @go(,*string)

	// Enable or disable automatic association with the default association route
	// table. Enabled by default.
	DefaultRouteTableAssociation?: null | string @go(,*string)

	// Enable or disable automatic propagation of routes to the default propagation
	// route table. Enabled by default.
	DefaultRouteTablePropagation?: null | string @go(,*string)

	// Enable or disable DNS support. Enabled by default.
	DnsSupport?: null | string @go(,*string)

	// Indicates whether multicast is enabled on the transit gateway
	MulticastSupport?: null | string @go(,*string)

	// One or more IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size
	// /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for
	// IPv6.
	TransitGatewayCidrBlocks: [...null | string] @go(,[]*string)

	// Enable or disable Equal Cost Multipath Protocol support. Enabled by default.
	VpnEcmpSupport?: null | string @go(,*string)
}

// Describes a route for a transit gateway route table.
#TransitGatewayRoute: {
	// The CIDR block used for destination matches.
	DestinationCidrBlock?: null | string @go(,*string)

	// The ID of the prefix list used for destination matches.
	PrefixListId?: null | string @go(,*string)

	// The state of the route.
	State?: null | string @go(,*string)

	// The attachments.
	TransitGatewayAttachments: [...null | #TransitGatewayRouteAttachment] @go(,[]*TransitGatewayRouteAttachment)

	// The route type.
	Type?: null | string @go(,*string)
}

// Describes a route attachment.
#TransitGatewayRouteAttachment: {
	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The resource type. Note that the tgw-peering resource type has been deprecated.
	ResourceType?: null | string @go(,*string)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

// Describes a transit gateway route table.
#TransitGatewayRouteTable: {
	// The creation time.
	CreationTime?: null | time.Time @go(,*time.Time)

	// Indicates whether this is the default association route table for the transit
	// gateway.
	DefaultAssociationRouteTable?: null | bool @go(,*bool)

	// Indicates whether this is the default propagation route table for the transit
	// gateway.
	DefaultPropagationRouteTable?: null | bool @go(,*bool)

	// The state of the transit gateway route table.
	State?: null | string @go(,*string)

	// Any tags assigned to the route table.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The ID of the transit gateway route table.
	TransitGatewayRouteTableId?: null | string @go(,*string)
}

// Describes an association between a route table and a resource attachment.
#TransitGatewayRouteTableAssociation: {
	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The resource type. Note that the tgw-peering resource type has been deprecated.
	ResourceType?: null | string @go(,*string)

	// The state of the association.
	State?: null | string @go(,*string)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

// Describes a route table propagation.
#TransitGatewayRouteTablePropagation: {
	// The ID of the resource.
	ResourceId?: null | string @go(,*string)

	// The type of resource. Note that the tgw-peering resource type has been deprecated.
	ResourceType?: null | string @go(,*string)

	// The state of the resource.
	State?: null | string @go(,*string)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)
}

// Describes a VPC attachment.
#TransitGatewayVpcAttachment: {
	// The creation time.
	CreationTime?: null | time.Time @go(,*time.Time)

	// The VPC attachment options.
	Options?: null | #TransitGatewayVpcAttachmentOptions @go(,*TransitGatewayVpcAttachmentOptions)

	// The state of the VPC attachment. Note that the initiating state has been
	// deprecated.
	State?: null | string @go(,*string)

	// The IDs of the subnets.
	SubnetIds: [...null | string] @go(,[]*string)

	// The tags for the VPC attachment.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the attachment.
	TransitGatewayAttachmentId?: null | string @go(,*string)

	// The ID of the transit gateway.
	TransitGatewayId?: null | string @go(,*string)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)

	// The ID of the AWS account that owns the VPC.
	VpcOwnerId?: null | string @go(,*string)
}

// Describes the VPC attachment options.
#TransitGatewayVpcAttachmentOptions: {
	// Indicates whether appliance mode support is enabled.
	ApplianceModeSupport?: null | string @go(,*string)

	// Indicates whether DNS support is enabled.
	DnsSupport?: null | string @go(,*string)

	// Indicates whether IPv6 support is disabled.
	Ipv6Support?: null | string @go(,*string)
}

// Information about an association between a branch network interface with
// a trunk network interface.
#TrunkInterfaceAssociation: {
	// The ID of the association.
	AssociationId?: null | string @go(,*string)

	// The ID of the branch network interface.
	BranchInterfaceId?: null | string @go(,*string)

	// The application key when you use the GRE protocol.
	GreKey?: null | int64 @go(,*int64)

	// The interface protocol. Valid values are VLAN and GRE.
	InterfaceProtocol?: null | string @go(,*string)

	// The tags.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the trunk network interface.
	TrunkInterfaceId?: null | string @go(,*string)

	// The ID of the VLAN when you use the VLAN protocol.
	VlanId?: null | int64 @go(,*int64)
}

// The VPN tunnel options.
#TunnelOption: {
	// The action to take after a DPD timeout occurs.
	DpdTimeoutAction?: null | string @go(,*string)

	// The number of seconds after which a DPD timeout occurs.
	DpdTimeoutSeconds?: null | int64 @go(,*int64)

	// The IKE versions that are permitted for the VPN tunnel.
	IkeVersions: [...null | #IKEVersionsListValue] @go(,[]*IKEVersionsListValue)

	// The external IP address of the VPN tunnel.
	OutsideIpAddress?: null | string @go(,*string)

	// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1
	// IKE negotiations.
	Phase1DHGroupNumbers: [...null | #Phase1DHGroupNumbersListValue] @go(,[]*Phase1DHGroupNumbersListValue)

	// The permitted encryption algorithms for the VPN tunnel for phase 1 IKE negotiations.
	Phase1EncryptionAlgorithms: [...null | #Phase1EncryptionAlgorithmsListValue] @go(,[]*Phase1EncryptionAlgorithmsListValue)

	// The permitted integrity algorithms for the VPN tunnel for phase 1 IKE negotiations.
	Phase1IntegrityAlgorithms: [...null | #Phase1IntegrityAlgorithmsListValue] @go(,[]*Phase1IntegrityAlgorithmsListValue)

	// The lifetime for phase 1 of the IKE negotiation, in seconds.
	Phase1LifetimeSeconds?: null | int64 @go(,*int64)

	// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2
	// IKE negotiations.
	Phase2DHGroupNumbers: [...null | #Phase2DHGroupNumbersListValue] @go(,[]*Phase2DHGroupNumbersListValue)

	// The permitted encryption algorithms for the VPN tunnel for phase 2 IKE negotiations.
	Phase2EncryptionAlgorithms: [...null | #Phase2EncryptionAlgorithmsListValue] @go(,[]*Phase2EncryptionAlgorithmsListValue)

	// The permitted integrity algorithms for the VPN tunnel for phase 2 IKE negotiations.
	Phase2IntegrityAlgorithms: [...null | #Phase2IntegrityAlgorithmsListValue] @go(,[]*Phase2IntegrityAlgorithmsListValue)

	// The lifetime for phase 2 of the IKE negotiation, in seconds.
	Phase2LifetimeSeconds?: null | int64 @go(,*int64)

	// The pre-shared key (PSK) to establish initial authentication between the
	// virtual private gateway and the customer gateway.
	PreSharedKey?: null | string @go(,*string)

	// The percentage of the rekey window determined by RekeyMarginTimeSeconds during
	// which the rekey time is randomly selected.
	RekeyFuzzPercentage?: null | int64 @go(,*int64)

	// The margin time, in seconds, before the phase 2 lifetime expires, during
	// which the AWS side of the VPN connection performs an IKE rekey.
	RekeyMarginTimeSeconds?: null | int64 @go(,*int64)

	// The number of packets in an IKE replay window.
	ReplayWindowSize?: null | int64 @go(,*int64)

	// The action to take when the establishing the VPN tunnels for a VPN connection.
	StartupAction?: null | string @go(,*string)

	// The range of inside IPv4 addresses for the tunnel.
	TunnelInsideCidr?: null | string @go(,*string)

	// The range of inside IPv6 addresses for the tunnel.
	TunnelInsideIpv6Cidr?: null | string @go(,*string)
}

#UnassignIpv6AddressesInput: {
	// The IPv6 addresses to unassign from the network interface.
	Ipv6Addresses: [...null | string] @go(,[]*string)

	// One or moreIPv6 Prefix Delegation prefixes to unassign from the network interface.
	Ipv6Prefixes: [...null | string] @go(,[]*string)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)
}

#UnassignIpv6AddressesOutput: {
	// The ID of the network interface.
	NetworkInterfaceId?: null | string @go(,*string)

	// The IPv6 addresses that have been unassigned from the network interface.
	UnassignedIpv6Addresses: [...null | string] @go(,[]*string)

	// The IPv4 Prefix Delegation prefixes that have been unassigned from the network
	// interface.
	UnassignedIpv6Prefixes: [...null | string] @go(,[]*string)
}

// Contains the parameters for UnassignPrivateIpAddresses.
#UnassignPrivateIpAddressesInput: {
	// The IPv4 Prefix Delegation prefixes to unassign from the network interface.
	Ipv4Prefixes: [...null | string] @go(,[]*string)

	// The ID of the network interface.
	//
	// NetworkInterfaceId is a required field
	NetworkInterfaceId?: null | string @go(,*string)

	// The secondary private IP addresses to unassign from the network interface.
	// You can specify this option multiple times to unassign more than one IP address.
	PrivateIpAddresses: [...null | string] @go(,[]*string)
}

#UnmonitorInstancesInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The IDs of the instances.
	//
	// InstanceIds is a required field
	InstanceIds: [...null | string] @go(,[]*string)
}

#UnmonitorInstancesOutput: {
	// The monitoring information.
	InstanceMonitorings: [...null | #InstanceMonitoring] @go(,[]*InstanceMonitoring)
}

// Describes the burstable performance instance whose credit option for CPU
// usage was not modified.
#UnsuccessfulInstanceCreditSpecificationItem: {
	// The applicable error for the burstable performance instance whose credit
	// option for CPU usage was not modified.
	Error?: null | #UnsuccessfulInstanceCreditSpecificationItemError @go(,*UnsuccessfulInstanceCreditSpecificationItemError)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)
}

// Information about the error for the burstable performance instance whose
// credit option for CPU usage was not modified.
#UnsuccessfulInstanceCreditSpecificationItemError: {
	// The error code.
	Code?: null | string @go(,*string)

	// The applicable error message.
	Message?: null | string @go(,*string)
}

// Information about items that were not successfully processed in a batch call.
#UnsuccessfulItem: {
	// Information about the error.
	Error?: null | #UnsuccessfulItemError @go(,*UnsuccessfulItemError)

	// The ID of the resource.
	ResourceId?: null | string @go(,*string)
}

// Information about the error that occurred. For more information about errors,
// see Error codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html).
#UnsuccessfulItemError: {
	// The error code.
	Code?: null | string @go(,*string)

	// The error message accompanying the error code.
	Message?: null | string @go(,*string)
}

#UpdateSecurityGroupRuleDescriptionsEgressInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the security group. You must specify either the security group
	// ID or the security group name in the request. For security groups in a nondefault
	// VPC, you must specify the security group ID.
	GroupId?: null | string @go(,*string)

	// [Default VPC] The name of the security group. You must specify either the
	// security group ID or the security group name in the request.
	GroupName?: null | string @go(,*string)

	// The IP permissions for the security group rule. You must specify either the
	// IP permissions or the description.
	IpPermissions: [...null | #IpPermission] @go(,[]*IpPermission)

	// The description for the egress security group rules. You must specify either
	// the description or the IP permissions.
	SecurityGroupRuleDescriptions: [...null | #SecurityGroupRuleDescription] @go(,[]*SecurityGroupRuleDescription)
}

#UpdateSecurityGroupRuleDescriptionsEgressOutput: {
	// Returns true if the request succeeds; otherwise, returns an error.
	Return?: null | bool @go(,*bool)
}

#UpdateSecurityGroupRuleDescriptionsIngressInput: {
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)

	// The ID of the security group. You must specify either the security group
	// ID or the security group name in the request. For security groups in a nondefault
	// VPC, you must specify the security group ID.
	GroupId?: null | string @go(,*string)

	// [EC2-Classic, default VPC] The name of the security group. You must specify
	// either the security group ID or the security group name in the request.
	GroupName?: null | string @go(,*string)

	// The IP permissions for the security group rule. You must specify either IP
	// permissions or a description.
	IpPermissions: [...null | #IpPermission] @go(,[]*IpPermission)

	// [VPC only] The description for the ingress security group rules. You must
	// specify either a description or IP permissions.
	SecurityGroupRuleDescriptions: [...null | #SecurityGroupRuleDescription] @go(,[]*SecurityGroupRuleDescription)
}

#UpdateSecurityGroupRuleDescriptionsIngressOutput: {
	// Returns true if the request succeeds; otherwise, returns an error.
	Return?: null | bool @go(,*bool)
}

// Describes the Amazon S3 bucket for the disk image.
#UserBucket: {
	// The name of the Amazon S3 bucket where the disk image is located.
	S3Bucket?: null | string @go(,*string)

	// The file name of the disk image.
	S3Key?: null | string @go(,*string)
}

// Describes the Amazon S3 bucket for the disk image.
#UserBucketDetails: {
	// The Amazon S3 bucket from which the disk image was created.
	S3Bucket?: null | string @go(,*string)

	// The file name of the disk image.
	S3Key?: null | string @go(,*string)
}

// Describes the user data for an instance.
#UserData: {
	// The user data. If you are using an Amazon Web Services SDK or command line
	// tool, Base64-encoding is performed for you, and you can load the text from
	// a file. Otherwise, you must provide Base64-encoded text.
	Data?: null | string @go(,*string)
}

// Describes a security group and Amazon Web Services account ID pair.
#UserIdGroupPair: {
	// A description for the security group rule that references this user ID group
	// pair.
	//
	// Constraints: Up to 255 characters in length. Allowed characters are a-z,
	// A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
	Description?: null | string @go(,*string)

	// The ID of the security group.
	GroupId?: null | string @go(,*string)

	// The name of the security group. In a request, use this parameter for a security
	// group in EC2-Classic or a default VPC only. For a security group in a nondefault
	// VPC, use the security group ID.
	//
	// For a referenced security group in another VPC, this value is not returned
	// if the referenced security group is deleted.
	GroupName?: null | string @go(,*string)

	// The status of a VPC peering connection, if applicable.
	PeeringStatus?: null | string @go(,*string)

	// The ID of an Amazon Web Services account.
	//
	// For a referenced security group in another VPC, the account ID of the referenced
	// security group is returned in the response. If the referenced security group
	// is deleted, this value is not returned.
	//
	// [EC2-Classic] Required when adding or removing rules that reference a security
	// group in another Amazon Web Services account.
	UserId?: null | string @go(,*string)

	// The ID of the VPC for the referenced security group, if applicable.
	VpcId?: null | string @go(,*string)

	// The ID of the VPC peering connection, if applicable.
	VpcPeeringConnectionId?: null | string @go(,*string)
}

// Describes the vCPU configurations for the instance type.
#VCpuInfo: {
	// The default number of cores for the instance type.
	DefaultCores?: null | int64 @go(,*int64)

	// The default number of threads per core for the instance type.
	DefaultThreadsPerCore?: null | int64 @go(,*int64)

	// The default number of vCPUs for the instance type.
	DefaultVCpus?: null | int64 @go(,*int64)

	// The valid number of cores that can be configured for the instance type.
	ValidCores: [...null | int64] @go(,[]*int64)

	// The valid number of threads per core that can be configured for the instance
	// type.
	ValidThreadsPerCore: [...null | int64] @go(,[]*int64)
}

// The error code and error message that is returned for a parameter or parameter
// combination that is not valid when a new launch template or new version of
// a launch template is created.
#ValidationError: {
	// The error code that indicates why the parameter or parameter combination
	// is not valid. For more information about error codes, see Error Codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html).
	Code?: null | string @go(,*string)

	// The error message that describes why the parameter or parameter combination
	// is not valid. For more information about error messages, see Error Codes
	// (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html).
	Message?: null | string @go(,*string)
}

// The error codes and error messages that are returned for the parameters or
// parameter combinations that are not valid when a new launch template or new
// version of a launch template is created.
#ValidationWarning: {
	// The error codes and error messages.
	Errors: [...null | #ValidationError] @go(,[]*ValidationError)
}

// Describes telemetry for a VPN tunnel.
#VgwTelemetry: {
	// The number of accepted routes.
	AcceptedRouteCount?: null | int64 @go(,*int64)

	// The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
	CertificateArn?: null | string @go(,*string)

	// The date and time of the last change in status.
	LastStatusChange?: null | time.Time @go(,*time.Time)

	// The Internet-routable IP address of the virtual private gateway's outside
	// interface.
	OutsideIpAddress?: null | string @go(,*string)

	// The status of the VPN tunnel.
	Status?: null | string @go(,*string)

	// If an error occurs, a description of the error.
	StatusMessage?: null | string @go(,*string)
}

// Describes a volume.
#Volume: {
	// Information about the volume attachments.
	Attachments: [...null | #VolumeAttachment] @go(,[]*VolumeAttachment)

	// The Availability Zone for the volume.
	AvailabilityZone?: null | string @go(,*string)

	// The time stamp when volume creation was initiated.
	CreateTime?: null | time.Time @go(,*time.Time)

	// Indicates whether the volume is encrypted.
	Encrypted?: null | bool @go(,*bool)

	// Indicates whether the volume was created using fast snapshot restore.
	FastRestored?: null | bool @go(,*bool)

	// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes,
	// this represents the number of IOPS that are provisioned for the volume. For
	// gp2 volumes, this represents the baseline performance of the volume and the
	// rate at which the volume accumulates I/O credits for bursting.
	Iops?: null | int64 @go(,*int64)

	// The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key
	// that was used to protect the volume encryption key for the volume.
	KmsKeyId?: null | string @go(,*string)

	// Indicates whether Amazon EBS Multi-Attach is enabled.
	MultiAttachEnabled?: null | bool @go(,*bool)

	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn?: null | string @go(,*string)

	// The size of the volume, in GiBs.
	Size?: null | int64 @go(,*int64)

	// The snapshot from which the volume was created, if applicable.
	SnapshotId?: null | string @go(,*string)

	// The volume state.
	State?: null | string @go(,*string)

	// Any tags assigned to the volume.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The throughput that the volume supports, in MiB/s.
	Throughput?: null | int64 @go(,*int64)

	// The ID of the volume.
	VolumeId?: null | string @go(,*string)

	// The volume type.
	VolumeType?: null | string @go(,*string)
}

// Describes volume attachment details.
#VolumeAttachment: {
	// The time stamp when the attachment initiated.
	AttachTime?: null | time.Time @go(,*time.Time)

	// Indicates whether the EBS volume is deleted on instance termination.
	DeleteOnTermination?: null | bool @go(,*bool)

	// The device name.
	Device?: null | string @go(,*string)

	// The ID of the instance.
	InstanceId?: null | string @go(,*string)

	// The attachment state of the volume.
	State?: null | string @go(,*string)

	// The ID of the volume.
	VolumeId?: null | string @go(,*string)
}

// Describes an EBS volume.
#VolumeDetail: {
	// The size of the volume, in GiB.
	//
	// Size is a required field
	Size?: null | int64 @go(,*int64)
}

// Describes the modification status of an EBS volume.
//
// If the volume has never been modified, some element values will be null.
#VolumeModification: {
	// The modification completion or failure time.
	EndTime?: null | time.Time @go(,*time.Time)

	// The current modification state. The modification state is null for unmodified
	// volumes.
	ModificationState?: null | string @go(,*string)

	// The original IOPS rate of the volume.
	OriginalIops?: null | int64 @go(,*int64)

	// The original setting for Amazon EBS Multi-Attach.
	OriginalMultiAttachEnabled?: null | bool @go(,*bool)

	// The original size of the volume, in GiB.
	OriginalSize?: null | int64 @go(,*int64)

	// The original throughput of the volume, in MiB/s.
	OriginalThroughput?: null | int64 @go(,*int64)

	// The original EBS volume type of the volume.
	OriginalVolumeType?: null | string @go(,*string)

	// The modification progress, from 0 to 100 percent complete.
	Progress?: null | int64 @go(,*int64)

	// The modification start time.
	StartTime?: null | time.Time @go(,*time.Time)

	// A status message about the modification progress or failure.
	StatusMessage?: null | string @go(,*string)

	// The target IOPS rate of the volume.
	TargetIops?: null | int64 @go(,*int64)

	// The target setting for Amazon EBS Multi-Attach.
	TargetMultiAttachEnabled?: null | bool @go(,*bool)

	// The target size of the volume, in GiB.
	TargetSize?: null | int64 @go(,*int64)

	// The target throughput of the volume, in MiB/s.
	TargetThroughput?: null | int64 @go(,*int64)

	// The target EBS volume type of the volume.
	TargetVolumeType?: null | string @go(,*string)

	// The ID of the volume.
	VolumeId?: null | string @go(,*string)
}

// Describes a volume status operation code.
#VolumeStatusAction: {
	// The code identifying the operation, for example, enable-volume-io.
	Code?: null | string @go(,*string)

	// A description of the operation.
	Description?: null | string @go(,*string)

	// The ID of the event associated with this operation.
	EventId?: null | string @go(,*string)

	// The event type associated with this operation.
	EventType?: null | string @go(,*string)
}

// Information about the instances to which the volume is attached.
#VolumeStatusAttachmentStatus: {
	// The ID of the attached instance.
	InstanceId?: null | string @go(,*string)

	// The maximum IOPS supported by the attached instance.
	IoPerformance?: null | string @go(,*string)
}

// Describes a volume status.
#VolumeStatusDetails: {
	// The name of the volume status.
	Name?: null | string @go(,*string)

	// The intended status of the volume status.
	Status?: null | string @go(,*string)
}

// Describes a volume status event.
#VolumeStatusEvent: {
	// A description of the event.
	Description?: null | string @go(,*string)

	// The ID of this event.
	EventId?: null | string @go(,*string)

	// The type of this event.
	EventType?: null | string @go(,*string)

	// The ID of the instance associated with the event.
	InstanceId?: null | string @go(,*string)

	// The latest end time of the event.
	NotAfter?: null | time.Time @go(,*time.Time)

	// The earliest start time of the event.
	NotBefore?: null | time.Time @go(,*time.Time)
}

// Describes the status of a volume.
#VolumeStatusInfo: {
	// The details of the volume status.
	Details: [...null | #VolumeStatusDetails] @go(,[]*VolumeStatusDetails)

	// The status of the volume.
	Status?: null | string @go(,*string)
}

// Describes the volume status.
#VolumeStatusItem: {
	// The details of the operation.
	Actions: [...null | #VolumeStatusAction] @go(,[]*VolumeStatusAction)

	// Information about the instances to which the volume is attached.
	AttachmentStatuses: [...null | #VolumeStatusAttachmentStatus] @go(,[]*VolumeStatusAttachmentStatus)

	// The Availability Zone of the volume.
	AvailabilityZone?: null | string @go(,*string)

	// A list of events associated with the volume.
	Events: [...null | #VolumeStatusEvent] @go(,[]*VolumeStatusEvent)

	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostArn?: null | string @go(,*string)

	// The volume ID.
	VolumeId?: null | string @go(,*string)

	// The volume status.
	VolumeStatus?: null | #VolumeStatusInfo @go(,*VolumeStatusInfo)
}

// Describes a VPC.
#Vpc: {
	// The primary IPv4 CIDR block for the VPC.
	CidrBlock?: null | string @go(,*string)

	// Information about the IPv4 CIDR blocks associated with the VPC.
	CidrBlockAssociationSet: [...null | #VpcCidrBlockAssociation] @go(,[]*VpcCidrBlockAssociation)

	// The ID of the set of DHCP options you've associated with the VPC.
	DhcpOptionsId?: null | string @go(,*string)

	// The allowed tenancy of instances launched into the VPC.
	InstanceTenancy?: null | string @go(,*string)

	// Information about the IPv6 CIDR blocks associated with the VPC.
	Ipv6CidrBlockAssociationSet: [...null | #VpcIpv6CidrBlockAssociation] @go(,[]*VpcIpv6CidrBlockAssociation)

	// Indicates whether the VPC is the default VPC.
	IsDefault?: null | bool @go(,*bool)

	// The ID of the Amazon Web Services account that owns the VPC.
	OwnerId?: null | string @go(,*string)

	// The current state of the VPC.
	State?: null | string @go(,*string)

	// Any tags assigned to the VPC.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes an attachment between a virtual private gateway and a VPC.
#VpcAttachment: {
	// The current state of the attachment.
	State?: null | string @go(,*string)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes an IPv4 CIDR block associated with a VPC.
#VpcCidrBlockAssociation: {
	// The association ID for the IPv4 CIDR block.
	AssociationId?: null | string @go(,*string)

	// The IPv4 CIDR block.
	CidrBlock?: null | string @go(,*string)

	// Information about the state of the CIDR block.
	CidrBlockState?: null | #VpcCidrBlockState @go(,*VpcCidrBlockState)
}

// Describes the state of a CIDR block.
#VpcCidrBlockState: {
	// The state of the CIDR block.
	State?: null | string @go(,*string)

	// A message about the status of the CIDR block, if applicable.
	StatusMessage?: null | string @go(,*string)
}

// Describes whether a VPC is enabled for ClassicLink.
#VpcClassicLink: {
	// Indicates whether the VPC is enabled for ClassicLink.
	ClassicLinkEnabled?: null | bool @go(,*bool)

	// Any tags assigned to the VPC.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes a VPC endpoint.
#VpcEndpoint: {
	// The date and time that the VPC endpoint was created.
	CreationTimestamp?: null | time.Time @go(,*time.Time)

	// (Interface endpoint) The DNS entries for the endpoint.
	DnsEntries: [...null | #DnsEntry] @go(,[]*DnsEntry)

	// (Interface endpoint) Information about the security groups that are associated
	// with the network interface.
	Groups: [...null | #SecurityGroupIdentifier] @go(,[]*SecurityGroupIdentifier)

	// The last error that occurred for VPC endpoint.
	LastError?: null | #LastError @go(,*LastError)

	// (Interface endpoint) One or more network interfaces for the endpoint.
	NetworkInterfaceIds: [...null | string] @go(,[]*string)

	// The ID of the AWS account that owns the VPC endpoint.
	OwnerId?: null | string @go(,*string)

	// The policy document associated with the endpoint, if applicable.
	PolicyDocument?: null | string @go(,*string)

	// (Interface endpoint) Indicates whether the VPC is associated with a private
	// hosted zone.
	PrivateDnsEnabled?: null | bool @go(,*bool)

	// Indicates whether the VPC endpoint is being managed by its service.
	RequesterManaged?: null | bool @go(,*bool)

	// (Gateway endpoint) One or more route tables associated with the endpoint.
	RouteTableIds: [...null | string] @go(,[]*string)

	// The name of the service to which the endpoint is associated.
	ServiceName?: null | string @go(,*string)

	// The state of the VPC endpoint.
	State?: null | string @go(,*string)

	// (Interface endpoint) One or more subnets in which the endpoint is located.
	SubnetIds: [...null | string] @go(,[]*string)

	// Any tags assigned to the VPC endpoint.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC endpoint.
	VpcEndpointId?: null | string @go(,*string)

	// The type of endpoint.
	VpcEndpointType?: null | string @go(,*string)

	// The ID of the VPC to which the endpoint is associated.
	VpcId?: null | string @go(,*string)
}

// Describes a VPC endpoint connection to a service.
#VpcEndpointConnection: {
	// The date and time that the VPC endpoint was created.
	CreationTimestamp?: null | time.Time @go(,*time.Time)

	// The DNS entries for the VPC endpoint.
	DnsEntries: [...null | #DnsEntry] @go(,[]*DnsEntry)

	// The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
	GatewayLoadBalancerArns: [...null | string] @go(,[]*string)

	// The Amazon Resource Names (ARNs) of the network load balancers for the service.
	NetworkLoadBalancerArns: [...null | string] @go(,[]*string)

	// The ID of the service to which the endpoint is connected.
	ServiceId?: null | string @go(,*string)

	// The ID of the VPC endpoint.
	VpcEndpointId?: null | string @go(,*string)

	// The AWS account ID of the owner of the VPC endpoint.
	VpcEndpointOwner?: null | string @go(,*string)

	// The state of the VPC endpoint.
	VpcEndpointState?: null | string @go(,*string)
}

// Describes an IPv6 CIDR block associated with a VPC.
#VpcIpv6CidrBlockAssociation: {
	// The association ID for the IPv6 CIDR block.
	AssociationId?: null | string @go(,*string)

	// The IPv6 CIDR block.
	Ipv6CidrBlock?: null | string @go(,*string)

	// Information about the state of the CIDR block.
	Ipv6CidrBlockState?: null | #VpcCidrBlockState @go(,*VpcCidrBlockState)

	// The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.
	Ipv6Pool?: null | string @go(,*string)

	// The name of the unique set of Availability Zones, Local Zones, or Wavelength
	// Zones from which AWS advertises IP addresses, for example, us-east-1-wl1-bos-wlz-1.
	NetworkBorderGroup?: null | string @go(,*string)
}

// Describes a VPC peering connection.
#VpcPeeringConnection: {
	// Information about the accepter VPC. CIDR block information is only returned
	// when describing an active VPC peering connection.
	AccepterVpcInfo?: null | #VpcPeeringConnectionVpcInfo @go(,*VpcPeeringConnectionVpcInfo)

	// The time that an unaccepted VPC peering connection will expire.
	ExpirationTime?: null | time.Time @go(,*time.Time)

	// Information about the requester VPC. CIDR block information is only returned
	// when describing an active VPC peering connection.
	RequesterVpcInfo?: null | #VpcPeeringConnectionVpcInfo @go(,*VpcPeeringConnectionVpcInfo)

	// The status of the VPC peering connection.
	Status?: null | #VpcPeeringConnectionStateReason @go(,*VpcPeeringConnectionStateReason)

	// Any tags assigned to the resource.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the VPC peering connection.
	VpcPeeringConnectionId?: null | string @go(,*string)
}

// Describes the VPC peering connection options.
#VpcPeeringConnectionOptionsDescription: {
	// Indicates whether a local VPC can resolve public DNS hostnames to private
	// IP addresses when queried from instances in a peer VPC.
	AllowDnsResolutionFromRemoteVpc?: null | bool @go(,*bool)

	// Indicates whether a local ClassicLink connection can communicate with the
	// peer VPC over the VPC peering connection.
	AllowEgressFromLocalClassicLinkToRemoteVpc?: null | bool @go(,*bool)

	// Indicates whether a local VPC can communicate with a ClassicLink connection
	// in the peer VPC over the VPC peering connection.
	AllowEgressFromLocalVpcToRemoteClassicLink?: null | bool @go(,*bool)
}

// Describes the status of a VPC peering connection.
#VpcPeeringConnectionStateReason: {
	// The status of the VPC peering connection.
	Code?: null | string @go(,*string)

	// A message that provides more information about the status, if applicable.
	Message?: null | string @go(,*string)
}

// Describes a VPC in a VPC peering connection.
#VpcPeeringConnectionVpcInfo: {
	// The IPv4 CIDR block for the VPC.
	CidrBlock?: null | string @go(,*string)

	// Information about the IPv4 CIDR blocks for the VPC.
	CidrBlockSet: [...null | #CidrBlock] @go(,[]*CidrBlock)

	// The IPv6 CIDR block for the VPC.
	Ipv6CidrBlockSet: [...null | #Ipv6CidrBlock] @go(,[]*Ipv6CidrBlock)

	// The ID of the Amazon Web Services account that owns the VPC.
	OwnerId?: null | string @go(,*string)

	// Information about the VPC peering connection options for the accepter or
	// requester VPC.
	PeeringOptions?: null | #VpcPeeringConnectionOptionsDescription @go(,*VpcPeeringConnectionOptionsDescription)

	// The Region in which the VPC is located.
	Region?: null | string @go(,*string)

	// The ID of the VPC.
	VpcId?: null | string @go(,*string)
}

// Describes a VPN connection.
#VpnConnection: {
	// The category of the VPN connection. A value of VPN indicates an AWS VPN connection.
	// A value of VPN-Classic indicates an AWS Classic VPN connection.
	Category?: null | string @go(,*string)

	// The configuration information for the VPN connection's customer gateway (in
	// the native XML format). This element is always present in the CreateVpnConnection
	// response; however, it's present in the DescribeVpnConnections response only
	// if the VPN connection is in the pending or available state.
	CustomerGatewayConfiguration?: null | string @go(,*string)

	// The ID of the customer gateway at your end of the VPN connection.
	CustomerGatewayId?: null | string @go(,*string)

	// The VPN connection options.
	Options?: null | #VpnConnectionOptions @go(,*VpnConnectionOptions)

	// The static routes associated with the VPN connection.
	Routes: [...null | #VpnStaticRoute] @go(,[]*VpnStaticRoute)

	// The current state of the VPN connection.
	State?: null | string @go(,*string)

	// Any tags assigned to the VPN connection.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The ID of the transit gateway associated with the VPN connection.
	TransitGatewayId?: null | string @go(,*string)

	// The type of VPN connection.
	Type?: null | string @go(,*string)

	// Information about the VPN tunnel.
	VgwTelemetry: [...null | #VgwTelemetry] @go(,[]*VgwTelemetry)

	// The ID of the VPN connection.
	VpnConnectionId?: null | string @go(,*string)

	// The ID of the virtual private gateway at the AWS side of the VPN connection.
	VpnGatewayId?: null | string @go(,*string)
}

// Describes VPN connection options.
#VpnConnectionOptions: {
	// Indicates whether acceleration is enabled for the VPN connection.
	EnableAcceleration?: null | bool @go(,*bool)

	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv4NetworkCidr?: null | string @go(,*string)

	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	LocalIpv6NetworkCidr?: null | string @go(,*string)

	// The IPv4 CIDR on the AWS side of the VPN connection.
	RemoteIpv4NetworkCidr?: null | string @go(,*string)

	// The IPv6 CIDR on the AWS side of the VPN connection.
	RemoteIpv6NetworkCidr?: null | string @go(,*string)

	// Indicates whether the VPN connection uses static routes only. Static routes
	// must be used for devices that don't support BGP.
	StaticRoutesOnly?: null | bool @go(,*bool)

	// Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
	TunnelInsideIpVersion?: null | string @go(,*string)

	// Indicates the VPN tunnel options.
	TunnelOptions: [...null | #TunnelOption] @go(,[]*TunnelOption)
}

// Describes VPN connection options.
#VpnConnectionOptionsSpecification: {
	// Indicate whether to enable acceleration for the VPN connection.
	//
	// Default: false
	EnableAcceleration?: null | bool @go(,*bool)

	// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//
	// Default: 0.0.0.0/0
	LocalIpv4NetworkCidr?: null | string @go(,*string)

	// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
	//
	// Default: ::/0
	LocalIpv6NetworkCidr?: null | string @go(,*string)

	// The IPv4 CIDR on the AWS side of the VPN connection.
	//
	// Default: 0.0.0.0/0
	RemoteIpv4NetworkCidr?: null | string @go(,*string)

	// The IPv6 CIDR on the AWS side of the VPN connection.
	//
	// Default: ::/0
	RemoteIpv6NetworkCidr?: null | string @go(,*string)

	// Indicate whether the VPN connection uses static routes only. If you are creating
	// a VPN connection for a device that does not support BGP, you must specify
	// true. Use CreateVpnConnectionRoute to create a static route.
	//
	// Default: false
	StaticRoutesOnly?: null | bool @go(,*bool)

	// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.
	//
	// Default: ipv4
	TunnelInsideIpVersion?: null | string @go(,*string)

	// The tunnel options for the VPN connection.
	TunnelOptions: [...null | #VpnTunnelOptionsSpecification] @go(,[]*VpnTunnelOptionsSpecification)
}

// Describes a virtual private gateway.
#VpnGateway: {
	// The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
	AmazonSideAsn?: null | int64 @go(,*int64)

	// The Availability Zone where the virtual private gateway was created, if applicable.
	// This field may be empty or not returned.
	AvailabilityZone?: null | string @go(,*string)

	// The current state of the virtual private gateway.
	State?: null | string @go(,*string)

	// Any tags assigned to the virtual private gateway.
	Tags: [...null | #Tag] @go(,[]*Tag)

	// The type of VPN connection the virtual private gateway supports.
	Type?: null | string @go(,*string)

	// Any VPCs attached to the virtual private gateway.
	VpcAttachments: [...null | #VpcAttachment] @go(,[]*VpcAttachment)

	// The ID of the virtual private gateway.
	VpnGatewayId?: null | string @go(,*string)
}

// Describes a static route for a VPN connection.
#VpnStaticRoute: {
	// The CIDR block associated with the local subnet of the customer data center.
	DestinationCidrBlock?: null | string @go(,*string)

	// Indicates how the routes were provided.
	Source?: null | string @go(,*string)

	// The current state of the static route.
	State?: null | string @go(,*string)
}

// The tunnel options for a single VPN tunnel.
#VpnTunnelOptionsSpecification: {
	// The action to take after DPD timeout occurs. Specify restart to restart the
	// IKE initiation. Specify clear to end the IKE session.
	//
	// Valid Values: clear | none | restart
	//
	// Default: clear
	DPDTimeoutAction?: null | string @go(,*string)

	// The number of seconds after which a DPD timeout occurs.
	//
	// Constraints: A value between 0 and 30.
	//
	// Default: 30
	DPDTimeoutSeconds?: null | int64 @go(,*int64)

	// The IKE versions that are permitted for the VPN tunnel.
	//
	// Valid values: ikev1 | ikev2
	IKEVersions: [...null | #IKEVersionsRequestListValue] @go(,[]*IKEVersionsRequestListValue)

	// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel
	// for phase 1 IKE negotiations.
	//
	// Valid values: 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
	Phase1DHGroupNumbers: [...null | #Phase1DHGroupNumbersRequestListValue] @go(,[]*Phase1DHGroupNumbersRequestListValue)

	// One or more encryption algorithms that are permitted for the VPN tunnel for
	// phase 1 IKE negotiations.
	//
	// Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
	Phase1EncryptionAlgorithms: [...null | #Phase1EncryptionAlgorithmsRequestListValue] @go(,[]*Phase1EncryptionAlgorithmsRequestListValue)

	// One or more integrity algorithms that are permitted for the VPN tunnel for
	// phase 1 IKE negotiations.
	//
	// Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
	Phase1IntegrityAlgorithms: [...null | #Phase1IntegrityAlgorithmsRequestListValue] @go(,[]*Phase1IntegrityAlgorithmsRequestListValue)

	// The lifetime for phase 1 of the IKE negotiation, in seconds.
	//
	// Constraints: A value between 900 and 28,800.
	//
	// Default: 28800
	Phase1LifetimeSeconds?: null | int64 @go(,*int64)

	// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel
	// for phase 2 IKE negotiations.
	//
	// Valid values: 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
	Phase2DHGroupNumbers: [...null | #Phase2DHGroupNumbersRequestListValue] @go(,[]*Phase2DHGroupNumbersRequestListValue)

	// One or more encryption algorithms that are permitted for the VPN tunnel for
	// phase 2 IKE negotiations.
	//
	// Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
	Phase2EncryptionAlgorithms: [...null | #Phase2EncryptionAlgorithmsRequestListValue] @go(,[]*Phase2EncryptionAlgorithmsRequestListValue)

	// One or more integrity algorithms that are permitted for the VPN tunnel for
	// phase 2 IKE negotiations.
	//
	// Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
	Phase2IntegrityAlgorithms: [...null | #Phase2IntegrityAlgorithmsRequestListValue] @go(,[]*Phase2IntegrityAlgorithmsRequestListValue)

	// The lifetime for phase 2 of the IKE negotiation, in seconds.
	//
	// Constraints: A value between 900 and 3,600. The value must be less than the
	// value for Phase1LifetimeSeconds.
	//
	// Default: 3600
	Phase2LifetimeSeconds?: null | int64 @go(,*int64)

	// The pre-shared key (PSK) to establish initial authentication between the
	// virtual private gateway and customer gateway.
	//
	// Constraints: Allowed characters are alphanumeric characters, periods (.),
	// and underscores (_). Must be between 8 and 64 characters in length and cannot
	// start with zero (0).
	PreSharedKey?: null | string @go(,*string)

	// The percentage of the rekey window (determined by RekeyMarginTimeSeconds)
	// during which the rekey time is randomly selected.
	//
	// Constraints: A value between 0 and 100.
	//
	// Default: 100
	RekeyFuzzPercentage?: null | int64 @go(,*int64)

	// The margin time, in seconds, before the phase 2 lifetime expires, during
	// which the AWS side of the VPN connection performs an IKE rekey. The exact
	// time of the rekey is randomly selected based on the value for RekeyFuzzPercentage.
	//
	// Constraints: A value between 60 and half of Phase2LifetimeSeconds.
	//
	// Default: 540
	RekeyMarginTimeSeconds?: null | int64 @go(,*int64)

	// The number of packets in an IKE replay window.
	//
	// Constraints: A value between 64 and 2048.
	//
	// Default: 1024
	ReplayWindowSize?: null | int64 @go(,*int64)

	// The action to take when the establishing the tunnel for the VPN connection.
	// By default, your customer gateway device must initiate the IKE negotiation
	// and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation.
	//
	// Valid Values: add | start
	//
	// Default: add
	StartupAction?: null | string @go(,*string)

	// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks
	// must be unique across all VPN connections that use the same virtual private
	// gateway.
	//
	// Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following
	// CIDR blocks are reserved and cannot be used:
	//
	//    * 169.254.0.0/30
	//
	//    * 169.254.1.0/30
	//
	//    * 169.254.2.0/30
	//
	//    * 169.254.3.0/30
	//
	//    * 169.254.4.0/30
	//
	//    * 169.254.5.0/30
	//
	//    * 169.254.169.252/30
	TunnelInsideCidr?: null | string @go(,*string)

	// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks
	// must be unique across all VPN connections that use the same transit gateway.
	//
	// Constraints: A size /126 CIDR block from the local fd00::/8 range.
	TunnelInsideIpv6Cidr?: null | string @go(,*string)
}

#WithdrawByoipCidrInput: {
	// The address range, in CIDR notation.
	//
	// Cidr is a required field
	Cidr?: null | string @go(,*string)

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun?: null | bool @go(,*bool)
}

#WithdrawByoipCidrOutput: {
	// Information about the address pool.
	ByoipCidr?: null | #ByoipCidr @go(,*ByoipCidr)
}

// AccountAttributeNameSupportedPlatforms is a AccountAttributeName enum value
#AccountAttributeNameSupportedPlatforms: "supported-platforms"

// AccountAttributeNameDefaultVpc is a AccountAttributeName enum value
#AccountAttributeNameDefaultVpc: "default-vpc"

// ActivityStatusError is a ActivityStatus enum value
#ActivityStatusError: "error"

// ActivityStatusPendingFulfillment is a ActivityStatus enum value
#ActivityStatusPendingFulfillment: "pending_fulfillment"

// ActivityStatusPendingTermination is a ActivityStatus enum value
#ActivityStatusPendingTermination: "pending_termination"

// ActivityStatusFulfilled is a ActivityStatus enum value
#ActivityStatusFulfilled: "fulfilled"

// AddressAttributeNameDomainName is a AddressAttributeName enum value
#AddressAttributeNameDomainName: "domain-name"

// AffinityDefault is a Affinity enum value
#AffinityDefault: "default"

// AffinityHost is a Affinity enum value
#AffinityHost: "host"

// AllocationStateAvailable is a AllocationState enum value
#AllocationStateAvailable: "available"

// AllocationStateUnderAssessment is a AllocationState enum value
#AllocationStateUnderAssessment: "under-assessment"

// AllocationStatePermanentFailure is a AllocationState enum value
#AllocationStatePermanentFailure: "permanent-failure"

// AllocationStateReleased is a AllocationState enum value
#AllocationStateReleased: "released"

// AllocationStateReleasedPermanentFailure is a AllocationState enum value
#AllocationStateReleasedPermanentFailure: "released-permanent-failure"

// AllocationStatePending is a AllocationState enum value
#AllocationStatePending: "pending"

// AllocationStrategyLowestPrice is a AllocationStrategy enum value
#AllocationStrategyLowestPrice: "lowestPrice"

// AllocationStrategyDiversified is a AllocationStrategy enum value
#AllocationStrategyDiversified: "diversified"

// AllocationStrategyCapacityOptimized is a AllocationStrategy enum value
#AllocationStrategyCapacityOptimized: "capacityOptimized"

// AllocationStrategyCapacityOptimizedPrioritized is a AllocationStrategy enum value
#AllocationStrategyCapacityOptimizedPrioritized: "capacityOptimizedPrioritized"

// AllowsMultipleInstanceTypesOn is a AllowsMultipleInstanceTypes enum value
#AllowsMultipleInstanceTypesOn: "on"

// AllowsMultipleInstanceTypesOff is a AllowsMultipleInstanceTypes enum value
#AllowsMultipleInstanceTypesOff: "off"

// AnalysisStatusRunning is a AnalysisStatus enum value
#AnalysisStatusRunning: "running"

// AnalysisStatusSucceeded is a AnalysisStatus enum value
#AnalysisStatusSucceeded: "succeeded"

// AnalysisStatusFailed is a AnalysisStatus enum value
#AnalysisStatusFailed: "failed"

// ApplianceModeSupportValueEnable is a ApplianceModeSupportValue enum value
#ApplianceModeSupportValueEnable: "enable"

// ApplianceModeSupportValueDisable is a ApplianceModeSupportValue enum value
#ApplianceModeSupportValueDisable: "disable"

// ArchitectureTypeI386 is a ArchitectureType enum value
#ArchitectureTypeI386: "i386"

// ArchitectureTypeX8664 is a ArchitectureType enum value
#ArchitectureTypeX8664: "x86_64"

// ArchitectureTypeArm64 is a ArchitectureType enum value
#ArchitectureTypeArm64: "arm64"

// ArchitectureValuesI386 is a ArchitectureValues enum value
#ArchitectureValuesI386: "i386"

// ArchitectureValuesX8664 is a ArchitectureValues enum value
#ArchitectureValuesX8664: "x86_64"

// ArchitectureValuesArm64 is a ArchitectureValues enum value
#ArchitectureValuesArm64: "arm64"

// AssociatedNetworkTypeVpc is a AssociatedNetworkType enum value
#AssociatedNetworkTypeVpc: "vpc"

// AssociationStatusCodeAssociating is a AssociationStatusCode enum value
#AssociationStatusCodeAssociating: "associating"

// AssociationStatusCodeAssociated is a AssociationStatusCode enum value
#AssociationStatusCodeAssociated: "associated"

// AssociationStatusCodeAssociationFailed is a AssociationStatusCode enum value
#AssociationStatusCodeAssociationFailed: "association-failed"

// AssociationStatusCodeDisassociating is a AssociationStatusCode enum value
#AssociationStatusCodeDisassociating: "disassociating"

// AssociationStatusCodeDisassociated is a AssociationStatusCode enum value
#AssociationStatusCodeDisassociated: "disassociated"

// AttachmentStatusAttaching is a AttachmentStatus enum value
#AttachmentStatusAttaching: "attaching"

// AttachmentStatusAttached is a AttachmentStatus enum value
#AttachmentStatusAttached: "attached"

// AttachmentStatusDetaching is a AttachmentStatus enum value
#AttachmentStatusDetaching: "detaching"

// AttachmentStatusDetached is a AttachmentStatus enum value
#AttachmentStatusDetached: "detached"

// AutoAcceptSharedAssociationsValueEnable is a AutoAcceptSharedAssociationsValue enum value
#AutoAcceptSharedAssociationsValueEnable: "enable"

// AutoAcceptSharedAssociationsValueDisable is a AutoAcceptSharedAssociationsValue enum value
#AutoAcceptSharedAssociationsValueDisable: "disable"

// AutoAcceptSharedAttachmentsValueEnable is a AutoAcceptSharedAttachmentsValue enum value
#AutoAcceptSharedAttachmentsValueEnable: "enable"

// AutoAcceptSharedAttachmentsValueDisable is a AutoAcceptSharedAttachmentsValue enum value
#AutoAcceptSharedAttachmentsValueDisable: "disable"

// AutoPlacementOn is a AutoPlacement enum value
#AutoPlacementOn: "on"

// AutoPlacementOff is a AutoPlacement enum value
#AutoPlacementOff: "off"

// AvailabilityZoneOptInStatusOptInNotRequired is a AvailabilityZoneOptInStatus enum value
#AvailabilityZoneOptInStatusOptInNotRequired: "opt-in-not-required"

// AvailabilityZoneOptInStatusOptedIn is a AvailabilityZoneOptInStatus enum value
#AvailabilityZoneOptInStatusOptedIn: "opted-in"

// AvailabilityZoneOptInStatusNotOptedIn is a AvailabilityZoneOptInStatus enum value
#AvailabilityZoneOptInStatusNotOptedIn: "not-opted-in"

// AvailabilityZoneStateAvailable is a AvailabilityZoneState enum value
#AvailabilityZoneStateAvailable: "available"

// AvailabilityZoneStateInformation is a AvailabilityZoneState enum value
#AvailabilityZoneStateInformation: "information"

// AvailabilityZoneStateImpaired is a AvailabilityZoneState enum value
#AvailabilityZoneStateImpaired: "impaired"

// AvailabilityZoneStateUnavailable is a AvailabilityZoneState enum value
#AvailabilityZoneStateUnavailable: "unavailable"

// BatchStateSubmitted is a BatchState enum value
#BatchStateSubmitted: "submitted"

// BatchStateActive is a BatchState enum value
#BatchStateActive: "active"

// BatchStateCancelled is a BatchState enum value
#BatchStateCancelled: "cancelled"

// BatchStateFailed is a BatchState enum value
#BatchStateFailed: "failed"

// BatchStateCancelledRunning is a BatchState enum value
#BatchStateCancelledRunning: "cancelled_running"

// BatchStateCancelledTerminating is a BatchState enum value
#BatchStateCancelledTerminating: "cancelled_terminating"

// BatchStateModifying is a BatchState enum value
#BatchStateModifying: "modifying"

// BgpStatusUp is a BgpStatus enum value
#BgpStatusUp: "up"

// BgpStatusDown is a BgpStatus enum value
#BgpStatusDown: "down"

// BootModeTypeLegacyBios is a BootModeType enum value
#BootModeTypeLegacyBios: "legacy-bios"

// BootModeTypeUefi is a BootModeType enum value
#BootModeTypeUefi: "uefi"

// BootModeValuesLegacyBios is a BootModeValues enum value
#BootModeValuesLegacyBios: "legacy-bios"

// BootModeValuesUefi is a BootModeValues enum value
#BootModeValuesUefi: "uefi"

// BundleTaskStatePending is a BundleTaskState enum value
#BundleTaskStatePending: "pending"

// BundleTaskStateWaitingForShutdown is a BundleTaskState enum value
#BundleTaskStateWaitingForShutdown: "waiting-for-shutdown"

// BundleTaskStateBundling is a BundleTaskState enum value
#BundleTaskStateBundling: "bundling"

// BundleTaskStateStoring is a BundleTaskState enum value
#BundleTaskStateStoring: "storing"

// BundleTaskStateCancelling is a BundleTaskState enum value
#BundleTaskStateCancelling: "cancelling"

// BundleTaskStateComplete is a BundleTaskState enum value
#BundleTaskStateComplete: "complete"

// BundleTaskStateFailed is a BundleTaskState enum value
#BundleTaskStateFailed: "failed"

// ByoipCidrStateAdvertised is a ByoipCidrState enum value
#ByoipCidrStateAdvertised: "advertised"

// ByoipCidrStateDeprovisioned is a ByoipCidrState enum value
#ByoipCidrStateDeprovisioned: "deprovisioned"

// ByoipCidrStateFailedDeprovision is a ByoipCidrState enum value
#ByoipCidrStateFailedDeprovision: "failed-deprovision"

// ByoipCidrStateFailedProvision is a ByoipCidrState enum value
#ByoipCidrStateFailedProvision: "failed-provision"

// ByoipCidrStatePendingDeprovision is a ByoipCidrState enum value
#ByoipCidrStatePendingDeprovision: "pending-deprovision"

// ByoipCidrStatePendingProvision is a ByoipCidrState enum value
#ByoipCidrStatePendingProvision: "pending-provision"

// ByoipCidrStateProvisioned is a ByoipCidrState enum value
#ByoipCidrStateProvisioned: "provisioned"

// ByoipCidrStateProvisionedNotPubliclyAdvertisable is a ByoipCidrState enum value
#ByoipCidrStateProvisionedNotPubliclyAdvertisable: "provisioned-not-publicly-advertisable"

// CancelBatchErrorCodeFleetRequestIdDoesNotExist is a CancelBatchErrorCode enum value
#CancelBatchErrorCodeFleetRequestIdDoesNotExist: "fleetRequestIdDoesNotExist"

// CancelBatchErrorCodeFleetRequestIdMalformed is a CancelBatchErrorCode enum value
#CancelBatchErrorCodeFleetRequestIdMalformed: "fleetRequestIdMalformed"

// CancelBatchErrorCodeFleetRequestNotInCancellableState is a CancelBatchErrorCode enum value
#CancelBatchErrorCodeFleetRequestNotInCancellableState: "fleetRequestNotInCancellableState"

// CancelBatchErrorCodeUnexpectedError is a CancelBatchErrorCode enum value
#CancelBatchErrorCodeUnexpectedError: "unexpectedError"

// CancelSpotInstanceRequestStateActive is a CancelSpotInstanceRequestState enum value
#CancelSpotInstanceRequestStateActive: "active"

// CancelSpotInstanceRequestStateOpen is a CancelSpotInstanceRequestState enum value
#CancelSpotInstanceRequestStateOpen: "open"

// CancelSpotInstanceRequestStateClosed is a CancelSpotInstanceRequestState enum value
#CancelSpotInstanceRequestStateClosed: "closed"

// CancelSpotInstanceRequestStateCancelled is a CancelSpotInstanceRequestState enum value
#CancelSpotInstanceRequestStateCancelled: "cancelled"

// CancelSpotInstanceRequestStateCompleted is a CancelSpotInstanceRequestState enum value
#CancelSpotInstanceRequestStateCompleted: "completed"

// CapacityReservationInstancePlatformLinuxUnix is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformLinuxUnix: "Linux/UNIX"

// CapacityReservationInstancePlatformRedHatEnterpriseLinux is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformRedHatEnterpriseLinux: "Red Hat Enterprise Linux"

// CapacityReservationInstancePlatformSuselinux is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformSuselinux: "SUSE Linux"

// CapacityReservationInstancePlatformWindows is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformWindows: "Windows"

// CapacityReservationInstancePlatformWindowswithSqlserver is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformWindowswithSqlserver: "Windows with SQL Server"

// CapacityReservationInstancePlatformWindowswithSqlserverEnterprise is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformWindowswithSqlserverEnterprise: "Windows with SQL Server Enterprise"

// CapacityReservationInstancePlatformWindowswithSqlserverStandard is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformWindowswithSqlserverStandard: "Windows with SQL Server Standard"

// CapacityReservationInstancePlatformWindowswithSqlserverWeb is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformWindowswithSqlserverWeb: "Windows with SQL Server Web"

// CapacityReservationInstancePlatformLinuxwithSqlserverStandard is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformLinuxwithSqlserverStandard: "Linux with SQL Server Standard"

// CapacityReservationInstancePlatformLinuxwithSqlserverWeb is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformLinuxwithSqlserverWeb: "Linux with SQL Server Web"

// CapacityReservationInstancePlatformLinuxwithSqlserverEnterprise is a CapacityReservationInstancePlatform enum value
#CapacityReservationInstancePlatformLinuxwithSqlserverEnterprise: "Linux with SQL Server Enterprise"

// CapacityReservationPreferenceOpen is a CapacityReservationPreference enum value
#CapacityReservationPreferenceOpen: "open"

// CapacityReservationPreferenceNone is a CapacityReservationPreference enum value
#CapacityReservationPreferenceNone: "none"

// CapacityReservationStateActive is a CapacityReservationState enum value
#CapacityReservationStateActive: "active"

// CapacityReservationStateExpired is a CapacityReservationState enum value
#CapacityReservationStateExpired: "expired"

// CapacityReservationStateCancelled is a CapacityReservationState enum value
#CapacityReservationStateCancelled: "cancelled"

// CapacityReservationStatePending is a CapacityReservationState enum value
#CapacityReservationStatePending: "pending"

// CapacityReservationStateFailed is a CapacityReservationState enum value
#CapacityReservationStateFailed: "failed"

// CapacityReservationTenancyDefault is a CapacityReservationTenancy enum value
#CapacityReservationTenancyDefault: "default"

// CapacityReservationTenancyDedicated is a CapacityReservationTenancy enum value
#CapacityReservationTenancyDedicated: "dedicated"

// CarrierGatewayStatePending is a CarrierGatewayState enum value
#CarrierGatewayStatePending: "pending"

// CarrierGatewayStateAvailable is a CarrierGatewayState enum value
#CarrierGatewayStateAvailable: "available"

// CarrierGatewayStateDeleting is a CarrierGatewayState enum value
#CarrierGatewayStateDeleting: "deleting"

// CarrierGatewayStateDeleted is a CarrierGatewayState enum value
#CarrierGatewayStateDeleted: "deleted"

// ClientCertificateRevocationListStatusCodePending is a ClientCertificateRevocationListStatusCode enum value
#ClientCertificateRevocationListStatusCodePending: "pending"

// ClientCertificateRevocationListStatusCodeActive is a ClientCertificateRevocationListStatusCode enum value
#ClientCertificateRevocationListStatusCodeActive: "active"

// ClientVpnAuthenticationTypeCertificateAuthentication is a ClientVpnAuthenticationType enum value
#ClientVpnAuthenticationTypeCertificateAuthentication: "certificate-authentication"

// ClientVpnAuthenticationTypeDirectoryServiceAuthentication is a ClientVpnAuthenticationType enum value
#ClientVpnAuthenticationTypeDirectoryServiceAuthentication: "directory-service-authentication"

// ClientVpnAuthenticationTypeFederatedAuthentication is a ClientVpnAuthenticationType enum value
#ClientVpnAuthenticationTypeFederatedAuthentication: "federated-authentication"

// ClientVpnAuthorizationRuleStatusCodeAuthorizing is a ClientVpnAuthorizationRuleStatusCode enum value
#ClientVpnAuthorizationRuleStatusCodeAuthorizing: "authorizing"

// ClientVpnAuthorizationRuleStatusCodeActive is a ClientVpnAuthorizationRuleStatusCode enum value
#ClientVpnAuthorizationRuleStatusCodeActive: "active"

// ClientVpnAuthorizationRuleStatusCodeFailed is a ClientVpnAuthorizationRuleStatusCode enum value
#ClientVpnAuthorizationRuleStatusCodeFailed: "failed"

// ClientVpnAuthorizationRuleStatusCodeRevoking is a ClientVpnAuthorizationRuleStatusCode enum value
#ClientVpnAuthorizationRuleStatusCodeRevoking: "revoking"

// ClientVpnConnectionStatusCodeActive is a ClientVpnConnectionStatusCode enum value
#ClientVpnConnectionStatusCodeActive: "active"

// ClientVpnConnectionStatusCodeFailedToTerminate is a ClientVpnConnectionStatusCode enum value
#ClientVpnConnectionStatusCodeFailedToTerminate: "failed-to-terminate"

// ClientVpnConnectionStatusCodeTerminating is a ClientVpnConnectionStatusCode enum value
#ClientVpnConnectionStatusCodeTerminating: "terminating"

// ClientVpnConnectionStatusCodeTerminated is a ClientVpnConnectionStatusCode enum value
#ClientVpnConnectionStatusCodeTerminated: "terminated"

// ClientVpnEndpointAttributeStatusCodeApplying is a ClientVpnEndpointAttributeStatusCode enum value
#ClientVpnEndpointAttributeStatusCodeApplying: "applying"

// ClientVpnEndpointAttributeStatusCodeApplied is a ClientVpnEndpointAttributeStatusCode enum value
#ClientVpnEndpointAttributeStatusCodeApplied: "applied"

// ClientVpnEndpointStatusCodePendingAssociate is a ClientVpnEndpointStatusCode enum value
#ClientVpnEndpointStatusCodePendingAssociate: "pending-associate"

// ClientVpnEndpointStatusCodeAvailable is a ClientVpnEndpointStatusCode enum value
#ClientVpnEndpointStatusCodeAvailable: "available"

// ClientVpnEndpointStatusCodeDeleting is a ClientVpnEndpointStatusCode enum value
#ClientVpnEndpointStatusCodeDeleting: "deleting"

// ClientVpnEndpointStatusCodeDeleted is a ClientVpnEndpointStatusCode enum value
#ClientVpnEndpointStatusCodeDeleted: "deleted"

// ClientVpnRouteStatusCodeCreating is a ClientVpnRouteStatusCode enum value
#ClientVpnRouteStatusCodeCreating: "creating"

// ClientVpnRouteStatusCodeActive is a ClientVpnRouteStatusCode enum value
#ClientVpnRouteStatusCodeActive: "active"

// ClientVpnRouteStatusCodeFailed is a ClientVpnRouteStatusCode enum value
#ClientVpnRouteStatusCodeFailed: "failed"

// ClientVpnRouteStatusCodeDeleting is a ClientVpnRouteStatusCode enum value
#ClientVpnRouteStatusCodeDeleting: "deleting"

// ConnectionNotificationStateEnabled is a ConnectionNotificationState enum value
#ConnectionNotificationStateEnabled: "Enabled"

// ConnectionNotificationStateDisabled is a ConnectionNotificationState enum value
#ConnectionNotificationStateDisabled: "Disabled"

// ConnectionNotificationTypeTopic is a ConnectionNotificationType enum value
#ConnectionNotificationTypeTopic: "Topic"

// ConnectivityTypePrivate is a ConnectivityType enum value
#ConnectivityTypePrivate: "private"

// ConnectivityTypePublic is a ConnectivityType enum value
#ConnectivityTypePublic: "public"

// ContainerFormatOva is a ContainerFormat enum value
#ContainerFormatOva: "ova"

// ConversionTaskStateActive is a ConversionTaskState enum value
#ConversionTaskStateActive: "active"

// ConversionTaskStateCancelling is a ConversionTaskState enum value
#ConversionTaskStateCancelling: "cancelling"

// ConversionTaskStateCancelled is a ConversionTaskState enum value
#ConversionTaskStateCancelled: "cancelled"

// ConversionTaskStateCompleted is a ConversionTaskState enum value
#ConversionTaskStateCompleted: "completed"

// CopyTagsFromSourceVolume is a CopyTagsFromSource enum value
#CopyTagsFromSourceVolume: "volume"

// CurrencyCodeValuesUsd is a CurrencyCodeValues enum value
#CurrencyCodeValuesUsd: "USD"

// DatafeedSubscriptionStateActive is a DatafeedSubscriptionState enum value
#DatafeedSubscriptionStateActive: "Active"

// DatafeedSubscriptionStateInactive is a DatafeedSubscriptionState enum value
#DatafeedSubscriptionStateInactive: "Inactive"

// DefaultRouteTableAssociationValueEnable is a DefaultRouteTableAssociationValue enum value
#DefaultRouteTableAssociationValueEnable: "enable"

// DefaultRouteTableAssociationValueDisable is a DefaultRouteTableAssociationValue enum value
#DefaultRouteTableAssociationValueDisable: "disable"

// DefaultRouteTablePropagationValueEnable is a DefaultRouteTablePropagationValue enum value
#DefaultRouteTablePropagationValueEnable: "enable"

// DefaultRouteTablePropagationValueDisable is a DefaultRouteTablePropagationValue enum value
#DefaultRouteTablePropagationValueDisable: "disable"

// DefaultTargetCapacityTypeSpot is a DefaultTargetCapacityType enum value
#DefaultTargetCapacityTypeSpot: "spot"

// DefaultTargetCapacityTypeOnDemand is a DefaultTargetCapacityType enum value
#DefaultTargetCapacityTypeOnDemand: "on-demand"

// DeleteFleetErrorCodeFleetIdDoesNotExist is a DeleteFleetErrorCode enum value
#DeleteFleetErrorCodeFleetIdDoesNotExist: "fleetIdDoesNotExist"

// DeleteFleetErrorCodeFleetIdMalformed is a DeleteFleetErrorCode enum value
#DeleteFleetErrorCodeFleetIdMalformed: "fleetIdMalformed"

// DeleteFleetErrorCodeFleetNotInDeletableState is a DeleteFleetErrorCode enum value
#DeleteFleetErrorCodeFleetNotInDeletableState: "fleetNotInDeletableState"

// DeleteFleetErrorCodeUnexpectedError is a DeleteFleetErrorCode enum value
#DeleteFleetErrorCodeUnexpectedError: "unexpectedError"

// DeleteQueuedReservedInstancesErrorCodeReservedInstancesIdInvalid is a DeleteQueuedReservedInstancesErrorCode enum value
#DeleteQueuedReservedInstancesErrorCodeReservedInstancesIdInvalid: "reserved-instances-id-invalid"

// DeleteQueuedReservedInstancesErrorCodeReservedInstancesNotInQueuedState is a DeleteQueuedReservedInstancesErrorCode enum value
#DeleteQueuedReservedInstancesErrorCodeReservedInstancesNotInQueuedState: "reserved-instances-not-in-queued-state"

// DeleteQueuedReservedInstancesErrorCodeUnexpectedError is a DeleteQueuedReservedInstancesErrorCode enum value
#DeleteQueuedReservedInstancesErrorCodeUnexpectedError: "unexpected-error"

// DeviceTypeEbs is a DeviceType enum value
#DeviceTypeEbs: "ebs"

// DeviceTypeInstanceStore is a DeviceType enum value
#DeviceTypeInstanceStore: "instance-store"

// DiskImageFormatVmdk is a DiskImageFormat enum value
#DiskImageFormatVmdk: "VMDK"

// DiskImageFormatRaw is a DiskImageFormat enum value
#DiskImageFormatRaw: "RAW"

// DiskImageFormatVhd is a DiskImageFormat enum value
#DiskImageFormatVhd: "VHD"

// DiskTypeHdd is a DiskType enum value
#DiskTypeHdd: "hdd"

// DiskTypeSsd is a DiskType enum value
#DiskTypeSsd: "ssd"

// DnsNameStatePendingVerification is a DnsNameState enum value
#DnsNameStatePendingVerification: "pendingVerification"

// DnsNameStateVerified is a DnsNameState enum value
#DnsNameStateVerified: "verified"

// DnsNameStateFailed is a DnsNameState enum value
#DnsNameStateFailed: "failed"

// DnsSupportValueEnable is a DnsSupportValue enum value
#DnsSupportValueEnable: "enable"

// DnsSupportValueDisable is a DnsSupportValue enum value
#DnsSupportValueDisable: "disable"

// DomainTypeVpc is a DomainType enum value
#DomainTypeVpc: "vpc"

// DomainTypeStandard is a DomainType enum value
#DomainTypeStandard: "standard"

// EbsEncryptionSupportUnsupported is a EbsEncryptionSupport enum value
#EbsEncryptionSupportUnsupported: "unsupported"

// EbsEncryptionSupportSupported is a EbsEncryptionSupport enum value
#EbsEncryptionSupportSupported: "supported"

// EbsNvmeSupportUnsupported is a EbsNvmeSupport enum value
#EbsNvmeSupportUnsupported: "unsupported"

// EbsNvmeSupportSupported is a EbsNvmeSupport enum value
#EbsNvmeSupportSupported: "supported"

// EbsNvmeSupportRequired is a EbsNvmeSupport enum value
#EbsNvmeSupportRequired: "required"

// EbsOptimizedSupportUnsupported is a EbsOptimizedSupport enum value
#EbsOptimizedSupportUnsupported: "unsupported"

// EbsOptimizedSupportSupported is a EbsOptimizedSupport enum value
#EbsOptimizedSupportSupported: "supported"

// EbsOptimizedSupportDefault is a EbsOptimizedSupport enum value
#EbsOptimizedSupportDefault: "default"

// ElasticGpuStateAttached is a ElasticGpuState enum value
#ElasticGpuStateAttached: "ATTACHED"

// ElasticGpuStatusOk is a ElasticGpuStatus enum value
#ElasticGpuStatusOk: "OK"

// ElasticGpuStatusImpaired is a ElasticGpuStatus enum value
#ElasticGpuStatusImpaired: "IMPAIRED"

// EnaSupportUnsupported is a EnaSupport enum value
#EnaSupportUnsupported: "unsupported"

// EnaSupportSupported is a EnaSupport enum value
#EnaSupportSupported: "supported"

// EnaSupportRequired is a EnaSupport enum value
#EnaSupportRequired: "required"

// EndDateTypeUnlimited is a EndDateType enum value
#EndDateTypeUnlimited: "unlimited"

// EndDateTypeLimited is a EndDateType enum value
#EndDateTypeLimited: "limited"

// EphemeralNvmeSupportUnsupported is a EphemeralNvmeSupport enum value
#EphemeralNvmeSupportUnsupported: "unsupported"

// EphemeralNvmeSupportSupported is a EphemeralNvmeSupport enum value
#EphemeralNvmeSupportSupported: "supported"

// EphemeralNvmeSupportRequired is a EphemeralNvmeSupport enum value
#EphemeralNvmeSupportRequired: "required"

// EventCodeInstanceReboot is a EventCode enum value
#EventCodeInstanceReboot: "instance-reboot"

// EventCodeSystemReboot is a EventCode enum value
#EventCodeSystemReboot: "system-reboot"

// EventCodeSystemMaintenance is a EventCode enum value
#EventCodeSystemMaintenance: "system-maintenance"

// EventCodeInstanceRetirement is a EventCode enum value
#EventCodeInstanceRetirement: "instance-retirement"

// EventCodeInstanceStop is a EventCode enum value
#EventCodeInstanceStop: "instance-stop"

// EventTypeInstanceChange is a EventType enum value
#EventTypeInstanceChange: "instanceChange"

// EventTypeFleetRequestChange is a EventType enum value
#EventTypeFleetRequestChange: "fleetRequestChange"

// EventTypeError is a EventType enum value
#EventTypeError: "error"

// EventTypeInformation is a EventType enum value
#EventTypeInformation: "information"

// ExcessCapacityTerminationPolicyNoTermination is a ExcessCapacityTerminationPolicy enum value
#ExcessCapacityTerminationPolicyNoTermination: "noTermination"

// ExcessCapacityTerminationPolicyDefault is a ExcessCapacityTerminationPolicy enum value
#ExcessCapacityTerminationPolicyDefault: "default"

// ExportEnvironmentCitrix is a ExportEnvironment enum value
#ExportEnvironmentCitrix: "citrix"

// ExportEnvironmentVmware is a ExportEnvironment enum value
#ExportEnvironmentVmware: "vmware"

// ExportEnvironmentMicrosoft is a ExportEnvironment enum value
#ExportEnvironmentMicrosoft: "microsoft"

// ExportTaskStateActive is a ExportTaskState enum value
#ExportTaskStateActive: "active"

// ExportTaskStateCancelling is a ExportTaskState enum value
#ExportTaskStateCancelling: "cancelling"

// ExportTaskStateCancelled is a ExportTaskState enum value
#ExportTaskStateCancelled: "cancelled"

// ExportTaskStateCompleted is a ExportTaskState enum value
#ExportTaskStateCompleted: "completed"

// FastSnapshotRestoreStateCodeEnabling is a FastSnapshotRestoreStateCode enum value
#FastSnapshotRestoreStateCodeEnabling: "enabling"

// FastSnapshotRestoreStateCodeOptimizing is a FastSnapshotRestoreStateCode enum value
#FastSnapshotRestoreStateCodeOptimizing: "optimizing"

// FastSnapshotRestoreStateCodeEnabled is a FastSnapshotRestoreStateCode enum value
#FastSnapshotRestoreStateCodeEnabled: "enabled"

// FastSnapshotRestoreStateCodeDisabling is a FastSnapshotRestoreStateCode enum value
#FastSnapshotRestoreStateCodeDisabling: "disabling"

// FastSnapshotRestoreStateCodeDisabled is a FastSnapshotRestoreStateCode enum value
#FastSnapshotRestoreStateCodeDisabled: "disabled"

// FleetActivityStatusError is a FleetActivityStatus enum value
#FleetActivityStatusError: "error"

// FleetActivityStatusPendingFulfillment is a FleetActivityStatus enum value
#FleetActivityStatusPendingFulfillment: "pending_fulfillment"

// FleetActivityStatusPendingTermination is a FleetActivityStatus enum value
#FleetActivityStatusPendingTermination: "pending_termination"

// FleetActivityStatusFulfilled is a FleetActivityStatus enum value
#FleetActivityStatusFulfilled: "fulfilled"

// FleetCapacityReservationUsageStrategyUseCapacityReservationsFirst is a FleetCapacityReservationUsageStrategy enum value
#FleetCapacityReservationUsageStrategyUseCapacityReservationsFirst: "use-capacity-reservations-first"

// FleetEventTypeInstanceChange is a FleetEventType enum value
#FleetEventTypeInstanceChange: "instance-change"

// FleetEventTypeFleetChange is a FleetEventType enum value
#FleetEventTypeFleetChange: "fleet-change"

// FleetEventTypeServiceError is a FleetEventType enum value
#FleetEventTypeServiceError: "service-error"

// FleetExcessCapacityTerminationPolicyNoTermination is a FleetExcessCapacityTerminationPolicy enum value
#FleetExcessCapacityTerminationPolicyNoTermination: "no-termination"

// FleetExcessCapacityTerminationPolicyTermination is a FleetExcessCapacityTerminationPolicy enum value
#FleetExcessCapacityTerminationPolicyTermination: "termination"

// FleetOnDemandAllocationStrategyLowestPrice is a FleetOnDemandAllocationStrategy enum value
#FleetOnDemandAllocationStrategyLowestPrice: "lowest-price"

// FleetOnDemandAllocationStrategyPrioritized is a FleetOnDemandAllocationStrategy enum value
#FleetOnDemandAllocationStrategyPrioritized: "prioritized"

// FleetReplacementStrategyLaunch is a FleetReplacementStrategy enum value
#FleetReplacementStrategyLaunch: "launch"

// FleetStateCodeSubmitted is a FleetStateCode enum value
#FleetStateCodeSubmitted: "submitted"

// FleetStateCodeActive is a FleetStateCode enum value
#FleetStateCodeActive: "active"

// FleetStateCodeDeleted is a FleetStateCode enum value
#FleetStateCodeDeleted: "deleted"

// FleetStateCodeFailed is a FleetStateCode enum value
#FleetStateCodeFailed: "failed"

// FleetStateCodeDeletedRunning is a FleetStateCode enum value
#FleetStateCodeDeletedRunning: "deleted_running"

// FleetStateCodeDeletedTerminating is a FleetStateCode enum value
#FleetStateCodeDeletedTerminating: "deleted_terminating"

// FleetStateCodeModifying is a FleetStateCode enum value
#FleetStateCodeModifying: "modifying"

// FleetTypeRequest is a FleetType enum value
#FleetTypeRequest: "request"

// FleetTypeMaintain is a FleetType enum value
#FleetTypeMaintain: "maintain"

// FleetTypeInstant is a FleetType enum value
#FleetTypeInstant: "instant"

// FlowLogsResourceTypeVpc is a FlowLogsResourceType enum value
#FlowLogsResourceTypeVpc: "VPC"

// FlowLogsResourceTypeSubnet is a FlowLogsResourceType enum value
#FlowLogsResourceTypeSubnet: "Subnet"

// FlowLogsResourceTypeNetworkInterface is a FlowLogsResourceType enum value
#FlowLogsResourceTypeNetworkInterface: "NetworkInterface"

// FpgaImageAttributeNameDescription is a FpgaImageAttributeName enum value
#FpgaImageAttributeNameDescription: "description"

// FpgaImageAttributeNameName is a FpgaImageAttributeName enum value
#FpgaImageAttributeNameName: "name"

// FpgaImageAttributeNameLoadPermission is a FpgaImageAttributeName enum value
#FpgaImageAttributeNameLoadPermission: "loadPermission"

// FpgaImageAttributeNameProductCodes is a FpgaImageAttributeName enum value
#FpgaImageAttributeNameProductCodes: "productCodes"

// FpgaImageStateCodePending is a FpgaImageStateCode enum value
#FpgaImageStateCodePending: "pending"

// FpgaImageStateCodeFailed is a FpgaImageStateCode enum value
#FpgaImageStateCodeFailed: "failed"

// FpgaImageStateCodeAvailable is a FpgaImageStateCode enum value
#FpgaImageStateCodeAvailable: "available"

// FpgaImageStateCodeUnavailable is a FpgaImageStateCode enum value
#FpgaImageStateCodeUnavailable: "unavailable"

// GatewayTypeIpsec1 is a GatewayType enum value
#GatewayTypeIpsec1: "ipsec.1"

// HostRecoveryOn is a HostRecovery enum value
#HostRecoveryOn: "on"

// HostRecoveryOff is a HostRecovery enum value
#HostRecoveryOff: "off"

// HostTenancyDedicated is a HostTenancy enum value
#HostTenancyDedicated: "dedicated"

// HostTenancyHost is a HostTenancy enum value
#HostTenancyHost: "host"

// HttpTokensStateOptional is a HttpTokensState enum value
#HttpTokensStateOptional: "optional"

// HttpTokensStateRequired is a HttpTokensState enum value
#HttpTokensStateRequired: "required"

// HypervisorTypeOvm is a HypervisorType enum value
#HypervisorTypeOvm: "ovm"

// HypervisorTypeXen is a HypervisorType enum value
#HypervisorTypeXen: "xen"

// IamInstanceProfileAssociationStateAssociating is a IamInstanceProfileAssociationState enum value
#IamInstanceProfileAssociationStateAssociating: "associating"

// IamInstanceProfileAssociationStateAssociated is a IamInstanceProfileAssociationState enum value
#IamInstanceProfileAssociationStateAssociated: "associated"

// IamInstanceProfileAssociationStateDisassociating is a IamInstanceProfileAssociationState enum value
#IamInstanceProfileAssociationStateDisassociating: "disassociating"

// IamInstanceProfileAssociationStateDisassociated is a IamInstanceProfileAssociationState enum value
#IamInstanceProfileAssociationStateDisassociated: "disassociated"

// Igmpv2SupportValueEnable is a Igmpv2SupportValue enum value
#Igmpv2SupportValueEnable: "enable"

// Igmpv2SupportValueDisable is a Igmpv2SupportValue enum value
#Igmpv2SupportValueDisable: "disable"

// ImageAttributeNameDescription is a ImageAttributeName enum value
#ImageAttributeNameDescription: "description"

// ImageAttributeNameKernel is a ImageAttributeName enum value
#ImageAttributeNameKernel: "kernel"

// ImageAttributeNameRamdisk is a ImageAttributeName enum value
#ImageAttributeNameRamdisk: "ramdisk"

// ImageAttributeNameLaunchPermission is a ImageAttributeName enum value
#ImageAttributeNameLaunchPermission: "launchPermission"

// ImageAttributeNameProductCodes is a ImageAttributeName enum value
#ImageAttributeNameProductCodes: "productCodes"

// ImageAttributeNameBlockDeviceMapping is a ImageAttributeName enum value
#ImageAttributeNameBlockDeviceMapping: "blockDeviceMapping"

// ImageAttributeNameSriovNetSupport is a ImageAttributeName enum value
#ImageAttributeNameSriovNetSupport: "sriovNetSupport"

// ImageAttributeNameBootMode is a ImageAttributeName enum value
#ImageAttributeNameBootMode: "bootMode"

// ImageStatePending is a ImageState enum value
#ImageStatePending: "pending"

// ImageStateAvailable is a ImageState enum value
#ImageStateAvailable: "available"

// ImageStateInvalid is a ImageState enum value
#ImageStateInvalid: "invalid"

// ImageStateDeregistered is a ImageState enum value
#ImageStateDeregistered: "deregistered"

// ImageStateTransient is a ImageState enum value
#ImageStateTransient: "transient"

// ImageStateFailed is a ImageState enum value
#ImageStateFailed: "failed"

// ImageStateError is a ImageState enum value
#ImageStateError: "error"

// ImageTypeValuesMachine is a ImageTypeValues enum value
#ImageTypeValuesMachine: "machine"

// ImageTypeValuesKernel is a ImageTypeValues enum value
#ImageTypeValuesKernel: "kernel"

// ImageTypeValuesRamdisk is a ImageTypeValues enum value
#ImageTypeValuesRamdisk: "ramdisk"

// InstanceAttributeNameInstanceType is a InstanceAttributeName enum value
#InstanceAttributeNameInstanceType: "instanceType"

// InstanceAttributeNameKernel is a InstanceAttributeName enum value
#InstanceAttributeNameKernel: "kernel"

// InstanceAttributeNameRamdisk is a InstanceAttributeName enum value
#InstanceAttributeNameRamdisk: "ramdisk"

// InstanceAttributeNameUserData is a InstanceAttributeName enum value
#InstanceAttributeNameUserData: "userData"

// InstanceAttributeNameDisableApiTermination is a InstanceAttributeName enum value
#InstanceAttributeNameDisableApiTermination: "disableApiTermination"

// InstanceAttributeNameInstanceInitiatedShutdownBehavior is a InstanceAttributeName enum value
#InstanceAttributeNameInstanceInitiatedShutdownBehavior: "instanceInitiatedShutdownBehavior"

// InstanceAttributeNameRootDeviceName is a InstanceAttributeName enum value
#InstanceAttributeNameRootDeviceName: "rootDeviceName"

// InstanceAttributeNameBlockDeviceMapping is a InstanceAttributeName enum value
#InstanceAttributeNameBlockDeviceMapping: "blockDeviceMapping"

// InstanceAttributeNameProductCodes is a InstanceAttributeName enum value
#InstanceAttributeNameProductCodes: "productCodes"

// InstanceAttributeNameSourceDestCheck is a InstanceAttributeName enum value
#InstanceAttributeNameSourceDestCheck: "sourceDestCheck"

// InstanceAttributeNameGroupSet is a InstanceAttributeName enum value
#InstanceAttributeNameGroupSet: "groupSet"

// InstanceAttributeNameEbsOptimized is a InstanceAttributeName enum value
#InstanceAttributeNameEbsOptimized: "ebsOptimized"

// InstanceAttributeNameSriovNetSupport is a InstanceAttributeName enum value
#InstanceAttributeNameSriovNetSupport: "sriovNetSupport"

// InstanceAttributeNameEnaSupport is a InstanceAttributeName enum value
#InstanceAttributeNameEnaSupport: "enaSupport"

// InstanceAttributeNameEnclaveOptions is a InstanceAttributeName enum value
#InstanceAttributeNameEnclaveOptions: "enclaveOptions"

// InstanceEventWindowStateCreating is a InstanceEventWindowState enum value
#InstanceEventWindowStateCreating: "creating"

// InstanceEventWindowStateDeleting is a InstanceEventWindowState enum value
#InstanceEventWindowStateDeleting: "deleting"

// InstanceEventWindowStateActive is a InstanceEventWindowState enum value
#InstanceEventWindowStateActive: "active"

// InstanceEventWindowStateDeleted is a InstanceEventWindowState enum value
#InstanceEventWindowStateDeleted: "deleted"

// InstanceHealthStatusHealthy is a InstanceHealthStatus enum value
#InstanceHealthStatusHealthy: "healthy"

// InstanceHealthStatusUnhealthy is a InstanceHealthStatus enum value
#InstanceHealthStatusUnhealthy: "unhealthy"

// InstanceInterruptionBehaviorHibernate is a InstanceInterruptionBehavior enum value
#InstanceInterruptionBehaviorHibernate: "hibernate"

// InstanceInterruptionBehaviorStop is a InstanceInterruptionBehavior enum value
#InstanceInterruptionBehaviorStop: "stop"

// InstanceInterruptionBehaviorTerminate is a InstanceInterruptionBehavior enum value
#InstanceInterruptionBehaviorTerminate: "terminate"

// InstanceLifecycleSpot is a InstanceLifecycle enum value
#InstanceLifecycleSpot: "spot"

// InstanceLifecycleOnDemand is a InstanceLifecycle enum value
#InstanceLifecycleOnDemand: "on-demand"

// InstanceLifecycleTypeSpot is a InstanceLifecycleType enum value
#InstanceLifecycleTypeSpot: "spot"

// InstanceLifecycleTypeScheduled is a InstanceLifecycleType enum value
#InstanceLifecycleTypeScheduled: "scheduled"

// InstanceMatchCriteriaOpen is a InstanceMatchCriteria enum value
#InstanceMatchCriteriaOpen: "open"

// InstanceMatchCriteriaTargeted is a InstanceMatchCriteria enum value
#InstanceMatchCriteriaTargeted: "targeted"

// InstanceMetadataEndpointStateDisabled is a InstanceMetadataEndpointState enum value
#InstanceMetadataEndpointStateDisabled: "disabled"

// InstanceMetadataEndpointStateEnabled is a InstanceMetadataEndpointState enum value
#InstanceMetadataEndpointStateEnabled: "enabled"

// InstanceMetadataOptionsStatePending is a InstanceMetadataOptionsState enum value
#InstanceMetadataOptionsStatePending: "pending"

// InstanceMetadataOptionsStateApplied is a InstanceMetadataOptionsState enum value
#InstanceMetadataOptionsStateApplied: "applied"

// InstanceStateNamePending is a InstanceStateName enum value
#InstanceStateNamePending: "pending"

// InstanceStateNameRunning is a InstanceStateName enum value
#InstanceStateNameRunning: "running"

// InstanceStateNameShuttingDown is a InstanceStateName enum value
#InstanceStateNameShuttingDown: "shutting-down"

// InstanceStateNameTerminated is a InstanceStateName enum value
#InstanceStateNameTerminated: "terminated"

// InstanceStateNameStopping is a InstanceStateName enum value
#InstanceStateNameStopping: "stopping"

// InstanceStateNameStopped is a InstanceStateName enum value
#InstanceStateNameStopped: "stopped"

// InstanceTypeT1Micro is a InstanceType enum value
#InstanceTypeT1Micro: "t1.micro"

// InstanceTypeT2Nano is a InstanceType enum value
#InstanceTypeT2Nano: "t2.nano"

// InstanceTypeT2Micro is a InstanceType enum value
#InstanceTypeT2Micro: "t2.micro"

// InstanceTypeT2Small is a InstanceType enum value
#InstanceTypeT2Small: "t2.small"

// InstanceTypeT2Medium is a InstanceType enum value
#InstanceTypeT2Medium: "t2.medium"

// InstanceTypeT2Large is a InstanceType enum value
#InstanceTypeT2Large: "t2.large"

// InstanceTypeT2Xlarge is a InstanceType enum value
#InstanceTypeT2Xlarge: "t2.xlarge"

// InstanceTypeT22xlarge is a InstanceType enum value
#InstanceTypeT22xlarge: "t2.2xlarge"

// InstanceTypeT3Nano is a InstanceType enum value
#InstanceTypeT3Nano: "t3.nano"

// InstanceTypeT3Micro is a InstanceType enum value
#InstanceTypeT3Micro: "t3.micro"

// InstanceTypeT3Small is a InstanceType enum value
#InstanceTypeT3Small: "t3.small"

// InstanceTypeT3Medium is a InstanceType enum value
#InstanceTypeT3Medium: "t3.medium"

// InstanceTypeT3Large is a InstanceType enum value
#InstanceTypeT3Large: "t3.large"

// InstanceTypeT3Xlarge is a InstanceType enum value
#InstanceTypeT3Xlarge: "t3.xlarge"

// InstanceTypeT32xlarge is a InstanceType enum value
#InstanceTypeT32xlarge: "t3.2xlarge"

// InstanceTypeT3aNano is a InstanceType enum value
#InstanceTypeT3aNano: "t3a.nano"

// InstanceTypeT3aMicro is a InstanceType enum value
#InstanceTypeT3aMicro: "t3a.micro"

// InstanceTypeT3aSmall is a InstanceType enum value
#InstanceTypeT3aSmall: "t3a.small"

// InstanceTypeT3aMedium is a InstanceType enum value
#InstanceTypeT3aMedium: "t3a.medium"

// InstanceTypeT3aLarge is a InstanceType enum value
#InstanceTypeT3aLarge: "t3a.large"

// InstanceTypeT3aXlarge is a InstanceType enum value
#InstanceTypeT3aXlarge: "t3a.xlarge"

// InstanceTypeT3a2xlarge is a InstanceType enum value
#InstanceTypeT3a2xlarge: "t3a.2xlarge"

// InstanceTypeT4gNano is a InstanceType enum value
#InstanceTypeT4gNano: "t4g.nano"

// InstanceTypeT4gMicro is a InstanceType enum value
#InstanceTypeT4gMicro: "t4g.micro"

// InstanceTypeT4gSmall is a InstanceType enum value
#InstanceTypeT4gSmall: "t4g.small"

// InstanceTypeT4gMedium is a InstanceType enum value
#InstanceTypeT4gMedium: "t4g.medium"

// InstanceTypeT4gLarge is a InstanceType enum value
#InstanceTypeT4gLarge: "t4g.large"

// InstanceTypeT4gXlarge is a InstanceType enum value
#InstanceTypeT4gXlarge: "t4g.xlarge"

// InstanceTypeT4g2xlarge is a InstanceType enum value
#InstanceTypeT4g2xlarge: "t4g.2xlarge"

// InstanceTypeM1Small is a InstanceType enum value
#InstanceTypeM1Small: "m1.small"

// InstanceTypeM1Medium is a InstanceType enum value
#InstanceTypeM1Medium: "m1.medium"

// InstanceTypeM1Large is a InstanceType enum value
#InstanceTypeM1Large: "m1.large"

// InstanceTypeM1Xlarge is a InstanceType enum value
#InstanceTypeM1Xlarge: "m1.xlarge"

// InstanceTypeM3Medium is a InstanceType enum value
#InstanceTypeM3Medium: "m3.medium"

// InstanceTypeM3Large is a InstanceType enum value
#InstanceTypeM3Large: "m3.large"

// InstanceTypeM3Xlarge is a InstanceType enum value
#InstanceTypeM3Xlarge: "m3.xlarge"

// InstanceTypeM32xlarge is a InstanceType enum value
#InstanceTypeM32xlarge: "m3.2xlarge"

// InstanceTypeM4Large is a InstanceType enum value
#InstanceTypeM4Large: "m4.large"

// InstanceTypeM4Xlarge is a InstanceType enum value
#InstanceTypeM4Xlarge: "m4.xlarge"

// InstanceTypeM42xlarge is a InstanceType enum value
#InstanceTypeM42xlarge: "m4.2xlarge"

// InstanceTypeM44xlarge is a InstanceType enum value
#InstanceTypeM44xlarge: "m4.4xlarge"

// InstanceTypeM410xlarge is a InstanceType enum value
#InstanceTypeM410xlarge: "m4.10xlarge"

// InstanceTypeM416xlarge is a InstanceType enum value
#InstanceTypeM416xlarge: "m4.16xlarge"

// InstanceTypeM2Xlarge is a InstanceType enum value
#InstanceTypeM2Xlarge: "m2.xlarge"

// InstanceTypeM22xlarge is a InstanceType enum value
#InstanceTypeM22xlarge: "m2.2xlarge"

// InstanceTypeM24xlarge is a InstanceType enum value
#InstanceTypeM24xlarge: "m2.4xlarge"

// InstanceTypeCr18xlarge is a InstanceType enum value
#InstanceTypeCr18xlarge: "cr1.8xlarge"

// InstanceTypeR3Large is a InstanceType enum value
#InstanceTypeR3Large: "r3.large"

// InstanceTypeR3Xlarge is a InstanceType enum value
#InstanceTypeR3Xlarge: "r3.xlarge"

// InstanceTypeR32xlarge is a InstanceType enum value
#InstanceTypeR32xlarge: "r3.2xlarge"

// InstanceTypeR34xlarge is a InstanceType enum value
#InstanceTypeR34xlarge: "r3.4xlarge"

// InstanceTypeR38xlarge is a InstanceType enum value
#InstanceTypeR38xlarge: "r3.8xlarge"

// InstanceTypeR4Large is a InstanceType enum value
#InstanceTypeR4Large: "r4.large"

// InstanceTypeR4Xlarge is a InstanceType enum value
#InstanceTypeR4Xlarge: "r4.xlarge"

// InstanceTypeR42xlarge is a InstanceType enum value
#InstanceTypeR42xlarge: "r4.2xlarge"

// InstanceTypeR44xlarge is a InstanceType enum value
#InstanceTypeR44xlarge: "r4.4xlarge"

// InstanceTypeR48xlarge is a InstanceType enum value
#InstanceTypeR48xlarge: "r4.8xlarge"

// InstanceTypeR416xlarge is a InstanceType enum value
#InstanceTypeR416xlarge: "r4.16xlarge"

// InstanceTypeR5Large is a InstanceType enum value
#InstanceTypeR5Large: "r5.large"

// InstanceTypeR5Xlarge is a InstanceType enum value
#InstanceTypeR5Xlarge: "r5.xlarge"

// InstanceTypeR52xlarge is a InstanceType enum value
#InstanceTypeR52xlarge: "r5.2xlarge"

// InstanceTypeR54xlarge is a InstanceType enum value
#InstanceTypeR54xlarge: "r5.4xlarge"

// InstanceTypeR58xlarge is a InstanceType enum value
#InstanceTypeR58xlarge: "r5.8xlarge"

// InstanceTypeR512xlarge is a InstanceType enum value
#InstanceTypeR512xlarge: "r5.12xlarge"

// InstanceTypeR516xlarge is a InstanceType enum value
#InstanceTypeR516xlarge: "r5.16xlarge"

// InstanceTypeR524xlarge is a InstanceType enum value
#InstanceTypeR524xlarge: "r5.24xlarge"

// InstanceTypeR5Metal is a InstanceType enum value
#InstanceTypeR5Metal: "r5.metal"

// InstanceTypeR5aLarge is a InstanceType enum value
#InstanceTypeR5aLarge: "r5a.large"

// InstanceTypeR5aXlarge is a InstanceType enum value
#InstanceTypeR5aXlarge: "r5a.xlarge"

// InstanceTypeR5a2xlarge is a InstanceType enum value
#InstanceTypeR5a2xlarge: "r5a.2xlarge"

// InstanceTypeR5a4xlarge is a InstanceType enum value
#InstanceTypeR5a4xlarge: "r5a.4xlarge"

// InstanceTypeR5a8xlarge is a InstanceType enum value
#InstanceTypeR5a8xlarge: "r5a.8xlarge"

// InstanceTypeR5a12xlarge is a InstanceType enum value
#InstanceTypeR5a12xlarge: "r5a.12xlarge"

// InstanceTypeR5a16xlarge is a InstanceType enum value
#InstanceTypeR5a16xlarge: "r5a.16xlarge"

// InstanceTypeR5a24xlarge is a InstanceType enum value
#InstanceTypeR5a24xlarge: "r5a.24xlarge"

// InstanceTypeR5bLarge is a InstanceType enum value
#InstanceTypeR5bLarge: "r5b.large"

// InstanceTypeR5bXlarge is a InstanceType enum value
#InstanceTypeR5bXlarge: "r5b.xlarge"

// InstanceTypeR5b2xlarge is a InstanceType enum value
#InstanceTypeR5b2xlarge: "r5b.2xlarge"

// InstanceTypeR5b4xlarge is a InstanceType enum value
#InstanceTypeR5b4xlarge: "r5b.4xlarge"

// InstanceTypeR5b8xlarge is a InstanceType enum value
#InstanceTypeR5b8xlarge: "r5b.8xlarge"

// InstanceTypeR5b12xlarge is a InstanceType enum value
#InstanceTypeR5b12xlarge: "r5b.12xlarge"

// InstanceTypeR5b16xlarge is a InstanceType enum value
#InstanceTypeR5b16xlarge: "r5b.16xlarge"

// InstanceTypeR5b24xlarge is a InstanceType enum value
#InstanceTypeR5b24xlarge: "r5b.24xlarge"

// InstanceTypeR5bMetal is a InstanceType enum value
#InstanceTypeR5bMetal: "r5b.metal"

// InstanceTypeR5dLarge is a InstanceType enum value
#InstanceTypeR5dLarge: "r5d.large"

// InstanceTypeR5dXlarge is a InstanceType enum value
#InstanceTypeR5dXlarge: "r5d.xlarge"

// InstanceTypeR5d2xlarge is a InstanceType enum value
#InstanceTypeR5d2xlarge: "r5d.2xlarge"

// InstanceTypeR5d4xlarge is a InstanceType enum value
#InstanceTypeR5d4xlarge: "r5d.4xlarge"

// InstanceTypeR5d8xlarge is a InstanceType enum value
#InstanceTypeR5d8xlarge: "r5d.8xlarge"

// InstanceTypeR5d12xlarge is a InstanceType enum value
#InstanceTypeR5d12xlarge: "r5d.12xlarge"

// InstanceTypeR5d16xlarge is a InstanceType enum value
#InstanceTypeR5d16xlarge: "r5d.16xlarge"

// InstanceTypeR5d24xlarge is a InstanceType enum value
#InstanceTypeR5d24xlarge: "r5d.24xlarge"

// InstanceTypeR5dMetal is a InstanceType enum value
#InstanceTypeR5dMetal: "r5d.metal"

// InstanceTypeR5adLarge is a InstanceType enum value
#InstanceTypeR5adLarge: "r5ad.large"

// InstanceTypeR5adXlarge is a InstanceType enum value
#InstanceTypeR5adXlarge: "r5ad.xlarge"

// InstanceTypeR5ad2xlarge is a InstanceType enum value
#InstanceTypeR5ad2xlarge: "r5ad.2xlarge"

// InstanceTypeR5ad4xlarge is a InstanceType enum value
#InstanceTypeR5ad4xlarge: "r5ad.4xlarge"

// InstanceTypeR5ad8xlarge is a InstanceType enum value
#InstanceTypeR5ad8xlarge: "r5ad.8xlarge"

// InstanceTypeR5ad12xlarge is a InstanceType enum value
#InstanceTypeR5ad12xlarge: "r5ad.12xlarge"

// InstanceTypeR5ad16xlarge is a InstanceType enum value
#InstanceTypeR5ad16xlarge: "r5ad.16xlarge"

// InstanceTypeR5ad24xlarge is a InstanceType enum value
#InstanceTypeR5ad24xlarge: "r5ad.24xlarge"

// InstanceTypeR6gMetal is a InstanceType enum value
#InstanceTypeR6gMetal: "r6g.metal"

// InstanceTypeR6gMedium is a InstanceType enum value
#InstanceTypeR6gMedium: "r6g.medium"

// InstanceTypeR6gLarge is a InstanceType enum value
#InstanceTypeR6gLarge: "r6g.large"

// InstanceTypeR6gXlarge is a InstanceType enum value
#InstanceTypeR6gXlarge: "r6g.xlarge"

// InstanceTypeR6g2xlarge is a InstanceType enum value
#InstanceTypeR6g2xlarge: "r6g.2xlarge"

// InstanceTypeR6g4xlarge is a InstanceType enum value
#InstanceTypeR6g4xlarge: "r6g.4xlarge"

// InstanceTypeR6g8xlarge is a InstanceType enum value
#InstanceTypeR6g8xlarge: "r6g.8xlarge"

// InstanceTypeR6g12xlarge is a InstanceType enum value
#InstanceTypeR6g12xlarge: "r6g.12xlarge"

// InstanceTypeR6g16xlarge is a InstanceType enum value
#InstanceTypeR6g16xlarge: "r6g.16xlarge"

// InstanceTypeR6gdMetal is a InstanceType enum value
#InstanceTypeR6gdMetal: "r6gd.metal"

// InstanceTypeR6gdMedium is a InstanceType enum value
#InstanceTypeR6gdMedium: "r6gd.medium"

// InstanceTypeR6gdLarge is a InstanceType enum value
#InstanceTypeR6gdLarge: "r6gd.large"

// InstanceTypeR6gdXlarge is a InstanceType enum value
#InstanceTypeR6gdXlarge: "r6gd.xlarge"

// InstanceTypeR6gd2xlarge is a InstanceType enum value
#InstanceTypeR6gd2xlarge: "r6gd.2xlarge"

// InstanceTypeR6gd4xlarge is a InstanceType enum value
#InstanceTypeR6gd4xlarge: "r6gd.4xlarge"

// InstanceTypeR6gd8xlarge is a InstanceType enum value
#InstanceTypeR6gd8xlarge: "r6gd.8xlarge"

// InstanceTypeR6gd12xlarge is a InstanceType enum value
#InstanceTypeR6gd12xlarge: "r6gd.12xlarge"

// InstanceTypeR6gd16xlarge is a InstanceType enum value
#InstanceTypeR6gd16xlarge: "r6gd.16xlarge"

// InstanceTypeX116xlarge is a InstanceType enum value
#InstanceTypeX116xlarge: "x1.16xlarge"

// InstanceTypeX132xlarge is a InstanceType enum value
#InstanceTypeX132xlarge: "x1.32xlarge"

// InstanceTypeX1eXlarge is a InstanceType enum value
#InstanceTypeX1eXlarge: "x1e.xlarge"

// InstanceTypeX1e2xlarge is a InstanceType enum value
#InstanceTypeX1e2xlarge: "x1e.2xlarge"

// InstanceTypeX1e4xlarge is a InstanceType enum value
#InstanceTypeX1e4xlarge: "x1e.4xlarge"

// InstanceTypeX1e8xlarge is a InstanceType enum value
#InstanceTypeX1e8xlarge: "x1e.8xlarge"

// InstanceTypeX1e16xlarge is a InstanceType enum value
#InstanceTypeX1e16xlarge: "x1e.16xlarge"

// InstanceTypeX1e32xlarge is a InstanceType enum value
#InstanceTypeX1e32xlarge: "x1e.32xlarge"

// InstanceTypeI2Xlarge is a InstanceType enum value
#InstanceTypeI2Xlarge: "i2.xlarge"

// InstanceTypeI22xlarge is a InstanceType enum value
#InstanceTypeI22xlarge: "i2.2xlarge"

// InstanceTypeI24xlarge is a InstanceType enum value
#InstanceTypeI24xlarge: "i2.4xlarge"

// InstanceTypeI28xlarge is a InstanceType enum value
#InstanceTypeI28xlarge: "i2.8xlarge"

// InstanceTypeI3Large is a InstanceType enum value
#InstanceTypeI3Large: "i3.large"

// InstanceTypeI3Xlarge is a InstanceType enum value
#InstanceTypeI3Xlarge: "i3.xlarge"

// InstanceTypeI32xlarge is a InstanceType enum value
#InstanceTypeI32xlarge: "i3.2xlarge"

// InstanceTypeI34xlarge is a InstanceType enum value
#InstanceTypeI34xlarge: "i3.4xlarge"

// InstanceTypeI38xlarge is a InstanceType enum value
#InstanceTypeI38xlarge: "i3.8xlarge"

// InstanceTypeI316xlarge is a InstanceType enum value
#InstanceTypeI316xlarge: "i3.16xlarge"

// InstanceTypeI3Metal is a InstanceType enum value
#InstanceTypeI3Metal: "i3.metal"

// InstanceTypeI3enLarge is a InstanceType enum value
#InstanceTypeI3enLarge: "i3en.large"

// InstanceTypeI3enXlarge is a InstanceType enum value
#InstanceTypeI3enXlarge: "i3en.xlarge"

// InstanceTypeI3en2xlarge is a InstanceType enum value
#InstanceTypeI3en2xlarge: "i3en.2xlarge"

// InstanceTypeI3en3xlarge is a InstanceType enum value
#InstanceTypeI3en3xlarge: "i3en.3xlarge"

// InstanceTypeI3en6xlarge is a InstanceType enum value
#InstanceTypeI3en6xlarge: "i3en.6xlarge"

// InstanceTypeI3en12xlarge is a InstanceType enum value
#InstanceTypeI3en12xlarge: "i3en.12xlarge"

// InstanceTypeI3en24xlarge is a InstanceType enum value
#InstanceTypeI3en24xlarge: "i3en.24xlarge"

// InstanceTypeI3enMetal is a InstanceType enum value
#InstanceTypeI3enMetal: "i3en.metal"

// InstanceTypeHi14xlarge is a InstanceType enum value
#InstanceTypeHi14xlarge: "hi1.4xlarge"

// InstanceTypeHs18xlarge is a InstanceType enum value
#InstanceTypeHs18xlarge: "hs1.8xlarge"

// InstanceTypeC1Medium is a InstanceType enum value
#InstanceTypeC1Medium: "c1.medium"

// InstanceTypeC1Xlarge is a InstanceType enum value
#InstanceTypeC1Xlarge: "c1.xlarge"

// InstanceTypeC3Large is a InstanceType enum value
#InstanceTypeC3Large: "c3.large"

// InstanceTypeC3Xlarge is a InstanceType enum value
#InstanceTypeC3Xlarge: "c3.xlarge"

// InstanceTypeC32xlarge is a InstanceType enum value
#InstanceTypeC32xlarge: "c3.2xlarge"

// InstanceTypeC34xlarge is a InstanceType enum value
#InstanceTypeC34xlarge: "c3.4xlarge"

// InstanceTypeC38xlarge is a InstanceType enum value
#InstanceTypeC38xlarge: "c3.8xlarge"

// InstanceTypeC4Large is a InstanceType enum value
#InstanceTypeC4Large: "c4.large"

// InstanceTypeC4Xlarge is a InstanceType enum value
#InstanceTypeC4Xlarge: "c4.xlarge"

// InstanceTypeC42xlarge is a InstanceType enum value
#InstanceTypeC42xlarge: "c4.2xlarge"

// InstanceTypeC44xlarge is a InstanceType enum value
#InstanceTypeC44xlarge: "c4.4xlarge"

// InstanceTypeC48xlarge is a InstanceType enum value
#InstanceTypeC48xlarge: "c4.8xlarge"

// InstanceTypeC5Large is a InstanceType enum value
#InstanceTypeC5Large: "c5.large"

// InstanceTypeC5Xlarge is a InstanceType enum value
#InstanceTypeC5Xlarge: "c5.xlarge"

// InstanceTypeC52xlarge is a InstanceType enum value
#InstanceTypeC52xlarge: "c5.2xlarge"

// InstanceTypeC54xlarge is a InstanceType enum value
#InstanceTypeC54xlarge: "c5.4xlarge"

// InstanceTypeC59xlarge is a InstanceType enum value
#InstanceTypeC59xlarge: "c5.9xlarge"

// InstanceTypeC512xlarge is a InstanceType enum value
#InstanceTypeC512xlarge: "c5.12xlarge"

// InstanceTypeC518xlarge is a InstanceType enum value
#InstanceTypeC518xlarge: "c5.18xlarge"

// InstanceTypeC524xlarge is a InstanceType enum value
#InstanceTypeC524xlarge: "c5.24xlarge"

// InstanceTypeC5Metal is a InstanceType enum value
#InstanceTypeC5Metal: "c5.metal"

// InstanceTypeC5aLarge is a InstanceType enum value
#InstanceTypeC5aLarge: "c5a.large"

// InstanceTypeC5aXlarge is a InstanceType enum value
#InstanceTypeC5aXlarge: "c5a.xlarge"

// InstanceTypeC5a2xlarge is a InstanceType enum value
#InstanceTypeC5a2xlarge: "c5a.2xlarge"

// InstanceTypeC5a4xlarge is a InstanceType enum value
#InstanceTypeC5a4xlarge: "c5a.4xlarge"

// InstanceTypeC5a8xlarge is a InstanceType enum value
#InstanceTypeC5a8xlarge: "c5a.8xlarge"

// InstanceTypeC5a12xlarge is a InstanceType enum value
#InstanceTypeC5a12xlarge: "c5a.12xlarge"

// InstanceTypeC5a16xlarge is a InstanceType enum value
#InstanceTypeC5a16xlarge: "c5a.16xlarge"

// InstanceTypeC5a24xlarge is a InstanceType enum value
#InstanceTypeC5a24xlarge: "c5a.24xlarge"

// InstanceTypeC5adLarge is a InstanceType enum value
#InstanceTypeC5adLarge: "c5ad.large"

// InstanceTypeC5adXlarge is a InstanceType enum value
#InstanceTypeC5adXlarge: "c5ad.xlarge"

// InstanceTypeC5ad2xlarge is a InstanceType enum value
#InstanceTypeC5ad2xlarge: "c5ad.2xlarge"

// InstanceTypeC5ad4xlarge is a InstanceType enum value
#InstanceTypeC5ad4xlarge: "c5ad.4xlarge"

// InstanceTypeC5ad8xlarge is a InstanceType enum value
#InstanceTypeC5ad8xlarge: "c5ad.8xlarge"

// InstanceTypeC5ad12xlarge is a InstanceType enum value
#InstanceTypeC5ad12xlarge: "c5ad.12xlarge"

// InstanceTypeC5ad16xlarge is a InstanceType enum value
#InstanceTypeC5ad16xlarge: "c5ad.16xlarge"

// InstanceTypeC5ad24xlarge is a InstanceType enum value
#InstanceTypeC5ad24xlarge: "c5ad.24xlarge"

// InstanceTypeC5dLarge is a InstanceType enum value
#InstanceTypeC5dLarge: "c5d.large"

// InstanceTypeC5dXlarge is a InstanceType enum value
#InstanceTypeC5dXlarge: "c5d.xlarge"

// InstanceTypeC5d2xlarge is a InstanceType enum value
#InstanceTypeC5d2xlarge: "c5d.2xlarge"

// InstanceTypeC5d4xlarge is a InstanceType enum value
#InstanceTypeC5d4xlarge: "c5d.4xlarge"

// InstanceTypeC5d9xlarge is a InstanceType enum value
#InstanceTypeC5d9xlarge: "c5d.9xlarge"

// InstanceTypeC5d12xlarge is a InstanceType enum value
#InstanceTypeC5d12xlarge: "c5d.12xlarge"

// InstanceTypeC5d18xlarge is a InstanceType enum value
#InstanceTypeC5d18xlarge: "c5d.18xlarge"

// InstanceTypeC5d24xlarge is a InstanceType enum value
#InstanceTypeC5d24xlarge: "c5d.24xlarge"

// InstanceTypeC5dMetal is a InstanceType enum value
#InstanceTypeC5dMetal: "c5d.metal"

// InstanceTypeC5nLarge is a InstanceType enum value
#InstanceTypeC5nLarge: "c5n.large"

// InstanceTypeC5nXlarge is a InstanceType enum value
#InstanceTypeC5nXlarge: "c5n.xlarge"

// InstanceTypeC5n2xlarge is a InstanceType enum value
#InstanceTypeC5n2xlarge: "c5n.2xlarge"

// InstanceTypeC5n4xlarge is a InstanceType enum value
#InstanceTypeC5n4xlarge: "c5n.4xlarge"

// InstanceTypeC5n9xlarge is a InstanceType enum value
#InstanceTypeC5n9xlarge: "c5n.9xlarge"

// InstanceTypeC5n18xlarge is a InstanceType enum value
#InstanceTypeC5n18xlarge: "c5n.18xlarge"

// InstanceTypeC5nMetal is a InstanceType enum value
#InstanceTypeC5nMetal: "c5n.metal"

// InstanceTypeC6gMetal is a InstanceType enum value
#InstanceTypeC6gMetal: "c6g.metal"

// InstanceTypeC6gMedium is a InstanceType enum value
#InstanceTypeC6gMedium: "c6g.medium"

// InstanceTypeC6gLarge is a InstanceType enum value
#InstanceTypeC6gLarge: "c6g.large"

// InstanceTypeC6gXlarge is a InstanceType enum value
#InstanceTypeC6gXlarge: "c6g.xlarge"

// InstanceTypeC6g2xlarge is a InstanceType enum value
#InstanceTypeC6g2xlarge: "c6g.2xlarge"

// InstanceTypeC6g4xlarge is a InstanceType enum value
#InstanceTypeC6g4xlarge: "c6g.4xlarge"

// InstanceTypeC6g8xlarge is a InstanceType enum value
#InstanceTypeC6g8xlarge: "c6g.8xlarge"

// InstanceTypeC6g12xlarge is a InstanceType enum value
#InstanceTypeC6g12xlarge: "c6g.12xlarge"

// InstanceTypeC6g16xlarge is a InstanceType enum value
#InstanceTypeC6g16xlarge: "c6g.16xlarge"

// InstanceTypeC6gdMetal is a InstanceType enum value
#InstanceTypeC6gdMetal: "c6gd.metal"

// InstanceTypeC6gdMedium is a InstanceType enum value
#InstanceTypeC6gdMedium: "c6gd.medium"

// InstanceTypeC6gdLarge is a InstanceType enum value
#InstanceTypeC6gdLarge: "c6gd.large"

// InstanceTypeC6gdXlarge is a InstanceType enum value
#InstanceTypeC6gdXlarge: "c6gd.xlarge"

// InstanceTypeC6gd2xlarge is a InstanceType enum value
#InstanceTypeC6gd2xlarge: "c6gd.2xlarge"

// InstanceTypeC6gd4xlarge is a InstanceType enum value
#InstanceTypeC6gd4xlarge: "c6gd.4xlarge"

// InstanceTypeC6gd8xlarge is a InstanceType enum value
#InstanceTypeC6gd8xlarge: "c6gd.8xlarge"

// InstanceTypeC6gd12xlarge is a InstanceType enum value
#InstanceTypeC6gd12xlarge: "c6gd.12xlarge"

// InstanceTypeC6gd16xlarge is a InstanceType enum value
#InstanceTypeC6gd16xlarge: "c6gd.16xlarge"

// InstanceTypeC6gnMedium is a InstanceType enum value
#InstanceTypeC6gnMedium: "c6gn.medium"

// InstanceTypeC6gnLarge is a InstanceType enum value
#InstanceTypeC6gnLarge: "c6gn.large"

// InstanceTypeC6gnXlarge is a InstanceType enum value
#InstanceTypeC6gnXlarge: "c6gn.xlarge"

// InstanceTypeC6gn2xlarge is a InstanceType enum value
#InstanceTypeC6gn2xlarge: "c6gn.2xlarge"

// InstanceTypeC6gn4xlarge is a InstanceType enum value
#InstanceTypeC6gn4xlarge: "c6gn.4xlarge"

// InstanceTypeC6gn8xlarge is a InstanceType enum value
#InstanceTypeC6gn8xlarge: "c6gn.8xlarge"

// InstanceTypeC6gn12xlarge is a InstanceType enum value
#InstanceTypeC6gn12xlarge: "c6gn.12xlarge"

// InstanceTypeC6gn16xlarge is a InstanceType enum value
#InstanceTypeC6gn16xlarge: "c6gn.16xlarge"

// InstanceTypeCc14xlarge is a InstanceType enum value
#InstanceTypeCc14xlarge: "cc1.4xlarge"

// InstanceTypeCc28xlarge is a InstanceType enum value
#InstanceTypeCc28xlarge: "cc2.8xlarge"

// InstanceTypeG22xlarge is a InstanceType enum value
#InstanceTypeG22xlarge: "g2.2xlarge"

// InstanceTypeG28xlarge is a InstanceType enum value
#InstanceTypeG28xlarge: "g2.8xlarge"

// InstanceTypeG34xlarge is a InstanceType enum value
#InstanceTypeG34xlarge: "g3.4xlarge"

// InstanceTypeG38xlarge is a InstanceType enum value
#InstanceTypeG38xlarge: "g3.8xlarge"

// InstanceTypeG316xlarge is a InstanceType enum value
#InstanceTypeG316xlarge: "g3.16xlarge"

// InstanceTypeG3sXlarge is a InstanceType enum value
#InstanceTypeG3sXlarge: "g3s.xlarge"

// InstanceTypeG4adXlarge is a InstanceType enum value
#InstanceTypeG4adXlarge: "g4ad.xlarge"

// InstanceTypeG4ad2xlarge is a InstanceType enum value
#InstanceTypeG4ad2xlarge: "g4ad.2xlarge"

// InstanceTypeG4ad4xlarge is a InstanceType enum value
#InstanceTypeG4ad4xlarge: "g4ad.4xlarge"

// InstanceTypeG4ad8xlarge is a InstanceType enum value
#InstanceTypeG4ad8xlarge: "g4ad.8xlarge"

// InstanceTypeG4ad16xlarge is a InstanceType enum value
#InstanceTypeG4ad16xlarge: "g4ad.16xlarge"

// InstanceTypeG4dnXlarge is a InstanceType enum value
#InstanceTypeG4dnXlarge: "g4dn.xlarge"

// InstanceTypeG4dn2xlarge is a InstanceType enum value
#InstanceTypeG4dn2xlarge: "g4dn.2xlarge"

// InstanceTypeG4dn4xlarge is a InstanceType enum value
#InstanceTypeG4dn4xlarge: "g4dn.4xlarge"

// InstanceTypeG4dn8xlarge is a InstanceType enum value
#InstanceTypeG4dn8xlarge: "g4dn.8xlarge"

// InstanceTypeG4dn12xlarge is a InstanceType enum value
#InstanceTypeG4dn12xlarge: "g4dn.12xlarge"

// InstanceTypeG4dn16xlarge is a InstanceType enum value
#InstanceTypeG4dn16xlarge: "g4dn.16xlarge"

// InstanceTypeG4dnMetal is a InstanceType enum value
#InstanceTypeG4dnMetal: "g4dn.metal"

// InstanceTypeCg14xlarge is a InstanceType enum value
#InstanceTypeCg14xlarge: "cg1.4xlarge"

// InstanceTypeP2Xlarge is a InstanceType enum value
#InstanceTypeP2Xlarge: "p2.xlarge"

// InstanceTypeP28xlarge is a InstanceType enum value
#InstanceTypeP28xlarge: "p2.8xlarge"

// InstanceTypeP216xlarge is a InstanceType enum value
#InstanceTypeP216xlarge: "p2.16xlarge"

// InstanceTypeP32xlarge is a InstanceType enum value
#InstanceTypeP32xlarge: "p3.2xlarge"

// InstanceTypeP38xlarge is a InstanceType enum value
#InstanceTypeP38xlarge: "p3.8xlarge"

// InstanceTypeP316xlarge is a InstanceType enum value
#InstanceTypeP316xlarge: "p3.16xlarge"

// InstanceTypeP3dn24xlarge is a InstanceType enum value
#InstanceTypeP3dn24xlarge: "p3dn.24xlarge"

// InstanceTypeP4d24xlarge is a InstanceType enum value
#InstanceTypeP4d24xlarge: "p4d.24xlarge"

// InstanceTypeD2Xlarge is a InstanceType enum value
#InstanceTypeD2Xlarge: "d2.xlarge"

// InstanceTypeD22xlarge is a InstanceType enum value
#InstanceTypeD22xlarge: "d2.2xlarge"

// InstanceTypeD24xlarge is a InstanceType enum value
#InstanceTypeD24xlarge: "d2.4xlarge"

// InstanceTypeD28xlarge is a InstanceType enum value
#InstanceTypeD28xlarge: "d2.8xlarge"

// InstanceTypeD3Xlarge is a InstanceType enum value
#InstanceTypeD3Xlarge: "d3.xlarge"

// InstanceTypeD32xlarge is a InstanceType enum value
#InstanceTypeD32xlarge: "d3.2xlarge"

// InstanceTypeD34xlarge is a InstanceType enum value
#InstanceTypeD34xlarge: "d3.4xlarge"

// InstanceTypeD38xlarge is a InstanceType enum value
#InstanceTypeD38xlarge: "d3.8xlarge"

// InstanceTypeD3enXlarge is a InstanceType enum value
#InstanceTypeD3enXlarge: "d3en.xlarge"

// InstanceTypeD3en2xlarge is a InstanceType enum value
#InstanceTypeD3en2xlarge: "d3en.2xlarge"

// InstanceTypeD3en4xlarge is a InstanceType enum value
#InstanceTypeD3en4xlarge: "d3en.4xlarge"

// InstanceTypeD3en6xlarge is a InstanceType enum value
#InstanceTypeD3en6xlarge: "d3en.6xlarge"

// InstanceTypeD3en8xlarge is a InstanceType enum value
#InstanceTypeD3en8xlarge: "d3en.8xlarge"

// InstanceTypeD3en12xlarge is a InstanceType enum value
#InstanceTypeD3en12xlarge: "d3en.12xlarge"

// InstanceTypeF12xlarge is a InstanceType enum value
#InstanceTypeF12xlarge: "f1.2xlarge"

// InstanceTypeF14xlarge is a InstanceType enum value
#InstanceTypeF14xlarge: "f1.4xlarge"

// InstanceTypeF116xlarge is a InstanceType enum value
#InstanceTypeF116xlarge: "f1.16xlarge"

// InstanceTypeM5Large is a InstanceType enum value
#InstanceTypeM5Large: "m5.large"

// InstanceTypeM5Xlarge is a InstanceType enum value
#InstanceTypeM5Xlarge: "m5.xlarge"

// InstanceTypeM52xlarge is a InstanceType enum value
#InstanceTypeM52xlarge: "m5.2xlarge"

// InstanceTypeM54xlarge is a InstanceType enum value
#InstanceTypeM54xlarge: "m5.4xlarge"

// InstanceTypeM58xlarge is a InstanceType enum value
#InstanceTypeM58xlarge: "m5.8xlarge"

// InstanceTypeM512xlarge is a InstanceType enum value
#InstanceTypeM512xlarge: "m5.12xlarge"

// InstanceTypeM516xlarge is a InstanceType enum value
#InstanceTypeM516xlarge: "m5.16xlarge"

// InstanceTypeM524xlarge is a InstanceType enum value
#InstanceTypeM524xlarge: "m5.24xlarge"

// InstanceTypeM5Metal is a InstanceType enum value
#InstanceTypeM5Metal: "m5.metal"

// InstanceTypeM5aLarge is a InstanceType enum value
#InstanceTypeM5aLarge: "m5a.large"

// InstanceTypeM5aXlarge is a InstanceType enum value
#InstanceTypeM5aXlarge: "m5a.xlarge"

// InstanceTypeM5a2xlarge is a InstanceType enum value
#InstanceTypeM5a2xlarge: "m5a.2xlarge"

// InstanceTypeM5a4xlarge is a InstanceType enum value
#InstanceTypeM5a4xlarge: "m5a.4xlarge"

// InstanceTypeM5a8xlarge is a InstanceType enum value
#InstanceTypeM5a8xlarge: "m5a.8xlarge"

// InstanceTypeM5a12xlarge is a InstanceType enum value
#InstanceTypeM5a12xlarge: "m5a.12xlarge"

// InstanceTypeM5a16xlarge is a InstanceType enum value
#InstanceTypeM5a16xlarge: "m5a.16xlarge"

// InstanceTypeM5a24xlarge is a InstanceType enum value
#InstanceTypeM5a24xlarge: "m5a.24xlarge"

// InstanceTypeM5dLarge is a InstanceType enum value
#InstanceTypeM5dLarge: "m5d.large"

// InstanceTypeM5dXlarge is a InstanceType enum value
#InstanceTypeM5dXlarge: "m5d.xlarge"

// InstanceTypeM5d2xlarge is a InstanceType enum value
#InstanceTypeM5d2xlarge: "m5d.2xlarge"

// InstanceTypeM5d4xlarge is a InstanceType enum value
#InstanceTypeM5d4xlarge: "m5d.4xlarge"

// InstanceTypeM5d8xlarge is a InstanceType enum value
#InstanceTypeM5d8xlarge: "m5d.8xlarge"

// InstanceTypeM5d12xlarge is a InstanceType enum value
#InstanceTypeM5d12xlarge: "m5d.12xlarge"

// InstanceTypeM5d16xlarge is a InstanceType enum value
#InstanceTypeM5d16xlarge: "m5d.16xlarge"

// InstanceTypeM5d24xlarge is a InstanceType enum value
#InstanceTypeM5d24xlarge: "m5d.24xlarge"

// InstanceTypeM5dMetal is a InstanceType enum value
#InstanceTypeM5dMetal: "m5d.metal"

// InstanceTypeM5adLarge is a InstanceType enum value
#InstanceTypeM5adLarge: "m5ad.large"

// InstanceTypeM5adXlarge is a InstanceType enum value
#InstanceTypeM5adXlarge: "m5ad.xlarge"

// InstanceTypeM5ad2xlarge is a InstanceType enum value
#InstanceTypeM5ad2xlarge: "m5ad.2xlarge"

// InstanceTypeM5ad4xlarge is a InstanceType enum value
#InstanceTypeM5ad4xlarge: "m5ad.4xlarge"

// InstanceTypeM5ad8xlarge is a InstanceType enum value
#InstanceTypeM5ad8xlarge: "m5ad.8xlarge"

// InstanceTypeM5ad12xlarge is a InstanceType enum value
#InstanceTypeM5ad12xlarge: "m5ad.12xlarge"

// InstanceTypeM5ad16xlarge is a InstanceType enum value
#InstanceTypeM5ad16xlarge: "m5ad.16xlarge"

// InstanceTypeM5ad24xlarge is a InstanceType enum value
#InstanceTypeM5ad24xlarge: "m5ad.24xlarge"

// InstanceTypeM5znLarge is a InstanceType enum value
#InstanceTypeM5znLarge: "m5zn.large"

// InstanceTypeM5znXlarge is a InstanceType enum value
#InstanceTypeM5znXlarge: "m5zn.xlarge"

// InstanceTypeM5zn2xlarge is a InstanceType enum value
#InstanceTypeM5zn2xlarge: "m5zn.2xlarge"

// InstanceTypeM5zn3xlarge is a InstanceType enum value
#InstanceTypeM5zn3xlarge: "m5zn.3xlarge"

// InstanceTypeM5zn6xlarge is a InstanceType enum value
#InstanceTypeM5zn6xlarge: "m5zn.6xlarge"

// InstanceTypeM5zn12xlarge is a InstanceType enum value
#InstanceTypeM5zn12xlarge: "m5zn.12xlarge"

// InstanceTypeM5znMetal is a InstanceType enum value
#InstanceTypeM5znMetal: "m5zn.metal"

// InstanceTypeH12xlarge is a InstanceType enum value
#InstanceTypeH12xlarge: "h1.2xlarge"

// InstanceTypeH14xlarge is a InstanceType enum value
#InstanceTypeH14xlarge: "h1.4xlarge"

// InstanceTypeH18xlarge is a InstanceType enum value
#InstanceTypeH18xlarge: "h1.8xlarge"

// InstanceTypeH116xlarge is a InstanceType enum value
#InstanceTypeH116xlarge: "h1.16xlarge"

// InstanceTypeZ1dLarge is a InstanceType enum value
#InstanceTypeZ1dLarge: "z1d.large"

// InstanceTypeZ1dXlarge is a InstanceType enum value
#InstanceTypeZ1dXlarge: "z1d.xlarge"

// InstanceTypeZ1d2xlarge is a InstanceType enum value
#InstanceTypeZ1d2xlarge: "z1d.2xlarge"

// InstanceTypeZ1d3xlarge is a InstanceType enum value
#InstanceTypeZ1d3xlarge: "z1d.3xlarge"

// InstanceTypeZ1d6xlarge is a InstanceType enum value
#InstanceTypeZ1d6xlarge: "z1d.6xlarge"

// InstanceTypeZ1d12xlarge is a InstanceType enum value
#InstanceTypeZ1d12xlarge: "z1d.12xlarge"

// InstanceTypeZ1dMetal is a InstanceType enum value
#InstanceTypeZ1dMetal: "z1d.metal"

// InstanceTypeU6tb156xlarge is a InstanceType enum value
#InstanceTypeU6tb156xlarge: "u-6tb1.56xlarge"

// InstanceTypeU6tb1112xlarge is a InstanceType enum value
#InstanceTypeU6tb1112xlarge: "u-6tb1.112xlarge"

// InstanceTypeU9tb1112xlarge is a InstanceType enum value
#InstanceTypeU9tb1112xlarge: "u-9tb1.112xlarge"

// InstanceTypeU12tb1112xlarge is a InstanceType enum value
#InstanceTypeU12tb1112xlarge: "u-12tb1.112xlarge"

// InstanceTypeU6tb1Metal is a InstanceType enum value
#InstanceTypeU6tb1Metal: "u-6tb1.metal"

// InstanceTypeU9tb1Metal is a InstanceType enum value
#InstanceTypeU9tb1Metal: "u-9tb1.metal"

// InstanceTypeU12tb1Metal is a InstanceType enum value
#InstanceTypeU12tb1Metal: "u-12tb1.metal"

// InstanceTypeU18tb1Metal is a InstanceType enum value
#InstanceTypeU18tb1Metal: "u-18tb1.metal"

// InstanceTypeU24tb1Metal is a InstanceType enum value
#InstanceTypeU24tb1Metal: "u-24tb1.metal"

// InstanceTypeA1Medium is a InstanceType enum value
#InstanceTypeA1Medium: "a1.medium"

// InstanceTypeA1Large is a InstanceType enum value
#InstanceTypeA1Large: "a1.large"

// InstanceTypeA1Xlarge is a InstanceType enum value
#InstanceTypeA1Xlarge: "a1.xlarge"

// InstanceTypeA12xlarge is a InstanceType enum value
#InstanceTypeA12xlarge: "a1.2xlarge"

// InstanceTypeA14xlarge is a InstanceType enum value
#InstanceTypeA14xlarge: "a1.4xlarge"

// InstanceTypeA1Metal is a InstanceType enum value
#InstanceTypeA1Metal: "a1.metal"

// InstanceTypeM5dnLarge is a InstanceType enum value
#InstanceTypeM5dnLarge: "m5dn.large"

// InstanceTypeM5dnXlarge is a InstanceType enum value
#InstanceTypeM5dnXlarge: "m5dn.xlarge"

// InstanceTypeM5dn2xlarge is a InstanceType enum value
#InstanceTypeM5dn2xlarge: "m5dn.2xlarge"

// InstanceTypeM5dn4xlarge is a InstanceType enum value
#InstanceTypeM5dn4xlarge: "m5dn.4xlarge"

// InstanceTypeM5dn8xlarge is a InstanceType enum value
#InstanceTypeM5dn8xlarge: "m5dn.8xlarge"

// InstanceTypeM5dn12xlarge is a InstanceType enum value
#InstanceTypeM5dn12xlarge: "m5dn.12xlarge"

// InstanceTypeM5dn16xlarge is a InstanceType enum value
#InstanceTypeM5dn16xlarge: "m5dn.16xlarge"

// InstanceTypeM5dn24xlarge is a InstanceType enum value
#InstanceTypeM5dn24xlarge: "m5dn.24xlarge"

// InstanceTypeM5dnMetal is a InstanceType enum value
#InstanceTypeM5dnMetal: "m5dn.metal"

// InstanceTypeM5nLarge is a InstanceType enum value
#InstanceTypeM5nLarge: "m5n.large"

// InstanceTypeM5nXlarge is a InstanceType enum value
#InstanceTypeM5nXlarge: "m5n.xlarge"

// InstanceTypeM5n2xlarge is a InstanceType enum value
#InstanceTypeM5n2xlarge: "m5n.2xlarge"

// InstanceTypeM5n4xlarge is a InstanceType enum value
#InstanceTypeM5n4xlarge: "m5n.4xlarge"

// InstanceTypeM5n8xlarge is a InstanceType enum value
#InstanceTypeM5n8xlarge: "m5n.8xlarge"

// InstanceTypeM5n12xlarge is a InstanceType enum value
#InstanceTypeM5n12xlarge: "m5n.12xlarge"

// InstanceTypeM5n16xlarge is a InstanceType enum value
#InstanceTypeM5n16xlarge: "m5n.16xlarge"

// InstanceTypeM5n24xlarge is a InstanceType enum value
#InstanceTypeM5n24xlarge: "m5n.24xlarge"

// InstanceTypeM5nMetal is a InstanceType enum value
#InstanceTypeM5nMetal: "m5n.metal"

// InstanceTypeR5dnLarge is a InstanceType enum value
#InstanceTypeR5dnLarge: "r5dn.large"

// InstanceTypeR5dnXlarge is a InstanceType enum value
#InstanceTypeR5dnXlarge: "r5dn.xlarge"

// InstanceTypeR5dn2xlarge is a InstanceType enum value
#InstanceTypeR5dn2xlarge: "r5dn.2xlarge"

// InstanceTypeR5dn4xlarge is a InstanceType enum value
#InstanceTypeR5dn4xlarge: "r5dn.4xlarge"

// InstanceTypeR5dn8xlarge is a InstanceType enum value
#InstanceTypeR5dn8xlarge: "r5dn.8xlarge"

// InstanceTypeR5dn12xlarge is a InstanceType enum value
#InstanceTypeR5dn12xlarge: "r5dn.12xlarge"

// InstanceTypeR5dn16xlarge is a InstanceType enum value
#InstanceTypeR5dn16xlarge: "r5dn.16xlarge"

// InstanceTypeR5dn24xlarge is a InstanceType enum value
#InstanceTypeR5dn24xlarge: "r5dn.24xlarge"

// InstanceTypeR5dnMetal is a InstanceType enum value
#InstanceTypeR5dnMetal: "r5dn.metal"

// InstanceTypeR5nLarge is a InstanceType enum value
#InstanceTypeR5nLarge: "r5n.large"

// InstanceTypeR5nXlarge is a InstanceType enum value
#InstanceTypeR5nXlarge: "r5n.xlarge"

// InstanceTypeR5n2xlarge is a InstanceType enum value
#InstanceTypeR5n2xlarge: "r5n.2xlarge"

// InstanceTypeR5n4xlarge is a InstanceType enum value
#InstanceTypeR5n4xlarge: "r5n.4xlarge"

// InstanceTypeR5n8xlarge is a InstanceType enum value
#InstanceTypeR5n8xlarge: "r5n.8xlarge"

// InstanceTypeR5n12xlarge is a InstanceType enum value
#InstanceTypeR5n12xlarge: "r5n.12xlarge"

// InstanceTypeR5n16xlarge is a InstanceType enum value
#InstanceTypeR5n16xlarge: "r5n.16xlarge"

// InstanceTypeR5n24xlarge is a InstanceType enum value
#InstanceTypeR5n24xlarge: "r5n.24xlarge"

// InstanceTypeR5nMetal is a InstanceType enum value
#InstanceTypeR5nMetal: "r5n.metal"

// InstanceTypeInf1Xlarge is a InstanceType enum value
#InstanceTypeInf1Xlarge: "inf1.xlarge"

// InstanceTypeInf12xlarge is a InstanceType enum value
#InstanceTypeInf12xlarge: "inf1.2xlarge"

// InstanceTypeInf16xlarge is a InstanceType enum value
#InstanceTypeInf16xlarge: "inf1.6xlarge"

// InstanceTypeInf124xlarge is a InstanceType enum value
#InstanceTypeInf124xlarge: "inf1.24xlarge"

// InstanceTypeM6gMetal is a InstanceType enum value
#InstanceTypeM6gMetal: "m6g.metal"

// InstanceTypeM6gMedium is a InstanceType enum value
#InstanceTypeM6gMedium: "m6g.medium"

// InstanceTypeM6gLarge is a InstanceType enum value
#InstanceTypeM6gLarge: "m6g.large"

// InstanceTypeM6gXlarge is a InstanceType enum value
#InstanceTypeM6gXlarge: "m6g.xlarge"

// InstanceTypeM6g2xlarge is a InstanceType enum value
#InstanceTypeM6g2xlarge: "m6g.2xlarge"

// InstanceTypeM6g4xlarge is a InstanceType enum value
#InstanceTypeM6g4xlarge: "m6g.4xlarge"

// InstanceTypeM6g8xlarge is a InstanceType enum value
#InstanceTypeM6g8xlarge: "m6g.8xlarge"

// InstanceTypeM6g12xlarge is a InstanceType enum value
#InstanceTypeM6g12xlarge: "m6g.12xlarge"

// InstanceTypeM6g16xlarge is a InstanceType enum value
#InstanceTypeM6g16xlarge: "m6g.16xlarge"

// InstanceTypeM6gdMetal is a InstanceType enum value
#InstanceTypeM6gdMetal: "m6gd.metal"

// InstanceTypeM6gdMedium is a InstanceType enum value
#InstanceTypeM6gdMedium: "m6gd.medium"

// InstanceTypeM6gdLarge is a InstanceType enum value
#InstanceTypeM6gdLarge: "m6gd.large"

// InstanceTypeM6gdXlarge is a InstanceType enum value
#InstanceTypeM6gdXlarge: "m6gd.xlarge"

// InstanceTypeM6gd2xlarge is a InstanceType enum value
#InstanceTypeM6gd2xlarge: "m6gd.2xlarge"

// InstanceTypeM6gd4xlarge is a InstanceType enum value
#InstanceTypeM6gd4xlarge: "m6gd.4xlarge"

// InstanceTypeM6gd8xlarge is a InstanceType enum value
#InstanceTypeM6gd8xlarge: "m6gd.8xlarge"

// InstanceTypeM6gd12xlarge is a InstanceType enum value
#InstanceTypeM6gd12xlarge: "m6gd.12xlarge"

// InstanceTypeM6gd16xlarge is a InstanceType enum value
#InstanceTypeM6gd16xlarge: "m6gd.16xlarge"

// InstanceTypeM6iLarge is a InstanceType enum value
#InstanceTypeM6iLarge: "m6i.large"

// InstanceTypeM6iXlarge is a InstanceType enum value
#InstanceTypeM6iXlarge: "m6i.xlarge"

// InstanceTypeM6i2xlarge is a InstanceType enum value
#InstanceTypeM6i2xlarge: "m6i.2xlarge"

// InstanceTypeM6i4xlarge is a InstanceType enum value
#InstanceTypeM6i4xlarge: "m6i.4xlarge"

// InstanceTypeM6i8xlarge is a InstanceType enum value
#InstanceTypeM6i8xlarge: "m6i.8xlarge"

// InstanceTypeM6i12xlarge is a InstanceType enum value
#InstanceTypeM6i12xlarge: "m6i.12xlarge"

// InstanceTypeM6i16xlarge is a InstanceType enum value
#InstanceTypeM6i16xlarge: "m6i.16xlarge"

// InstanceTypeM6i24xlarge is a InstanceType enum value
#InstanceTypeM6i24xlarge: "m6i.24xlarge"

// InstanceTypeM6i32xlarge is a InstanceType enum value
#InstanceTypeM6i32xlarge: "m6i.32xlarge"

// InstanceTypeMac1Metal is a InstanceType enum value
#InstanceTypeMac1Metal: "mac1.metal"

// InstanceTypeX2gdMedium is a InstanceType enum value
#InstanceTypeX2gdMedium: "x2gd.medium"

// InstanceTypeX2gdLarge is a InstanceType enum value
#InstanceTypeX2gdLarge: "x2gd.large"

// InstanceTypeX2gdXlarge is a InstanceType enum value
#InstanceTypeX2gdXlarge: "x2gd.xlarge"

// InstanceTypeX2gd2xlarge is a InstanceType enum value
#InstanceTypeX2gd2xlarge: "x2gd.2xlarge"

// InstanceTypeX2gd4xlarge is a InstanceType enum value
#InstanceTypeX2gd4xlarge: "x2gd.4xlarge"

// InstanceTypeX2gd8xlarge is a InstanceType enum value
#InstanceTypeX2gd8xlarge: "x2gd.8xlarge"

// InstanceTypeX2gd12xlarge is a InstanceType enum value
#InstanceTypeX2gd12xlarge: "x2gd.12xlarge"

// InstanceTypeX2gd16xlarge is a InstanceType enum value
#InstanceTypeX2gd16xlarge: "x2gd.16xlarge"

// InstanceTypeX2gdMetal is a InstanceType enum value
#InstanceTypeX2gdMetal: "x2gd.metal"

// InstanceTypeHypervisorNitro is a InstanceTypeHypervisor enum value
#InstanceTypeHypervisorNitro: "nitro"

// InstanceTypeHypervisorXen is a InstanceTypeHypervisor enum value
#InstanceTypeHypervisorXen: "xen"

// InterfacePermissionTypeInstanceAttach is a InterfacePermissionType enum value
#InterfacePermissionTypeInstanceAttach: "INSTANCE-ATTACH"

// InterfacePermissionTypeEipAssociate is a InterfacePermissionType enum value
#InterfacePermissionTypeEipAssociate: "EIP-ASSOCIATE"

// InterfaceProtocolTypeVlan is a InterfaceProtocolType enum value
#InterfaceProtocolTypeVlan: "VLAN"

// InterfaceProtocolTypeGre is a InterfaceProtocolType enum value
#InterfaceProtocolTypeGre: "GRE"

// Ipv6SupportValueEnable is a Ipv6SupportValue enum value
#Ipv6SupportValueEnable: "enable"

// Ipv6SupportValueDisable is a Ipv6SupportValue enum value
#Ipv6SupportValueDisable: "disable"

// KeyTypeRsa is a KeyType enum value
#KeyTypeRsa: "rsa"

// KeyTypeEd25519 is a KeyType enum value
#KeyTypeEd25519: "ed25519"

// LaunchTemplateErrorCodeLaunchTemplateIdDoesNotExist is a LaunchTemplateErrorCode enum value
#LaunchTemplateErrorCodeLaunchTemplateIdDoesNotExist: "launchTemplateIdDoesNotExist"

// LaunchTemplateErrorCodeLaunchTemplateIdMalformed is a LaunchTemplateErrorCode enum value
#LaunchTemplateErrorCodeLaunchTemplateIdMalformed: "launchTemplateIdMalformed"

// LaunchTemplateErrorCodeLaunchTemplateNameDoesNotExist is a LaunchTemplateErrorCode enum value
#LaunchTemplateErrorCodeLaunchTemplateNameDoesNotExist: "launchTemplateNameDoesNotExist"

// LaunchTemplateErrorCodeLaunchTemplateNameMalformed is a LaunchTemplateErrorCode enum value
#LaunchTemplateErrorCodeLaunchTemplateNameMalformed: "launchTemplateNameMalformed"

// LaunchTemplateErrorCodeLaunchTemplateVersionDoesNotExist is a LaunchTemplateErrorCode enum value
#LaunchTemplateErrorCodeLaunchTemplateVersionDoesNotExist: "launchTemplateVersionDoesNotExist"

// LaunchTemplateErrorCodeUnexpectedError is a LaunchTemplateErrorCode enum value
#LaunchTemplateErrorCodeUnexpectedError: "unexpectedError"

// LaunchTemplateHttpTokensStateOptional is a LaunchTemplateHttpTokensState enum value
#LaunchTemplateHttpTokensStateOptional: "optional"

// LaunchTemplateHttpTokensStateRequired is a LaunchTemplateHttpTokensState enum value
#LaunchTemplateHttpTokensStateRequired: "required"

// LaunchTemplateInstanceMetadataEndpointStateDisabled is a LaunchTemplateInstanceMetadataEndpointState enum value
#LaunchTemplateInstanceMetadataEndpointStateDisabled: "disabled"

// LaunchTemplateInstanceMetadataEndpointStateEnabled is a LaunchTemplateInstanceMetadataEndpointState enum value
#LaunchTemplateInstanceMetadataEndpointStateEnabled: "enabled"

// LaunchTemplateInstanceMetadataOptionsStatePending is a LaunchTemplateInstanceMetadataOptionsState enum value
#LaunchTemplateInstanceMetadataOptionsStatePending: "pending"

// LaunchTemplateInstanceMetadataOptionsStateApplied is a LaunchTemplateInstanceMetadataOptionsState enum value
#LaunchTemplateInstanceMetadataOptionsStateApplied: "applied"

// ListingStateAvailable is a ListingState enum value
#ListingStateAvailable: "available"

// ListingStateSold is a ListingState enum value
#ListingStateSold: "sold"

// ListingStateCancelled is a ListingState enum value
#ListingStateCancelled: "cancelled"

// ListingStatePending is a ListingState enum value
#ListingStatePending: "pending"

// ListingStatusActive is a ListingStatus enum value
#ListingStatusActive: "active"

// ListingStatusPending is a ListingStatus enum value
#ListingStatusPending: "pending"

// ListingStatusCancelled is a ListingStatus enum value
#ListingStatusCancelled: "cancelled"

// ListingStatusClosed is a ListingStatus enum value
#ListingStatusClosed: "closed"

// LocalGatewayRouteStatePending is a LocalGatewayRouteState enum value
#LocalGatewayRouteStatePending: "pending"

// LocalGatewayRouteStateActive is a LocalGatewayRouteState enum value
#LocalGatewayRouteStateActive: "active"

// LocalGatewayRouteStateBlackhole is a LocalGatewayRouteState enum value
#LocalGatewayRouteStateBlackhole: "blackhole"

// LocalGatewayRouteStateDeleting is a LocalGatewayRouteState enum value
#LocalGatewayRouteStateDeleting: "deleting"

// LocalGatewayRouteStateDeleted is a LocalGatewayRouteState enum value
#LocalGatewayRouteStateDeleted: "deleted"

// LocalGatewayRouteTypeStatic is a LocalGatewayRouteType enum value
#LocalGatewayRouteTypeStatic: "static"

// LocalGatewayRouteTypePropagated is a LocalGatewayRouteType enum value
#LocalGatewayRouteTypePropagated: "propagated"

// LocationTypeRegion is a LocationType enum value
#LocationTypeRegion: "region"

// LocationTypeAvailabilityZone is a LocationType enum value
#LocationTypeAvailabilityZone: "availability-zone"

// LocationTypeAvailabilityZoneId is a LocationType enum value
#LocationTypeAvailabilityZoneId: "availability-zone-id"

// LogDestinationTypeCloudWatchLogs is a LogDestinationType enum value
#LogDestinationTypeCloudWatchLogs: "cloud-watch-logs"

// LogDestinationTypeS3 is a LogDestinationType enum value
#LogDestinationTypeS3: "s3"

// MarketTypeSpot is a MarketType enum value
#MarketTypeSpot: "spot"

// MembershipTypeStatic is a MembershipType enum value
#MembershipTypeStatic: "static"

// MembershipTypeIgmp is a MembershipType enum value
#MembershipTypeIgmp: "igmp"

// ModifyAvailabilityZoneOptInStatusOptedIn is a ModifyAvailabilityZoneOptInStatus enum value
#ModifyAvailabilityZoneOptInStatusOptedIn: "opted-in"

// ModifyAvailabilityZoneOptInStatusNotOptedIn is a ModifyAvailabilityZoneOptInStatus enum value
#ModifyAvailabilityZoneOptInStatusNotOptedIn: "not-opted-in"

// MonitoringStateDisabled is a MonitoringState enum value
#MonitoringStateDisabled: "disabled"

// MonitoringStateDisabling is a MonitoringState enum value
#MonitoringStateDisabling: "disabling"

// MonitoringStateEnabled is a MonitoringState enum value
#MonitoringStateEnabled: "enabled"

// MonitoringStatePending is a MonitoringState enum value
#MonitoringStatePending: "pending"

// MoveStatusMovingToVpc is a MoveStatus enum value
#MoveStatusMovingToVpc: "movingToVpc"

// MoveStatusRestoringToClassic is a MoveStatus enum value
#MoveStatusRestoringToClassic: "restoringToClassic"

// MulticastSupportValueEnable is a MulticastSupportValue enum value
#MulticastSupportValueEnable: "enable"

// MulticastSupportValueDisable is a MulticastSupportValue enum value
#MulticastSupportValueDisable: "disable"

// NatGatewayStatePending is a NatGatewayState enum value
#NatGatewayStatePending: "pending"

// NatGatewayStateFailed is a NatGatewayState enum value
#NatGatewayStateFailed: "failed"

// NatGatewayStateAvailable is a NatGatewayState enum value
#NatGatewayStateAvailable: "available"

// NatGatewayStateDeleting is a NatGatewayState enum value
#NatGatewayStateDeleting: "deleting"

// NatGatewayStateDeleted is a NatGatewayState enum value
#NatGatewayStateDeleted: "deleted"

// NetworkInterfaceAttributeDescription is a NetworkInterfaceAttribute enum value
#NetworkInterfaceAttributeDescription: "description"

// NetworkInterfaceAttributeGroupSet is a NetworkInterfaceAttribute enum value
#NetworkInterfaceAttributeGroupSet: "groupSet"

// NetworkInterfaceAttributeSourceDestCheck is a NetworkInterfaceAttribute enum value
#NetworkInterfaceAttributeSourceDestCheck: "sourceDestCheck"

// NetworkInterfaceAttributeAttachment is a NetworkInterfaceAttribute enum value
#NetworkInterfaceAttributeAttachment: "attachment"

// NetworkInterfaceCreationTypeEfa is a NetworkInterfaceCreationType enum value
#NetworkInterfaceCreationTypeEfa: "efa"

// NetworkInterfaceCreationTypeBranch is a NetworkInterfaceCreationType enum value
#NetworkInterfaceCreationTypeBranch: "branch"

// NetworkInterfaceCreationTypeTrunk is a NetworkInterfaceCreationType enum value
#NetworkInterfaceCreationTypeTrunk: "trunk"

// NetworkInterfacePermissionStateCodePending is a NetworkInterfacePermissionStateCode enum value
#NetworkInterfacePermissionStateCodePending: "pending"

// NetworkInterfacePermissionStateCodeGranted is a NetworkInterfacePermissionStateCode enum value
#NetworkInterfacePermissionStateCodeGranted: "granted"

// NetworkInterfacePermissionStateCodeRevoking is a NetworkInterfacePermissionStateCode enum value
#NetworkInterfacePermissionStateCodeRevoking: "revoking"

// NetworkInterfacePermissionStateCodeRevoked is a NetworkInterfacePermissionStateCode enum value
#NetworkInterfacePermissionStateCodeRevoked: "revoked"

// NetworkInterfaceStatusAvailable is a NetworkInterfaceStatus enum value
#NetworkInterfaceStatusAvailable: "available"

// NetworkInterfaceStatusAssociated is a NetworkInterfaceStatus enum value
#NetworkInterfaceStatusAssociated: "associated"

// NetworkInterfaceStatusAttaching is a NetworkInterfaceStatus enum value
#NetworkInterfaceStatusAttaching: "attaching"

// NetworkInterfaceStatusInUse is a NetworkInterfaceStatus enum value
#NetworkInterfaceStatusInUse: "in-use"

// NetworkInterfaceStatusDetaching is a NetworkInterfaceStatus enum value
#NetworkInterfaceStatusDetaching: "detaching"

// NetworkInterfaceTypeInterface is a NetworkInterfaceType enum value
#NetworkInterfaceTypeInterface: "interface"

// NetworkInterfaceTypeNatGateway is a NetworkInterfaceType enum value
#NetworkInterfaceTypeNatGateway: "natGateway"

// NetworkInterfaceTypeEfa is a NetworkInterfaceType enum value
#NetworkInterfaceTypeEfa: "efa"

// NetworkInterfaceTypeTrunk is a NetworkInterfaceType enum value
#NetworkInterfaceTypeTrunk: "trunk"

// OfferingClassTypeStandard is a OfferingClassType enum value
#OfferingClassTypeStandard: "standard"

// OfferingClassTypeConvertible is a OfferingClassType enum value
#OfferingClassTypeConvertible: "convertible"

// OfferingTypeValuesHeavyUtilization is a OfferingTypeValues enum value
#OfferingTypeValuesHeavyUtilization: "Heavy Utilization"

// OfferingTypeValuesMediumUtilization is a OfferingTypeValues enum value
#OfferingTypeValuesMediumUtilization: "Medium Utilization"

// OfferingTypeValuesLightUtilization is a OfferingTypeValues enum value
#OfferingTypeValuesLightUtilization: "Light Utilization"

// OfferingTypeValuesNoUpfront is a OfferingTypeValues enum value
#OfferingTypeValuesNoUpfront: "No Upfront"

// OfferingTypeValuesPartialUpfront is a OfferingTypeValues enum value
#OfferingTypeValuesPartialUpfront: "Partial Upfront"

// OfferingTypeValuesAllUpfront is a OfferingTypeValues enum value
#OfferingTypeValuesAllUpfront: "All Upfront"

// OnDemandAllocationStrategyLowestPrice is a OnDemandAllocationStrategy enum value
#OnDemandAllocationStrategyLowestPrice: "lowestPrice"

// OnDemandAllocationStrategyPrioritized is a OnDemandAllocationStrategy enum value
#OnDemandAllocationStrategyPrioritized: "prioritized"

// OperationTypeAdd is a OperationType enum value
#OperationTypeAdd: "add"

// OperationTypeRemove is a OperationType enum value
#OperationTypeRemove: "remove"

// PartitionLoadFrequencyNone is a PartitionLoadFrequency enum value
#PartitionLoadFrequencyNone: "none"

// PartitionLoadFrequencyDaily is a PartitionLoadFrequency enum value
#PartitionLoadFrequencyDaily: "daily"

// PartitionLoadFrequencyWeekly is a PartitionLoadFrequency enum value
#PartitionLoadFrequencyWeekly: "weekly"

// PartitionLoadFrequencyMonthly is a PartitionLoadFrequency enum value
#PartitionLoadFrequencyMonthly: "monthly"

// PaymentOptionAllUpfront is a PaymentOption enum value
#PaymentOptionAllUpfront: "AllUpfront"

// PaymentOptionPartialUpfront is a PaymentOption enum value
#PaymentOptionPartialUpfront: "PartialUpfront"

// PaymentOptionNoUpfront is a PaymentOption enum value
#PaymentOptionNoUpfront: "NoUpfront"

// PermissionGroupAll is a PermissionGroup enum value
#PermissionGroupAll: "all"

// PlacementGroupStatePending is a PlacementGroupState enum value
#PlacementGroupStatePending: "pending"

// PlacementGroupStateAvailable is a PlacementGroupState enum value
#PlacementGroupStateAvailable: "available"

// PlacementGroupStateDeleting is a PlacementGroupState enum value
#PlacementGroupStateDeleting: "deleting"

// PlacementGroupStateDeleted is a PlacementGroupState enum value
#PlacementGroupStateDeleted: "deleted"

// PlacementGroupStrategyCluster is a PlacementGroupStrategy enum value
#PlacementGroupStrategyCluster: "cluster"

// PlacementGroupStrategyPartition is a PlacementGroupStrategy enum value
#PlacementGroupStrategyPartition: "partition"

// PlacementGroupStrategySpread is a PlacementGroupStrategy enum value
#PlacementGroupStrategySpread: "spread"

// PlacementStrategyCluster is a PlacementStrategy enum value
#PlacementStrategyCluster: "cluster"

// PlacementStrategySpread is a PlacementStrategy enum value
#PlacementStrategySpread: "spread"

// PlacementStrategyPartition is a PlacementStrategy enum value
#PlacementStrategyPartition: "partition"

// PlatformValuesWindows is a PlatformValues enum value
#PlatformValuesWindows: "Windows"

// PrefixListStateCreateInProgress is a PrefixListState enum value
#PrefixListStateCreateInProgress: "create-in-progress"

// PrefixListStateCreateComplete is a PrefixListState enum value
#PrefixListStateCreateComplete: "create-complete"

// PrefixListStateCreateFailed is a PrefixListState enum value
#PrefixListStateCreateFailed: "create-failed"

// PrefixListStateModifyInProgress is a PrefixListState enum value
#PrefixListStateModifyInProgress: "modify-in-progress"

// PrefixListStateModifyComplete is a PrefixListState enum value
#PrefixListStateModifyComplete: "modify-complete"

// PrefixListStateModifyFailed is a PrefixListState enum value
#PrefixListStateModifyFailed: "modify-failed"

// PrefixListStateRestoreInProgress is a PrefixListState enum value
#PrefixListStateRestoreInProgress: "restore-in-progress"

// PrefixListStateRestoreComplete is a PrefixListState enum value
#PrefixListStateRestoreComplete: "restore-complete"

// PrefixListStateRestoreFailed is a PrefixListState enum value
#PrefixListStateRestoreFailed: "restore-failed"

// PrefixListStateDeleteInProgress is a PrefixListState enum value
#PrefixListStateDeleteInProgress: "delete-in-progress"

// PrefixListStateDeleteComplete is a PrefixListState enum value
#PrefixListStateDeleteComplete: "delete-complete"

// PrefixListStateDeleteFailed is a PrefixListState enum value
#PrefixListStateDeleteFailed: "delete-failed"

// PrincipalTypeAll is a PrincipalType enum value
#PrincipalTypeAll: "All"

// PrincipalTypeService is a PrincipalType enum value
#PrincipalTypeService: "Service"

// PrincipalTypeOrganizationUnit is a PrincipalType enum value
#PrincipalTypeOrganizationUnit: "OrganizationUnit"

// PrincipalTypeAccount is a PrincipalType enum value
#PrincipalTypeAccount: "Account"

// PrincipalTypeUser is a PrincipalType enum value
#PrincipalTypeUser: "User"

// PrincipalTypeRole is a PrincipalType enum value
#PrincipalTypeRole: "Role"

// ProductCodeValuesDevpay is a ProductCodeValues enum value
#ProductCodeValuesDevpay: "devpay"

// ProductCodeValuesMarketplace is a ProductCodeValues enum value
#ProductCodeValuesMarketplace: "marketplace"

// ProtocolTcp is a Protocol enum value
#ProtocolTcp: "tcp"

// ProtocolUdp is a Protocol enum value
#ProtocolUdp: "udp"

// ProtocolValueGre is a ProtocolValue enum value
#ProtocolValueGre: "gre"

// RIProductDescriptionLinuxUnix is a RIProductDescription enum value
#RIProductDescriptionLinuxUnix: "Linux/UNIX"

// RIProductDescriptionLinuxUnixamazonVpc is a RIProductDescription enum value
#RIProductDescriptionLinuxUnixamazonVpc: "Linux/UNIX (Amazon VPC)"

// RIProductDescriptionWindows is a RIProductDescription enum value
#RIProductDescriptionWindows: "Windows"

// RIProductDescriptionWindowsAmazonVpc is a RIProductDescription enum value
#RIProductDescriptionWindowsAmazonVpc: "Windows (Amazon VPC)"

// RecurringChargeFrequencyHourly is a RecurringChargeFrequency enum value
#RecurringChargeFrequencyHourly: "Hourly"

// ReplaceRootVolumeTaskStatePending is a ReplaceRootVolumeTaskState enum value
#ReplaceRootVolumeTaskStatePending: "pending"

// ReplaceRootVolumeTaskStateInProgress is a ReplaceRootVolumeTaskState enum value
#ReplaceRootVolumeTaskStateInProgress: "in-progress"

// ReplaceRootVolumeTaskStateFailing is a ReplaceRootVolumeTaskState enum value
#ReplaceRootVolumeTaskStateFailing: "failing"

// ReplaceRootVolumeTaskStateSucceeded is a ReplaceRootVolumeTaskState enum value
#ReplaceRootVolumeTaskStateSucceeded: "succeeded"

// ReplaceRootVolumeTaskStateFailed is a ReplaceRootVolumeTaskState enum value
#ReplaceRootVolumeTaskStateFailed: "failed"

// ReplaceRootVolumeTaskStateFailedDetached is a ReplaceRootVolumeTaskState enum value
#ReplaceRootVolumeTaskStateFailedDetached: "failed-detached"

// ReplacementStrategyLaunch is a ReplacementStrategy enum value
#ReplacementStrategyLaunch: "launch"

// ReportInstanceReasonCodesInstanceStuckInState is a ReportInstanceReasonCodes enum value
#ReportInstanceReasonCodesInstanceStuckInState: "instance-stuck-in-state"

// ReportInstanceReasonCodesUnresponsive is a ReportInstanceReasonCodes enum value
#ReportInstanceReasonCodesUnresponsive: "unresponsive"

// ReportInstanceReasonCodesNotAcceptingCredentials is a ReportInstanceReasonCodes enum value
#ReportInstanceReasonCodesNotAcceptingCredentials: "not-accepting-credentials"

// ReportInstanceReasonCodesPasswordNotAvailable is a ReportInstanceReasonCodes enum value
#ReportInstanceReasonCodesPasswordNotAvailable: "password-not-available"

// ReportInstanceReasonCodesPerformanceNetwork is a ReportInstanceReasonCodes enum value
#ReportInstanceReasonCodesPerformanceNetwork: "performance-network"

// ReportInstanceReasonCodesPerformanceInstanceStore is a ReportInstanceReasonCodes enum value
#ReportInstanceReasonCodesPerformanceInstanceStore: "performance-instance-store"

// ReportInstanceReasonCodesPerformanceEbsVolume is a ReportInstanceReasonCodes enum value
#ReportInstanceReasonCodesPerformanceEbsVolume: "performance-ebs-volume"

// ReportInstanceReasonCodesPerformanceOther is a ReportInstanceReasonCodes enum value
#ReportInstanceReasonCodesPerformanceOther: "performance-other"

// ReportInstanceReasonCodesOther is a ReportInstanceReasonCodes enum value
#ReportInstanceReasonCodesOther: "other"

// ReportStatusTypeOk is a ReportStatusType enum value
#ReportStatusTypeOk: "ok"

// ReportStatusTypeImpaired is a ReportStatusType enum value
#ReportStatusTypeImpaired: "impaired"

// ReservationStatePaymentPending is a ReservationState enum value
#ReservationStatePaymentPending: "payment-pending"

// ReservationStatePaymentFailed is a ReservationState enum value
#ReservationStatePaymentFailed: "payment-failed"

// ReservationStateActive is a ReservationState enum value
#ReservationStateActive: "active"

// ReservationStateRetired is a ReservationState enum value
#ReservationStateRetired: "retired"

// ReservedInstanceStatePaymentPending is a ReservedInstanceState enum value
#ReservedInstanceStatePaymentPending: "payment-pending"

// ReservedInstanceStateActive is a ReservedInstanceState enum value
#ReservedInstanceStateActive: "active"

// ReservedInstanceStatePaymentFailed is a ReservedInstanceState enum value
#ReservedInstanceStatePaymentFailed: "payment-failed"

// ReservedInstanceStateRetired is a ReservedInstanceState enum value
#ReservedInstanceStateRetired: "retired"

// ReservedInstanceStateQueued is a ReservedInstanceState enum value
#ReservedInstanceStateQueued: "queued"

// ReservedInstanceStateQueuedDeleted is a ReservedInstanceState enum value
#ReservedInstanceStateQueuedDeleted: "queued-deleted"

// ResetFpgaImageAttributeNameLoadPermission is a ResetFpgaImageAttributeName enum value
#ResetFpgaImageAttributeNameLoadPermission: "loadPermission"

// ResetImageAttributeNameLaunchPermission is a ResetImageAttributeName enum value
#ResetImageAttributeNameLaunchPermission: "launchPermission"

// ResourceTypeClientVpnEndpoint is a ResourceType enum value
#ResourceTypeClientVpnEndpoint: "client-vpn-endpoint"

// ResourceTypeCustomerGateway is a ResourceType enum value
#ResourceTypeCustomerGateway: "customer-gateway"

// ResourceTypeDedicatedHost is a ResourceType enum value
#ResourceTypeDedicatedHost: "dedicated-host"

// ResourceTypeDhcpOptions is a ResourceType enum value
#ResourceTypeDhcpOptions: "dhcp-options"

// ResourceTypeEgressOnlyInternetGateway is a ResourceType enum value
#ResourceTypeEgressOnlyInternetGateway: "egress-only-internet-gateway"

// ResourceTypeElasticIp is a ResourceType enum value
#ResourceTypeElasticIp: "elastic-ip"

// ResourceTypeElasticGpu is a ResourceType enum value
#ResourceTypeElasticGpu: "elastic-gpu"

// ResourceTypeExportImageTask is a ResourceType enum value
#ResourceTypeExportImageTask: "export-image-task"

// ResourceTypeExportInstanceTask is a ResourceType enum value
#ResourceTypeExportInstanceTask: "export-instance-task"

// ResourceTypeFleet is a ResourceType enum value
#ResourceTypeFleet: "fleet"

// ResourceTypeFpgaImage is a ResourceType enum value
#ResourceTypeFpgaImage: "fpga-image"

// ResourceTypeHostReservation is a ResourceType enum value
#ResourceTypeHostReservation: "host-reservation"

// ResourceTypeImage is a ResourceType enum value
#ResourceTypeImage: "image"

// ResourceTypeImportImageTask is a ResourceType enum value
#ResourceTypeImportImageTask: "import-image-task"

// ResourceTypeImportSnapshotTask is a ResourceType enum value
#ResourceTypeImportSnapshotTask: "import-snapshot-task"

// ResourceTypeInstance is a ResourceType enum value
#ResourceTypeInstance: "instance"

// ResourceTypeInstanceEventWindow is a ResourceType enum value
#ResourceTypeInstanceEventWindow: "instance-event-window"

// ResourceTypeInternetGateway is a ResourceType enum value
#ResourceTypeInternetGateway: "internet-gateway"

// ResourceTypeKeyPair is a ResourceType enum value
#ResourceTypeKeyPair: "key-pair"

// ResourceTypeLaunchTemplate is a ResourceType enum value
#ResourceTypeLaunchTemplate: "launch-template"

// ResourceTypeLocalGatewayRouteTableVpcAssociation is a ResourceType enum value
#ResourceTypeLocalGatewayRouteTableVpcAssociation: "local-gateway-route-table-vpc-association"

// ResourceTypeNatgateway is a ResourceType enum value
#ResourceTypeNatgateway: "natgateway"

// ResourceTypeNetworkAcl is a ResourceType enum value
#ResourceTypeNetworkAcl: "network-acl"

// ResourceTypeNetworkInterface is a ResourceType enum value
#ResourceTypeNetworkInterface: "network-interface"

// ResourceTypeNetworkInsightsAnalysis is a ResourceType enum value
#ResourceTypeNetworkInsightsAnalysis: "network-insights-analysis"

// ResourceTypeNetworkInsightsPath is a ResourceType enum value
#ResourceTypeNetworkInsightsPath: "network-insights-path"

// ResourceTypePlacementGroup is a ResourceType enum value
#ResourceTypePlacementGroup: "placement-group"

// ResourceTypeReservedInstances is a ResourceType enum value
#ResourceTypeReservedInstances: "reserved-instances"

// ResourceTypeRouteTable is a ResourceType enum value
#ResourceTypeRouteTable: "route-table"

// ResourceTypeSecurityGroup is a ResourceType enum value
#ResourceTypeSecurityGroup: "security-group"

// ResourceTypeSecurityGroupRule is a ResourceType enum value
#ResourceTypeSecurityGroupRule: "security-group-rule"

// ResourceTypeSnapshot is a ResourceType enum value
#ResourceTypeSnapshot: "snapshot"

// ResourceTypeSpotFleetRequest is a ResourceType enum value
#ResourceTypeSpotFleetRequest: "spot-fleet-request"

// ResourceTypeSpotInstancesRequest is a ResourceType enum value
#ResourceTypeSpotInstancesRequest: "spot-instances-request"

// ResourceTypeSubnet is a ResourceType enum value
#ResourceTypeSubnet: "subnet"

// ResourceTypeTrafficMirrorFilter is a ResourceType enum value
#ResourceTypeTrafficMirrorFilter: "traffic-mirror-filter"

// ResourceTypeTrafficMirrorSession is a ResourceType enum value
#ResourceTypeTrafficMirrorSession: "traffic-mirror-session"

// ResourceTypeTrafficMirrorTarget is a ResourceType enum value
#ResourceTypeTrafficMirrorTarget: "traffic-mirror-target"

// ResourceTypeTransitGateway is a ResourceType enum value
#ResourceTypeTransitGateway: "transit-gateway"

// ResourceTypeTransitGatewayAttachment is a ResourceType enum value
#ResourceTypeTransitGatewayAttachment: "transit-gateway-attachment"

// ResourceTypeTransitGatewayConnectPeer is a ResourceType enum value
#ResourceTypeTransitGatewayConnectPeer: "transit-gateway-connect-peer"

// ResourceTypeTransitGatewayMulticastDomain is a ResourceType enum value
#ResourceTypeTransitGatewayMulticastDomain: "transit-gateway-multicast-domain"

// ResourceTypeTransitGatewayRouteTable is a ResourceType enum value
#ResourceTypeTransitGatewayRouteTable: "transit-gateway-route-table"

// ResourceTypeVolume is a ResourceType enum value
#ResourceTypeVolume: "volume"

// ResourceTypeVpc is a ResourceType enum value
#ResourceTypeVpc: "vpc"

// ResourceTypeVpcPeeringConnection is a ResourceType enum value
#ResourceTypeVpcPeeringConnection: "vpc-peering-connection"

// ResourceTypeVpnConnection is a ResourceType enum value
#ResourceTypeVpnConnection: "vpn-connection"

// ResourceTypeVpnGateway is a ResourceType enum value
#ResourceTypeVpnGateway: "vpn-gateway"

// ResourceTypeVpcFlowLog is a ResourceType enum value
#ResourceTypeVpcFlowLog: "vpc-flow-log"

// RootDeviceTypeEbs is a RootDeviceType enum value
#RootDeviceTypeEbs: "ebs"

// RootDeviceTypeInstanceStore is a RootDeviceType enum value
#RootDeviceTypeInstanceStore: "instance-store"

// RouteOriginCreateRouteTable is a RouteOrigin enum value
#RouteOriginCreateRouteTable: "CreateRouteTable"

// RouteOriginCreateRoute is a RouteOrigin enum value
#RouteOriginCreateRoute: "CreateRoute"

// RouteOriginEnableVgwRoutePropagation is a RouteOrigin enum value
#RouteOriginEnableVgwRoutePropagation: "EnableVgwRoutePropagation"

// RouteStateActive is a RouteState enum value
#RouteStateActive: "active"

// RouteStateBlackhole is a RouteState enum value
#RouteStateBlackhole: "blackhole"

// RouteTableAssociationStateCodeAssociating is a RouteTableAssociationStateCode enum value
#RouteTableAssociationStateCodeAssociating: "associating"

// RouteTableAssociationStateCodeAssociated is a RouteTableAssociationStateCode enum value
#RouteTableAssociationStateCodeAssociated: "associated"

// RouteTableAssociationStateCodeDisassociating is a RouteTableAssociationStateCode enum value
#RouteTableAssociationStateCodeDisassociating: "disassociating"

// RouteTableAssociationStateCodeDisassociated is a RouteTableAssociationStateCode enum value
#RouteTableAssociationStateCodeDisassociated: "disassociated"

// RouteTableAssociationStateCodeFailed is a RouteTableAssociationStateCode enum value
#RouteTableAssociationStateCodeFailed: "failed"

// RuleActionAllow is a RuleAction enum value
#RuleActionAllow: "allow"

// RuleActionDeny is a RuleAction enum value
#RuleActionDeny: "deny"

// ScopeAvailabilityZone is a Scope enum value
#ScopeAvailabilityZone: "Availability Zone"

// ScopeRegion is a Scope enum value
#ScopeRegion: "Region"

// SelfServicePortalEnabled is a SelfServicePortal enum value
#SelfServicePortalEnabled: "enabled"

// SelfServicePortalDisabled is a SelfServicePortal enum value
#SelfServicePortalDisabled: "disabled"

// ServiceStatePending is a ServiceState enum value
#ServiceStatePending: "Pending"

// ServiceStateAvailable is a ServiceState enum value
#ServiceStateAvailable: "Available"

// ServiceStateDeleting is a ServiceState enum value
#ServiceStateDeleting: "Deleting"

// ServiceStateDeleted is a ServiceState enum value
#ServiceStateDeleted: "Deleted"

// ServiceStateFailed is a ServiceState enum value
#ServiceStateFailed: "Failed"

// ServiceTypeInterface is a ServiceType enum value
#ServiceTypeInterface: "Interface"

// ServiceTypeGateway is a ServiceType enum value
#ServiceTypeGateway: "Gateway"

// ServiceTypeGatewayLoadBalancer is a ServiceType enum value
#ServiceTypeGatewayLoadBalancer: "GatewayLoadBalancer"

// ShutdownBehaviorStop is a ShutdownBehavior enum value
#ShutdownBehaviorStop: "stop"

// ShutdownBehaviorTerminate is a ShutdownBehavior enum value
#ShutdownBehaviorTerminate: "terminate"

// SnapshotAttributeNameProductCodes is a SnapshotAttributeName enum value
#SnapshotAttributeNameProductCodes: "productCodes"

// SnapshotAttributeNameCreateVolumePermission is a SnapshotAttributeName enum value
#SnapshotAttributeNameCreateVolumePermission: "createVolumePermission"

// SnapshotStatePending is a SnapshotState enum value
#SnapshotStatePending: "pending"

// SnapshotStateCompleted is a SnapshotState enum value
#SnapshotStateCompleted: "completed"

// SnapshotStateError is a SnapshotState enum value
#SnapshotStateError: "error"

// SpotAllocationStrategyLowestPrice is a SpotAllocationStrategy enum value
#SpotAllocationStrategyLowestPrice: "lowest-price"

// SpotAllocationStrategyDiversified is a SpotAllocationStrategy enum value
#SpotAllocationStrategyDiversified: "diversified"

// SpotAllocationStrategyCapacityOptimized is a SpotAllocationStrategy enum value
#SpotAllocationStrategyCapacityOptimized: "capacity-optimized"

// SpotAllocationStrategyCapacityOptimizedPrioritized is a SpotAllocationStrategy enum value
#SpotAllocationStrategyCapacityOptimizedPrioritized: "capacity-optimized-prioritized"

// SpotInstanceInterruptionBehaviorHibernate is a SpotInstanceInterruptionBehavior enum value
#SpotInstanceInterruptionBehaviorHibernate: "hibernate"

// SpotInstanceInterruptionBehaviorStop is a SpotInstanceInterruptionBehavior enum value
#SpotInstanceInterruptionBehaviorStop: "stop"

// SpotInstanceInterruptionBehaviorTerminate is a SpotInstanceInterruptionBehavior enum value
#SpotInstanceInterruptionBehaviorTerminate: "terminate"

// SpotInstanceStateOpen is a SpotInstanceState enum value
#SpotInstanceStateOpen: "open"

// SpotInstanceStateActive is a SpotInstanceState enum value
#SpotInstanceStateActive: "active"

// SpotInstanceStateClosed is a SpotInstanceState enum value
#SpotInstanceStateClosed: "closed"

// SpotInstanceStateCancelled is a SpotInstanceState enum value
#SpotInstanceStateCancelled: "cancelled"

// SpotInstanceStateFailed is a SpotInstanceState enum value
#SpotInstanceStateFailed: "failed"

// SpotInstanceTypeOneTime is a SpotInstanceType enum value
#SpotInstanceTypeOneTime: "one-time"

// SpotInstanceTypePersistent is a SpotInstanceType enum value
#SpotInstanceTypePersistent: "persistent"

// StatePendingAcceptance is a State enum value
#StatePendingAcceptance: "PendingAcceptance"

// StatePending is a State enum value
#StatePending: "Pending"

// StateAvailable is a State enum value
#StateAvailable: "Available"

// StateDeleting is a State enum value
#StateDeleting: "Deleting"

// StateDeleted is a State enum value
#StateDeleted: "Deleted"

// StateRejected is a State enum value
#StateRejected: "Rejected"

// StateFailed is a State enum value
#StateFailed: "Failed"

// StateExpired is a State enum value
#StateExpired: "Expired"

// StaticSourcesSupportValueEnable is a StaticSourcesSupportValue enum value
#StaticSourcesSupportValueEnable: "enable"

// StaticSourcesSupportValueDisable is a StaticSourcesSupportValue enum value
#StaticSourcesSupportValueDisable: "disable"

// StatusMoveInProgress is a Status enum value
#StatusMoveInProgress: "MoveInProgress"

// StatusInVpc is a Status enum value
#StatusInVpc: "InVpc"

// StatusInClassic is a Status enum value
#StatusInClassic: "InClassic"

// StatusNameReachability is a StatusName enum value
#StatusNameReachability: "reachability"

// StatusTypePassed is a StatusType enum value
#StatusTypePassed: "passed"

// StatusTypeFailed is a StatusType enum value
#StatusTypeFailed: "failed"

// StatusTypeInsufficientData is a StatusType enum value
#StatusTypeInsufficientData: "insufficient-data"

// StatusTypeInitializing is a StatusType enum value
#StatusTypeInitializing: "initializing"

// SubnetCidrBlockStateCodeAssociating is a SubnetCidrBlockStateCode enum value
#SubnetCidrBlockStateCodeAssociating: "associating"

// SubnetCidrBlockStateCodeAssociated is a SubnetCidrBlockStateCode enum value
#SubnetCidrBlockStateCodeAssociated: "associated"

// SubnetCidrBlockStateCodeDisassociating is a SubnetCidrBlockStateCode enum value
#SubnetCidrBlockStateCodeDisassociating: "disassociating"

// SubnetCidrBlockStateCodeDisassociated is a SubnetCidrBlockStateCode enum value
#SubnetCidrBlockStateCodeDisassociated: "disassociated"

// SubnetCidrBlockStateCodeFailing is a SubnetCidrBlockStateCode enum value
#SubnetCidrBlockStateCodeFailing: "failing"

// SubnetCidrBlockStateCodeFailed is a SubnetCidrBlockStateCode enum value
#SubnetCidrBlockStateCodeFailed: "failed"

// SubnetCidrReservationTypePrefix is a SubnetCidrReservationType enum value
#SubnetCidrReservationTypePrefix: "prefix"

// SubnetCidrReservationTypeExplicit is a SubnetCidrReservationType enum value
#SubnetCidrReservationTypeExplicit: "explicit"

// SubnetStatePending is a SubnetState enum value
#SubnetStatePending: "pending"

// SubnetStateAvailable is a SubnetState enum value
#SubnetStateAvailable: "available"

// SummaryStatusOk is a SummaryStatus enum value
#SummaryStatusOk: "ok"

// SummaryStatusImpaired is a SummaryStatus enum value
#SummaryStatusImpaired: "impaired"

// SummaryStatusInsufficientData is a SummaryStatus enum value
#SummaryStatusInsufficientData: "insufficient-data"

// SummaryStatusNotApplicable is a SummaryStatus enum value
#SummaryStatusNotApplicable: "not-applicable"

// SummaryStatusInitializing is a SummaryStatus enum value
#SummaryStatusInitializing: "initializing"

// TelemetryStatusUp is a TelemetryStatus enum value
#TelemetryStatusUp: "UP"

// TelemetryStatusDown is a TelemetryStatus enum value
#TelemetryStatusDown: "DOWN"

// TenancyDefault is a Tenancy enum value
#TenancyDefault: "default"

// TenancyDedicated is a Tenancy enum value
#TenancyDedicated: "dedicated"

// TenancyHost is a Tenancy enum value
#TenancyHost: "host"

// TrafficDirectionIngress is a TrafficDirection enum value
#TrafficDirectionIngress: "ingress"

// TrafficDirectionEgress is a TrafficDirection enum value
#TrafficDirectionEgress: "egress"

// TrafficMirrorFilterRuleFieldDestinationPortRange is a TrafficMirrorFilterRuleField enum value
#TrafficMirrorFilterRuleFieldDestinationPortRange: "destination-port-range"

// TrafficMirrorFilterRuleFieldSourcePortRange is a TrafficMirrorFilterRuleField enum value
#TrafficMirrorFilterRuleFieldSourcePortRange: "source-port-range"

// TrafficMirrorFilterRuleFieldProtocol is a TrafficMirrorFilterRuleField enum value
#TrafficMirrorFilterRuleFieldProtocol: "protocol"

// TrafficMirrorFilterRuleFieldDescription is a TrafficMirrorFilterRuleField enum value
#TrafficMirrorFilterRuleFieldDescription: "description"

// TrafficMirrorNetworkServiceAmazonDns is a TrafficMirrorNetworkService enum value
#TrafficMirrorNetworkServiceAmazonDns: "amazon-dns"

// TrafficMirrorRuleActionAccept is a TrafficMirrorRuleAction enum value
#TrafficMirrorRuleActionAccept: "accept"

// TrafficMirrorRuleActionReject is a TrafficMirrorRuleAction enum value
#TrafficMirrorRuleActionReject: "reject"

// TrafficMirrorSessionFieldPacketLength is a TrafficMirrorSessionField enum value
#TrafficMirrorSessionFieldPacketLength: "packet-length"

// TrafficMirrorSessionFieldDescription is a TrafficMirrorSessionField enum value
#TrafficMirrorSessionFieldDescription: "description"

// TrafficMirrorSessionFieldVirtualNetworkId is a TrafficMirrorSessionField enum value
#TrafficMirrorSessionFieldVirtualNetworkId: "virtual-network-id"

// TrafficMirrorTargetTypeNetworkInterface is a TrafficMirrorTargetType enum value
#TrafficMirrorTargetTypeNetworkInterface: "network-interface"

// TrafficMirrorTargetTypeNetworkLoadBalancer is a TrafficMirrorTargetType enum value
#TrafficMirrorTargetTypeNetworkLoadBalancer: "network-load-balancer"

// TrafficTypeAccept is a TrafficType enum value
#TrafficTypeAccept: "ACCEPT"

// TrafficTypeReject is a TrafficType enum value
#TrafficTypeReject: "REJECT"

// TrafficTypeAll is a TrafficType enum value
#TrafficTypeAll: "ALL"

// TransitGatewayAssociationStateAssociating is a TransitGatewayAssociationState enum value
#TransitGatewayAssociationStateAssociating: "associating"

// TransitGatewayAssociationStateAssociated is a TransitGatewayAssociationState enum value
#TransitGatewayAssociationStateAssociated: "associated"

// TransitGatewayAssociationStateDisassociating is a TransitGatewayAssociationState enum value
#TransitGatewayAssociationStateDisassociating: "disassociating"

// TransitGatewayAssociationStateDisassociated is a TransitGatewayAssociationState enum value
#TransitGatewayAssociationStateDisassociated: "disassociated"

// TransitGatewayAttachmentResourceTypeVpc is a TransitGatewayAttachmentResourceType enum value
#TransitGatewayAttachmentResourceTypeVpc: "vpc"

// TransitGatewayAttachmentResourceTypeVpn is a TransitGatewayAttachmentResourceType enum value
#TransitGatewayAttachmentResourceTypeVpn: "vpn"

// TransitGatewayAttachmentResourceTypeDirectConnectGateway is a TransitGatewayAttachmentResourceType enum value
#TransitGatewayAttachmentResourceTypeDirectConnectGateway: "direct-connect-gateway"

// TransitGatewayAttachmentResourceTypeConnect is a TransitGatewayAttachmentResourceType enum value
#TransitGatewayAttachmentResourceTypeConnect: "connect"

// TransitGatewayAttachmentResourceTypePeering is a TransitGatewayAttachmentResourceType enum value
#TransitGatewayAttachmentResourceTypePeering: "peering"

// TransitGatewayAttachmentResourceTypeTgwPeering is a TransitGatewayAttachmentResourceType enum value
#TransitGatewayAttachmentResourceTypeTgwPeering: "tgw-peering"

// TransitGatewayAttachmentStateInitiating is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateInitiating: "initiating"

// TransitGatewayAttachmentStateInitiatingRequest is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateInitiatingRequest: "initiatingRequest"

// TransitGatewayAttachmentStatePendingAcceptance is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStatePendingAcceptance: "pendingAcceptance"

// TransitGatewayAttachmentStateRollingBack is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateRollingBack: "rollingBack"

// TransitGatewayAttachmentStatePending is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStatePending: "pending"

// TransitGatewayAttachmentStateAvailable is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateAvailable: "available"

// TransitGatewayAttachmentStateModifying is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateModifying: "modifying"

// TransitGatewayAttachmentStateDeleting is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateDeleting: "deleting"

// TransitGatewayAttachmentStateDeleted is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateDeleted: "deleted"

// TransitGatewayAttachmentStateFailed is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateFailed: "failed"

// TransitGatewayAttachmentStateRejected is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateRejected: "rejected"

// TransitGatewayAttachmentStateRejecting is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateRejecting: "rejecting"

// TransitGatewayAttachmentStateFailing is a TransitGatewayAttachmentState enum value
#TransitGatewayAttachmentStateFailing: "failing"

// TransitGatewayConnectPeerStatePending is a TransitGatewayConnectPeerState enum value
#TransitGatewayConnectPeerStatePending: "pending"

// TransitGatewayConnectPeerStateAvailable is a TransitGatewayConnectPeerState enum value
#TransitGatewayConnectPeerStateAvailable: "available"

// TransitGatewayConnectPeerStateDeleting is a TransitGatewayConnectPeerState enum value
#TransitGatewayConnectPeerStateDeleting: "deleting"

// TransitGatewayConnectPeerStateDeleted is a TransitGatewayConnectPeerState enum value
#TransitGatewayConnectPeerStateDeleted: "deleted"

// TransitGatewayMulitcastDomainAssociationStatePendingAcceptance is a TransitGatewayMulitcastDomainAssociationState enum value
#TransitGatewayMulitcastDomainAssociationStatePendingAcceptance: "pendingAcceptance"

// TransitGatewayMulitcastDomainAssociationStateAssociating is a TransitGatewayMulitcastDomainAssociationState enum value
#TransitGatewayMulitcastDomainAssociationStateAssociating: "associating"

// TransitGatewayMulitcastDomainAssociationStateAssociated is a TransitGatewayMulitcastDomainAssociationState enum value
#TransitGatewayMulitcastDomainAssociationStateAssociated: "associated"

// TransitGatewayMulitcastDomainAssociationStateDisassociating is a TransitGatewayMulitcastDomainAssociationState enum value
#TransitGatewayMulitcastDomainAssociationStateDisassociating: "disassociating"

// TransitGatewayMulitcastDomainAssociationStateDisassociated is a TransitGatewayMulitcastDomainAssociationState enum value
#TransitGatewayMulitcastDomainAssociationStateDisassociated: "disassociated"

// TransitGatewayMulitcastDomainAssociationStateRejected is a TransitGatewayMulitcastDomainAssociationState enum value
#TransitGatewayMulitcastDomainAssociationStateRejected: "rejected"

// TransitGatewayMulitcastDomainAssociationStateFailed is a TransitGatewayMulitcastDomainAssociationState enum value
#TransitGatewayMulitcastDomainAssociationStateFailed: "failed"

// TransitGatewayMulticastDomainStatePending is a TransitGatewayMulticastDomainState enum value
#TransitGatewayMulticastDomainStatePending: "pending"

// TransitGatewayMulticastDomainStateAvailable is a TransitGatewayMulticastDomainState enum value
#TransitGatewayMulticastDomainStateAvailable: "available"

// TransitGatewayMulticastDomainStateDeleting is a TransitGatewayMulticastDomainState enum value
#TransitGatewayMulticastDomainStateDeleting: "deleting"

// TransitGatewayMulticastDomainStateDeleted is a TransitGatewayMulticastDomainState enum value
#TransitGatewayMulticastDomainStateDeleted: "deleted"

// TransitGatewayPrefixListReferenceStatePending is a TransitGatewayPrefixListReferenceState enum value
#TransitGatewayPrefixListReferenceStatePending: "pending"

// TransitGatewayPrefixListReferenceStateAvailable is a TransitGatewayPrefixListReferenceState enum value
#TransitGatewayPrefixListReferenceStateAvailable: "available"

// TransitGatewayPrefixListReferenceStateModifying is a TransitGatewayPrefixListReferenceState enum value
#TransitGatewayPrefixListReferenceStateModifying: "modifying"

// TransitGatewayPrefixListReferenceStateDeleting is a TransitGatewayPrefixListReferenceState enum value
#TransitGatewayPrefixListReferenceStateDeleting: "deleting"

// TransitGatewayPropagationStateEnabling is a TransitGatewayPropagationState enum value
#TransitGatewayPropagationStateEnabling: "enabling"

// TransitGatewayPropagationStateEnabled is a TransitGatewayPropagationState enum value
#TransitGatewayPropagationStateEnabled: "enabled"

// TransitGatewayPropagationStateDisabling is a TransitGatewayPropagationState enum value
#TransitGatewayPropagationStateDisabling: "disabling"

// TransitGatewayPropagationStateDisabled is a TransitGatewayPropagationState enum value
#TransitGatewayPropagationStateDisabled: "disabled"

// TransitGatewayRouteStatePending is a TransitGatewayRouteState enum value
#TransitGatewayRouteStatePending: "pending"

// TransitGatewayRouteStateActive is a TransitGatewayRouteState enum value
#TransitGatewayRouteStateActive: "active"

// TransitGatewayRouteStateBlackhole is a TransitGatewayRouteState enum value
#TransitGatewayRouteStateBlackhole: "blackhole"

// TransitGatewayRouteStateDeleting is a TransitGatewayRouteState enum value
#TransitGatewayRouteStateDeleting: "deleting"

// TransitGatewayRouteStateDeleted is a TransitGatewayRouteState enum value
#TransitGatewayRouteStateDeleted: "deleted"

// TransitGatewayRouteTableStatePending is a TransitGatewayRouteTableState enum value
#TransitGatewayRouteTableStatePending: "pending"

// TransitGatewayRouteTableStateAvailable is a TransitGatewayRouteTableState enum value
#TransitGatewayRouteTableStateAvailable: "available"

// TransitGatewayRouteTableStateDeleting is a TransitGatewayRouteTableState enum value
#TransitGatewayRouteTableStateDeleting: "deleting"

// TransitGatewayRouteTableStateDeleted is a TransitGatewayRouteTableState enum value
#TransitGatewayRouteTableStateDeleted: "deleted"

// TransitGatewayRouteTypeStatic is a TransitGatewayRouteType enum value
#TransitGatewayRouteTypeStatic: "static"

// TransitGatewayRouteTypePropagated is a TransitGatewayRouteType enum value
#TransitGatewayRouteTypePropagated: "propagated"

// TransitGatewayStatePending is a TransitGatewayState enum value
#TransitGatewayStatePending: "pending"

// TransitGatewayStateAvailable is a TransitGatewayState enum value
#TransitGatewayStateAvailable: "available"

// TransitGatewayStateModifying is a TransitGatewayState enum value
#TransitGatewayStateModifying: "modifying"

// TransitGatewayStateDeleting is a TransitGatewayState enum value
#TransitGatewayStateDeleting: "deleting"

// TransitGatewayStateDeleted is a TransitGatewayState enum value
#TransitGatewayStateDeleted: "deleted"

// TransportProtocolTcp is a TransportProtocol enum value
#TransportProtocolTcp: "tcp"

// TransportProtocolUdp is a TransportProtocol enum value
#TransportProtocolUdp: "udp"

// TunnelInsideIpVersionIpv4 is a TunnelInsideIpVersion enum value
#TunnelInsideIpVersionIpv4: "ipv4"

// TunnelInsideIpVersionIpv6 is a TunnelInsideIpVersion enum value
#TunnelInsideIpVersionIpv6: "ipv6"

// UnlimitedSupportedInstanceFamilyT2 is a UnlimitedSupportedInstanceFamily enum value
#UnlimitedSupportedInstanceFamilyT2: "t2"

// UnlimitedSupportedInstanceFamilyT3 is a UnlimitedSupportedInstanceFamily enum value
#UnlimitedSupportedInstanceFamilyT3: "t3"

// UnlimitedSupportedInstanceFamilyT3a is a UnlimitedSupportedInstanceFamily enum value
#UnlimitedSupportedInstanceFamilyT3a: "t3a"

// UnlimitedSupportedInstanceFamilyT4g is a UnlimitedSupportedInstanceFamily enum value
#UnlimitedSupportedInstanceFamilyT4g: "t4g"

// UnsuccessfulInstanceCreditSpecificationErrorCodeInvalidInstanceIdMalformed is a UnsuccessfulInstanceCreditSpecificationErrorCode enum value
#UnsuccessfulInstanceCreditSpecificationErrorCodeInvalidInstanceIdMalformed: "InvalidInstanceID.Malformed"

// UnsuccessfulInstanceCreditSpecificationErrorCodeInvalidInstanceIdNotFound is a UnsuccessfulInstanceCreditSpecificationErrorCode enum value
#UnsuccessfulInstanceCreditSpecificationErrorCodeInvalidInstanceIdNotFound: "InvalidInstanceID.NotFound"

// UnsuccessfulInstanceCreditSpecificationErrorCodeIncorrectInstanceState is a UnsuccessfulInstanceCreditSpecificationErrorCode enum value
#UnsuccessfulInstanceCreditSpecificationErrorCodeIncorrectInstanceState: "IncorrectInstanceState"

// UnsuccessfulInstanceCreditSpecificationErrorCodeInstanceCreditSpecificationNotSupported is a UnsuccessfulInstanceCreditSpecificationErrorCode enum value
#UnsuccessfulInstanceCreditSpecificationErrorCodeInstanceCreditSpecificationNotSupported: "InstanceCreditSpecification.NotSupported"

// UsageClassTypeSpot is a UsageClassType enum value
#UsageClassTypeSpot: "spot"

// UsageClassTypeOnDemand is a UsageClassType enum value
#UsageClassTypeOnDemand: "on-demand"

// VirtualizationTypeHvm is a VirtualizationType enum value
#VirtualizationTypeHvm: "hvm"

// VirtualizationTypeParavirtual is a VirtualizationType enum value
#VirtualizationTypeParavirtual: "paravirtual"

// VolumeAttachmentStateAttaching is a VolumeAttachmentState enum value
#VolumeAttachmentStateAttaching: "attaching"

// VolumeAttachmentStateAttached is a VolumeAttachmentState enum value
#VolumeAttachmentStateAttached: "attached"

// VolumeAttachmentStateDetaching is a VolumeAttachmentState enum value
#VolumeAttachmentStateDetaching: "detaching"

// VolumeAttachmentStateDetached is a VolumeAttachmentState enum value
#VolumeAttachmentStateDetached: "detached"

// VolumeAttachmentStateBusy is a VolumeAttachmentState enum value
#VolumeAttachmentStateBusy: "busy"

// VolumeAttributeNameAutoEnableIo is a VolumeAttributeName enum value
#VolumeAttributeNameAutoEnableIo: "autoEnableIO"

// VolumeAttributeNameProductCodes is a VolumeAttributeName enum value
#VolumeAttributeNameProductCodes: "productCodes"

// VolumeModificationStateModifying is a VolumeModificationState enum value
#VolumeModificationStateModifying: "modifying"

// VolumeModificationStateOptimizing is a VolumeModificationState enum value
#VolumeModificationStateOptimizing: "optimizing"

// VolumeModificationStateCompleted is a VolumeModificationState enum value
#VolumeModificationStateCompleted: "completed"

// VolumeModificationStateFailed is a VolumeModificationState enum value
#VolumeModificationStateFailed: "failed"

// VolumeStateCreating is a VolumeState enum value
#VolumeStateCreating: "creating"

// VolumeStateAvailable is a VolumeState enum value
#VolumeStateAvailable: "available"

// VolumeStateInUse is a VolumeState enum value
#VolumeStateInUse: "in-use"

// VolumeStateDeleting is a VolumeState enum value
#VolumeStateDeleting: "deleting"

// VolumeStateDeleted is a VolumeState enum value
#VolumeStateDeleted: "deleted"

// VolumeStateError is a VolumeState enum value
#VolumeStateError: "error"

// VolumeStatusInfoStatusOk is a VolumeStatusInfoStatus enum value
#VolumeStatusInfoStatusOk: "ok"

// VolumeStatusInfoStatusImpaired is a VolumeStatusInfoStatus enum value
#VolumeStatusInfoStatusImpaired: "impaired"

// VolumeStatusInfoStatusInsufficientData is a VolumeStatusInfoStatus enum value
#VolumeStatusInfoStatusInsufficientData: "insufficient-data"

// VolumeStatusNameIoEnabled is a VolumeStatusName enum value
#VolumeStatusNameIoEnabled: "io-enabled"

// VolumeStatusNameIoPerformance is a VolumeStatusName enum value
#VolumeStatusNameIoPerformance: "io-performance"

// VolumeTypeStandard is a VolumeType enum value
#VolumeTypeStandard: "standard"

// VolumeTypeIo1 is a VolumeType enum value
#VolumeTypeIo1: "io1"

// VolumeTypeIo2 is a VolumeType enum value
#VolumeTypeIo2: "io2"

// VolumeTypeGp2 is a VolumeType enum value
#VolumeTypeGp2: "gp2"

// VolumeTypeSc1 is a VolumeType enum value
#VolumeTypeSc1: "sc1"

// VolumeTypeSt1 is a VolumeType enum value
#VolumeTypeSt1: "st1"

// VolumeTypeGp3 is a VolumeType enum value
#VolumeTypeGp3: "gp3"

// VpcAttributeNameEnableDnsSupport is a VpcAttributeName enum value
#VpcAttributeNameEnableDnsSupport: "enableDnsSupport"

// VpcAttributeNameEnableDnsHostnames is a VpcAttributeName enum value
#VpcAttributeNameEnableDnsHostnames: "enableDnsHostnames"

// VpcCidrBlockStateCodeAssociating is a VpcCidrBlockStateCode enum value
#VpcCidrBlockStateCodeAssociating: "associating"

// VpcCidrBlockStateCodeAssociated is a VpcCidrBlockStateCode enum value
#VpcCidrBlockStateCodeAssociated: "associated"

// VpcCidrBlockStateCodeDisassociating is a VpcCidrBlockStateCode enum value
#VpcCidrBlockStateCodeDisassociating: "disassociating"

// VpcCidrBlockStateCodeDisassociated is a VpcCidrBlockStateCode enum value
#VpcCidrBlockStateCodeDisassociated: "disassociated"

// VpcCidrBlockStateCodeFailing is a VpcCidrBlockStateCode enum value
#VpcCidrBlockStateCodeFailing: "failing"

// VpcCidrBlockStateCodeFailed is a VpcCidrBlockStateCode enum value
#VpcCidrBlockStateCodeFailed: "failed"

// VpcEndpointTypeInterface is a VpcEndpointType enum value
#VpcEndpointTypeInterface: "Interface"

// VpcEndpointTypeGateway is a VpcEndpointType enum value
#VpcEndpointTypeGateway: "Gateway"

// VpcEndpointTypeGatewayLoadBalancer is a VpcEndpointType enum value
#VpcEndpointTypeGatewayLoadBalancer: "GatewayLoadBalancer"

// VpcPeeringConnectionStateReasonCodeInitiatingRequest is a VpcPeeringConnectionStateReasonCode enum value
#VpcPeeringConnectionStateReasonCodeInitiatingRequest: "initiating-request"

// VpcPeeringConnectionStateReasonCodePendingAcceptance is a VpcPeeringConnectionStateReasonCode enum value
#VpcPeeringConnectionStateReasonCodePendingAcceptance: "pending-acceptance"

// VpcPeeringConnectionStateReasonCodeActive is a VpcPeeringConnectionStateReasonCode enum value
#VpcPeeringConnectionStateReasonCodeActive: "active"

// VpcPeeringConnectionStateReasonCodeDeleted is a VpcPeeringConnectionStateReasonCode enum value
#VpcPeeringConnectionStateReasonCodeDeleted: "deleted"

// VpcPeeringConnectionStateReasonCodeRejected is a VpcPeeringConnectionStateReasonCode enum value
#VpcPeeringConnectionStateReasonCodeRejected: "rejected"

// VpcPeeringConnectionStateReasonCodeFailed is a VpcPeeringConnectionStateReasonCode enum value
#VpcPeeringConnectionStateReasonCodeFailed: "failed"

// VpcPeeringConnectionStateReasonCodeExpired is a VpcPeeringConnectionStateReasonCode enum value
#VpcPeeringConnectionStateReasonCodeExpired: "expired"

// VpcPeeringConnectionStateReasonCodeProvisioning is a VpcPeeringConnectionStateReasonCode enum value
#VpcPeeringConnectionStateReasonCodeProvisioning: "provisioning"

// VpcPeeringConnectionStateReasonCodeDeleting is a VpcPeeringConnectionStateReasonCode enum value
#VpcPeeringConnectionStateReasonCodeDeleting: "deleting"

// VpcStatePending is a VpcState enum value
#VpcStatePending: "pending"

// VpcStateAvailable is a VpcState enum value
#VpcStateAvailable: "available"

// VpcTenancyDefault is a VpcTenancy enum value
#VpcTenancyDefault: "default"

// VpnEcmpSupportValueEnable is a VpnEcmpSupportValue enum value
#VpnEcmpSupportValueEnable: "enable"

// VpnEcmpSupportValueDisable is a VpnEcmpSupportValue enum value
#VpnEcmpSupportValueDisable: "disable"

// VpnProtocolOpenvpn is a VpnProtocol enum value
#VpnProtocolOpenvpn: "openvpn"

// VpnStatePending is a VpnState enum value
#VpnStatePending: "pending"

// VpnStateAvailable is a VpnState enum value
#VpnStateAvailable: "available"

// VpnStateDeleting is a VpnState enum value
#VpnStateDeleting: "deleting"

// VpnStateDeleted is a VpnState enum value
#VpnStateDeleted: "deleted"

// VpnStaticRouteSourceStatic is a VpnStaticRouteSource enum value
#VpnStaticRouteSourceStatic: "Static"

// WeekDaySunday is a WeekDay enum value
#WeekDaySunday: "sunday"

// WeekDayMonday is a WeekDay enum value
#WeekDayMonday: "monday"

// WeekDayTuesday is a WeekDay enum value
#WeekDayTuesday: "tuesday"

// WeekDayWednesday is a WeekDay enum value
#WeekDayWednesday: "wednesday"

// WeekDayThursday is a WeekDay enum value
#WeekDayThursday: "thursday"

// WeekDayFriday is a WeekDay enum value
#WeekDayFriday: "friday"

// WeekDaySaturday is a WeekDay enum value
#WeekDaySaturday: "saturday"
